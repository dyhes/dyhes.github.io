<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>一天星 on 飞鸿踏雪泥</title><link>https://dyhes.github.io/categories/star/</link><description>Recent content in 一天星 on 飞鸿踏雪泥</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://dyhes.github.io/categories/star/index.xml" rel="self" type="application/rss+xml"/><item><title>【Numerical】Notes</title><link>https://dyhes.github.io/p/numericalnotes/</link><pubDate>Sun, 08 Jun 2025 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/numericalnotes/</guid><description>&lt;p&gt;&lt;img src="https://i.ibb.co/PHc6KPB/image.png"
loading="lazy"
&gt;
&lt;strong&gt;研究对象&lt;/strong&gt;：那些在理论上有解而又无法手工计算的数学问题
&lt;img src="https://i.ibb.co/j9R9Y9wV/image-2.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="误差"&gt;误差
&lt;/h2&gt;&lt;p&gt;按来源可以分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模型误差
数学模型通常是由实际问题抽象得到的, 一般带有误差, 这种误差称为模型误差&lt;/li&gt;
&lt;li&gt;观测误差
数学模型中包含的一些物理参数通常是通过观测和实验得到的, 难免带有误差, 这种误差称为观测误差&lt;/li&gt;
&lt;li&gt;截断误差
求解数学模型所用的数值方法通常是一种近似方法, 这种因方法产生的误差称为截断误差或方法误差.&lt;/li&gt;
&lt;li&gt;舍入误差
由于计算机只能对有限位数进行计算，无理数等都需要按舍入原则保留有限位**,** 这时产生的误差称为舍入误差**.**
在数值分析中, 均假定数学模型是准确的, 因而不考虑模型误差和观测误差, 只讨论~&lt;strong&gt;截断误差&lt;/strong&gt;&lt;del&gt;和&lt;/del&gt;&lt;strong&gt;舍入误差&lt;/strong&gt;~对计算结果的影响.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="绝对误差"&gt;绝对误差
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/7dYq9cHp/image-3.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h3 id="相对误差"&gt;相对误差
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/chtbnCgs/image-4.png"
loading="lazy"
&gt;
一般地**,** 凡是由准确值经过四舍五入得到的近似值**,** 其绝对误差限等于该近似值末位的半个单位&lt;/p&gt;
&lt;h3 id="有效数字"&gt;有效数字
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/GfRTLy8b/image-5.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/GLKRY8M/image-6.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h4 id="与相对误差限关系"&gt;与相对误差限关系
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/PvhXv5nC/image-7.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/tpSzjJNz/image-8.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;和差的误差限不超过各数的误差限之和&lt;/li&gt;
&lt;li&gt;乘除&lt;strong&gt;相对&lt;/strong&gt;误差限不超过各数&lt;strong&gt;相对&lt;/strong&gt;误差限之和**.**&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="数值稳定性"&gt;数值稳定性
&lt;/h3&gt;&lt;p&gt;一种数值算法**,** 如果其计算舍入误差积累是可控制的**,** 则称其为数值稳定的**,** 反之称为数值不稳定的**.**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免两个相近的数相减&lt;/li&gt;
&lt;li&gt;防止大数“吃掉”小数
在求和或差的过程中应采用由小到大的运算过程&lt;/li&gt;
&lt;li&gt;绝对值太小的数不宜作除数&lt;/li&gt;
&lt;li&gt;注意简化计算程序**,** 减少计算次数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="线性方程组的直接方法"&gt;线性方程组的直接方法
&lt;/h2&gt;&lt;p&gt;解线性方程组的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接方法
直接解法是指, 若不考虑计算过程中的舍入误差, 经过&lt;del&gt;有限次算术运算就能求出线性方程组的精确解&lt;/del&gt;的方法. 但由于实际计算中舍入误差的存在, 用直接解法一般也只能求出方程组的近似解&lt;/li&gt;
&lt;li&gt;迭代法
直接解法是指, 若不考虑计算过程中的舍入误差, 经过&lt;del&gt;有限次算术运算就能求出线性方程组的精确解&lt;/del&gt;的方法. 但由于实际计算中舍入误差的存在, 用直接解法一般也只能求出方程组的近似解&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="gauss-消去法"&gt;Gauss 消去法
&lt;/h3&gt;&lt;p&gt;Gauss消元法是一种&lt;strong&gt;规则化&lt;/strong&gt;的消元法, 其基本思想是通过逐次消元计算, 把一般线性方程组的求解转化为等价的上三角形方程组的求解.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/mCM2YbV8/image-9.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/zWQM7Cyg/image-10.png"
loading="lazy"
&gt;
计算复杂度
&lt;img src="https://i.ibb.co/W4sK7T9L/image-11.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单易求&lt;/li&gt;
&lt;li&gt;要求主元均不为 0，适用范围小&lt;/li&gt;
&lt;li&gt;数值稳定性差&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="主元素法"&gt;主元素法
&lt;/h3&gt;&lt;p&gt;在消元过程中, 应避免选取绝对值较小的数作主元. 通过交换方程次序, 选取&lt;del&gt;绝对值较大的元素作为主元&lt;/del&gt;
常采用的是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;列主元消去法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全主元消去法&lt;br&gt;
&lt;img src="https://i.ibb.co/PRqC1y5/image-12.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/zHsB47zF/image-13.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全主元素法的精度优于列主元素法, 这是由于全主元素是在全体系数中选主元, 故它对控制舍入误差十分有效.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;但全主元素法在计算过程中, 需同时作行与列的互换, 因而程序比较复杂, 计算时间较长.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;列主元素法的精度虽然稍低于全主元素法, 但其计算简单, 工作量大为减少, 且计算经验与理论实践均表明, 它与全主元素法同样具有良好的数值稳定性.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;del&gt;列主元素法是求解中小型稠密线性方程组的最好方法之一&lt;/del&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="三角分解法"&gt;三角分解法
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/mCVPGM5J/image-14.png"
loading="lazy"
&gt;
&lt;strong&gt;定理&lt;/strong&gt;：设 A 为n 阶方阵, 若 A 的前n阶顺序主子式 Ai ( i =1, 2, …, n)均不为0, 则矩阵A存在唯一的Doolittle分解.
&lt;img src="https://i.ibb.co/wh1Yg3nX/image-15.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h3 id="追赶法"&gt;追赶法
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/HDRRk268/image-34.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/HpYyDhnL/image-16.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当系数矩阵为满足定理条件的严格对角占优阵时, 追赶法具有良好的数值稳定性.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="平方根法"&gt;平方根法
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/x95ysvc/image-17.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/mrDB4Lcn/image-19.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/5gw53jFM/image-18.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/G4yFMCJS/image-20.png"
loading="lazy"
&gt;
对称正定阵的LDL^T分解本质上是对A作Doolittle分解, 即LU分解&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L = LU分解中的L&lt;/li&gt;
&lt;li&gt;D= LU分解中的U的对角部分&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="改进平方根法"&gt;改进平方根法
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/RG83TpB3/image-21.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算无须选主元, 由于正定性, 计算过程是数值稳定的&lt;/li&gt;
&lt;li&gt;计算量是Gauss消元法的一半&lt;/li&gt;
&lt;li&gt;由于对称性, 实际计算可存储一半&lt;/li&gt;
&lt;li&gt;是求解中小型稠密正定线性方程组的好算法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="误差分析"&gt;误差分析
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/LXqkz7q6/image-22.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/SDwMJst5/image-23.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/0phYJJDp/image-24.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/TxBj98v5/image-25.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/9HZTqHwf/image-26.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/RxKnkcn/image-27.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/7dsjY5sD/image-28.png"
loading="lazy"
&gt;
常用的三种矩阵范数均是由向量范数诱导出的.
&lt;img src="https://i.ibb.co/j9fDpqc2/image-29.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;当一个方程组, 由于系数矩阵或右端项有微小扰动, 而引起解发生巨大变化时, 则称该方程组是“病态”的.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只有&lt;del&gt;右端项&lt;/del&gt;有扰动&lt;/li&gt;
&lt;li&gt;只有&lt;del&gt;系数矩阵&lt;/del&gt;有扰动
&lt;img src="https://i.ibb.co/wFLtNvH1/image-30.png"
loading="lazy"
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/4RZxb63h/image-31.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/JRYZsg22/image-32.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/hRtSMDS7/image-33.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="解线性方程组的迭代方法"&gt;解线性方程组的迭代方法
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/6RcJTH1v/image-36.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h3 id="jacobi迭代法"&gt;Jacobi迭代法
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/Kx5Fd1wh/image-37.png"
loading="lazy"
&gt;&lt;!-- {"width":654} --&gt;
例子
&lt;img src="https://i.ibb.co/DPHt2WcQ/image-42.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/7JjVTNPB/image-35.png"
loading="lazy"
&gt;
最迅速的方法
&lt;img src="https://i.ibb.co/Pscztctx/image-38.png"
loading="lazy"
&gt;
无穷范数
&lt;img src="https://i.ibb.co/r9hVdtC/image-39.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h3 id="gauss-seidel迭代法"&gt;Gauss-Seidel迭代法
&lt;/h3&gt;&lt;p&gt;在计算迭代值时充分利用它前面的新信息
&lt;img src="https://i.ibb.co/23jF3vgD/image-41.png"
loading="lazy"
&gt;
例子
&lt;img src="https://i.ibb.co/TqF9QkGq/image-40.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/7Jhp54yF/image-43.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h3 id="对比"&gt;对比
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/C3dRWh0H/image-44.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h3 id="收敛条件"&gt;收敛条件
&lt;/h3&gt;&lt;p&gt;若迭代矩阵的范数&amp;lt;1, 则迭代法一定收敛.
&lt;img src="https://i.ibb.co/VWRCHgQW/image-45.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/6c5ZJn4c/image-46.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/vC6VxYVn/image-47.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h4 id="充要条件"&gt;充要条件
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/FLrkvv9x/image-48.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/cSszfWWH/image-49.png"
loading="lazy"
&gt;
一般来说, 计算矩阵的谱半径比较困难, 故用迭代法收敛的充分必要条件来判断迭代法是否收敛往往不太容易&lt;/p&gt;
&lt;h4 id="充分条件"&gt;充分条件
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/3yy31dxF/image-50.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若A为严格对角占优阵, 则求解Ax=b 的Jacobi迭代法和Gauss-Seidel迭代法均收敛.&lt;/li&gt;
&lt;li&gt;若A为&lt;strong&gt;对称正定阵&lt;/strong&gt;, 则求解Ax=b的Gauss-Seidel迭代法收敛
&lt;ul&gt;
&lt;li&gt;特征值均正&lt;/li&gt;
&lt;li&gt;顺序主子式均正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;（若存在&lt;strong&gt;某种&lt;/strong&gt;矩阵范数满足 ∥B∥&amp;lt;1，则迭代收敛）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="误差估计"&gt;误差估计
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/0jbyVrWL/image-51.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/yF2wVm1W/image-52.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/BbpF6pT/image-53.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="幂法与反幂法"&gt;幂法与反幂法
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;幂法：用于计算矩阵按模&lt;del&gt;最大&lt;/del&gt;的特征值及其相应的特征向量, 特别适用于大型稀疏矩阵&lt;/li&gt;
&lt;li&gt;反幂法：用于计算矩阵按模&lt;del&gt;最小&lt;/del&gt;的特征值及其特征向量, 也可用来计算对应于一个给定近似特征值的特征向量.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="幂法"&gt;幂法
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/8nRXnz9Q/image-54.png"
loading="lazy"
&gt;
为避免出现上溢或下溢, 实际计算时每次迭代所求的向量都要&lt;del&gt;归一化&lt;/del&gt;&lt;br&gt;
&lt;img src="https://i.ibb.co/NDMvyHQ/image-55.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/wFrLwSkk/image-56.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h4 id="原点移位法"&gt;原点移位法
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/FLft7hh8/image-57.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/Vc52t5Br/image-58.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;原点移位法使用简便, 不足之处在于l0的选取十分困难, 通常需要对特征值的分布有一大概的了解, 才能粗略地估计l0, 并通过计算不断进行修改&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/Rkm3zhV8/image-60.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/GQcTPsgX/image-61.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h3 id="反幂法"&gt;反幂法
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/KpVyV0Kj/image-59.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/HTWfWTXh/image-62.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/Z17VQCyS/image-63.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/XZgmjD7z/image-64.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/mFVFyZ9T/image-65.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="第五章"&gt;第五章
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;函数表达式复杂, 不便于计算和进行理论分析&lt;/li&gt;
&lt;li&gt;没有函数表达式, 只给出离散样点&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="拉格朗日插值"&gt;拉格朗日插值
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/XxZ0m39X/image-66.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插值多项式是否存在唯一&lt;/li&gt;
&lt;li&gt;如何求&lt;/li&gt;
&lt;li&gt;截断误差
&lt;img src="https://i.ibb.co/xq5mJbc5/image-67.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/mVv7YhWC/image-68.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/KxRkQpSN/image-69.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/M57z9FPM/image-70.png"
loading="lazy"
&gt;&lt;!-- {"width":654} --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="牛顿插值"&gt;牛顿插值&lt;img src="https://i.ibb.co/7xWCV6L1/image-png"
loading="lazy"
&gt;&lt;!-- {"width":654} --&gt;
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/rRgjt28k/image-72.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/Fq02Dvx5/image-73.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线性性&lt;/li&gt;
&lt;li&gt;对称性
&lt;img src="https://i.ibb.co/VpDY9XdV/image-74.png"
loading="lazy"
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="分段线性插值"&gt;分段线性插值
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/ZRDm3JHf/image-75.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/HpV0CvQM/image-76.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h3 id="hermite插值"&gt;Hermite插值
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/CpRRkNMV/image-77.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/Hp3B7RdJ/image-78.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/84jJNBXF/image-80.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/xKpkkM7d/image-79.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="函数逼近"&gt;函数逼近
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/ymY0bvJR/image-81.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h3 id="最小二乘法"&gt;最小二乘法
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/WWr3d2Yv/image-82.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/0p7xcWSD/image-83.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/HfQtXHmR/image-84.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/LXsJpvVt/image-86.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/bgmGhhWL/image-85.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="数值微分和数值积分"&gt;数值微分和数值积分
&lt;/h2&gt;&lt;h3 id="数值微分"&gt;数值微分
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/rGhjYRD0/image-87.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/Qv7McJ3s/image-88.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/6R0tyWRj/image-89.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/WWm278Bh/image-90.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h3 id="数值积分"&gt;数值积分
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/pBbWgwWv/image-91.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/7PXWL9Z/image-92.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/LXt6KPjK/image-93.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/Xxx5mWWf/image-94.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/twnLmjqG/image-95.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/s9PsJ82X/image-96.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/d0FtYzn3/image-97.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;梯型公式具有1 次代数精度&lt;/li&gt;
&lt;li&gt;Simpson 公式具有3 次代数精度
&lt;img src="https://i.ibb.co/rRC6jGcs/image-98.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/nNR9fzq0/image-99.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/C3fGw92P/image-100.png"
loading="lazy"
&gt;&lt;!-- {"width":654} --&gt;
&lt;img src="https://i.ibb.co/cKTzRGzy/image-101.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/TBB4sCWz/image-102.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/xSf1psMp/image-103.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/HDftJN9T/image-104.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/Vcx6Y6jv/image-105.png"
loading="lazy"
&gt;&lt;img src="https://i.ibb.co/Vcx6Y6jv/image-105.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/HDzP2Jhj/image-107.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/933CdkWb/image-108.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/PskZXwsZ/image-109.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/zhwMvVdm/image-110.png"
loading="lazy"
&gt;&lt;/li&gt;
&lt;li&gt;收敛性说明: 如果 f (x) 充分光滑, 那么梯形公式序列, Simpson公式序列, Cotes公式序列, Romberg公式序列均收敛到所求的积分值&lt;/li&gt;
&lt;li&gt;对于 f (x)不充分光滑的函数也可用Romberg算法计算, 只是收敛慢一些. 也可以直接使用复化Simpson公式计算.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="非线性方程求根"&gt;非线性方程求根
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/Mkjw0JVK/image-111.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/HL7rJfkc/image-112.png"
loading="lazy"
&gt;
&lt;img src="https://i.ibb.co/ccXr6Vm9/image-113.png"
loading="lazy"
&gt;
对同一方程可构造不同的迭代格式,产生的迭代序列收敛性也不同
&lt;img src="https://i.ibb.co/nJh2Hj3/image-114.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="考试"&gt;考试
&lt;/h2&gt;&lt;p&gt;第三章：两种迭代法（三阶）+ 收敛性判断
第四章：幂法和反幂法（二阶）
第五章：
差商表
拉格朗日 牛顿
Hermite插值多项式 （老师觉得不用背，从考试的 给 0，1，代系数推导）
第六章
线性拟合（一次最小二乘，最后求解分数少）和简单的二次拟合
第七章
四个微分公式
截断误差不用记，知道和平方同阶无穷小
Simpson序列不用记（？）
第八章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二分法&lt;/li&gt;
&lt;li&gt;简单迭代法&lt;/li&gt;
&lt;li&gt;牛顿法
求导
迭代格式带上初始值
第九章
欧拉法和改进欧拉法公式
写出计算公式并计算y1
会求精确解？
疑问：&lt;/li&gt;
&lt;li&gt;计算结果保留三位小数，过程是否需要4位&lt;/li&gt;
&lt;li&gt;Gauss型求积公式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/j9n0TzfH/image-115.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;对称正定充要&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特征值均为正&lt;/li&gt;
&lt;li&gt;顺序主子式大于0&lt;/li&gt;
&lt;li&gt;可以进行Cholesky分解&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;嵌套时 牛顿 乘法次数最少&lt;/p&gt;</description></item><item><title>【软件体系结构】笔记</title><link>https://dyhes.github.io/p/%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</link><pubDate>Mon, 13 Jan 2025 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="overview"&gt;OverView
&lt;/h2&gt;&lt;h3 id="软件价值观"&gt;软件价值观
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;行为价值:让程序完成指定的功能
&lt;ul&gt;
&lt;li&gt;大多数程序员认为这是主要工作——完成功能、发现并修正bug&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;架构价值:让程序保持&lt;strong&gt;易于修改&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;容易被忽视，但这种价值更符合“软件”的存在逻辑&lt;/li&gt;
&lt;li&gt;软件之所以存在并发展，就是因为它比硬件“软”&lt;/li&gt;
&lt;li&gt;用户的需求在变、股东的方向在变&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="历史"&gt;历史
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在20世纪90年代，有一个协调一致的努力来定义和编纂该学科的基本方面，研究工作集中在体系结构风格(模式)、体系结构描述语言、体系结构文档和形式化方法上。&lt;/li&gt;
&lt;li&gt;卡内基梅隆大学的Mary Shaw和David Garlan在1996年写了一本名为《软件架构:新兴学科的视角》的书，这本书促进了诸如组件、连接器和风格等软件架构概念。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="定义"&gt;定义
&lt;/h3&gt;&lt;p&gt;Wikipedia&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Software architecture is the set of structures required for analyzing a software system and the field of creating such structures and systems.&lt;/li&gt;
&lt;li&gt;Each structure consists of software &lt;strong&gt;elements&lt;/strong&gt;, the &lt;strong&gt;relationships&lt;/strong&gt; between them, as well as the &lt;strong&gt;properties&lt;/strong&gt; of both the elements and the relationships.
IEEE 1471-2000
Software architecture is the fundamental organization of a system, embodied in its &lt;strong&gt;components&lt;/strong&gt;, their &lt;strong&gt;relationships&lt;/strong&gt; to each other and the environment, and the &lt;strong&gt;principles&lt;/strong&gt; governing its design and evolution.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="programming-paradigms"&gt;Programming Paradigms
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;结构化程序设计 (Structured Programming)&lt;/li&gt;
&lt;li&gt;面向对象程序设计 (Object-Oriented Programming)&lt;/li&gt;
&lt;li&gt;函数式程序设计 (Functional Programming)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="结构化程序设计"&gt;结构化程序设计
&lt;/h3&gt;&lt;p&gt;Dijkstra是发现程序设计这个学科、并将其发展成一门科学的人之一
对于’不管多简单的程序，只要程序员稍稍忽视一点细节，程序就会看似正确，却以令人诧异的方式出错‘的问题，Dijkstra 的方案：程序的&lt;strong&gt;形式化证明&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用欧式几何的思路：公理、引理、定理&amp;hellip;&amp;hellip;&lt;/li&gt;
&lt;li&gt;程序员可以用可证明正确的结构，搭建出更大的程序&lt;/li&gt;
&lt;li&gt;顺序、分支、循环、调用、递归&amp;hellip;&amp;hellip; 结构化程序设计由此诞生了&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;结构化程序设计取得了巨大的成功
&lt;ul&gt;
&lt;li&gt;因为它使得我们能够将任务层层分解（直到无穷）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;程序的形式化证明至今未能广泛应用（太累了！）
&lt;ul&gt;
&lt;li&gt;取而代之的是更“科学”的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="面向对象程序设计"&gt;面向对象程序设计
&lt;/h3&gt;&lt;p&gt;面向对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据&lt;/strong&gt;与&lt;strong&gt;函数&lt;/strong&gt;的组合&lt;/li&gt;
&lt;li&gt;封装、继承、多态
对于软件架构师来说，面向对象是一种通过使用多态获得的，对系统中每个源代码依赖的绝对控制能力&lt;/li&gt;
&lt;li&gt;允许软件架构师创建插件架构，让高级策略模块独立于低级细节模块&lt;/li&gt;
&lt;li&gt;低级细节被下放到插件模块中，可以独立于高级策略模块进行部署和开发&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="函数式程序设计"&gt;函数式程序设计
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;函数式程序设计是&lt;strong&gt;以函数为核心&lt;/strong&gt;的程序设计范式&lt;/li&gt;
&lt;li&gt;所有的并发问题都是由于变量(内存里的值)可变引起的
&lt;ul&gt;
&lt;li&gt;函数式程序设计中，变量“不变”&lt;/li&gt;
&lt;li&gt;将尽量多的功能实现在不可变组件中，尽量少的实现在可变组件中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="总结"&gt;总结
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;结构化程序设计
&lt;ul&gt;
&lt;li&gt;剥夺了程序员使用&lt;strong&gt;跳转语句&lt;/strong&gt;的自由，赋予了软件&lt;strong&gt;模块化&lt;/strong&gt;的能力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;面向对象程序设计
&lt;ul&gt;
&lt;li&gt;剥夺了程序员使用&lt;strong&gt;函数指针&lt;/strong&gt;的自由，赋予了软件&lt;strong&gt;插件化&lt;/strong&gt;的能力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;函数式程序设计
&lt;ul&gt;
&lt;li&gt;剥夺了程序员使用&lt;strong&gt;赋值语句&lt;/strong&gt;的自由，赋予了软件&lt;strong&gt;并行化&lt;/strong&gt;的能力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="principals"&gt;Principals
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;设计原则
&lt;ul&gt;
&lt;li&gt;如何将函数和数据组织为类&lt;/li&gt;
&lt;li&gt;将砖拼装为房间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组件原则
&lt;ul&gt;
&lt;li&gt;如何将类组织为组件和软件&lt;/li&gt;
&lt;li&gt;将房间拼装为大楼&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="设计原则"&gt;设计原则
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Single Responsibility Principle
&lt;ul&gt;
&lt;li&gt;一个类应该只有一个引起它变化的原因。这意味着一个类应该只负责一个功能或职责，并且所有行为都与该职责紧密相关。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Open-Closed Principle
&lt;ul&gt;
&lt;li&gt;软件实体（类、模块、函数等）应该对扩展开放，对修改关闭。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Liskov Substitution Principle
&lt;ul&gt;
&lt;li&gt;子类对象应该能够替换其基类对象，并且不破坏程序的正确性。这个原则强调了继承关系中子类对基类行为的一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interface Segregation Principle
&lt;ul&gt;
&lt;li&gt;可能被不同模块调用的函数，应抽象为不同的接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dependency Inversion Principle
&lt;ul&gt;
&lt;li&gt;高层模块不应该依赖于低层模块，两者都应该依赖于抽象；抽象不应该依赖于细节，细节应该依赖于抽象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="组件原则"&gt;组件原则
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;组件聚合原则：哪些类组织到哪个组件？
&lt;ul&gt;
&lt;li&gt;Reuse/Release Equivalence Principle
&lt;ul&gt;
&lt;li&gt;重用的粒度，就是发布的粒度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Common Closure Principle
&lt;ul&gt;
&lt;li&gt;把那些会因为相同原因而同时修改的类组成一个组件，把那些会因为不同原因而分别修改的类组分隔为不同组件。&lt;/li&gt;
&lt;li&gt;组件层次的单一责任原则SRP。&lt;/li&gt;
&lt;li&gt;可维护 &amp;gt; 可重用。&lt;/li&gt;
&lt;li&gt;一次修改最好集中在一个组件，不希望横跨多个组件。&lt;/li&gt;
&lt;li&gt;修改一个组件，不相关的组件无需重新编译部署。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Common Reuse Principle
&lt;ul&gt;
&lt;li&gt;不要强迫组件的用户依赖它不需要的东西(类、接口等)&lt;/li&gt;
&lt;li&gt;组件层次的接口隔离原则ISP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组件耦合原则：组件之间如何交互？
&lt;ul&gt;
&lt;li&gt;Acyclic Dependencies Principle
&lt;ul&gt;
&lt;li&gt;组件依赖图中不能有环&lt;/li&gt;
&lt;li&gt;如何消除环？
&lt;ul&gt;
&lt;li&gt;使用依赖反转原则DIP&lt;/li&gt;
&lt;li&gt;加入新组件管理权限&lt;/li&gt;
&lt;li&gt;系统不是被自顶向下设计出来的，而是随着系统增长被演化出来的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stable Dependencies Principle
&lt;ul&gt;
&lt;li&gt;依赖方向应从不稳定到稳定&lt;/li&gt;
&lt;li&gt;不应让不稳定的组件被难于修改的组件依赖&lt;/li&gt;
&lt;li&gt;不稳定性 I=Degree_out/(Degree_out + Degree_in)&lt;/li&gt;
&lt;li&gt;依赖方向为𝐼值降序方向&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stable Abstractions Principle
&lt;ul&gt;
&lt;li&gt;组件的稳定性应与它的抽象程度对应&lt;/li&gt;
&lt;li&gt;越抽象越稳定，越稳定越抽象&lt;/li&gt;
&lt;li&gt;依赖方向应该为具体依赖抽象&lt;/li&gt;
&lt;li&gt;抽象度 A=N_abstract_class/N_class&lt;/li&gt;
&lt;li&gt;组件应尽量接近“主序线”: 𝐷𝑖𝑠𝑡𝑎𝑛𝑐𝑒= |𝐴+𝐼-1|
&lt;strong&gt;组件历史&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最初，程序所在的位置是固定的，后来，应用越来越大，编译时间越来越长，函数库诞生了。&lt;/li&gt;
&lt;li&gt;由于位置是固定的，应用被限制在了函数库之前的位置，一旦超出预留的大小，应用程序就需要被切分。&lt;/li&gt;
&lt;li&gt;人们终于意识到，程序需要能够重定位。如何实现程序的重定位？
&lt;ul&gt;
&lt;li&gt;加载顺序&lt;/li&gt;
&lt;li&gt;动态链接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可单独编译、可独立发布、可动态加载、可动态链接的软件模块 ——组件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="组件风格"&gt;组件风格
&lt;/h2&gt;&lt;p&gt;组件（Component）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一组函数和数据的封装&lt;/li&gt;
&lt;li&gt;组件间通过接口沟通&lt;/li&gt;
&lt;li&gt;组件可被同样接口的组件替换&lt;/li&gt;
&lt;li&gt;组件被充分测试，足够鲁棒&lt;/li&gt;
&lt;li&gt;组件有足够的文档说明
组件风格&lt;/li&gt;
&lt;li&gt;组件风格关注可复用的组件。&lt;/li&gt;
&lt;li&gt;实际制造满足需要的组件非常困难。&lt;/li&gt;
&lt;li&gt;组件模型为制造组件提供模板规范。
组件模型&lt;/li&gt;
&lt;li&gt;Enterprise JavaBeans (EJB) 模型&lt;/li&gt;
&lt;li&gt;Component Object Model (COM) 模型&lt;/li&gt;
&lt;li&gt;.NET模型&lt;/li&gt;
&lt;li&gt;X-MAN组件模型&lt;/li&gt;
&lt;li&gt;Common Object Request Broker Architecture (CORBA) 组件模型&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="管道过滤器风格"&gt;管道过滤器风格
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;过滤器
&lt;ul&gt;
&lt;li&gt;每个组件都有其输入和输出&lt;/li&gt;
&lt;li&gt;组件的处理过程就是根据输入产生输出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;管道
&lt;ul&gt;
&lt;li&gt;连接两个组件，将一个组件的输出变成另一个组件的输入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;过滤器通过管道连接为&lt;strong&gt;有向无环图&lt;/strong&gt;，形成复杂功能&lt;/li&gt;
&lt;li&gt;对比：
&lt;ul&gt;
&lt;li&gt;组件风格关注组件提供/需要的接口&lt;/li&gt;
&lt;li&gt;管道-过滤器风格强调&lt;strong&gt;数据流&lt;/strong&gt;的衔接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="优势"&gt;&lt;strong&gt;优势&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;弱耦合性：各个过滤器相互独立，设计者可以将整个系统的输入、输出特性理解为各个过滤器功能的简单合成。&lt;/li&gt;
&lt;li&gt;易于重用：任意两个过滤器只要相互间传输的数据格式一致，就可以连接在一起。&lt;/li&gt;
&lt;li&gt;易于维护扩展：新过滤器可以很容易加入到系统中，旧的过滤器可以很容易被新的过滤器替代。&lt;/li&gt;
&lt;li&gt;易于分析测试：每个过滤器可以独立测试。&lt;/li&gt;
&lt;li&gt;天然并发性：每个过滤器都可以独立运行，形成流水线pipeline。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="缺点"&gt;&lt;strong&gt;缺点&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;交互性差：由于过滤器的传输特性，管道过滤器模式通常不适合于交互性很强的应用。尤其是在系统需要逐步显示数据流变化的过程时，因为增量显示和过滤器的输出数据差距太大。&lt;/li&gt;
&lt;li&gt;维持通信困难：维持两个相对独立但存在某种关系的数据流之间的通信可能很困难。&lt;/li&gt;
&lt;li&gt;通信效率低：设计者也需要在数据传输时被迫使用底层公共命名，导致过滤器必须对输入、输出管道中的数据进行解析或反解析的额外工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="总结-1"&gt;&lt;strong&gt;总结&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;管道-过滤器风格关注可连接的组件&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;将组件功能抽象为从输入数据到输出数据的过滤过程&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;通过管道，连接过滤器，形成复杂的数据处理功能&lt;/li&gt;
&lt;li&gt;天然对分布式并发特性具有良好适应&lt;/li&gt;
&lt;li&gt;管道中的传输过程有待改进&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="分层风格"&gt;分层风格
&lt;/h2&gt;&lt;h3 id="优势-1"&gt;&lt;strong&gt;优势&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;分层符合人类“分而治之”的思维方式。
&lt;ul&gt;
&lt;li&gt;结构化程序设计之所以能够取得巨大的成功，正是因为它使得我们能够将任务层层分解。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;耦合性低。&lt;/li&gt;
&lt;li&gt;重用性高。&lt;/li&gt;
&lt;li&gt;可维护性高。&lt;/li&gt;
&lt;li&gt;无环依赖原则（Acyclic Dependencies Principle，ADP）
&lt;ul&gt;
&lt;li&gt;组件依赖图中不能有环。&lt;/li&gt;
&lt;li&gt;有向无环图一定能分层。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="总结-2"&gt;总结
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;分层风格关注组件间的&lt;strong&gt;偏序关系&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;将系统功能层层分解，降低耦合性，提升重用性&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;最常见的分层风格是三层架构&lt;/li&gt;
&lt;li&gt;层与层之间隔离有利于快速部署&lt;/li&gt;
&lt;li&gt;层与层之间协同有利于性能效率&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="事件驱动风格"&gt;事件驱动风格
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;以事件衔接程序之间的数据流&lt;/li&gt;
&lt;li&gt;程序产生事件，触发其他程序的功能&lt;/li&gt;
&lt;li&gt;事件驱动风格可以认为是广义的管道-过滤器风格&lt;/li&gt;
&lt;li&gt;优缺点与管道-过滤器风格类似&lt;/li&gt;
&lt;li&gt;事件驱动风格的程序框架通常是提供事件等待/触发机制的中间件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="共享数据风格"&gt;共享数据风格
&lt;/h2&gt;&lt;h3 id="黑板风格"&gt;黑板风格
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;黑板模块：全局存储空间&lt;/li&gt;
&lt;li&gt;知识源模块：处理知识、更新黑板&lt;/li&gt;
&lt;li&gt;控制模块：调度可用的知识源模块&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="总结-3"&gt;总结
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;黑板风格：与其移动数据，不如共享数据！&lt;/li&gt;
&lt;li&gt;数据中心风格：与其移动数据，不如移动程序！&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="客户端服务器风格"&gt;客户端服务器风格
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;服务器：拥有资源，提供服务&lt;/li&gt;
&lt;li&gt;客户端：建立会话，提出请求&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="总结-4"&gt;总结
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;天然的两层分层风格
&lt;ul&gt;
&lt;li&gt;如何将三层风格变为两层风格？根据通信量切分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;问题：随着资源规模和请求吞吐量需求增大，服务器成为瓶颈&lt;/li&gt;
&lt;li&gt;解决方案
&lt;ul&gt;
&lt;li&gt;端到端风格&lt;/li&gt;
&lt;li&gt;端-边-云架构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="端到端风格"&gt;端到端风格
&lt;/h2&gt;&lt;p&gt;Peer-to-Peer, P2P&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;去中心：所有参与者在网络中是平等的&lt;/li&gt;
&lt;li&gt;每个参与者都提供一部分资源（计算、存储、带宽等）&lt;/li&gt;
&lt;li&gt;有效解决了客户端-服务器风格中，服务器的资源瓶颈
&lt;strong&gt;核心优势&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;全局内容发现&lt;/li&gt;
&lt;li&gt;高效的内容索引&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;端到端架构将参与者重新组织为逻辑网络&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非结构化网络
&lt;ul&gt;
&lt;li&gt;Gnutella、Gossip、Kazaa&amp;hellip;&amp;hellip;&lt;/li&gt;
&lt;li&gt;易于组织，支持参与者随时加入离开&lt;/li&gt;
&lt;li&gt;难以发现内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;结构化网络
&lt;ul&gt;
&lt;li&gt;分布式哈希表DHT&lt;/li&gt;
&lt;li&gt;每个参与者、内容均与键值联系&lt;/li&gt;
&lt;li&gt;易于全局内容发现，但存在均衡问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="面向服务风格"&gt;面向服务风格
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;将软件分解为多个独立的服务&lt;/li&gt;
&lt;li&gt;服务：独立的功能单元，可通过通信协议与之进行远程沟通
&lt;ul&gt;
&lt;li&gt;代表可重复的业务活动&lt;/li&gt;
&lt;li&gt;具有相对完整的功能&lt;/li&gt;
&lt;li&gt;对用户是黑盒，用户无需关心服务的内部实现&lt;/li&gt;
&lt;li&gt;可以调用其他服务完成功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="对比"&gt;对比
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;与组件风格对比
&lt;ul&gt;
&lt;li&gt;在组件风格中，通常支持多个组件在同一个进程中&lt;/li&gt;
&lt;li&gt;服务更强调独立性，通信协议均为网络协议（支持跨进程通信）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;与管道-过滤器风格对比
&lt;ul&gt;
&lt;li&gt;过滤器之间通过管道传递消息，不关心消息被用来做什么了&lt;/li&gt;
&lt;li&gt;服务接受的是请求，并须要针对请求给出答复&lt;/li&gt;
&lt;li&gt;与事件驱动风格也有类似的区别&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;与分层风格对比
&lt;ul&gt;
&lt;li&gt;只要服务与服务之间的“调用”关系不存在“递归”，就也属于分层风格&lt;/li&gt;
&lt;li&gt;万一服务之间有递归呢？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;与客户端-服务器风格对比
&lt;ul&gt;
&lt;li&gt;客户端-服务器风格中，通常服务器是整个系统中的单个中心&lt;/li&gt;
&lt;li&gt;面向服务风格中，服务可以有很多&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="近亲"&gt;近亲
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;糅合（Mashup）
&lt;ul&gt;
&lt;li&gt;将两种以上使用公共或者私有数据库的Web应用加在一起，形成一个整合应用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件即服务（SaaS，Software as a Service）
&lt;ul&gt;
&lt;li&gt;让用户能够通过互联网连接来使用基于云的应用程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;云计算（Cloud Computing）
&lt;ul&gt;
&lt;li&gt;将来自用户的任务请求分解成数个小程序，利用网络“云”上多部服务器的资源进行并行处理，得到结果并返回给用户&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="组成"&gt;组成
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;服务提供者
&lt;ul&gt;
&lt;li&gt;向服务中间人注册自己提供的服务，答复服务请求者的请求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务请求者
&lt;ul&gt;
&lt;li&gt;要求服务中间人查找所需服务，向服务提供者提出请求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务中间人（服务注册、服务检索）
&lt;ul&gt;
&lt;li&gt;注册服务提供者，给服务请求者反馈服务提供者信息&lt;/li&gt;
&lt;li&gt;可以分为公有中间人、私有中间人&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="无共享风格"&gt;无共享风格
&lt;/h2&gt;&lt;p&gt;Shared-Nothing Architecture&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分布式系统风格&lt;/li&gt;
&lt;li&gt;每个更新操作只由集群中的一个结点来完成&lt;/li&gt;
&lt;li&gt;与Shared Everything&lt;strong&gt;相对&lt;/strong&gt;，旨在消除数据竞争
数据库两大类应用&lt;/li&gt;
&lt;li&gt;联机事务处理（OLTP，On-Line Transaction Processing）&lt;/li&gt;
&lt;li&gt;联机分析处理（OLAP，On-Line Analytical Processing）
新兴数据库&lt;/li&gt;
&lt;li&gt;特点
&lt;ul&gt;
&lt;li&gt;容量需求大&lt;/li&gt;
&lt;li&gt;数据增加多&lt;/li&gt;
&lt;li&gt;数据更新少&lt;/li&gt;
&lt;li&gt;查询效率尽量快&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据仓库（Data Warehouse）&lt;/li&gt;
&lt;li&gt;数据湖（Data Lake）&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>【分布式数据库】笔记</title><link>https://dyhes.github.io/p/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/</link><pubDate>Thu, 07 Nov 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="database-review"&gt;Database Review
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/39rGHkMH/image-20241004155001624.png"
loading="lazy"
alt="image-20241004155001624"
&gt;&lt;/p&gt;
&lt;h2 id="overview"&gt;Overview
&lt;/h2&gt;&lt;h3 id="history"&gt;History
&lt;/h3&gt;&lt;p&gt;分布式数据库系统的研究始于20世纪70年代&lt;/p&gt;
&lt;p&gt;第一个分布式数据库系统 SDD-1由CCA公司于 1979年在DEC机上实现&lt;/p&gt;
&lt;p&gt;较早的DDBMS：POREL、System R*、 Distributed INGRES、C-POREL&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/gM98XwJ1/image-20241004174613199.png"
loading="lazy"
alt="image-20241004174613199"
&gt;&lt;/p&gt;
&lt;h3 id="category"&gt;Category
&lt;/h3&gt;&lt;p&gt;按局部数据模型分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同构型DDBS
&lt;ul&gt;
&lt;li&gt;同构同质型&lt;/li&gt;
&lt;li&gt;同构异质型（同一数据模型，不同的DBMS）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;异构型DDBS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按全局控制类型分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;全局控制集中型DDBS&lt;/p&gt;
&lt;p&gt;分布式控制和数据字典集中在一个站点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全局控制分散型DDBS&lt;/p&gt;
&lt;p&gt;分布式控制和数据字典分散在各个站点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全局控制可变型DDBS（主从型，主站点＋辅站点）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="数据分片data-fragmentation"&gt;数据分片（data fragmentation）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;水平分片&lt;/li&gt;
&lt;li&gt;垂直分片&lt;/li&gt;
&lt;li&gt;混合分片&lt;/li&gt;
&lt;li&gt;导出分片&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分片规则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完备性条件&lt;/li&gt;
&lt;li&gt;可重构条件&lt;/li&gt;
&lt;li&gt;不相交性条件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="数据分布data-distribution"&gt;数据分布（data distribution）
&lt;/h3&gt;&lt;p&gt;根据某种策略把数据分片所得的逻辑片断分散地 存储在各个站点上&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集中式（安排在同一站点上）&lt;/li&gt;
&lt;li&gt;分割式（分布在不同站点上，无冗余）&lt;/li&gt;
&lt;li&gt;复制式（每个站点都有一个完整的副本）&lt;/li&gt;
&lt;li&gt;混合式（分割式和复制式的混合，有冗余）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="模式结构"&gt;模式结构
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/wFcQtGh8/image-20241004180316650.png"
loading="lazy"
alt="image-20241004180316650"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全局外模式&lt;/strong&gt;：全局应用的用户视图&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全局概念模式&lt;/strong&gt;：全体数据的逻辑结构和特征的描述。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分片模式&lt;/strong&gt;：描述每个片段及全局关系与片段间的映象，片段间不允许重复&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分配模式&lt;/strong&gt;（决定是否冗余）： 描述片段到不同结点间的映象（片段的存放位置）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;局部概念模式&lt;/strong&gt; ：全局概念模式的子集在&lt;strong&gt;一个站点&lt;/strong&gt;上的物理映像的逻辑结构及特征描述&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;局部内模式&lt;/strong&gt; ：描述局部概念模式涉及的数据在局部DBMS中的物理存储&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据分片与数据分布独立&lt;/li&gt;
&lt;li&gt;数据冗余显式控制&lt;/li&gt;
&lt;li&gt;局部DBMS独立&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ddbms-功能结构"&gt;DDBMS 功能结构
&lt;/h3&gt;&lt;p&gt;除集中式数据库的基本功能，还必须提供：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据跟踪：利用日志记录数据分布、分片和复制的能力&lt;/li&gt;
&lt;li&gt;分布式查询处理&lt;/li&gt;
&lt;li&gt;分布式事务处理&lt;/li&gt;
&lt;li&gt;复制数据的管理&lt;/li&gt;
&lt;li&gt;数据完整性与安全性管理&lt;/li&gt;
&lt;li&gt;分布式目录管理&lt;/li&gt;
&lt;li&gt;站点间的通信&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="数据独立性"&gt;数据独立性
&lt;/h3&gt;&lt;p&gt;集中式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逻辑独立性&lt;/li&gt;
&lt;li&gt;物理独立性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分布式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逻辑独立性&lt;/li&gt;
&lt;li&gt;物理独立性&lt;/li&gt;
&lt;li&gt;分布独立性（分布透明性）
&lt;ul&gt;
&lt;li&gt;分片透明性（完全分布透明性，Level 1）&lt;/li&gt;
&lt;li&gt;分配（位置）透明性（中级分布透明性，Level 2）&lt;/li&gt;
&lt;li&gt;局部映象（数据模型）透明性（低级分布透明性，Level 3）&lt;/li&gt;
&lt;li&gt;无分布透明性：异构数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="其他透明性"&gt;其他透明性
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;并发透明性&lt;/li&gt;
&lt;li&gt;故障透明性&lt;/li&gt;
&lt;li&gt;复制透明性&lt;/li&gt;
&lt;li&gt;语言透明性&lt;/li&gt;
&lt;li&gt;网络透明性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="architecture"&gt;Architecture
&lt;/h2&gt;&lt;p&gt;The architecture of a system defines its structure. This means that the &lt;strong&gt;components&lt;/strong&gt; of the system are identified, the &lt;strong&gt;function&lt;/strong&gt; of each component is specified, and the &lt;strong&gt;interrelationships&lt;/strong&gt; and interactions among these components are defined.&lt;/p&gt;
&lt;p&gt;The specification of the architecture of a system requires identification of the various &lt;strong&gt;modules&lt;/strong&gt;, with their &lt;strong&gt;interfaces&lt;/strong&gt; and interrelationships, in terms of the data and control flow through the system.&lt;/p&gt;
&lt;h2 id="design"&gt;Design
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;组合法&lt;/strong&gt;（自底向上）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;剖析网络功能&lt;/li&gt;
&lt;li&gt;剖析原有数据库系统&lt;/li&gt;
&lt;li&gt;解决数据 的一致性、 完整性和可靠性&lt;/li&gt;
&lt;li&gt;难度较大，通常是&lt;strong&gt;异构或者同构异质&lt;/strong&gt; DDBS&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;重构法&lt;/strong&gt;（自顶向下）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据实现环境 和用户需求&lt;/li&gt;
&lt;li&gt;按照DDBS的设计思想和方法&lt;/li&gt;
&lt;li&gt;从总体设计做起(包括LDBS） 重新建立一个 DDBS&lt;/li&gt;
&lt;li&gt;可有效解决数 、据一致性、完 整性和可靠性问题。 通常是&lt;strong&gt;同构异质或同构同质&lt;/strong&gt; DDBS&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;混合法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/xS2cJ8KQ/image-20241004214021443.png"
loading="lazy"
alt="image-20241004214021443"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目标&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分布式数据库的本地性或近地性：数据存放在最频繁访问的地方（90/10准则）&lt;/li&gt;
&lt;li&gt;控制数据的适当冗余：冗余增加了可用性、可靠性，提高了效率，也增加维护一致性的开销&lt;/li&gt;
&lt;li&gt;工作负荷分布：各站点上存取应用尽量平衡，提高并行度和效率， 但可能降低本地性&lt;/li&gt;
&lt;li&gt;存储能力和费用：根据站点的存储容量分布数据，也可由专门的站点存储数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="自顶向下"&gt;自顶向下
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/zWSpPsY4/image-20241004215413582.png"
loading="lazy"
alt="image-20241004215413582"
&gt;&lt;/p&gt;
&lt;h4 id="数据分片设计"&gt;数据分片设计
&lt;/h4&gt;&lt;p&gt;分片目的 ：产生一个对全局数据合适的分片方案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将分片片段作为存储和分配单位时，能够减少应用的数据操作量；&lt;/li&gt;
&lt;li&gt;对数据的存取具有最大可能的本地性，即使得应用能够尽量存取本站点的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分片类型和方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;水平分片（基本的水平分片和导出的水平分片）&lt;/li&gt;
&lt;li&gt;垂直分片&lt;/li&gt;
&lt;li&gt;混合分片&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/m10Sh9D/image-20241005124944829.png"
loading="lazy"
alt="image-20241005124944829"
&gt;&lt;/p&gt;
&lt;h5 id="水平分片性质"&gt;水平分片性质
&lt;/h5&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/gLFVqFRJ/image-20241005125144005.png"
loading="lazy"
alt="image-20241005125144005"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果某个谓词pi将某个片段f，进一步分解为fi和fj，而且&lt;strong&gt;至少有一个应用对fi和fj的访问是不同的&lt;/strong&gt;，那么此谓词pi就是相关的（relevant）；&lt;/li&gt;
&lt;li&gt;如果所有谓词都是与应用相关的，那么这个谓词集合就是最小的；&lt;/li&gt;
&lt;li&gt;完整性和最小性不是必要条件，但是对于简化分配问题 有好处。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="算法生成分片image-20241005130708231"&gt;算法生成分片&lt;img src="https://i.ibb.co/LDXhRxr4/image-png"
loading="lazy"
alt="image-20241005130708231"
&gt;
&lt;/h5&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/Mx25WF3p/image-20241005135453132.png"
loading="lazy"
alt="image-20241005135453132"
&gt;&lt;/p&gt;
&lt;h5 id="水平分片实际应用"&gt;水平分片实际应用
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;确定谓词集合是否完备可能开销很大， 一般（建议）不考虑所有应用，而是考虑&lt;strong&gt;重要应用&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;不区分具有相似特征的数据片；&lt;/li&gt;
&lt;li&gt;得到兼顾效率的合适的水平分片&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="导出的水平分片"&gt;导出的水平分片
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;从另一个关系的属性性质或水平分片推导出来的&lt;/li&gt;
&lt;li&gt;一般涉及多个关系&lt;/li&gt;
&lt;li&gt;可使关系之间的连接变得更容易&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/pvSXd8Gt/image-20241005141701071.png"
loading="lazy"
alt="image-20241005141701071"
&gt;&lt;/p&gt;
&lt;h5 id="垂直分片"&gt;垂直分片
&lt;/h5&gt;&lt;p&gt;通过“投影”操作把一个全局关系分成若干片段，基本目标是将使用频繁的属性聚集在一起&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/RkBTwBwY/image-20241005142350113.png"
loading="lazy"
alt="image-20241005142350113"
&gt;&lt;/p&gt;
&lt;h5 id="垂直分片设计"&gt;垂直分片设计
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;统计属性的亲和关系&lt;/li&gt;
&lt;li&gt;构造属性亲和矩阵&lt;/li&gt;
&lt;li&gt;寻找属性分割点&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="亲和关系"&gt;亲和关系
&lt;/h6&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/KpVbVkFM/image-20241005143134897.png"
loading="lazy"
alt="image-20241005143134897"
&gt;&lt;/p&gt;
&lt;h5 id="垂直分片与模式分解"&gt;垂直分片与模式分解
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;类似，目的不一样；&lt;/li&gt;
&lt;li&gt;模式分解是为了概念的单一化，是概念设计的内容；&lt;/li&gt;
&lt;li&gt;垂直分片是为了数据的分布，是概念设计之后的内容；&lt;/li&gt;
&lt;li&gt;模式分解需要考虑数据依赖；&lt;/li&gt;
&lt;li&gt;垂直分片考虑的是数据的聚集性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="位置分配设计"&gt;位置分配设计
&lt;/h4&gt;&lt;p&gt;在满足用户需求的前提下，把设计好的数据片段分配到相应的站点上，尽可能提高系统效益&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/gMMChr2R/image-20241005143807909.png"
loading="lazy"
alt="image-20241005143807909"
&gt;&lt;/p&gt;
&lt;h5 id="费用和得益估算"&gt;费用和得益估算
&lt;/h5&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/N6Y9PMX8/image-20241005145110634.png"
loading="lazy"
alt="image-20241005145110634"
&gt;&lt;/p&gt;
&lt;h6 id="水平分片估算"&gt;水平分片估算
&lt;/h6&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/nsNCLCyW/image-20241005145205987.png"
loading="lazy"
alt="image-20241005145205987"
&gt;&lt;/p&gt;
&lt;h6 id="垂直分片估算"&gt;垂直分片估算
&lt;/h6&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/60N9PxSx/image-20241005145239149.png"
loading="lazy"
alt="image-20241005145239149"
&gt;&lt;/p&gt;
&lt;h5 id="小结"&gt;小结
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;设计最佳的分配方案是一个复杂的优化问题；&lt;/li&gt;
&lt;li&gt;如果要求高可用性，且大多是检索应用，&lt;strong&gt;全复制&lt;/strong&gt;是比较好的选择；&lt;/li&gt;
&lt;li&gt;如果大多是在确定站点上的部分应用，应用数据应该复制到这些站点上；&lt;/li&gt;
&lt;li&gt;如果执行许多更新，则要&lt;strong&gt;限制&lt;/strong&gt;复制的副本；&lt;/li&gt;
&lt;li&gt;从经验数据看&lt;strong&gt;副本数为2或3&lt;/strong&gt;时收益较为理想。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="dataid-d方法"&gt;DATAID-D方法
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/cS9KV7xf/image-20241005150849014.png"
loading="lazy"
alt="image-20241005150849014"
&gt;&lt;/p&gt;
&lt;h4 id="分布要求分析"&gt;分布要求分析
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/TBLFTB56/image-20241005150953172.png"
loading="lazy"
alt="image-20241005150953172"
&gt;&lt;/p&gt;
&lt;h4 id="分布设计"&gt;分布设计
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/sdpGjhKT/image-20241005153139724.png"
loading="lazy"
alt="image-20241005153139724"
&gt;&lt;/p&gt;
&lt;h3 id="自底向上"&gt;自底向上
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;自底向上方法要解决的问题&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将现有的各种不同的数据库模式集成为全局模式&lt;/li&gt;
&lt;li&gt;需要解决不同数据库之间的不一致&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解决方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在全局分布式层采用&lt;strong&gt;统一的数据模型&lt;/strong&gt;表示&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;处理步骤&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择公用数据库模型来描述数据库的全局模式&lt;/li&gt;
&lt;li&gt;把每个站点上的本地模式翻译成公用数据模型&lt;/li&gt;
&lt;li&gt;把各站点上的本地数据模式集成为一公用的全局模式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;构造全局模式（超视图）的方法&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把各站点上的数据库模式看成是全局模式的一个视图&lt;/li&gt;
&lt;li&gt;采用&lt;strong&gt;概括分层结构&lt;/strong&gt;进行视图综合
&lt;ul&gt;
&lt;li&gt;共同属性构成超类型，“差”属性各建一个子类型&lt;/li&gt;
&lt;li&gt;一个具有共同属性（超类型），两个具有不相交属 性（子类型）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;视图综合次序&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一次把一个视图和全局模式进行综合，逐步构造起全局视图&lt;/li&gt;
&lt;li&gt;首先综合最大的或最重要的视图，然后综合小的或者不重要的视图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;视图综合需要解决的问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;识别相似性&lt;/p&gt;
&lt;p&gt;在已有的不同模式间识别属性、域或实体结构的相似部分，判别是否能够合并实体或概括为上层实体。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;识别冲突&lt;/p&gt;
&lt;p&gt;在识别相似的基础上，分析相似数据的不同表示或域定义。通过引入差异或采用折中的方法解决冲突。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命名冲突：同物异名，异物同名&lt;/li&gt;
&lt;li&gt;域差异：不同站点上的相同实体有不同的域&lt;/li&gt;
&lt;li&gt;定标差异：不同模式的相同属性有不同度量标准&lt;/li&gt;
&lt;li&gt;结构差异：现实世界中的同一对象有不同表示 （属性或实体）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理操作间的不一致数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不一致的现象
&lt;ul&gt;
&lt;li&gt;同一对象在不同站点有相同标识符；&lt;/li&gt;
&lt;li&gt;同一对象在不 同站点有不同的值；&lt;/li&gt;
&lt;li&gt;同一对象有新值和旧值；&lt;/li&gt;
&lt;li&gt;其它不符合逻辑的错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解决策略
&lt;ul&gt;
&lt;li&gt;直接显示任一不一致值，且不通知用户&lt;/li&gt;
&lt;li&gt;直接显示不一致，通知用户，让用户处理&lt;/li&gt;
&lt;li&gt;将不一致值处理为一个新的结果，如求平均值&lt;/li&gt;
&lt;li&gt;显示最新值&lt;/li&gt;
&lt;li&gt;显示最可靠系统的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="query-optimization"&gt;Query Optimization
&lt;/h2&gt;&lt;h3 id="查询优化准则"&gt;查询优化准则
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;集中式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询转换为代数表达式&lt;/li&gt;
&lt;li&gt;从所有等价表达式中选择最优的代数表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;分布式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集中式问题&lt;/li&gt;
&lt;li&gt;站点之间交换数据的问题&lt;/li&gt;
&lt;li&gt;选择最优执行站点的问题&lt;/li&gt;
&lt;li&gt;数据传送方式的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/hkGntCz/image-20241024101752436.png"
loading="lazy"
alt="image-20241024101752436"
&gt;&lt;/p&gt;
&lt;p&gt;数据的分布和冗余增加了并行处理查询的可能性， 从而可以缩减查询处理的响应时间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;总代价最小&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/hxD9X22X/image-20241024103454046.png"
loading="lazy"
alt="image-20241024103454046"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;响应时间最短&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询响应时间：与通信时间、站点上的处理时间有关&lt;/li&gt;
&lt;li&gt;可利用站点间的&lt;strong&gt;并行处理&lt;/strong&gt;缩短查询时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="关系代数"&gt;关系代数
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/fdgcW6Hk/image-20241024103742328.png"
loading="lazy"
alt="image-20241024103742328"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;连接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/TMmhYLGn/image-20241024111320695.png"
loading="lazy"
alt="image-20241024111320695"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;等值连接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/0RT2K1pk/image-20241024111335028.png"
loading="lazy"
alt="image-20241024111335028"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自然连接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/LX50Kskt/image-20241024111353065.png"
loading="lazy"
alt="image-20241024111353065"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;半连接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/k6DWw9D3/image-20241024111425465.png"
loading="lazy"
alt="image-20241024111425465"
&gt;&lt;/p&gt;
&lt;p&gt;校正：&lt;/p&gt;
&lt;p&gt;虽然半连接通常是基于等值条件的，但它的定义并不限制于等值连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;外连接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/fV6BrdzV/image-20241024111537556.png"
loading="lazy"
alt="image-20241024111537556"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;限定关系&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/n8BZ9xth/image-20241024105048219.png"
loading="lazy"
alt="image-20241024105048219"
&gt;&lt;/p&gt;
&lt;h3 id="分布式查询分类"&gt;分布式查询分类
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;局部查询&lt;/li&gt;
&lt;li&gt;远程查询&lt;/li&gt;
&lt;li&gt;全局查询&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="局部查询"&gt;局部查询
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;选择运算尽可能先做&lt;/li&gt;
&lt;li&gt;把投影运算和选择运算同时进行&lt;/li&gt;
&lt;li&gt;把投影同其前或后的双目运算结合起来&lt;/li&gt;
&lt;li&gt;把某些选择运算和在它前面执行的笛卡尔积结合起来成为一个连接运算&lt;/li&gt;
&lt;li&gt;在执行连接前对关系适当地预处理（在连接属性上建立索引和对关系排序）&lt;/li&gt;
&lt;li&gt;找出公共子表达式&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="远程查询"&gt;远程查询
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;只涉及单个站点上的数据，优化策略与局部查询相同&lt;/li&gt;
&lt;li&gt;在有多个站点的情况下，&lt;strong&gt;就近&lt;/strong&gt;处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="全局查询"&gt;全局查询
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;具体化（materialization）
&lt;ul&gt;
&lt;li&gt;对查询进行分解，确定查询使用的物理副本，落实查询对象&lt;/li&gt;
&lt;li&gt;对于多个副本，需研究如何选择副本，使通信代价最小，并提高处理的并行性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;确定操作执行的顺序
&lt;ul&gt;
&lt;li&gt;确定二元操作中连接和并操作的顺序
&lt;ul&gt;
&lt;li&gt;先执行所有连接，再执行并操作&lt;/li&gt;
&lt;li&gt;先执行部分并操作，再执行连接操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;选择和投影尽可能早进行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;确定操作的执行方法
&lt;ul&gt;
&lt;li&gt;确定若干个操作的合并执行，确定可用的访问路径&lt;/li&gt;
&lt;li&gt;连接方法在查询优化中起着重要作用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;确定执行站点
&lt;ul&gt;
&lt;li&gt;考虑通讯费用和执行效率（负载均衡）&lt;/li&gt;
&lt;li&gt;执行站点不一定是发出查询的站点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/v6sht6YV/image-20241024105603268.png"
loading="lazy"
alt="image-20241024105603268"
&gt;&lt;/p&gt;
&lt;h3 id="分布式查询优化"&gt;分布式查询优化
&lt;/h3&gt;&lt;h4 id="基本原理"&gt;&lt;strong&gt;基本原理&lt;/strong&gt;
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;把查询转变为关系代数表达式&lt;/li&gt;
&lt;li&gt;分析得到查询树（语法树）&lt;/li&gt;
&lt;li&gt;把全局查询映射为片段的查询，得到&lt;strong&gt;基于片段的查询树&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;利用关系代数等价变换规则优化查询树&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="处理步骤"&gt;&lt;strong&gt;处理步骤&lt;/strong&gt;
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;将关系表达式表示为语法树的形式；&lt;/li&gt;
&lt;li&gt;利用等价变换规则尽量将选择和投影运算移向树的叶端，连接和合并操作尽可能上提；&lt;/li&gt;
&lt;li&gt;使多个选择和多个投影一起进行；&lt;/li&gt;
&lt;li&gt;将树的内部结点分组，形成不同的程序步。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="优化算法"&gt;&lt;strong&gt;优化算法&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/yckpcMwZ/image-20241024105939161.png"
loading="lazy"
alt="image-20241024105939161"
&gt;&lt;/p&gt;
&lt;h4 id="分布式环境中的特殊处理"&gt;&lt;strong&gt;分布式环境中的特殊处理&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;如果是水平分片，把分片的限定（分片条件）与选择条件进行比较，判别它们之间是否存在矛盾，去掉存在矛盾的片段。&lt;/li&gt;
&lt;li&gt;如果只剩一个水平片段，则可去掉重构全局关系的“并”操作。&lt;/li&gt;
&lt;li&gt;如果是垂直分片，把片段中的属性集与投影操作涉及的属性集进行比较，去掉无关的片段。&lt;/li&gt;
&lt;li&gt;如果只剩一个垂直片段，则去掉重构全局关系的“连接”操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="水平分片查询优化"&gt;水平分片查询优化
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;尽量把选择条件下移到分片的限定关系处，再把分片的限定关系与选择条件进行比较，去掉它们之间存在矛盾的相应片段。&lt;/li&gt;
&lt;li&gt;如果最后剩下一个水平片段，则在重构全局关系的操作中，就可去掉“并”操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="基于半连接的查询优化"&gt;基于半连接的查询优化
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/zhn8pD5K/image-20241024112315480.png"
loading="lazy"
alt="image-20241024112315480"
&gt;&lt;/p&gt;
&lt;p&gt;s上基于半连接技术执行连接&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/r2r3PF6f/image-20241024112538376.png"
loading="lazy"
alt="image-20241024112538376"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代价估算&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/1tRhHdqs/image-20241024112629105.png"
loading="lazy"
alt="image-20241024112629105"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/C5CdMxBx/image-20241024112704432.png"
loading="lazy"
alt="image-20241024112704432"
&gt;&lt;/p&gt;
&lt;h4 id="基于直接连接的查询优化"&gt;基于直接连接的查询优化
&lt;/h4&gt;&lt;p&gt;四种基于直接连接的优化算法（考虑关系分片）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用站点依赖信息的算法&lt;/li&gt;
&lt;li&gt;分片与复制算法&lt;/li&gt;
&lt;li&gt;站点依赖和数据复制结合算法&lt;/li&gt;
&lt;li&gt;Hash划分算法&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id="站点依赖算法"&gt;站点依赖算法
&lt;/h5&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/99JwkcTp/image-20241024120616212.png"
loading="lazy"
alt="image-20241024120616212"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/C53fPXVR/image-20241024120713418.png"
loading="lazy"
alt="image-20241024120713418"
&gt;&lt;/p&gt;
&lt;h5 id="分片与复制算法"&gt;分片与复制算法
&lt;/h5&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/hFBG1T4J/image-20241024121035901.png"
loading="lazy"
alt="image-20241024121035901"
&gt;&lt;/p&gt;
&lt;h5 id="站点依赖与数据复制结合方法"&gt;站点依赖与数据复制结合方法
&lt;/h5&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/FbXpLNky/image-20241024121221376.png"
loading="lazy"
alt="image-20241024121221376"
&gt;&lt;/p&gt;
&lt;h5 id="hash连接算法"&gt;Hash连接算法
&lt;/h5&gt;&lt;h5 id="比较"&gt;比较
&lt;/h5&gt;&lt;p&gt;假定站点S1，S2分别有关系R1，R2的片段，每个片段的大小是R的一半 （R/2）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;站点依赖算法
&lt;ul&gt;
&lt;li&gt;无数据传递&lt;/li&gt;
&lt;li&gt;可利用索引做本地连接&lt;/li&gt;
&lt;li&gt;每个站点连接数据总量是R&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分片和复制算法
&lt;ul&gt;
&lt;li&gt;数据传输总量是R&lt;/li&gt;
&lt;li&gt;数据传送后，可能要重新创建索引&lt;/li&gt;
&lt;li&gt;每个站点的连接数据量是(3/2)R，一个全关系和一个片断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hash划分算法
&lt;ul&gt;
&lt;li&gt;数据传送量是R&lt;/li&gt;
&lt;li&gt;索引可能无法使用（比片段复制算法效率更低）&lt;/li&gt;
&lt;li&gt;每个站点的连接数据量同站点依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="常用策略"&gt;常用策略
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;两个关系在同一个站点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R∞S，称外层关系为R，内层关系为S&lt;/li&gt;
&lt;li&gt;嵌套循环法
&lt;ul&gt;
&lt;li&gt;顺序扫描外层关系R，对于R的每一元组扫描内层关系S&lt;/li&gt;
&lt;li&gt;查找在连接属性上一致的元组，组合起来构成结果的一部分。&lt;/li&gt;
&lt;li&gt;需要扫描一次关系R和Card（R）次关系S。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;排序扫描法
&lt;ul&gt;
&lt;li&gt;先把两个关系按照连接属性进行排序&lt;/li&gt;
&lt;li&gt;然后按照连接属性值的顺序扫描这两个关系，使匹配的元组成为结果的一部分&lt;/li&gt;
&lt;li&gt;对两个关系都扫描一次，但增加了排序代价。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两个关系在不同一个站点，R（外层）和S（内层）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整体传输
&lt;ul&gt;
&lt;li&gt;如果传输S，则需保存S（被多次扫描）。&lt;/li&gt;
&lt;li&gt;如果传输R，则S可直接使用一次到来的R元组，不保存R。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;按需传输
&lt;ul&gt;
&lt;li&gt;只传输需要连接的元组，一次一个元组，无需临时存储器。&lt;/li&gt;
&lt;li&gt;每次提取都要交换一次信息，传输代价高，只在高速局域网中才是合理的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;三种选择执行站点的方法
&lt;ul&gt;
&lt;li&gt;R站点&lt;/li&gt;
&lt;li&gt;S站点&lt;/li&gt;
&lt;li&gt;其他站点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用并行性的直接连接操作策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过重新分布元组实现操作内的并行，一般是不可行的，因为并行程度小，通信代价高。&lt;/li&gt;
&lt;li&gt;多个操作间的并行是可行的
&lt;ul&gt;
&lt;li&gt;流水线并行
&lt;ul&gt;
&lt;li&gt;一个操作A的输出元组作为第二个操作B的输入。&lt;/li&gt;
&lt;li&gt;在第一个操作尚未产生全部的输出元组集合之前，第二个操作就可以在它的输入上进行工作。&lt;/li&gt;
&lt;li&gt;可以在不同的站点上运行A和B，在A产生部分结果元组的同时，B来使用它们。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;独立的并行
&lt;ul&gt;
&lt;li&gt;查询表达式中相互之间没有依赖关系的操作可以并行执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="transactions"&gt;Transactions
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;事务概念&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务是访问或更新各种数据项的&lt;strong&gt;最小逻辑&lt;/strong&gt;工作单位&lt;/li&gt;
&lt;li&gt;它是一个操作&lt;strong&gt;序列&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;它可以使数据库从一个一致状态到另外一个一致状态&lt;/li&gt;
&lt;li&gt;事务必须保证数据库的&lt;strong&gt;一致性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;事务执行期间数据库可能不一致&lt;/li&gt;
&lt;li&gt;当事务提交时数据库必须是一致的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/TDp0zmmC/image-20241031191244044.png"
loading="lazy"
alt="image-20241031191244044"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分布式事务&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分布式事务是集中式事务的&lt;strong&gt;扩充&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;分布式事务（全局事务）是数据库的一个分布式操作序列，被操作的数据分布在不同的站点上，这些操作要么全做要么全不做，是一个不可分割的工作单位。&lt;/li&gt;
&lt;li&gt;一个分布式事务由&lt;strong&gt;主事务&lt;/strong&gt;（负责事务的开始、提交或异常终止）和多个&lt;strong&gt;子事务&lt;/strong&gt;（&lt;strong&gt;局部&lt;/strong&gt;事务，完成对数据的操作）组成。&lt;/li&gt;
&lt;li&gt;全局事务，涉及多个站点&lt;/li&gt;
&lt;li&gt;局部事务，仅涉及一个站点&lt;/li&gt;
&lt;li&gt;站点和通信链路故障都可能导致错误发生&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;分布式事务的特性（ACID）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;原子性(Atomicity)&lt;/p&gt;
&lt;p&gt;一个事务要么全执行，要么全不执行，是不可分割的执行单位。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一致性(Consistency)&lt;/p&gt;
&lt;p&gt;指数据应满足的约束条件。分布式事务的执行能使得分布式数据库从一个一致状态转变为另一个一致状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隔离性(Isolation)&lt;/p&gt;
&lt;p&gt;事务更新过的数据在事务结束前对其他事务不可见。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;持久性(Durability)&lt;/p&gt;
&lt;p&gt;已完成事务对数据的更新应持久，发生故障后应不会丢失更新。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;分布式事务的独特性&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局事务的主事务和子事务全部成功提交，才能改变数据库状态，有一个失败，其他子事务操作都要撤销。&lt;/li&gt;
&lt;li&gt;还要考虑&lt;strong&gt;数据传送、通信原语和控制报文&lt;/strong&gt;等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/9HM7CXvW/image-20241031191954443.png"
loading="lazy"
alt="image-20241031191954443"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分布式事务的状态&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;活动（Active）：从事务开始执行的初始状态始，事务执行中保持该状态。&lt;/li&gt;
&lt;li&gt;部分提交（Partially Committed）：事务的&lt;strong&gt;最后一个语句执行后&lt;/strong&gt;进入该状态。&lt;/li&gt;
&lt;li&gt;失败（Failed）：一旦发现事务不能正常执行时进入该状态。&lt;/li&gt;
&lt;li&gt;夭折（Aborted）：当事务被回滚后，数据库恢复到事务开始执行前的状态。&lt;/li&gt;
&lt;li&gt;提交（Committed）：当事务成功执行后的状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/ksHd5PJF/image-20241031192216327.png"
loading="lazy"
alt="image-20241031192216327"
&gt;&lt;/p&gt;
&lt;h3 id="实现模型"&gt;实现模型
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;进程模型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DBMS建立在操作系统之上；&lt;/li&gt;
&lt;li&gt;DBMS在创建进程、进程通信、读写磁盘、分配内存时请求操作系统服务；&lt;/li&gt;
&lt;li&gt;分布式事务中的&lt;strong&gt;子事务&lt;/strong&gt;序列是以&lt;strong&gt;进程&lt;/strong&gt;方式完成的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进程&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程是程序运行的最小单位，也是资源分配的最小单位。&lt;/li&gt;
&lt;li&gt;包含进程说明与进程执行两个方面。&lt;/li&gt;
&lt;li&gt;具有并发性，不同于过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;事务代理（Agent）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DDBMS中，各个站点上数据的操作是通过执行多个进程完成，&lt;strong&gt;这些进程称为分布式事务在执行站点上的“事务代理”&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务代理是一个本地进程，代表应用执行对数据的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代理可以执行应用程序员写的程序，也可以执行系统的原语函数。不同代理间通过报文实现通讯。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根代理（Root Agent）：&lt;strong&gt;应用启动站点&lt;/strong&gt;上的代理。根代理所在的站点称作&lt;strong&gt;原发站点&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;一般，根代理负责发&lt;strong&gt;系统原语&lt;/strong&gt;，只有根代理可以请求创建新代理。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进程协作（代理协作）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了协调执行分布式应用的全局操作，分驻于不同站点的诸事务代理必须进行协调，有如下规定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一应用都有一个&lt;strong&gt;负责启动整个事务&lt;/strong&gt;的根代理（总代理）。&lt;/li&gt;
&lt;li&gt;只有总代理才能发出全局有效的事务开始、提交和撤销原语。&lt;/li&gt;
&lt;li&gt;只有总代理才能请求建立新的事务代理。&lt;/li&gt;
&lt;li&gt;各站点上的子事务都执行成功，总代理才能决定提交该事务；否则总代理将决定撤销该事务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;分布式事务管理问题（特殊性）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;多个副本间的一致性&lt;/p&gt;
&lt;p&gt;在数据更新时，DDBMS负责保持&lt;strong&gt;多副本&lt;/strong&gt;间数据的一致性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;站点故障&lt;/p&gt;
&lt;p&gt;当站点发生故障时, DDBMS能够检测到站点故障。当故障站点恢复后,DDBMS协同该故障站点上的DBMS, 使它的局部数据库保持与其他站点同步。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通信网络故障&lt;/p&gt;
&lt;p&gt;DDBMS应有能力处理通信网络故障：一般的通信故障和网络分割。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分布式提交&lt;/p&gt;
&lt;p&gt;采用&lt;strong&gt;提交协议&lt;/strong&gt;保证分布式事务的正确提交。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;事务管理的任务&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当多个事务并发执行和事务执行发生错误（故障）时，使数据库仍保持一致状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​ 事务是一个一致计算与可靠计算的单位。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分布式事务管理的目标&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维护分布式事务的原子性、一致性、持久性和隔离性。&lt;/li&gt;
&lt;li&gt;获得&lt;strong&gt;最小的主存和CPU开销&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;降低控制报文的传输个数和加快分布式事务的响应速度。&lt;/li&gt;
&lt;li&gt;获得最大限度的系统可靠性和可用性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="抽象管理模型"&gt;抽象管理模型
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/fmcNvvG/image-20241031193458596.png"
loading="lazy"
alt="image-20241031193458596"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DTM（Distributed Transaction Manager）功能&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;保证分布式事务的ACID特性；&lt;/li&gt;
&lt;li&gt;提供对分布式事务的控制和正确执行，包括：
&lt;ul&gt;
&lt;li&gt;分布式事务的开始、结束；&lt;/li&gt;
&lt;li&gt;子事务的分解；&lt;/li&gt;
&lt;li&gt;协调子事务的执行；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持分布式事务执行的位置透明性，即将子事务分配到适当的站点上去执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="控制模型"&gt;控制模型
&lt;/h3&gt;&lt;p&gt;协调分布式事务中各成员DBMS执行其子事务的通用方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主从控制模型
&lt;ul&gt;
&lt;li&gt;主、从控制器，LTM之间无通信&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;三角控制模型
&lt;ul&gt;
&lt;li&gt;LTM之间可以传递数据，避免了主从之间不必要的传输&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;层次控制模型
&lt;ul&gt;
&lt;li&gt;LTM还可再创建Agent，控制其它LTM执行，比前两种复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/8D3HV3MN/image-20241031193828222.png"
loading="lazy"
alt="image-20241031193828222"
&gt;&lt;/p&gt;
&lt;h3 id="故障"&gt;故障
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;站点故障&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务内部的故障
&lt;ul&gt;
&lt;li&gt;非预期的、不正常的程序结束所造成的故障，如：
&lt;ul&gt;
&lt;li&gt;计算溢出&lt;/li&gt;
&lt;li&gt;完整性破坏&lt;/li&gt;
&lt;li&gt;操作员干预&lt;/li&gt;
&lt;li&gt;输入输出错误&lt;/li&gt;
&lt;li&gt;并发事务的死锁等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统故障
&lt;ul&gt;
&lt;li&gt;造成系统停止运行的任何事件，要求系统重启动，如：
&lt;ul&gt;
&lt;li&gt;CPU出错&lt;/li&gt;
&lt;li&gt;缓冲区满&lt;/li&gt;
&lt;li&gt;系统崩溃&lt;/li&gt;
&lt;li&gt;停电等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;介质故障
&lt;ul&gt;
&lt;li&gt;磁盘损坏、磁头碰撞等，使数据库遭到破坏。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通讯故障&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;报文故障
&lt;ul&gt;
&lt;li&gt;报文错&lt;/li&gt;
&lt;li&gt;报文失序&lt;/li&gt;
&lt;li&gt;报文丢失&lt;/li&gt;
&lt;li&gt;报文延迟&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网络分割故障（网络断连）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;故障处理难度&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仅发生站点故障&lt;/li&gt;
&lt;li&gt;站点故障与报文故障同时存在&lt;/li&gt;
&lt;li&gt;站点故障、报文故障和网络分割故障同时存在&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="事务恢复"&gt;事务恢复
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;当发生故障时，&lt;strong&gt;保证事务原子性的措施&lt;/strong&gt;称为事务故障恢复，简称事务恢复。&lt;/li&gt;
&lt;li&gt;主要依靠&lt;strong&gt;日志&lt;/strong&gt;来实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="事务的提交点"&gt;&lt;strong&gt;事务的提交点&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当事务T在所有站点的数据库存取操作&lt;strong&gt;都已成功执行&lt;/strong&gt;，并且所有操作对数据库的影响&lt;strong&gt;都已记录&lt;/strong&gt;在日志中时，该事务T就到达提交点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提交点后事务就成为&lt;strong&gt;已提交&lt;/strong&gt;的事务，事务在日志中写入提交记录[commit,T]。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在系统发生故障时，扫描日志，检查提交记录，可以实现事务的恢复。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务提交前&lt;strong&gt;强制&lt;/strong&gt;写日志&lt;/p&gt;
&lt;p&gt;在事务到达提交点以前，还未写入磁盘的日志的任何部分，必须被写入磁盘。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提交点是一个时间点，是可以提交事务的所有变化或者取消事务的时间点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提交点对于数据库来说是个&lt;strong&gt;一致点&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提交点也是事务的&lt;strong&gt;重启点&lt;/strong&gt;，可以安全地撤销事务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提交点也是事务锁定资源的一个&lt;strong&gt;释放点&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="日志"&gt;&lt;strong&gt;日志&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;保存&lt;strong&gt;所有影响数据库项&lt;/strong&gt;的值的事务操作的信息&lt;/li&gt;
&lt;li&gt;用于故障恢复&lt;/li&gt;
&lt;li&gt;记录的内容
&lt;ul&gt;
&lt;li&gt;[start_transaction, T]&lt;/li&gt;
&lt;li&gt;[write_item, T, x, 旧值, 新值]&lt;/li&gt;
&lt;li&gt;[read_item, T, x]&lt;/li&gt;
&lt;li&gt;[commit, T]&lt;/li&gt;
&lt;li&gt;[abort, T]&lt;/li&gt;
&lt;li&gt;Log:记录长度以及其他用于恢复过程的辅助信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;日志本身存在一个优先保护的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="检查点checkpoint"&gt;检查点（Checkpoint）
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;设置一个&lt;strong&gt;周期性&lt;/strong&gt;（时间/容量）操作点，表示此前已执行完的事务是正确的&lt;/li&gt;
&lt;li&gt;写检查点的操作
&lt;ul&gt;
&lt;li&gt;Log Buffer内容写入Log&lt;/li&gt;
&lt;li&gt;写检查点Log信息：当前活动事务表，每个事务最近一次Log记录在Log文件中的位置&lt;/li&gt;
&lt;li&gt;DB Buffer内容写入DB&lt;/li&gt;
&lt;li&gt;将本次检查点Log项在Log文件中的地址记入“重启文件”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;遵循“先写日志”原则&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="事务恢复的原则"&gt;事务恢复的原则
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;孤立和逐步退出事务的原则
&lt;ul&gt;
&lt;li&gt;对事务内部的故障，不影响其它事务，将事务回退（UNDO）即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;成功结束事务原则
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;已提交&lt;/strong&gt;的事务应该满足事务的持久性，发生故障后应该重做(&lt;strong&gt;REDO&lt;/strong&gt;) 它所做过的所有修改数据库的操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;夭折事务的原则
&lt;ul&gt;
&lt;li&gt;非局部的不可排除的故障，撤销全部事务，恢复到初态。&lt;/li&gt;
&lt;li&gt;两种做法：
&lt;ul&gt;
&lt;li&gt;利用数据备份恢复&lt;/li&gt;
&lt;li&gt;利用日志Undo&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id="本地事务恢复"&gt;本地事务恢复
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;从“重启动文件”读出最近Checkpoint的地址，并定出Checkpoint在Log文件中的位置。&lt;/li&gt;
&lt;li&gt;创建Redo表（空），Undo表（即Checkpoint相应内容中的活动事务表）。&lt;/li&gt;
&lt;li&gt;前向检索Log，如果遇到Begin Transaction，则将对应事务记入到Undo表；如果遇到commit记录，则将对应的事务从Undo表移到Redo表。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;反向检索&lt;/strong&gt;Log，对Undo表中的事务，按照Log记录，做&lt;strong&gt;Undo&lt;/strong&gt;操作，直到对应的Begin Transaction记录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;正向检索&lt;/strong&gt;Log，对Redo表中的事务，按照Log记录，做&lt;strong&gt;Redo&lt;/strong&gt;操作，直到对应的Commit记录。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="分布式事务的恢复"&gt;&lt;strong&gt;分布式事务的恢复&lt;/strong&gt;
&lt;/h5&gt;&lt;p&gt;由分布式事务管理器和局部事务管理器协同完成&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/HDkj5jB9/image-20241031195619686.png"
loading="lazy"
alt="image-20241031195619686"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分布式事务的撤消和提交&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分布式事务的撤消：
&lt;ul&gt;
&lt;li&gt;由总代理生成一个AGENT执行ABORT命令，各个DTM向LTM发局部ABORT命令，撤消各个子事务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式事务的提交：
&lt;ul&gt;
&lt;li&gt;由总代理生成一个AGENT执行COMMIT命令，各个DTM向LTM发局部COMMIT命令，提交各个子事务。&lt;/li&gt;
&lt;li&gt;分布式事务的提交比较复杂，需要通过协议来保障，比如两阶段提交协议。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="两阶段提交协议"&gt;两阶段提交协议
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;基本思想&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将本地原子性提交行为的效果扩展到分布式事务，只有所有参与执行分布式事务的站点&lt;strong&gt;都同意&lt;/strong&gt;提交，才能提交。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;提交过程&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一阶段：&lt;strong&gt;表决&lt;/strong&gt;阶段&lt;/li&gt;
&lt;li&gt;第二阶段：&lt;strong&gt;执行&lt;/strong&gt;阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;两类代理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;协调者：掌握提交和撤销事务的决定权，一般是总代理。&lt;/li&gt;
&lt;li&gt;参与者：负责在本地数据库中执行写操作，并且向协调者提出提交和撤销子事务的意向。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/XrHrHgVH/image-20241031200042112.png"
loading="lazy"
alt="image-20241031200042112"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2PC协议的重要特点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许参与者&lt;strong&gt;单方面&lt;/strong&gt;撤销事务；&lt;/li&gt;
&lt;li&gt;一旦参与者确定了提交或撤销协议，它就不能再更改它的提议；&lt;/li&gt;
&lt;li&gt;当参与者处于就绪状态时，根据协调者发出的消息种类，它可以转换为提交状态或者撤销状态；&lt;/li&gt;
&lt;li&gt;协调者根据全局提交规则做出全局终止决定；&lt;/li&gt;
&lt;li&gt;协调者和参与者可能进入互相等待对方消息的状态，需要使用定时器，保证退出消息等待状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;两阶段提交协议的通信结构&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集中式&lt;/li&gt;
&lt;li&gt;分层式&lt;/li&gt;
&lt;li&gt;线性&lt;/li&gt;
&lt;li&gt;分布式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/BVCMC7yF/image-20241031201951215.png"
loading="lazy"
alt="image-20241031201951215"
&gt;&lt;/p&gt;
&lt;h4 id="站点故障"&gt;站点故障
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;参与者将就绪信息(“Ready”)写入日志前故障
&lt;ul&gt;
&lt;li&gt;协调者等待超时，采取撤销决定，撤销其他子事务&lt;/li&gt;
&lt;li&gt;故障站点重启后简单撤销该事务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;参与者将“Ready”信息写入日志后故障
&lt;ul&gt;
&lt;li&gt;其他站点正常结束该事务(Commit 或Abort)&lt;/li&gt;
&lt;li&gt;故障站点重启后，由协调者提供相关信息，正确结束(Commit 或 Abort)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;协调者在发送“Prepare（准备）”信息后，写入“commit（提交）”/“abort（撤销）”记录前，发生故障
&lt;ul&gt;
&lt;li&gt;所有工作正常的参与者挂起&lt;/li&gt;
&lt;li&gt;协调者从头开始恢复，重新发“Prepare”信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;协调者在写入“commit”/“abort”记录后，写入“Complete(end_of_trans)”之前，发生故障
&lt;ul&gt;
&lt;li&gt;需协调者重启时重新发决定信息，挂起的子事务继续提交，已提交子事务只发“ACK”信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;协调者在写入“Complete”信息后发生故障
&lt;ul&gt;
&lt;li&gt;重启时不做任何动作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="报文故障"&gt;报文故障
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;协调者的“Prepare”信息丢失&lt;/p&gt;
&lt;p&gt;没有收到“Prepare”信息的参与者等待，协调者也因等待超时，整个事务被撤销。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参与者的回答信息（“Ready/Abort”）丢失&lt;/p&gt;
&lt;p&gt;协调者等待超时，整个事务被撤销。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;协调者的“Commit/Abort”信息丢失&lt;/p&gt;
&lt;p&gt;参与者处于等待状态，可引入超时，请求再次发送。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参与者的“ACK”信息丢失&lt;/p&gt;
&lt;p&gt;协调者等待，可引入超时，再次发送相关命令。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="网络分割故障"&gt;网络分割故障
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;协调者子网：
&lt;ul&gt;
&lt;li&gt;在同一子网的参与者，可以正常结束。&lt;/li&gt;
&lt;li&gt;协调者收不到其它参与者的信息，按参与者故障处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;参与者子网：
&lt;ul&gt;
&lt;li&gt;参与者收不到协调者的信息，按协调者故障处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="性能"&gt;性能
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;简单，完全同步&lt;/li&gt;
&lt;li&gt;具备紧密一致性
&lt;ul&gt;
&lt;li&gt;任何时刻的数据一致性和全局事务的原子性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全局事务可用性低&lt;/li&gt;
&lt;li&gt;系统效率比较低&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="数据更新"&gt;数据更新
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;主文本更新法
&lt;ul&gt;
&lt;li&gt;指定一个文本为主文本，其他的为辅文本&lt;/li&gt;
&lt;li&gt;数据的更新面向主文本&lt;/li&gt;
&lt;li&gt;主文本站点负责辅文本的更新&lt;/li&gt;
&lt;li&gt;主文本更新法的问题
&lt;ul&gt;
&lt;li&gt;更新传播必须在短时间内完成，否则可能产生“过时”数据&lt;/li&gt;
&lt;li&gt;主文本站点不可用时，其他辅文本站点也不可用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移动主文本法
&lt;ul&gt;
&lt;li&gt;若初次更新在辅文本上，把更新引向该数据的主站点；如果主站点此时尚未连通，则另选一个辅站点中的辅文本为该数据新的主文本进行更新；待原主文本站点连通后，系统自动把它改为辅文本，并按记录要求执行更新。&lt;/li&gt;
&lt;li&gt;如果初次更新在主文本上，但主文本站点与网络未接通，则此次更新操作失败，事务被撤销。&lt;/li&gt;
&lt;li&gt;移动文本法的问题
&lt;ul&gt;
&lt;li&gt;网络分割成很多部分时，更新处理会不一致&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="concurrency"&gt;Concurrency
&lt;/h2&gt;&lt;p&gt;并发控制就是负责正确协调并发事务的执行，保证并发的存取操作不至于破坏数据库的完整性和一致性，确保并发执行的多个事务能够正确地运行并获得正确的结果。&lt;/p&gt;
&lt;h3 id="调度"&gt;调度
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;指事务处理执行的一个操作序列&lt;/li&gt;
&lt;li&gt;事务的操作分为两类：Ri(x)、Wi(x)&lt;/li&gt;
&lt;li&gt;一组事务的调度必须包含这些事务的所有操作，且操作顺序与原事务相同&lt;/li&gt;
&lt;li&gt;调度的操作之间可能存在冲突
&lt;ul&gt;
&lt;li&gt;读-写冲突&lt;/li&gt;
&lt;li&gt;写-写冲突&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;串行调度&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个事务的第一个动作是在另一个事务的最后一个动作完成后开始。即调度中事务的各个操作&lt;strong&gt;不会交叉&lt;/strong&gt;，每个事务相继执行。&lt;/li&gt;
&lt;li&gt;串行调度总是可以&lt;strong&gt;正确&lt;/strong&gt;执行，但是串行调度&lt;strong&gt;效率低&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;一致性调度&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果调度可以使得数据库从一个一致性状态转变为另一个一致性状态，则称该调度为一致性调度。&lt;/li&gt;
&lt;li&gt;串行调度总可以使数据库保持一致，属于一致性调度。&lt;/li&gt;
&lt;li&gt;一致性调度不一定是可串行化调度&lt;/li&gt;
&lt;li&gt;同一事务集上的可串行化调度，结果未必相同&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;调度等价（冲突等价）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不同调度S1和S2是等价的，其充分条件是：对任意一对冲突操作&amp;lt; Oi, Oj &amp;gt;，在调度S1中Oi优先Oj而在调度S2中Oi也优先Oj。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;冲突操作&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个对同一数据项进行的操作中，有一个写操作，两者即为冲突操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;可串行化调度&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果一个调度&lt;strong&gt;等价于串行调度&lt;/strong&gt;，则该调度称为可串行化调度。&lt;/li&gt;
&lt;li&gt;可串行化调度可以通过一系列&lt;strong&gt;非冲突操作的交换&lt;/strong&gt;，调整为串行调度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;并发调度&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一组并发执行的事务的调度序列。&lt;/li&gt;
&lt;li&gt;必须保证每一事务内部的操作的顺序。&lt;/li&gt;
&lt;li&gt;冲突操作必须先后依次执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="分布式事务可串行化调度测试"&gt;分布式事务可串行化调度测试
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/mrkR6F4B/image-20241107103035621.png"
loading="lazy"
alt="image-20241107103035621"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可串行理论可以直接扩展到&lt;strong&gt;无重复副本&lt;/strong&gt;的分布式数据库中。
&lt;ul&gt;
&lt;li&gt;事务在每个站点上的执行调度称作局部调度。&lt;/li&gt;
&lt;li&gt;如果在无重复副本的分布式数据库中，每个局部调度都是可串行化的，则它们的并（全局调度）也是可串行化的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在有副本的情况下，可能局部调度是可串行化的，但全局调度不是可串行化的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;数据副本情况&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用单副本可串行化调度，维持数据副本的相互一致性，此时要求：
&lt;ul&gt;
&lt;li&gt;每一个局部调度必须是可串行化的。&lt;/li&gt;
&lt;li&gt;局部调度中的冲突操作必须具有相同的相对顺序（保证冲突事务的串行顺序是相同的）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;采用&lt;strong&gt;ROWA协议&lt;/strong&gt;，读一个/写全部。&lt;/li&gt;
&lt;li&gt;实际上难以实现同时写全部的操作。&lt;/li&gt;
&lt;li&gt;有副本的情况下需要附加额外的副本控制协议。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="并发控制"&gt;并发控制
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一般不测试调度是否可串行化，而是&lt;strong&gt;使用规则或协议保证产生一个可串行化的调度&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;通过调度的可串行化来保证调度的正确性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="方法"&gt;方法
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;基于封锁的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​ 锁定数据项以防止其他事务并发访问。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于时间戳的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​ 给事务分配时间戳，根据时间戳顺序来执行事务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;悲观算法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​ 提前考虑和解决冲突。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;乐观算法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​ 认为冲突一般不会发生，发生后再处理。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/M56TF363/image-20241107103806304.png"
loading="lazy"
alt="image-20241107103806304"
&gt;&lt;/p&gt;
&lt;h3 id="基于封锁"&gt;基于封锁
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;基本思想&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务访问数据项前要封锁该数据项；如果该数据项被其他事务锁定，则需要等待锁的释放。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;锁的粒度&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指锁定数据项的范围&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;粒度选择&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库记录中的一个字段值&lt;/li&gt;
&lt;li&gt;一条数据库记录&lt;/li&gt;
&lt;li&gt;一个磁盘块（页面）&lt;/li&gt;
&lt;li&gt;一个完整的文件&lt;/li&gt;
&lt;li&gt;整个数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;锁的类型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共享锁：Share锁，S锁或者读锁&lt;/li&gt;
&lt;li&gt;排它锁：eXclusive锁，X锁，拒绝锁或写锁。&lt;/li&gt;
&lt;li&gt;更新锁：Update锁，U锁（将被更新）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;锁的选择&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据项既可以读也可以写，则要用X锁&lt;/li&gt;
&lt;li&gt;如果数据项只可以读，则用S锁&lt;/li&gt;
&lt;li&gt;锁的粒度大小取决于参与事务的类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;锁的操作&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;read_lock(x)&lt;/code&gt;：读封锁&lt;/li&gt;
&lt;li&gt;&lt;code&gt;write_lock(x)&lt;/code&gt;：写封锁&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unlock(x)&lt;/code&gt;：解锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;数据项的状态&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;read_locked&lt;/code&gt;：读封锁&lt;/li&gt;
&lt;li&gt;&lt;code&gt;write_locked&lt;/code&gt;：写封锁&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unlocked&lt;/code&gt;：未封锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;锁的操作和数据项的状态依靠&lt;strong&gt;系统锁表&lt;/strong&gt;来记录&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;准则&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/zhYNFtxr/image-20241107104607674.png"
loading="lazy"
alt="image-20241107104607674"
&gt;&lt;/p&gt;
&lt;h4 id="方法-1"&gt;方法
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;简单分布式封锁法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;封锁全部副本（各站点负责各自数据的封锁管理）&lt;/li&gt;
&lt;li&gt;过程消息（请求封锁、封锁确认、请求更新、更新确认、解除封锁）需要发送n次，各站点间进行相当大的数据传输。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主站点封锁法（集中封锁法）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选定一个站点为“主站点”，负责系统全部封锁管理。&lt;/li&gt;
&lt;li&gt;容易造成“瓶颈”&lt;/li&gt;
&lt;li&gt;制约可靠性和可用性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主副本封锁法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个数据项指定一个主副本，先对数据项的主副本进行封锁，然后再进行操作。&lt;/li&gt;
&lt;li&gt;主副本封锁，意味着所有的副本都被封锁。&lt;/li&gt;
&lt;li&gt;对只读操作要求过高。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快照方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快照是主副本的拷贝，是只读数据，可以提供复杂查询而不影响更新。&lt;/li&gt;
&lt;li&gt;可用来补充主副本封锁法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读写锁并不能保证事务调度的可串行性&lt;/p&gt;
&lt;h4 id="两阶段封锁协议"&gt;两阶段封锁协议
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;要求：
&lt;ul&gt;
&lt;li&gt;任何事务在对数据操作前必须先获得锁；&lt;/li&gt;
&lt;li&gt;一个事务所有的封锁操作都在第一个解锁操作之前。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;事务的执行分为两个阶段：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第一阶段 获得锁阶段&lt;/strong&gt;（也称为扩张阶段）。在这阶段，事务可以申请获得任何数据项上任何类型的锁，也可以进行锁的升级转换，但是不能释放任何锁；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第二阶段 释放锁阶段&lt;/strong&gt;（也称为收缩阶段）。在这阶段，事务可以释放任何数据项上的任何类型的锁，也可以进行锁的降级转换，但是不能再申请任何锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在分布式数据库中，若&lt;strong&gt;所有&lt;/strong&gt;事务都遵循2PL，则分布式事务的调度执行是&lt;strong&gt;可串行化&lt;/strong&gt;的。&lt;/li&gt;
&lt;li&gt;2PL&lt;strong&gt;限制&lt;/strong&gt;了一个调度中可以发生的并发事务的数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;分类&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基本的2PL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在完成数据项的访问后立即释放锁（可提高并发度）&lt;/li&gt;
&lt;li&gt;2PL可能产生死锁。&lt;/li&gt;
&lt;li&gt;释放锁前事务管理器必须知道事务已经获得了所有锁，必须知道事务不再对已经获得锁的数据进行操作；&lt;/li&gt;
&lt;li&gt;如果在释放部分锁后事务撤消，其它事务就可能会读到“脏数据”，导致使其它事务也被撤消（级联撤销）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保守的2PL（静态的2PL）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务在操作执行前获得所有操作数据上的锁。&lt;/li&gt;
&lt;li&gt;一次封锁所有数据项，否则等待。&lt;/li&gt;
&lt;li&gt;需要事务在数据操作前，预先声明读集（要读的所有数据项的集合）和写集（要写的所有数据项的集合）。&lt;/li&gt;
&lt;li&gt;不会产生死锁，但难以实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;严格的2PL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务在提交或撤消前不能释放任何排它锁，即在提交或撤消前，一次释放所有的锁。&lt;/li&gt;
&lt;li&gt;可避免“脏”数据，不能避免死锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;严酷的2PL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务在提交或撤消前不能释放任何锁，即在提交或撤消前，一次释放所有的锁。&lt;/li&gt;
&lt;li&gt;也不能避免死锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;实现&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;集中式两阶段封锁协议的实现方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只有一个站点拥有封锁管理程序，负责锁管理；其他站点上的事务管理程序在请求封锁时，与该站点通信。&lt;/li&gt;
&lt;li&gt;属于主站点封锁法，容易造成瓶颈。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主副本两阶段封锁协议的实现方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个数据确定一个主副本站点。&lt;/li&gt;
&lt;li&gt;在一组站点上实现封锁管理。&lt;/li&gt;
&lt;li&gt;每个封锁管理器管理一组指定单元上的锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分布式两阶段封锁协议的实现方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;锁管理是分布式的，每个站点都有分布式封锁管理程序，负责本站点数据的加锁和解锁。&lt;/li&gt;
&lt;li&gt;一般采用“写全锁”的策略，即写操作时请求封锁所有数据，而读操作时，仅封锁其中的一个副本，称为“读一个/写全部”(ROWA协议)。&lt;/li&gt;
&lt;li&gt;也可以采用“封锁多数”的策略，即读操作和写操作都封锁一半以上的数据副本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="多粒度与意向锁"&gt;多粒度与意向锁
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;多粒度封锁&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许多粒度树中的每个结点被独立地加锁；&lt;/li&gt;
&lt;li&gt;对一个结点加锁意味着这个结点的所有后裔结点也被加以同样类型的锁；&lt;/li&gt;
&lt;li&gt;数据项可能以两种方式封锁：显式封锁和隐式封锁。&lt;/li&gt;
&lt;li&gt;显式封锁和隐式封锁不能冲突。&lt;/li&gt;
&lt;li&gt;为了管理的方便引入意向锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;意向锁&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果对一个节点加意向锁，则说明该节点的下层节点正在被封锁。&lt;/li&gt;
&lt;li&gt;对任一节点封锁时，必须&lt;strong&gt;先对它的上层节点加意向锁&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;意向锁指出该节点的某个后代需要锁的类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;意向锁的类型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;意向共享锁 (IS)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;对一个数据对象加IS锁，表示某些后代将会请求S锁。&lt;/li&gt;
&lt;li&gt;例：若对元组加S锁，则对数据库和关系要加IS锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;意向排它锁 (IX)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;对一个数据对象加IX锁，表示可能对其下层结点加X锁。&lt;/li&gt;
&lt;li&gt;例：若对元组加X锁，则对数据库和关系要加IX锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;共享意向排它锁 (SIX = S + IX)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;对一个数据对象加SIX锁，表示当前结点处于S封锁中，但是下层某些结点将请求X锁。&lt;/li&gt;
&lt;li&gt;即事务要读下层结点中的对象，还可能要更新一些对象，因此要对当前结点加IX锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/142XXS0/image-20241107114719822.png"
loading="lazy"
alt="image-20241107114719822"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多粒度封锁协议&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;必须遵守锁的相容性规则；&lt;/li&gt;
&lt;li&gt;必须首先封锁树的根节点，可以用任何一种方式的锁；&lt;/li&gt;
&lt;li&gt;只有节点 N 的父节点以 IS 或 IX 方式封锁后，节点 N 才可以以 S 或 IS 方式封锁；&lt;/li&gt;
&lt;li&gt;只有当节点 N 的父节点以 IX 或 SIX 方式封锁后，节点 N 才可以以 X、IX 或 SIX 方式封锁；&lt;/li&gt;
&lt;li&gt;为遵循2PL协议，事务T在释放任何节点前，必须获得所有的锁；&lt;/li&gt;
&lt;li&gt;在事务T为节点 N 解锁前，必须先对其子节点解锁。即解锁的顺序从下层节点开始。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;意向锁的小结&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;具有意向锁的多粒度加锁方法中，任意事务T要对一个数据对象加锁，必须&lt;strong&gt;先对它的上层节点&lt;/strong&gt;加意向锁。&lt;/li&gt;
&lt;li&gt;申请&lt;strong&gt;封锁&lt;/strong&gt;时应该按&lt;strong&gt;自上而下&lt;/strong&gt;的次序进行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;释放&lt;/strong&gt;锁时则应该按&lt;strong&gt;自下而上&lt;/strong&gt;的次序进行。&lt;/li&gt;
&lt;li&gt;具有意向锁的多粒度加锁方法提高了系统的并发度，减少了加锁和释放锁的开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;封锁粒度对并发控制的影响&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大多数DBMS缺省设置为记录锁或页面锁。&lt;/li&gt;
&lt;li&gt;粒度小，并发度高，锁开销大。
&lt;ul&gt;
&lt;li&gt;数据项比较多，锁也多，解锁和封锁操作多，锁表存储空间大。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;粒度大，并发度低，锁开销小。&lt;/li&gt;
&lt;li&gt;如果是磁盘块，封锁磁盘块中的一条记录B的事务T必须封锁整个磁盘块；而另外一个事务S如果要封锁记录C，而C也在磁盘块中，由于磁盘块正在封锁中，S只能等待；如果是封锁粒度是一条记录的话，就不用等待了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="死锁处理"&gt;死锁处理
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;活锁
&lt;ul&gt;
&lt;li&gt;在事务执行中，某个事务得不到锁而处于长期等待状态，这种现象称为活锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;死锁
&lt;ul&gt;
&lt;li&gt;有两个或多个事务的集合，其中每个事务Ti都在等待该集合中另外一个事务Tj释放它所需要的数据项上持有的锁，结果任何一个事务都无法继续执行，这种现象称为死锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;死锁发生的条件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;互斥条件：事务请求对资源的独占控制。&lt;/li&gt;
&lt;li&gt;等待条件：事务已持有分配给它的资源，又去申请并等待别的资源。&lt;/li&gt;
&lt;li&gt;非抢占条件：直到资源被持有它的事务释放前，不可能将资源强制从持有它的事务夺去。&lt;/li&gt;
&lt;li&gt;循环等待条件：存在事务互相等待的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;死锁分类&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;局部死锁：仅在一个站点上发生的死锁。&lt;/li&gt;
&lt;li&gt;全局死锁：涉及多个站点的死锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;在分布式数据库中数据冗余增加引起死锁的机会&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决死锁&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过撤销一个或多个引起死锁的事务，打破全局等待图中的死锁回路。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一般考虑的因素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;撤销年轻的事务；&lt;/li&gt;
&lt;li&gt;撤销占有较少资源的事务；&lt;/li&gt;
&lt;li&gt;撤销具有最短运行时间的事务；&lt;/li&gt;
&lt;li&gt;撤销具有最长运行时间的事务；&lt;/li&gt;
&lt;li&gt;撤销包含在多个回路中的事务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;受害者选择算法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="死锁预防"&gt;死锁预防
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进行预防性测试，使引起死锁的必要条件不成立&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一般预防的方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对事务进行排序（标识符顺序或时间顺序），然后施加某种预防协议。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;预防协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;等待-死亡协议（非占先权法）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;伤害-等待协议（占先权法）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/W4sV0Ghs/image-20241107115530185.png"
loading="lazy"
alt="image-20241107115530185"
&gt;&lt;/p&gt;
&lt;h3 id="时标"&gt;时标
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基本思想&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给每个事务赋予一个唯一的时标，事务的执行等效于按时标次序串行执行。如果发生冲突，则通过撤消并重启一个事务来解决的。事务重新启动时，则赋予新的时标。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时标 (Time Stamp)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用来&lt;strong&gt;唯一识别&lt;/strong&gt;每个事务并允许排序的标识。&lt;/li&gt;
&lt;li&gt;时标具有唯一性和单调性。&lt;/li&gt;
&lt;li&gt;可以采用计数器或系统时钟来产生时标。&lt;/li&gt;
&lt;li&gt;在分布式系统中有&lt;strong&gt;全局时标和本地时标之分&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时标的排序规则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若两个冲突操作Qij与Qkl，分别属于事务Ti与Tk，Qij在Qkl之前执行当且仅当tS(Ti) &amp;lt; tS(Tk)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时标法的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点是没有死锁，不必设置锁。&lt;/li&gt;
&lt;li&gt;封锁和死锁检测引起的通信开销也避免了。&lt;/li&gt;
&lt;li&gt;但要求时标在全系统中是唯一的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="基本时标法"&gt;基本时标法
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基本规则:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个事务在本站点开始时赋予一个全局唯一时标；&lt;/li&gt;
&lt;li&gt;事务的每个读操作或写操作都具有该事务的时标；&lt;/li&gt;
&lt;li&gt;数据库中的每个数据项X都有读操作的最大时标&lt;strong&gt;RTM(X)&lt;strong&gt;和写操作的最大时标&lt;/strong&gt;WTM(X)&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;若事务T读X，其时标TS&amp;lt;WTM(X)，则拒绝读操作，并用新的时标重新启动；否则执行读操作，并将RTM(X)置为：max(RTM(X), TS)；&lt;/li&gt;
&lt;li&gt;若事务T写X，TS &amp;lt; RTM(X) 或 TS &amp;lt; WTM(X)，拒绝写操作，并用新的时标重新启动，否则执行写并置WTM(X)为TS。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基本时标法的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保所有有冲突的操作，在所有站点上，都是按事务的时标顺序执行；&lt;/li&gt;
&lt;li&gt;不会产生死锁，可保证调度的可串行化；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重启次数可能很多&lt;/strong&gt;，可能导致事务最终以串行方式执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="保守时标法"&gt;保守时标法
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基本思想&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过缓冲年轻的操作，直至年长的操作执行完成，因此操作不会被拒绝，事务也绝不被重启动。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基本规则&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个事务只在一个站点执行，不激活远程进程，仅能向远程站点发送读/写请求；&lt;/li&gt;
&lt;li&gt;每个站点必须按时标的顺序发送读/写数据的请求，各个站点按时标顺序接收来自不同站点的全部读/写请求。&lt;/li&gt;
&lt;li&gt;每个站点都为其他各个站点发来的读/写操作开辟一个缓冲区，把接收到的读/写操作分别保存在相应的缓冲区中。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;假定某个站点k上，各个缓冲区队列都已不为空，即每个站点都已向它至少发送了一个读和一个写操作，就停止接收，处理在缓冲区中的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;假定站点i至少有一个缓冲的读和缓冲的写来自网中其他站点，根据规则2，站点i知道没有年老的请求来自其他站点（因为按序接收，所以不可能有比此更年老的请求到来，年老的比年轻的先到）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保守时标法的执行过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在各个站点的缓冲队列中存放了需要在该站点上执行的读/写操作。操作将严格按照时标的顺序执行：
&lt;ol&gt;
&lt;li&gt;对于本站点上需要执行的读操作R，如果有某个写操作W被缓冲，且TS(R)&amp;gt;TS(W)，则R被送入等待队列直到写操作执行后R才能执行；&lt;/li&gt;
&lt;li&gt;对于本站点上需要执行的写操作W，如果有某个读操作R被缓冲，且TS(W)&amp;gt;TS(R)，或有某个写操作W2被缓冲，且TS(W)&amp;gt;TS(W2)，则W进入等待队列直到缓冲区中的读/写操作被执行后W才能执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存在问题和解决方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果一个站点从来不向某个站点发送操作的话，那么执行过程中的假定就不符合，操作就无法进行。解决办法是，周期性的发送带有时标的空操作。&lt;/li&gt;
&lt;li&gt;此方法要求网络上所有站点都连通，这在大系统中很难办到。为避免不必要的通信，可对无读写操作请求的站点，发送一个时标很大的空操作。&lt;/li&gt;
&lt;li&gt;此方法过分保守，一律按照时序来进行，其中包括了不冲突的操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="多版本"&gt;多版本
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基本思想&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multiversion concurrency control (MVCC)
&lt;ul&gt;
&lt;li&gt;维护一个数据项的多个版本。&lt;/li&gt;
&lt;li&gt;写数据项时，写入一个新版本，老版本依然保存。&lt;/li&gt;
&lt;li&gt;读数据时，系统选择一个合适的版本，以维护当前执行调度的可串行性。&lt;/li&gt;
&lt;li&gt;系统可以接受在其他技术中被拒绝的一些读操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要更多的存储来维持数据库数据项的多个版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于时标排序的多版本技术。&lt;/li&gt;
&lt;li&gt;基于两阶段封锁的多版本技术。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="乐观法"&gt;乐观法
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基本思想
&lt;ul&gt;
&lt;li&gt;假定事务冲突很少，事务先对数据进行读写操作，所有操作执行完后进行验证：事务是否违反可串行性，如果没有则提交；否则事务撤消，重新开始。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基于以下事实
&lt;ul&gt;
&lt;li&gt;冲突的事务是少数（查询为主的系统少于5%）。&lt;/li&gt;
&lt;li&gt;大多数事务可以不受干扰地执行完毕。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;乐观并发控制协议的三个阶段：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;读段/计算&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在数据对象的局部副本上执行事务，这时其他事务不能存取此副本。事务从DB读数据，执行计算，并且确定写集数据项的新值。写操作总是对局部副本，仅当验证通过后，在事务结束处，才将其写入DB。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;验证段&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;检验并发事务的可串行性，该阶段验证修改应用是否引起完整性（一致性）的丢失，验证阶段通过，才能进入写段，否则事务重启动。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;写段/提交&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;验证阶段通过，则把事务的更新应用于数据库，对数据进行更新；否则，忽略所有更新，并重新开始该事务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/SXktfW4C/image-20241107115643609.png"
loading="lazy"
alt="image-20241107115643609"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;版本号机制——乐观锁的实现
&lt;ul&gt;
&lt;li&gt;数据项加上一个版本号(x, v)，当数据被修改时，v值会加1。&lt;/li&gt;
&lt;li&gt;更新事务T在读取数据的同时也会读取v值，在提交更新时，若刚才读取到的v值等于x当前的v值才更新，否则重试更新操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>【图像与视频处理】笔记</title><link>https://dyhes.github.io/p/%E5%9B%BE%E5%83%8F%E4%B8%8E%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/%E5%9B%BE%E5%83%8F%E4%B8%8E%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/</guid><description>&lt;p&gt;&lt;strong&gt;Image Restoration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The task of image restoration is to &lt;strong&gt;recover&lt;/strong&gt; a clean image from its &lt;strong&gt;corrupted&lt;/strong&gt; observation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Low-Light Image Enhancement&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gamma correction&lt;/strong&gt; use a power law formula to images for pixel-wise enhancement with $I_{out} = A×I_{in}^γ$&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction
&lt;/h2&gt;&lt;h3 id="image-types"&gt;Image Types
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reflection Images&lt;/p&gt;
&lt;p&gt;sense radiation that has been reflected from the &lt;strong&gt;surfaces&lt;/strong&gt; of objects. The information extracted is primarily an object’s shape, texture, color, reflectivity,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-most visible optical images，radar images, sonar images, electron microscope images.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Emission Images&lt;/p&gt;
&lt;p&gt;the objects being imaged are &lt;strong&gt;self-luminous&lt;/strong&gt;. The information may reveal the &lt;strong&gt;internal structure&lt;/strong&gt; of an object.&lt;/p&gt;
&lt;p&gt;thermal or infrared images, MRI images&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Absorption Images&lt;/p&gt;
&lt;p&gt;yield information about the internal structure of objects. The radiation passes through objects and is &lt;strong&gt;absorbed or partially absorbed&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;X-ray images, certain types of sonic images.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="sampling-image"&gt;Sampling Image
&lt;/h4&gt;&lt;p&gt;Sampling is the process of converting a continuous-&lt;strong&gt;space&lt;/strong&gt; (or continuous-space/time) signal into a discrete-space (or discrete-space/time) signal.&lt;/p&gt;
&lt;p&gt;The number of rows and columns in a sampled image is also often selected to be a &lt;strong&gt;power of 2&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to simplify &lt;strong&gt;computer addressing&lt;/strong&gt; of the samples&lt;/li&gt;
&lt;li&gt;to make algorithms, such as discrete Fourier transforms, efficient&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Images are nearly always &lt;strong&gt;rectangular&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id="quantization-image"&gt;Quantization Image
&lt;/h4&gt;&lt;p&gt;Quantization is the process of converting a continuous-&lt;strong&gt;valued&lt;/strong&gt; image, which has a continuous range (set of values that it can take), into a discrete-valued image, which has a discrete range.&lt;/p&gt;
&lt;h5 id="gray-scale"&gt;Gray Scale
&lt;/h5&gt;&lt;p&gt;The gray level of a quantized image pixel is one of a finite set of numbers, which is the gray level range $(0, 2^B-1)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B=1(binary images);&lt;/li&gt;
&lt;li&gt;B=8, Each gray level occupies a byte, 8-bit depths&lt;/li&gt;
&lt;li&gt;color images (Multivalued images) require 24 bits per pixel&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="color-image"&gt;Color Image
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;RGB(Red, Green, Blue), color cameras, display systems&lt;/li&gt;
&lt;li&gt;YIQ(luminance, in-phase chromatic, quadratic chromatic), broadcast television&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="storage"&gt;Storage
&lt;/h5&gt;&lt;p&gt;The storage required for a single monochromatic digital still image that has (row x column) dimensions N * M and B bits of gray-level resolution is &lt;strong&gt;N * M * B&lt;/strong&gt; bits.&lt;/p&gt;
&lt;h3 id="video"&gt;Video
&lt;/h3&gt;&lt;p&gt;Video quantization is &lt;strong&gt;essentially&lt;/strong&gt; the same as image quantization. However, video sampling involves taking samples along a new and different (time) dimension.&lt;/p&gt;
&lt;p&gt;The human eye asks the refresh rate more than &lt;strong&gt;50&lt;/strong&gt; frames/s&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Analog video systems&lt;/strong&gt;, such as television and monitors, represent video as a &lt;strong&gt;one-dimensional electrical signal&lt;/strong&gt; and Progressively scan line by line from top to bottom.&lt;/p&gt;
&lt;p&gt;For High-resolution computer monitors , the scan rate is 1/72 s/frame, and the refresh rate &lt;strong&gt;72&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Digital video is obtained either by sampling an analog video signal V(t), or by directly sampling the 3D space-time intensity distribution that is incident on a sensor.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2D spatial intensity array&lt;/li&gt;
&lt;li&gt;3D space-time array&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The data volume of digital video is usually described in terms of &lt;strong&gt;bandwidth&lt;/strong&gt; or bit rate (Kilo-/Mega-/Giga- bits/s, bps). 100Mbps, &lt;strong&gt;Cable&lt;/strong&gt;:1Gbps&lt;/p&gt;
&lt;p&gt;Digital video can be &lt;strong&gt;compressed&lt;/strong&gt; very effectively because of the redundancy inherent in the data, and because of an increased understanding of what components in the video stream are actually visible&lt;/p&gt;
&lt;h2 id="basic-image-processing"&gt;Basic Image Processing
&lt;/h2&gt;&lt;h3 id="notion"&gt;Notion
&lt;/h3&gt;&lt;p&gt;Only monochromatic images are considered.&lt;/p&gt;
&lt;p&gt;Image f(n), n=(n1, n2), N * M (rows, columns), n1=0&lt;del&gt;N-1, n2=0&lt;/del&gt;M-1.&lt;/p&gt;
&lt;p&gt;The image f(n) is assumed to be quantized to K levels {0, . . . , K - 1).&lt;/p&gt;
&lt;h3 id="basic-gray-level-image-processing"&gt;Basic Gray-Level Image Processing
&lt;/h3&gt;&lt;h4 id="operations-type"&gt;Operations Type
&lt;/h4&gt;&lt;h5 id="point-operation"&gt;Point Operation
&lt;/h5&gt;&lt;p&gt;Point operations are defined as functions of pixel intensity only, &lt;strong&gt;not considering spatial information&lt;/strong&gt;, such as a pixel’s location and the values of its neighbors&lt;/p&gt;
&lt;h5 id="arithmetic-operation"&gt;Arithmetic operation
&lt;/h5&gt;&lt;p&gt;Arithmetic operations between images of the &lt;strong&gt;same spatial dimensions&lt;/strong&gt;, not considering spatial information, for noise reduction and change or motion detection.&lt;/p&gt;
&lt;h5 id="geometric-operation"&gt;Geometric operation
&lt;/h5&gt;&lt;p&gt;Geometric operations are functions of &lt;strong&gt;spatial position only&lt;/strong&gt;, such as image translation, rotation, distortion, bend or video morph.&lt;/p&gt;
&lt;h4 id="image-histogram"&gt;Image Histogram
&lt;/h4&gt;&lt;p&gt;The histogram $H_f$ of the digital image $f$ is a plot or graph of the &lt;strong&gt;frequency of occurrence&lt;/strong&gt; of each gray level in $f$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The histogram $H_f$ contains &lt;strong&gt;no spatial&lt;/strong&gt; information.&lt;/li&gt;
&lt;li&gt;The histogram supplies a method of determining an image’s &lt;strong&gt;gray-level distribution&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="aod"&gt;AOD
&lt;/h5&gt;&lt;p&gt;AOD (average optical density) is the basic measure of an image’s &lt;strong&gt;overall average brightness&lt;/strong&gt; or gray level.&lt;/p&gt;
&lt;p&gt;AOD is a meter for estimating the &lt;strong&gt;center&lt;/strong&gt; of an image’s gray-level distribution.
$$
AOD(f)=\frac{1}{MN}\sum_{n_1=0}^{N-1}\sum_{n_2=0}^{M-1}f(n_1,n_2)
\newline=\frac{1}{MN}\sum_{k=0}^{K-1}kH_f(k)
$$&lt;/p&gt;
&lt;h5 id="-linear-point-operation"&gt;# linear Point Operation
&lt;/h5&gt;&lt;h5 id="additive-image-offset"&gt;Additive Image Offset
&lt;/h5&gt;&lt;p&gt;$$
g(n)=f(n)+L
\newline
h_g(k) = h_f(k-L)
$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Calibrate&lt;/strong&gt; images to a given average brightness level.
$$
g(n)=f(n)-L+\frac{K}{2}
$$&lt;/p&gt;
&lt;h5 id="multiplicative-image-scaling"&gt;Multiplicative Image Scaling
&lt;/h5&gt;&lt;p&gt;$$
g(n)=\lfloor Pf(n)+0.5\rfloor
$$&lt;/p&gt;
&lt;p&gt;multiply and rounding&lt;/p&gt;
&lt;h5 id="image-negative"&gt;Image Negative
&lt;/h5&gt;&lt;p&gt;$$
g(n)=K-1 - f(n)
$$&lt;/p&gt;
&lt;h5 id="full-scale-histogram-stretch"&gt;Full-scale Histogram Stretch
&lt;/h5&gt;&lt;p&gt;full-scale histogram stretch, or contrast stretch, expands the image histogram to &lt;strong&gt;fill the entire available gray-scale range&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/XkJNw1Sf/image-20240927125203449.png"
loading="lazy"
alt="image-20240927125203449"
&gt;&lt;/p&gt;
&lt;h4 id="nonlinear-point-operations"&gt;Nonlinear Point Operations
&lt;/h4&gt;&lt;h5 id="logarithmic-point-operation"&gt;Logarithmic Point Operation
&lt;/h5&gt;&lt;p&gt;$$
g(n)=FSHS(\lfloor log(1 + f(n)) \rfloor)
$$&lt;/p&gt;
&lt;p&gt;Larger (brighter) gray levels are compressed much more severely than smaller gray levels.&lt;/p&gt;
&lt;p&gt;dim objects in the original are now allocated a much larger percentage of the grayscale range, hence &lt;strong&gt;improving their visibility&lt;/strong&gt;.&lt;/p&gt;
&lt;h5 id="histogram-equalization"&gt;Histogram Equalization
&lt;/h5&gt;&lt;p&gt;Histogram equalization, or &lt;strong&gt;histogram flattening&lt;/strong&gt;, to make an image fill the available gray-scale range, and be &lt;strong&gt;uniformly distributed&lt;/strong&gt; over that range.&lt;/p&gt;
&lt;p&gt;The idealized goal is a flat histogram. An image with a perfectly flat histogram contains the largest possible amount of information or complexity.&lt;/p&gt;
&lt;p&gt;Steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;get histogram of image&lt;/p&gt;
&lt;p&gt;$H_f(k), k \in [0, K-1]$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;get relative frequency (normalized histogram)&lt;/p&gt;
&lt;p&gt;$p_f(k) = \frac{H_f(k)}{MN}, k \in [0, K-1]$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;get absolute frequency (cumulative histogram)&lt;/p&gt;
&lt;p&gt;$P_f(k) = \sum_{r=0}^kp_f(r), k \in [0, K-1]$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;replace k with k'&lt;/p&gt;
&lt;p&gt;$k^{&amp;rsquo;}=FSHS[P_f(k)], k \in [0, K-1]$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;eg.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/MyCxH6Gq/image-20241003175425324.png"
loading="lazy"
alt="image-20241003175425324"
&gt;&lt;/p&gt;
&lt;h4 id="arithmetic-operations-between-images"&gt;Arithmetic Operations between Images
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Image sum&lt;/li&gt;
&lt;li&gt;image difference&lt;/li&gt;
&lt;li&gt;Pointwise image product&lt;/li&gt;
&lt;li&gt;Pointwise image quotient&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="geometric-image-operations"&gt;Geometric Image Operations
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Image Translation&lt;/li&gt;
&lt;li&gt;Image Rotation&lt;/li&gt;
&lt;li&gt;Image Zoom
&lt;ul&gt;
&lt;li&gt;nearest neighbor interpolation&lt;/li&gt;
&lt;li&gt;bilinear interpolation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="basic-binary-image-processing"&gt;Basic Binary Image Processing
&lt;/h3&gt;&lt;h4 id="image-thresholding"&gt;Image Thresholding
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/s9MCgHck/image-20241003183157784.png"
loading="lazy"
alt="image-20241003183157784"
&gt;&lt;/p&gt;
&lt;p&gt;Thresholding is most commonly and effectively applied to images that can be characterized as having &lt;strong&gt;bimodal&lt;/strong&gt; histograms.&lt;/p&gt;
&lt;h4 id="region-labeling"&gt;Region Labeling
&lt;/h4&gt;&lt;p&gt;A simple but powerful tool for identifying and labeling the various objects in a binary image is a process called region labeling, blob coloring, or connected component identification.&lt;/p&gt;
&lt;p&gt;It is useful since once they are individually labeled, the objects can be separately manipulated, displayed or modified&lt;/p&gt;
&lt;h4 id="region-counting"&gt;Region Counting
&lt;/h4&gt;&lt;p&gt;A simple application of region labeling is the measurement of object area.&lt;/p&gt;
&lt;p&gt;This can be accomplished by defining a vector c with elements c(k) that are the pixel area (pixel count) of region k&lt;/p&gt;
&lt;h4 id="minor-region-removal"&gt;Minor Region Removal
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/Y4FHKkKf/image-20241003185339142.png"
loading="lazy"
alt="image-20241003185339142"
&gt;&lt;/p&gt;
&lt;h4 id="logical-operations"&gt;Logical Operations
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NOT&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AND&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OR&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;XOR&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MAJ&lt;/p&gt;
&lt;p&gt;returns value &amp;ldquo;1&amp;rdquo; if and only if a majority of (xl , . . . , xn ) equal &amp;ldquo;1&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="dilation-filter"&gt;dilation filter
&lt;/h5&gt;&lt;p&gt;$$
g(n)=OR[Bf(n)]
$$&lt;/p&gt;
&lt;p&gt;expands the foreground, removing bays of too-narrow width, and removing small holes&lt;/p&gt;
&lt;h5 id="erosion-filter"&gt;erosion filter
&lt;/h5&gt;&lt;p&gt;shrinks the foreground, removes fingers of too-narrow width, removes &amp;ldquo;l&amp;rdquo;-valued small objects.
$$
g(n)=AND[Bf(n)]
$$&lt;/p&gt;
&lt;h5 id="relationship"&gt;relationship
&lt;/h5&gt;&lt;p&gt;$$
dilation(f,B)=NOT(erosion[NOT(f),B])
\newline
erosion(f,B)=NOT(dilation[NOT(f),B])
$$&lt;/p&gt;
&lt;p&gt;Erode and dilate filters have the effect of changing the sizes of objects, as well as &lt;strong&gt;smoothing&lt;/strong&gt; them.&lt;/p&gt;
&lt;p&gt;Erode and dilate shrink and expand the sizes of &amp;ldquo;l&amp;rdquo;- valued objects in a binary image. However, they are &lt;strong&gt;not inverse&lt;/strong&gt; operations of one another.&lt;/p&gt;
&lt;p&gt;They are approximate inverses in the sense that if they are performed &lt;strong&gt;in sequence&lt;/strong&gt; on the same image with the same window B, and the object and holes that are not eliminated will be returned to their &lt;strong&gt;approximate&lt;/strong&gt; sizes.&lt;/p&gt;
&lt;h5 id="open-filter-and-close-filter"&gt;open filter and close filter
&lt;/h5&gt;&lt;p&gt;size-preserving smoothing morphologic operators
$$
open(f,B)=erosion[dilation(f,B),B]
\newline
close(f,B)=dilation[erosion(f,B),B]
$$
The open and close filters are &lt;strong&gt;biased&lt;/strong&gt; filters in the sense that they remove one type of &amp;ldquo;noise&amp;rdquo; (either extraneous WHITE or BLACK features), but not both.&lt;/p&gt;
&lt;p&gt;It is worth noting that the close and open filters are again in fact, the same filters, in the dual sense.
$$
open(f,B)=NOT(close[NOT(f),B])
\newline
close(f,B)=NOT(open[NOT(f),B])
$$&lt;/p&gt;
&lt;h5 id="close-open-filter-and-open-close-filter"&gt;close-open filter and open-close filter
&lt;/h5&gt;&lt;p&gt;unbiased smoothing morphologic operators
$$
close-open(f,B)=close[open(f,B),B]
\newline
open-close(f,B)=open[close(f,B),B]
$$
If the filters are properly alternated as in the construction of the close-open and open-close filters, then the dual filters become increasingly similar. However, the &lt;strong&gt;smoothing&lt;/strong&gt; power can most easily be increased by simply taking the window size to be larger.&lt;/p&gt;
&lt;p&gt;Once again, the close-open and open-close filters are dual filters &lt;strong&gt;under complementation&lt;/strong&gt;.&lt;/p&gt;
&lt;h5 id="majority-filter"&gt;majority filter
&lt;/h5&gt;&lt;p&gt;binary median filter, filter has &lt;strong&gt;similar&lt;/strong&gt; attributes as the close-open and open-close filters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it removes too-small objects, holes, gaps, bays and peninsulas (both “1”-valued and “0”-valued small features)&lt;/li&gt;
&lt;li&gt;it also does not generally change the size of objects or of background.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The majority filter is &lt;strong&gt;less biased&lt;/strong&gt; than any of the other morphologic filters, since it does not have an initial erode or dilate operation to set the bias.&lt;/p&gt;
&lt;p&gt;The majority filter is a &lt;strong&gt;power, unbiased shape smoother&lt;/strong&gt;. However, for a given filter size, it &lt;strong&gt;does not have the same degree of smoothing power&lt;/strong&gt; as close-open or open-close.&lt;/p&gt;
&lt;h5 id="morphologic-boundary-detection"&gt;Morphologic Boundary Detection
&lt;/h5&gt;&lt;p&gt;$$
boundary(f,B)=XOR[f,dilation(f,B)]
$$&lt;/p&gt;
&lt;h4 id="representation--compression"&gt;Representation &amp;amp; Compression
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;run-length coding seeks to &lt;strong&gt;exploit the redundancy&lt;/strong&gt; of long run lengths or runs of constant value &amp;ldquo;1&amp;rdquo; or &amp;ldquo;0&amp;rdquo; in the binary data. – for the coding/compression of binary images containing large areas of constant value &amp;ldquo;1&amp;rdquo; and &amp;ldquo;0&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;chain coding, is appropriate for binary images containing binary &lt;strong&gt;contours&lt;/strong&gt;. – The chain code is also an information-rich, highly manipulable representation for shape analysis&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="linear-image-filter"&gt;Linear Image Filter
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Linear system theory and linear filtering&lt;/strong&gt; play a central role in digital image and video processing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;modifying, improving, or representing digital visual data are expressed in terms of linear systems concepts.&lt;/li&gt;
&lt;li&gt;Linear filters are used for image/video contrast improvement, denoising, and sharpening, target matching and feature enhancement&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="definitions"&gt;Definitions
&lt;/h3&gt;&lt;h4 id="linear-system"&gt;Linear System
&lt;/h4&gt;&lt;p&gt;with the properties of superposition and homogeneity.
$$
x_1(t)+x_2(t)\to y_1(t)+y_2(t) \space for \space any \space x_1(t), x_2(t)
\newline
ax_1(t)\to ay_1(t) \space for \space any \space a
$$&lt;/p&gt;
&lt;h4 id="linear-time-invariance-lti-system"&gt;Linear time invariance (LTI) system
&lt;/h4&gt;&lt;p&gt;$$
x(t)\to y(t)
\newline
x(t-T)\to y(t-T)
$$&lt;/p&gt;
&lt;h4 id="two-dimensional-system"&gt;Two dimensional System
&lt;/h4&gt;&lt;p&gt;A two dimensional System is a process of image transformation.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/DfNVKHdb/image-20241003203638563.png"
loading="lazy"
alt="image-20241003203638563"
&gt;&lt;/p&gt;
&lt;p&gt;Two-dimensional system is linear and shift invariance ( LSI )&lt;/p&gt;
&lt;p&gt;The system L is &lt;strong&gt;linear&lt;/strong&gt; if&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for any $g_1(m,n)=L[f_1(m,n)]$ and $g_2(m,n)=L[f_2(m,n)]$, $ag_1(m,n)+bg_2(m,n) = L[af_1(m,n)+bf_2(m,n)]$ for any a and b&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The system L is shift invariance if&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for any( p , q) $g(m-p,n-q)=L[f(m-p,n-q)]$&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="filtering-system"&gt;Filtering System
&lt;/h4&gt;&lt;p&gt;A filtering system is a system that &lt;strong&gt;removes redundant or unwanted information&lt;/strong&gt; from an information stream.&lt;/p&gt;
&lt;p&gt;Linear filtering system, which means the filtering process between the input and output is &lt;strong&gt;linear&lt;/strong&gt; operation.&lt;/p&gt;
&lt;p&gt;In image processing, the filtering process represents the process of image &lt;strong&gt;enhancement&lt;/strong&gt;, including the image/video contrast improvement, denoising, and sharpening, target matching and feature enhancement.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linear filtering in spatial domain&lt;/li&gt;
&lt;li&gt;linear filtering in frequency domain&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;linear image enhancement – means a process of smoothing irregularities or noise that has somehow corrupted the image, while modifying the original image information as little as possible. – Sharping the image to highlight the details&lt;/p&gt;
&lt;h4 id="linear-image-enhancement"&gt;linear image enhancement
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;means a process of &lt;strong&gt;smoothing irregularities or noise&lt;/strong&gt; that has somehow corrupted the image, while modifying the original image information as &lt;strong&gt;little&lt;/strong&gt; as possible.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sharping&lt;/strong&gt; the image to highlight the details&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="type"&gt;Type
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;Spatial domain, operating directly on the pixels of an image&lt;/li&gt;
&lt;li&gt;Frequency domain, operating on the &lt;strong&gt;Fourier transform&lt;/strong&gt; of an image, rather than on the image itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="linear-spatial-filter"&gt;linear spatial filter
&lt;/h3&gt;&lt;p&gt;Filtering operations that are performed &lt;strong&gt;directly on the pixels&lt;/strong&gt; of an image, and the computations performed on the pixels of the neighborhoods are linear.&lt;/p&gt;
&lt;p&gt;The linear operations consist of &lt;strong&gt;multiplying&lt;/strong&gt; each pixel in the neighborhood by a corresponding coefficient and &lt;strong&gt;summing&lt;/strong&gt; the results to obtain the response at each point.&lt;/p&gt;
&lt;p&gt;If the neighborhood is of size m×n, m×n coefficients are required, they are arranged as a &lt;strong&gt;matrix&lt;/strong&gt;, called a filter, mask, filter mask, kernel, template, or window.&lt;/p&gt;
&lt;h4 id="moving-average-filter"&gt;Moving Average Filter
&lt;/h4&gt;&lt;p&gt;Its output at a given position is the average of all pixels covered by the filter, thus it is used to &lt;strong&gt;blur&lt;/strong&gt; the image or to reduce the noise.&lt;/p&gt;
&lt;h5 id="noise-reduction"&gt;Noise Reduction
&lt;/h5&gt;&lt;p&gt;The noise is usually modeled as an additive noise or as a multiplicative noise. We will assume a zero-mean additive white noise model.&lt;/p&gt;
&lt;p&gt;We model the observed noisy image f as a sum of an original image o and a noise image q, $f=o+q$&lt;/p&gt;
&lt;p&gt;The goal of enhancement is to recover an image g that resembles o as closely as possible by reducing q&lt;/p&gt;
&lt;p&gt;Given an image f to be filtered and a window (filter mask) B, then the moving average-filtered image g is given by
$$
g(n)=AVG[Bf(n)]
$$
Since the average is a linear operation, it is also true that
$$
g(n)=AVG[Bo(n)]+AVG[Bq(n)]
$$
Because the noise process q is assumed to be zero mean, then the last term will tend to zero as the filter window is increased.&lt;/p&gt;
&lt;p&gt;Thus, the moving average filter has the desirable effect of reducing zero-mean image noise toward zero.&lt;/p&gt;
&lt;p&gt;However, the filter also affects the original image information. The moving average filter will &lt;strong&gt;blur&lt;/strong&gt; the image, especially as the window span is increased.&lt;/p&gt;
&lt;p&gt;Balancing this tradeoff is often a difficult task.&lt;/p&gt;
&lt;h4 id="sharping-spatial-filter"&gt;Sharping spatial filter
&lt;/h4&gt;&lt;p&gt;The principal objective of sharpening is to &lt;strong&gt;highlight transitions in intensity&lt;/strong&gt;. Highlight the details, enhance the blurred image&lt;/p&gt;
&lt;p&gt;Image blurring can be accomplished in the spatial domain by pixel averaging in a neighborhood. Because averaging is analogous to integration, it is logical to conclude that sharpening can be accomplished by &lt;strong&gt;spatial differentiation&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Fundamentally, the strength of response of a &lt;strong&gt;derivative operator&lt;/strong&gt; is proportional to the degree of intensity discontinuity of the image at the point at which the operator is applied.&lt;/p&gt;
&lt;p&gt;Thus, image differentiation enhances edges and other discontinuities (such as noise) and deemphasizes areas with slowly varying intensities.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/dJ3FyF1g/image-20241003213931612.png"
loading="lazy"
alt="image-20241003213931612"
&gt;&lt;/p&gt;
&lt;p&gt;Second-order derivative enhances fine detail much better than the first-order derivates.&lt;/p&gt;
&lt;h5 id="the-laplacian"&gt;The Laplacian
&lt;/h5&gt;&lt;p&gt;Isotropic filters are &lt;strong&gt;rotation invariant&lt;/strong&gt;, in this sense that rotating the image and then applying the filter gives the same result as applying the filter to the image first and then rotating the result.&lt;/p&gt;
&lt;p&gt;The simplest isotropic derivative operator is the Laplacian.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/TBPKC90Y/image-20241003214431623.png"
loading="lazy"
alt="image-20241003214431623"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/VYm8v9K1/image-20241003214520351.png"
loading="lazy"
alt="image-20241003214520351"
&gt;&lt;/p&gt;
&lt;p&gt;If we need to sharping an image while preserving the background features, we can simply &lt;strong&gt;add&lt;/strong&gt; the Laplacian image to the original.&lt;/p&gt;
&lt;p&gt;Laplacian contains both positive and negative values, and all the negative values are &lt;strong&gt;clipped at 0&lt;/strong&gt; by the display.&lt;/p&gt;
&lt;p&gt;Thus it need to be scaled, a typical way is to add to it its minimum value to bring the new minimum to zero and then scale the result to the full[0, L-1] intensity range.&lt;/p&gt;
&lt;h3 id="linear-frequency-filter"&gt;Linear frequency filter
&lt;/h3&gt;&lt;p&gt;In frequency domain, the operations is performed on the &lt;strong&gt;Fourier transform&lt;/strong&gt; of an image.&lt;/p&gt;
&lt;p&gt;Despite the &lt;strong&gt;computational&lt;/strong&gt; efficiency of the spatial domain techniques, some image processing tasks are more easier or more meaningful to implement in the frequency domain.&lt;/p&gt;
&lt;h4 id="definitions-1"&gt;Definitions
&lt;/h4&gt;&lt;h5 id="impulse-response"&gt;Impulse Response
&lt;/h5&gt;&lt;p&gt;the &lt;strong&gt;output&lt;/strong&gt; of a system when its input is &lt;strong&gt;unit impulse function&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For a discrete-time systems, impulse response is generally expressed in &lt;strong&gt;sequence h[n&lt;/strong&gt;]. The corresponding discrete input signal, i.e. the unit impulse function satisfies Kronecker delta function.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/dsqbmwZF/image-20241004141848099.png"
loading="lazy"
alt="image-20241004141848099"
&gt;&lt;/p&gt;
&lt;h5 id="two-dimensional-impulse-function"&gt;Two-dimensional impulse function
&lt;/h5&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/vC8BmGNY/image-20241004142131257.png"
loading="lazy"
alt="image-20241004142131257"
&gt;&lt;/p&gt;
&lt;p&gt;The impulse response of a two-dimensional input-output system L is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the response of system L, at spatial position (m, n), to an impulse located at spatial position ( p , q)&lt;/li&gt;
&lt;li&gt;if the system L is space invariant, then $h(m-p,n-q) = L[\delta(m-p,n-q)]$&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="discrete-space-image"&gt;Discrete-space image
&lt;/h5&gt;&lt;p&gt;Any discrete-space image f may be expressed in terms of the impulse function.
$$
f(m,n) = \sum_{p=-\infty}^\infty \sum_{q=-\infty}^\infty f(m-p,n-q)\delta(p,q)
\newline= \sum_{p=-\infty}^\infty \sum_{q=-\infty}^\infty f(p,q)\delta(m-p,n-q)
$$&lt;/p&gt;
&lt;h5 id="frequency-response"&gt;Frequency Response
&lt;/h5&gt;&lt;p&gt;The discrete-space Fourier transform (&lt;strong&gt;DSFT&lt;/strong&gt;) of the system &lt;strong&gt;impulse response&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;According to the Fourier transform, the convolution in the space domain equals the product in the frequency domain.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/67PPbzg2/image-20241004144353221.png"
loading="lazy"
alt="image-20241004144353221"
&gt;
$$
g(m,n) = f(m,n)*h(m,n)
$$
The output of the system L can be expressed in terms of the frequency response by
$$
G(u,v) = F(u,v)H(u,v)
$$&lt;/p&gt;
&lt;h5 id="principal"&gt;Principal
&lt;/h5&gt;&lt;p&gt;Images we see are all in spatial domain, we can’t recognize the images in frequency domain, so if we need to process the image in frequency domain, we need&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transform the image to the frequency domain using Fourier transform&lt;/li&gt;
&lt;li&gt;Filter in the frequency domain&lt;/li&gt;
&lt;li&gt;Transform the image back to the spatial domain using inverse Fourier transform&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="type-1"&gt;Type
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;low-pass&lt;/li&gt;
&lt;li&gt;bandpass&lt;/li&gt;
&lt;li&gt;high-pass&lt;/li&gt;
&lt;li&gt;oriented&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a given filter type, different degrees of &lt;strong&gt;smoothing (sharping)&lt;/strong&gt; can be obtained by adjusting the filter bandwidth.&lt;/p&gt;
&lt;p&gt;A narrower bandwidth low-pass filter will reject more of the high-frequency noise – but it may also degrade the image content by attenuating important high-frequency image details. This is a tradeoff that is difficult to balance.&lt;/p&gt;
&lt;h4 id="smoothing"&gt;Smoothing
&lt;/h4&gt;&lt;p&gt;Smoothing(blurring) is achieved in the frequency domain by &lt;strong&gt;high-frequency attenuation&lt;/strong&gt;(by lowpass filtering)&lt;/p&gt;
&lt;h5 id="ideal"&gt;Ideal
&lt;/h5&gt;&lt;p&gt;ideal low-pass filter (ideal LPF) was designed explicitly with no sidelobes in frequency domain by forcing the frequency response to be zero outside of a given radial cutoff frequency.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/Xx0qGXGf/image-20241004135745680.png"
loading="lazy"
alt="image-20241004135745680"
&gt;&lt;/p&gt;
&lt;p&gt;From the figure and the equation, we know that all frequencies on or inside a circle are passed without attenuation, whereas all frequencies outside the circle are completely attenuated(filtered out).&lt;/p&gt;
&lt;p&gt;The point of transition between H(u,v) = 1 and H(u,v) = 0 is called &lt;strong&gt;cutoff frequency&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;drawbacks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;truncating in the frequency domain causes &lt;strong&gt;ringing&lt;/strong&gt; in the space domain, which creates more of a problem because of the edge response of the ideal LPF.&lt;/p&gt;
&lt;h5 id="butterworth"&gt;Butterworth
&lt;/h5&gt;&lt;p&gt;The transfer function of a Butterworth lowpass filter(BLPF) of order n, and with cutoff frequency at a distance D0 from the origin.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/N6M5N817/image-20241004140738618.png"
loading="lazy"
alt="image-20241004140738618"
&gt;&lt;/p&gt;
&lt;p&gt;The cutoff frequency defines as the point for which H(u,v) is &lt;strong&gt;down to 50%&lt;/strong&gt; from its maximum value of 1.0.&lt;/p&gt;
&lt;p&gt;Unlike the ILPF, the BLPF transfer function doesn’t have a sharp discontinuity that gives a clear cutoff between passed and filtered frequencies.&lt;/p&gt;
&lt;p&gt;A BLPF of order 1 has no ringing in the spatial domain.&lt;/p&gt;
&lt;p&gt;Ringing increases as a function of filter order.&lt;/p&gt;
&lt;p&gt;BLPF of order 2 are a &lt;strong&gt;good compromise&lt;/strong&gt; between effective lowpass filtering and acceptable ringing.&lt;/p&gt;
&lt;h5 id="gaussian"&gt;Gaussian
&lt;/h5&gt;&lt;p&gt;Filter sidelobes in either the space or frequency domain contribute a &lt;strong&gt;negative effect&lt;/strong&gt; to the responses of noise-smoothing linear image enhancement filters.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Frequency domain sidelobes lead to &lt;strong&gt;noise leakage&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Space domain sidelobes lead to &lt;strong&gt;ringing artifacts&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gaussian filter is a filter with sidelobes in neither domain.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;impulse response&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/qYGfCtqg/image-20241004144757490.png"
loading="lazy"
alt="image-20241004144757490"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;frequency response&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/5hzYfPG5/image-20241004144834975.png"
loading="lazy"
alt="image-20241004144834975"
&gt;&lt;/p&gt;
&lt;h4 id="sharpening"&gt;Sharpening
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Edges and other abrupt changes&lt;/strong&gt; in intensities are associated with high- frequency components.&lt;/p&gt;
&lt;p&gt;Image sharpening can be achieved in the frequency domain by high-pass filtering – which attenuates the low frequency components without disturbing high-frequency information in the Fourier transform.&lt;/p&gt;
&lt;p&gt;A high-pass filter is obtained from a given lowpass filter using equation
$$
H_{HP}(u,v)=1-H_{LP}(u,v)
$$
That is, when low-pass filter attenuates frequencies, the high-pass filter pass them, and vice versa.&lt;/p&gt;
&lt;p&gt;If we get the result of high-pass filter, then we can enhance an image by&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/9SKN2zk/image-20241004145234159.png"
loading="lazy"
alt="image-20241004145234159"
&gt;&lt;/p&gt;
&lt;h5 id="ideal-1"&gt;Ideal
&lt;/h5&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/7N08JJQY/image-20241004145344978.png"
loading="lazy"
alt="image-20241004145344978"
&gt;&lt;/p&gt;
&lt;p&gt;The IHPF sets to zero all frequencies inside the circle, and pass all frequencies outside the circle.&lt;/p&gt;
&lt;p&gt;As ILPF, IHPF has the same ringing properties(for the truncating function in frequency domain)&lt;/p&gt;
&lt;h5 id="butterworth-1"&gt;Butterworth
&lt;/h5&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/qMz7STF3/image-20241004145431636.png"
loading="lazy"
alt="image-20241004145431636"
&gt;&lt;/p&gt;
&lt;p&gt;Butterworth high-pass filters smoother than IHPFs.&lt;/p&gt;
&lt;p&gt;As BLPF, the lower the order is, the less the effect of ringing of BHPF&lt;/p&gt;
&lt;h4 id="selective-filtering"&gt;Selective Filtering
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Filters that operate over the entire frequency rectangle are called bandreject or bandpass filters&lt;/li&gt;
&lt;li&gt;Filters that process specific bands of frequencies or small region are called notch filters&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="bandreject-filters"&gt;Bandreject filters
&lt;/h5&gt;&lt;p&gt;ideal, Butterworth, Gaussian&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/RTrvHqqL/image-20241004151540226.png"
loading="lazy"
alt="image-20241004151540226"
&gt;&lt;/p&gt;
&lt;p&gt;The bandreject filter could be used to &lt;strong&gt;reduce the cyclicity noise&lt;/strong&gt;.&lt;/p&gt;
&lt;h5 id="bandpass-filters"&gt;Bandpass filters
&lt;/h5&gt;&lt;p&gt;A bandpass filter is obtained from a bandreject in the same manner that we obtained a highpass filter from a lowpass filter.&lt;/p&gt;
&lt;h5 id="notch-filters"&gt;Notch filters
&lt;/h5&gt;&lt;p&gt;Notch filters are the most useful of the selective filters.&lt;/p&gt;
&lt;p&gt;A notch filter rejects(or passes) frequencies in a &lt;strong&gt;predefined&lt;/strong&gt; neighborhood about the center of the frequency rectangle.&lt;/p&gt;
&lt;p&gt;Notch reject filters are &lt;strong&gt;constructed as products of highpass filters&lt;/strong&gt; whose centers have been translated to the centers of the notches.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/Kcprf99d/image-20241004152558696.png"
loading="lazy"
alt="image-20241004152558696"
&gt;&lt;/p&gt;
&lt;p&gt;Notch filters also used to reduce the cyclicity noise.&lt;/p&gt;
&lt;p&gt;Although the bandreject filter also used to reduce the cyclicity noise, but it also attenuate the other part except the noise.&lt;/p&gt;
&lt;p&gt;The notch filters &lt;strong&gt;only affect the noise&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id="limitation"&gt;Limitation
&lt;/h3&gt;&lt;p&gt;The removal of broadband noise from most images by means of linear filtering is &lt;strong&gt;impossible without some degradation&lt;/strong&gt; (blurring) of the image information content.&lt;/p&gt;
&lt;p&gt;Due to the fact that complete frequency separation between signal and broadband noise is rarely practicable.&lt;/p&gt;
&lt;h2 id="nonlinear-filter"&gt;Nonlinear Filter
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Nonlinear methods effectively &lt;strong&gt;preserve edges and details&lt;/strong&gt; of images, whereas methods using linear operators tend to blur and distort them.&lt;/li&gt;
&lt;li&gt;Additionally, nonlinear image enhancement tools are &lt;strong&gt;less susceptible to noise&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="noise-model"&gt;Noise Model
&lt;/h3&gt;&lt;p&gt;The principal sources of noise in digital images arise during &lt;strong&gt;image acquisition and/or transmission&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id="white-gaussian-noise"&gt;White Gaussian noise
&lt;/h4&gt;&lt;p&gt;The probability density function is &lt;strong&gt;Gaussian&lt;/strong&gt;, and the frequency spectrum of noise is &lt;strong&gt;uniform&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Because of its mathematical tractability in both the spatial and frequency domain, Gaussian noise models are used frequently in practice.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/XqXG80C/image-20241012150735599.png"
loading="lazy"
alt="image-20241012150735599"
&gt;&lt;/p&gt;
&lt;h4 id="salt--pepper-noise"&gt;Salt &amp;amp; pepper noise
&lt;/h4&gt;&lt;p&gt;Salt &amp;amp; pepper noise also called as &lt;strong&gt;impulse&lt;/strong&gt; noise, the probability of impulse noise is given by&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/gLLfQX3v/image-20241012151600566.png"
loading="lazy"
alt="image-20241012151600566"
&gt;&lt;/p&gt;
&lt;p&gt;If b&amp;gt;a, then intensity b will appear as a light dot in image, this light dot called &lt;strong&gt;salt noise&lt;/strong&gt;, intensity a will appear as a dark dot, called &lt;strong&gt;pepper noise&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id="order-statistic-filter"&gt;Order-Statistic Filter
&lt;/h3&gt;&lt;p&gt;Order-statistic filters are nonlinear spatial filters whose response is based on ordering(ranking) the pixels contained in the image area encompassed by the filter, and then &lt;strong&gt;replacing the value of the center pixel&lt;/strong&gt; with the value determined by the ranking result.&lt;/p&gt;
&lt;h4 id="max-filter"&gt;Max Filter
&lt;/h4&gt;&lt;p&gt;This filter is useful for reducing pepper noise (dark dot). The value of the center is replaced by the max.&lt;/p&gt;
&lt;p&gt;May also remove some dark pixels from the borders of the dark objects.&lt;/p&gt;
&lt;h4 id="min-filter"&gt;Min Filter
&lt;/h4&gt;&lt;p&gt;This filter is useful for reducing salt noise (bright dot). The value of the center is replaced by the min.&lt;/p&gt;
&lt;p&gt;May also remove some white points around the border of light objects.&lt;/p&gt;
&lt;h3 id="median-smoother"&gt;Median Smoother
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/vvRXDZWW/image-20241012155324649.png"
loading="lazy"
alt="image-20241012155324649"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recursive&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Running medians can be extended to a recursive mode by replacing the “causal” input samples in the median smoother by previously derived output samples. The output of the recursive median smoother is given by&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/5WfLYzsN/image-20241012155557263.png"
loading="lazy"
alt="image-20241012155557263"
&gt;&lt;/p&gt;
&lt;p&gt;With the same amount of operations, recursive median smoothers have &lt;strong&gt;better noise attenuation capabilities&lt;/strong&gt; than their non recursive counterparts&lt;/p&gt;
&lt;p&gt;Given N samples x1 , . . , xN, the sample mean and sample median minimize the expression for p = 2 and p = 1, respectively.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/sd9BVyfx/image-20241012160006731.png"
loading="lazy"
alt="image-20241012160006731"
&gt;&lt;/p&gt;
&lt;p&gt;The sample mean is given by the sample whose &lt;strong&gt;sum of square distance&lt;/strong&gt; to all samples in the set is the &lt;strong&gt;smallest&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The median of an odd number of samples emerges as the sample whose &lt;strong&gt;sum of absolute distances&lt;/strong&gt; to all other samples in the set is the &lt;strong&gt;smallest&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The analogy between the sample mean and median extends into the statistical domain of parameter estimation,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the sample mean is the maximum likelihood (ML) estimator of location of a constant parameter in Gaussian noise.&lt;/li&gt;
&lt;li&gt;the sample median is the maximum likelihood (ML) estimator of location of a constant parameter in salt &amp;amp; pepper noise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="weighted-median-smoother"&gt;Weighted Median Smoother
&lt;/h4&gt;&lt;p&gt;Although the median is a robust estimator that possesses many optimality properties, the performance of running medians is limited by the fact that it is &lt;strong&gt;temporally blind&lt;/strong&gt;. That is, all observation samples are treated &lt;strong&gt;equally&lt;/strong&gt; regardless of their location within the observation window.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/mrTQ04D7/image-20241012160446847.png"
loading="lazy"
alt="image-20241012160446847"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;positive real-valued weights&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/Y76sgCPB/image-20241012161919320.png"
loading="lazy"
alt="image-20241012161919320"
&gt;&lt;/p&gt;
&lt;h4 id="center-weighted-median-smoothers"&gt;Center Weighted Median Smoothers
&lt;/h4&gt;&lt;p&gt;The CWM smoother is realized by allowing &lt;strong&gt;only the center&lt;/strong&gt; observation sample to be weighted. Thus, the output of the CWM smoother is given by&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/0T52MVn/image-20241012161305584.png"
loading="lazy"
alt="image-20241012161305584"
&gt;&lt;/p&gt;
&lt;h4 id="weighted-median-smoother-with-negative-weight"&gt;Weighted Median Smoother with negative weight
&lt;/h4&gt;&lt;p&gt;Positive weights WM Smoother has low-pass type filtering characteristics.&lt;/p&gt;
&lt;p&gt;A large number of engineering applications require bandpass or high-pass frequency filtering characteristics.&lt;/p&gt;
&lt;p&gt;there is a logical way to generalize the median to an equivalently rich class of weighted median filters that admit both positive and negative weights.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/Y7Jgnh3G/image-20241012161714196.png"
loading="lazy"
alt="image-20241012161714196"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;steps and example&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/d41KDwZ2/image-20241012161743117.png"
loading="lazy"
alt="image-20241012161743117"
&gt;&lt;/p&gt;
&lt;h4 id="vector-weighted-median-filters"&gt;Vector Weighted Median Filters
&lt;/h4&gt;&lt;p&gt;The weighted median filtering operation of a &lt;strong&gt;color image&lt;/strong&gt; can be achieved in a number of ways, two of which we summarize below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Marginal WM filter&lt;/li&gt;
&lt;li&gt;Vector WM filter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The simplest approach to WM filtering a color image is to &lt;strong&gt;process each component independently&lt;/strong&gt; by a scalar WM filter.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A drawback associated with this method is that different components can be strongly correlated and, if each component is processed separately, this &lt;strong&gt;correlation is not exploited&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In addition, since each component is filtered independently, the filter outputs can combine to produce colors not present in the original image.&lt;/li&gt;
&lt;li&gt;The advantage of marginal processing is the &lt;strong&gt;computational simplicity&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/27dQHD8n/image-20241012162429845.png"
loading="lazy"
alt="image-20241012162429845"
&gt;&lt;/p&gt;
&lt;h4 id="application"&gt;Application
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Image Noise Cleaning&lt;/li&gt;
&lt;li&gt;Image Zooming&lt;/li&gt;
&lt;li&gt;Image Sharpening&lt;/li&gt;
&lt;li&gt;Edge Detection&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="image-compression"&gt;Image Compression
&lt;/h2&gt;&lt;h3 id="lossless-coding"&gt;Lossless Coding
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;represent an image signal with the smallest possible number of bits without loss of any information&lt;/li&gt;
&lt;li&gt;speed up transmission and minimizing storage requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;foundation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redundancy - correlation among the image:&lt;/li&gt;
&lt;li&gt;Spatial correlation among neighbor pixels&lt;/li&gt;
&lt;li&gt;Temporal correlation among video frames&lt;/li&gt;
&lt;li&gt;Spectral correlation between image samples&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Standards for lossless compression:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lossless JPEG standard&lt;/li&gt;
&lt;li&gt;Facsimile compression standards&lt;/li&gt;
&lt;li&gt;JBIG compression standard&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
template
$$&lt;/p&gt;
&lt;p&gt;$template$&lt;/p&gt;</description></item><item><title>【Computer Architecture】Notes</title><link>https://dyhes.github.io/p/computer-architecturenotes/</link><pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/computer-architecturenotes/</guid><description>&lt;h2 id="instruction"&gt;Instruction
&lt;/h2&gt;&lt;h3 id="definition"&gt;definition
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;instruction set&lt;/p&gt;
&lt;p&gt;The vocabulary of commands understood by a given architecture.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;stored-program&lt;/p&gt;
&lt;p&gt;The idea that instructions and data of many types can be stored in memory as numbers, leading to the stored-program computer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;word&lt;/p&gt;
&lt;p&gt;The natural unit of access in a computer, usually a group of 32 bits; corresponds to the size of a register in the MIPS architecture&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;address&lt;/p&gt;
&lt;p&gt;A value used to delineate the location of a specific data element within a memory array&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;instruction format&lt;/p&gt;
&lt;p&gt;A form of representation of an instruction composed of fields of binary numbers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;machine language&lt;/p&gt;
&lt;p&gt;Binary representation used for communication within a computer system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;opcode&lt;/p&gt;
&lt;p&gt;The field that denotes the operation and format of an instruction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;text segment&lt;/p&gt;
&lt;p&gt;The segment of a UNIX object file that contains the machine language code for routines in the source file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;program counter (PC)&lt;/p&gt;
&lt;p&gt;The register containing the address of the instruction in the program being executed&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="type"&gt;type
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MIPS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ARMv7 (32-bit)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;intel x86&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ARMv8 (64-bit)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/TTJFncy/image-20221007232522382.png"
loading="lazy"
alt="image-20221007232522382"
&gt;&lt;/p&gt;
&lt;h3 id="register"&gt;register
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/HYvTdmd/image-20221008172806802.png"
loading="lazy"
alt="image-20221008172806802"
&gt;&lt;/p&gt;
&lt;h3 id="mips-instruction-type"&gt;MIPS instruction type
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;arithmetic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;data transfer&lt;/p&gt;
&lt;p&gt;a command that moves data between memory and registers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;logical&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;conditional branch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unconditional jump&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="number-representation"&gt;Number Representation
&lt;/h3&gt;&lt;p&gt;Numbers are kept in computer hardware as &lt;strong&gt;a series of high and low electronic signals&lt;/strong&gt;, and so they are considered base 2 numbers.&lt;/p&gt;
&lt;p&gt;A single digit of a binary number is thus the &lt;strong&gt;“atom”&lt;/strong&gt; of computing, since all information is composed of binary digits or bits.&lt;/p&gt;
&lt;p&gt;The phrase least significant bit is used to refer to the rightmost bit (bit 0 above) and most significant bit to the leftmost bit (bit 31).&lt;/p&gt;
&lt;h4 id="sign-and-magnitude"&gt;sign and magnitude
&lt;/h4&gt;&lt;p&gt;Unsign number are quite natural, but computer programs calculate both positive and negative numbers, so we need a representation that distinguishes the positive from the negative. The most obvious solution is to &lt;strong&gt;add a separate sign, which conveniently can be represented in a single bit&lt;/strong&gt;; the name for this representation is sign and magnitude&lt;/p&gt;
&lt;h5 id="shortcomings"&gt;shortcomings
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;it’s not obvious where to put the sign bit.&lt;/li&gt;
&lt;li&gt;adders for sign and magnitude may need an extra step to set the sign because we can’t know in advance what the proper sign will be.&lt;/li&gt;
&lt;li&gt;a separate sign bit means that sign and magnitude has both a positive and a negative zero, which can lead to problems for inattentive programmers&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="twos-complement补码"&gt;two’s complement(补码)
&lt;/h4&gt;&lt;h5 id="reason"&gt;reason
&lt;/h5&gt;&lt;p&gt;In the search for a more attractive alternative, the question arose as to what would be the result for unsigned numbers if we tried to subtract a large number from a small one. Th e answer is that it would try to borrow from a string of leading 0s, so the result would have a string of leading 1s. Given that there was no obvious better alternative, the final solution was to pick the representation that made the hardware simple: leading 0s mean positive, and leading 1s mean negative.&lt;/p&gt;
&lt;p&gt;Every computer today uses two’s complement binary representations for signed numbers.&lt;/p&gt;
&lt;h5 id="feature"&gt;feature
&lt;/h5&gt;&lt;p&gt;Two’s complement representation has the advantage that all negative numbers have a 1 in the most significant bit. This bit is oft en called the sign bit.
$$
(x_{31}\times-2^{31})+\sum_{i=0}^{30}x_{i}\times2^i
$$
Signed versus unsigned applies to loads as well as to arithmetic.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Signed load&lt;/p&gt;
&lt;p&gt;copy the sign repeatedly to fill the rest of the register—called sign extension&lt;/p&gt;
&lt;p&gt;its purpose is to place a correct representation of the number within that register&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unsigned load&lt;/p&gt;
&lt;p&gt;simply fill with 0s to the left of the data&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="negation"&gt;negation
&lt;/h5&gt;&lt;p&gt;Simply invert every 0 to 1 and every 1 to 0, then add one to the result&lt;/p&gt;
&lt;h5 id="sign-extension"&gt;sign extension
&lt;/h5&gt;&lt;p&gt;take the most significant bit from the smaller quantity—the sign bit—and replicate it to fill the new bits of the larger quantity&lt;/p&gt;
&lt;h4 id="name"&gt;name
&lt;/h4&gt;&lt;p&gt;Two’s complement gets its name from the rule that the unsigned sum of an n-bit number and its n-bit negative is $2^n$; hence, the negation or complement of a number x is $2^n-x$, or its “two’s complement.”&lt;/p&gt;
&lt;h4 id="ones-complement反码"&gt;one&amp;rsquo;s complement(反码)
&lt;/h4&gt;&lt;p&gt;A notation that represents the most negative value by $10 . . . 000_{two}$ and the most positive value by $01 . . . 11_{two}$, leaving an equal number of negatives and positives but ending up with two zeros, one positive ($00 . . . 00$) and one negative ($11 . . . 11$).&lt;/p&gt;
&lt;p&gt;The term is also used to mean the inversion of every bit in a pattern: 0 to 1 and 1 to 0.&lt;/p&gt;
&lt;p&gt;This relation helps explain its name since the complement of x is $2^n-x-1$&lt;/p&gt;
&lt;p&gt;It was also an attempt to be a better solution than sign and magnitude, and several early scientific computers did use the notation.&lt;/p&gt;
&lt;p&gt;One’s complement adders did need an extra step to subtract a number, and hence two’s complement dominates today.&lt;/p&gt;
&lt;h4 id="biased-noatation"&gt;biased noatation
&lt;/h4&gt;&lt;p&gt;A notation that represents the most negative value by $00 . . . 000$ and the most positive value by $11 . . . 11$, with 0 typically having the value $10 . . . 00$, thereby biasing the number such that the number plus the bias has a non-negative representation.&lt;/p&gt;
&lt;h3 id="note"&gt;Note
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;The processor can keep only a small amount of data in registers, but computer memory contains billions of data elements. Hence, data structures (arrays and structures) are kept in memory.&lt;/li&gt;
&lt;li&gt;Memory is just a large, single-dimensional array, with the address acting as the index to that array, starting at 0.&lt;/li&gt;
&lt;li&gt;arithmetic operations occur only on registers in MIPS instructions&lt;/li&gt;
&lt;li&gt;In MIPS, words must start at addresses that are multiples of 4. This requirement is called an alignment restriction, and many architectures have it.&lt;/li&gt;
&lt;li&gt;The process of putting less commonly used variables (or those needed later) into memory is called spilling registers&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="instruction-representation"&gt;Instruction representation
&lt;/h3&gt;&lt;p&gt;Instructions are kept in the computer as &lt;strong&gt;a series of high and low electronic signals&lt;/strong&gt; and may be represented as numbers. In fact, each piece of an instruction can be considered as an individual number, and placing these numbers side by side forms the instruction.&lt;/p&gt;
&lt;h4 id="fields"&gt;Fields
&lt;/h4&gt;&lt;p&gt;All MIPS instructions are 32 bits long, and can also be represented as fields of binary numbers.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/CKct0M3/image-20221008145919050.png"
loading="lazy"
alt="image-20221008145919050"
&gt;&lt;/p&gt;
&lt;p&gt;(R-format)&lt;/p&gt;
&lt;p&gt;Here is the meaning of each name of the fields in MIPS instructions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;op&lt;/p&gt;
&lt;p&gt;Basic operation of the instruction, traditionally called the &lt;strong&gt;opcode&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rs&lt;/p&gt;
&lt;p&gt;The first register source operand&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rt&lt;/p&gt;
&lt;p&gt;The second register source operand&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rd&lt;/p&gt;
&lt;p&gt;The register destination operand. It gets the result of the operation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shamt: Shift amount.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;funct: Function.&lt;/p&gt;
&lt;p&gt;This field, often called the &lt;strong&gt;function code&lt;/strong&gt;, selects the specific variant of the operation in the op field.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/T4wd8ff/image-20221008145952595.png"
loading="lazy"
alt="image-20221008145952595"
&gt;&lt;/p&gt;
&lt;p&gt;(I-format)&lt;/p&gt;
&lt;h3 id="spilling-registers"&gt;spilling registers
&lt;/h3&gt;&lt;p&gt;The ideal data structure for spilling registers is a stack—a last-in-first-out queue.&lt;/p&gt;
&lt;p&gt;A stack needs a pointer to the &lt;strong&gt;most recently&lt;/strong&gt; allocated address in the stack to show where the next procedure should place the registers to be spilled or where old register values are found.&lt;/p&gt;
&lt;p&gt;The stack pointer is adjusted by one word for each register that is saved or restored. MIPS soft ware reserves register 29 for the stack pointer, giving it the obvious name $sp.&lt;/p&gt;
&lt;p&gt;By historical precedent, stacks “grow” from higher addresses to lower addresses. This convention means that you push values onto the stack by subtracting from the stack pointer. Adding to the stack pointer shrinks the stack, thereby popping values off the stack.&lt;/p&gt;
&lt;h3 id="frame-pointer"&gt;frame pointer
&lt;/h3&gt;&lt;p&gt;Some MIPS soft ware uses a frame pointer ($fp) to point to the first word of the frame of a procedure. A stack pointer might change during the procedure, and so references to a local variable in memory might have different offsets depending on where they are in the procedure, making the procedure harder to understand. Alternatively, a frame pointer offers a stable base register within a procedure for local memory-references.&lt;/p&gt;
&lt;h3 id="heap"&gt;heap
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/KyC34w0/image-20221008172448444.png"
loading="lazy"
alt="image-20221008172448444"
&gt;&lt;/p&gt;</description></item><item><title>【Computer Network】Notes</title><link>https://dyhes.github.io/p/computer-networknotes/</link><pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/computer-networknotes/</guid><description>&lt;h2 id="lecture-1-introduction"&gt;Lecture 1 (introduction)
&lt;/h2&gt;&lt;h3 id="internet"&gt;Internet
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;network of networks&lt;/li&gt;
&lt;li&gt;infrastructure that provides services to applications&lt;/li&gt;
&lt;li&gt;provides programming interface to distributed applications&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="protocol"&gt;protocol
&lt;/h3&gt;&lt;p&gt;Protocols define the format, order of messages sent and received among network entities, and actions taken on msg transmission, receipt&lt;/p&gt;
&lt;h3 id="access-network"&gt;Access network
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;cable-based access&lt;/p&gt;
&lt;p&gt;frequency division multiplexing (FDM): different channels transmitted in different frequency bands&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;digital subscriber line (DSL)&lt;/p&gt;
&lt;p&gt;use existing telephone line to central office DSLAM&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data over DSL phone line goes to Internet&lt;/li&gt;
&lt;li&gt;voice over DSL phone line goes to telephone net&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wireless access&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wireless local area networks&lt;/li&gt;
&lt;li&gt;wide-area cellular access networks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;enterprise networks&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;companies, universities&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="packets"&gt;Packets
&lt;/h3&gt;&lt;p&gt;host sending function:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;takes application message&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;breaks into smaller chunks known as packets, of length L bits&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transmits packet into access network at transmission rate R&lt;/p&gt;
&lt;p&gt;link transmission rate, aka link capacity, aka link bandwidth&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;packet transmission delay:&lt;/p&gt;
&lt;p&gt;time needed to transmit L-bit packet into link $=\frac{L(bits)}{R(bits/sec)}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="physical-media"&gt;Physical media
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;guided media&lt;/p&gt;
&lt;p&gt;signals propagate in solid media: copper, fiber, coax&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Twisted pair (TP)&lt;/p&gt;
&lt;p&gt;two insulated copper wires&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Coaxial cable&lt;/p&gt;
&lt;p&gt;two concentric copper conductors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fiber optic cable&lt;/p&gt;
&lt;p&gt;glass fiber carrying light pulses, each pulse a bit&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unguided media&lt;/p&gt;
&lt;p&gt;signals propagate freely: radio&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;wireless radio&lt;/p&gt;
&lt;p&gt;signal carried in various &amp;ldquo;bands&amp;rdquo; in electromagnetic spectrum&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="network-core"&gt;network-core
&lt;/h3&gt;&lt;h4 id="two-key-functions"&gt;two key functions
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;forwarding
&lt;ul&gt;
&lt;li&gt;aka &amp;ldquo;switching&amp;rdquo;&lt;/li&gt;
&lt;li&gt;local action: move arriving packet from router&amp;rsquo;s input link to appropriate router output link&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;routing:
&lt;ul&gt;
&lt;li&gt;global action: determine source-destination paths taken by packets&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="packet-switching"&gt;packet switching
&lt;/h4&gt;&lt;p&gt;hosts break application-layer messages into packets&lt;/p&gt;
&lt;p&gt;network forwards packets from one router to the next, across links on the path from source to destination&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;store-and-forwarding&lt;/p&gt;
&lt;p&gt;entire packet must arrive at router before it can be transmitted on next link&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;queueing&lt;/p&gt;
&lt;p&gt;if arrival rate to link exceeds transmission rate of link for some period of time&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;packets will queue&lt;/li&gt;
&lt;li&gt;packets can be dropped(lost) if memory (buffer) in router fills up&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="curcuit-switching"&gt;curcuit switching
&lt;/h4&gt;&lt;p&gt;end-end resources allocated to, reserved for &amp;ldquo;call&amp;rdquo; bewteen source and destination&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;each link has four circuits&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dedicated resources: no sharing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;circuit segment idle if not used by call&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;commonly used in traditional telephone networks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;types&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;frequency division multiplexing (FDM)&lt;/p&gt;
&lt;p&gt;optical, electromagnetic frequencies divides into (narrow) frequency bands&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;time division multiplexing (TDM)&lt;/p&gt;
&lt;p&gt;time divided into slots&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="packet-delay"&gt;Packet delay
&lt;/h3&gt;&lt;p&gt;$$
d_{nodal}=d_{proc}+d_{queue}+d_{trans}+d_{prop}
$$&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/K90SsxR/image-20221006143351261.png"
loading="lazy"
alt="image-20221006143351261"
&gt;&lt;/p&gt;
&lt;h4 id="d_proc"&gt;$d_{proc}$
&lt;/h4&gt;&lt;p&gt;proccessing delay&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;check bit errors&lt;/li&gt;
&lt;li&gt;determine output link&lt;/li&gt;
&lt;li&gt;typically&amp;lt;microsecs&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="d_queue"&gt;$d_{queue}$
&lt;/h4&gt;&lt;p&gt;queueing delay&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;depends on congestion level of router&lt;/li&gt;
&lt;li&gt;$\alpha$ : average packet arrival rate&lt;/li&gt;
&lt;li&gt;tranfic intensity: $\frac{L\cdot a}{R}$
&lt;ul&gt;
&lt;li&gt;$\frac{L\cdot a}{R}\sim 0$ avg. queueing delay small&lt;/li&gt;
&lt;li&gt;$\frac{L\cdot a}{R}\to 1$ avg. queueing delay large&lt;/li&gt;
&lt;li&gt;$\frac{L\cdot a}{R}\gt 1$ average delay infinite&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="d_trans"&gt;$d_{trans}$
&lt;/h4&gt;&lt;p&gt;transmission delay&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$d_{trans=L/R}$&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="d_prop"&gt;$d_{prop}$
&lt;/h4&gt;&lt;p&gt;propagation delay&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$d$ : length of physical link&lt;/li&gt;
&lt;li&gt;$s$ : propagation speed&lt;/li&gt;
&lt;li&gt;$d_{prop}=d/s$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="layers"&gt;Layers
&lt;/h3&gt;&lt;p&gt;each layer implements a service&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;application&lt;/p&gt;
&lt;p&gt;supporting network applications&lt;/p&gt;
&lt;p&gt;HTTP,IMAP,SMTP,DNS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transport&lt;/p&gt;
&lt;p&gt;process-process data transfer&lt;/p&gt;
&lt;p&gt;TCP,UDP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;network&lt;/p&gt;
&lt;p&gt;routing of datagrams from source to destination&lt;/p&gt;
&lt;p&gt;IP, routing protocols&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;link&lt;/p&gt;
&lt;p&gt;data transfer bewteen neighboring network elements&lt;/p&gt;
&lt;p&gt;Ethernet, WiFi, PPP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;physical&lt;/p&gt;
&lt;p&gt;bits &amp;ldquo;on the wire&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="services"&gt;Services
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;application&lt;/p&gt;
&lt;p&gt;exchanges message M to implement some application service using services of transport layer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transport&lt;/p&gt;
&lt;p&gt;transfers application-layer M from one process to another, using network layer services&lt;/p&gt;
&lt;p&gt;encapsulates application-layer M with transport layer header $H_t$ to create a transport-layer segment&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;network&lt;/p&gt;
&lt;p&gt;transfer transport-layer segment $[H_t,M]$ from one host to another, using link layer services&lt;/p&gt;
&lt;p&gt;encapsulates transport-later segment $[H_t,M]$ with network layer header $H_n$ to create a network-layer datagram&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;link&lt;/p&gt;
&lt;p&gt;transfer network-layer datagram $[H_n|H_t,M]$ from host to neighboring host, using physical layer services&lt;/p&gt;
&lt;p&gt;encapsulates network-later datagram $[H_n|H_t,M]$, with link-layer header $H_l$ to crate a link-layer frame&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/dgN0Hj9/image-20221006153800437.png"
loading="lazy"
alt="image-20221006153800437"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/4gKGvPK/image-20221006154133008.png"
loading="lazy"
alt="image-20221006154133008"
&gt;&lt;/p&gt;
&lt;h3 id="history"&gt;History
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1961-1972: early packet-switching principles&lt;/li&gt;
&lt;li&gt;1972-1980： internetworking; new, proprietary networks&lt;/li&gt;
&lt;li&gt;1980-1990: new protocols, many new networks&lt;/li&gt;
&lt;li&gt;1990-2000s: commercialization, the Web, new applications&lt;/li&gt;
&lt;li&gt;2005-now: more application, mobility, cloud&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="lecture-2-application-layer"&gt;Lecture 2 (application layer)
&lt;/h2&gt;&lt;h3 id="client-server-paradigm"&gt;client-server paradigm
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;server&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;always-on host&lt;/li&gt;
&lt;li&gt;permanent IP address&lt;/li&gt;
&lt;li&gt;often in data centers, for scaling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;clients&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;contact, communicate with server&lt;/li&gt;
&lt;li&gt;may be intermittently connected&lt;/li&gt;
&lt;li&gt;may have dynamic IP addresses&lt;/li&gt;
&lt;li&gt;do not communicate directly with each other&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;example&lt;/p&gt;
&lt;p&gt;HTTP, IMAP, FTP&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="peer-to-peer-architecture"&gt;peer-to-peer architecture
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;no always-on host&lt;/li&gt;
&lt;li&gt;arbitrary end systems directly communicate&lt;/li&gt;
&lt;li&gt;peers request service from other peers, provide service in return to other peers&lt;/li&gt;
&lt;li&gt;peers are intermittently connected and change IP addresses&lt;/li&gt;
&lt;li&gt;example: P2P file sharing&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="process-communicating"&gt;process communicating
&lt;/h3&gt;&lt;p&gt;process: program running within a host&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;within same host, two processes communicate using inter-process communication (defined by OS)&lt;/li&gt;
&lt;li&gt;processes in different hosts communicate by exchanging messages
&lt;ul&gt;
&lt;li&gt;client process: process that initiates communication&lt;/li&gt;
&lt;li&gt;server process: process that waits to be contacted&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="sockets"&gt;sockets
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;process sends/receives messages to/from its socket&lt;/li&gt;
&lt;li&gt;socket analogous to door
&lt;ul&gt;
&lt;li&gt;sending process shoves message out door&lt;/li&gt;
&lt;li&gt;sending process relies on transport infrastructure on other side of door to deliver message to socket at receiving process&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="addressing-processes"&gt;addressing processes
&lt;/h3&gt;&lt;p&gt;to receive messages, process must have identifier which includes both IP address and port numbers associated with process on host&lt;/p&gt;
&lt;h3 id="application-layer-protocol"&gt;application-layer protocol
&lt;/h3&gt;&lt;p&gt;An application-layer protocol defines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;types of messages exchanged&lt;/p&gt;
&lt;p&gt;e.g. request, response&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;message syntax&lt;/p&gt;
&lt;p&gt;what fields in messages &amp;amp; how fields are delineated&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;message semantics&lt;/p&gt;
&lt;p&gt;meaning of information in fields&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rules&lt;/p&gt;
&lt;p&gt;for when and how send &amp;amp; respond to messages&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;type of protocol&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;open protocols
&lt;ul&gt;
&lt;li&gt;defined in RFCs, everyone has access to protocol definition&lt;/li&gt;
&lt;li&gt;allows for interoperability&lt;/li&gt;
&lt;li&gt;e.g. HHTP,SMTP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;proprietary protocols
&lt;ul&gt;
&lt;li&gt;e.g. Skype, Zoom&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="internet-transport-protocols-services"&gt;Internet transport protocols services
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP service&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;reliable transport&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;flow conrtol&lt;/p&gt;
&lt;p&gt;sender won&amp;rsquo;t overwhelm receiver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;congestion control&lt;/p&gt;
&lt;p&gt;throttle sender when network overloaded&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;connection-oriented&lt;/p&gt;
&lt;p&gt;setup required between client and server processes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;does not provide: timing, minimum throughput guarantee, security&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDP service&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unreliable transfer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="http"&gt;HTTP
&lt;/h3&gt;&lt;p&gt;hypertext transfer protocol (application-layer)&lt;/p&gt;
&lt;p&gt;&amp;ldquo;stateless&amp;rdquo;: server maintains no information about past client requests&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;non persistent&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tcp connection opened&lt;/li&gt;
&lt;li&gt;at most one object sent over tcp connection&lt;/li&gt;
&lt;li&gt;tcp connection closed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;downloading multiple objects required multiple connections&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;persistent (HTTP1.1)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tcp connection opened&lt;/li&gt;
&lt;li&gt;multiple objects can be sent over single tcp connection&lt;/li&gt;
&lt;li&gt;tcp connection closed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="cookies"&gt;cookies
&lt;/h4&gt;&lt;p&gt;used to maintain some state between transactions&lt;/p&gt;
&lt;p&gt;can be used for&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;authorization&lt;/li&gt;
&lt;li&gt;shopping carts&lt;/li&gt;
&lt;li&gt;recommendations&lt;/li&gt;
&lt;li&gt;user session state&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="email"&gt;Email
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;user agents&lt;/li&gt;
&lt;li&gt;mail servers&lt;/li&gt;
&lt;li&gt;simple mail transfer protocol: SMTP&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="smtp"&gt;SMTP
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;SMTP handshaking&lt;/li&gt;
&lt;li&gt;SMTP transfer of messages&lt;/li&gt;
&lt;li&gt;SMTP closure&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="imap"&gt;IMAP
&lt;/h4&gt;&lt;p&gt;Internet Mail Access Protocol: messages stored on server, IMAP provides retrieval, deletion, folders of stored messages on server&lt;/p&gt;
&lt;h3 id="domain-name-system-dns"&gt;Domain Name System (DNS)
&lt;/h3&gt;&lt;p&gt;distributed database implemented in hierarchy of many name servers&lt;/p&gt;
&lt;p&gt;application-layer protocol: hosts, DNS servers communicate to resolve name( address/name translation)&lt;/p&gt;
&lt;p&gt;services:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;hostname-to-IP-address translation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;host aliasing&lt;/p&gt;
&lt;p&gt;canonical, alias names&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mail server aliasing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;load distribution&lt;/p&gt;
&lt;p&gt;replicated Web servers: many IP addresses correspond to one name&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="hierarchy"&gt;Hierarchy
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;root&lt;/p&gt;
&lt;p&gt;official, contact-of-last-resort by name servers that can not resolve name&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Top level Domain&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Authoritative&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="local-dns-name-servers"&gt;Local DNS name servers
&lt;/h3&gt;&lt;p&gt;when host makes DNS query, it is sent to its local DNS server&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Local DNS server returns reply, answering:
&lt;ul&gt;
&lt;li&gt;from its local cache of recent name-to-address translation pairs( possibly out of dates)&lt;/li&gt;
&lt;li&gt;forwarding request into DNS hierarchy for resolution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;each ISP has local DNS name server&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="dns-name-resolution"&gt;DNS name resolution
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;iterated query&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/ByZm2Sf/image-20221008221149895.png"
loading="lazy"
alt="image-20221008221149895"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;recursive query&lt;/p&gt;
&lt;p&gt;puts burden of name resolution on contacted name server&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/XpJ5xv2/image-20221008221313656.png"
loading="lazy"
alt="image-20221008221313656"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="caching-dns-information"&gt;Caching DNS information
&lt;/h3&gt;&lt;p&gt;one name server learns mapping, it caches mapping, and immediately returns a cached mapping in response to a query&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;improves response time&lt;/li&gt;
&lt;li&gt;cache entries timeout (disappear) after some time (TTL)&lt;/li&gt;
&lt;li&gt;TLD server typically cached in local name servers&lt;/li&gt;
&lt;li&gt;cached entries may be out-of-date&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="dns-records"&gt;DNS records
&lt;/h3&gt;&lt;p&gt;resource records(RR) format: (name, value, type, ttl)&lt;/p&gt;
&lt;h4 id="type"&gt;Type
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A&lt;/p&gt;
&lt;p&gt;name is host&lt;/p&gt;
&lt;p&gt;value is IP address&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NS&lt;/p&gt;
&lt;p&gt;name is domain (e.g. foo.com)&lt;/p&gt;
&lt;p&gt;value is hostname of authoritative name server for this domain&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CNAME&lt;/p&gt;
&lt;p&gt;name is alias name for some &amp;ldquo;canonnical&amp;rdquo; (the real) name&lt;/p&gt;
&lt;p&gt;value is canonical name&lt;/p&gt;
&lt;p&gt;e.g. &lt;a class="link" href="https://www.ibm.com" target="_blank" rel="noopener"
&gt;www.ibm.com&lt;/a&gt; is really servereasy.backup2.ibm.com&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="dns-protocal-messages"&gt;DNS protocal messages
&lt;/h3&gt;&lt;p&gt;DNS query and reply messages, both have same format&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;message header&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;identification&lt;/p&gt;
&lt;p&gt;16 bit ## for query&lt;/p&gt;
&lt;p&gt;reply to query uses same #&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;flags&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;query or reply&lt;/li&gt;
&lt;li&gt;recursion desired&lt;/li&gt;
&lt;li&gt;recursion avaliable&lt;/li&gt;
&lt;li&gt;reply is authoritative&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/LJF1Sb7/image-20221008222553158.png"
loading="lazy"
alt="image-20221008222553158"
&gt;&lt;/p&gt;
&lt;h3 id="p2p"&gt;P2P
&lt;/h3&gt;&lt;h4 id="two-main-challenges"&gt;two main challenges
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;the peers may join or leave the network, so the service provided by a particular peer will come and go&lt;/li&gt;
&lt;li&gt;the peer address is likely to change&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="bittorrent"&gt;BitTorrent
&lt;/h4&gt;&lt;p&gt;P2P file distribution&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;file devided into 256kb chunks&lt;/li&gt;
&lt;li&gt;peers in torrent send/receive file chunks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;participant&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;tracker&lt;/p&gt;
&lt;p&gt;tracks peers participating in torrent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;torrent&lt;/p&gt;
&lt;p&gt;group of peers exchanging chunks of a file&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="video-streaming-and-cdns"&gt;Video streaming and CDNs
&lt;/h3&gt;&lt;p&gt;stream video traffic: major consumer of Internet bandwidth&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;video&lt;/p&gt;
&lt;p&gt;sequence of images displayed at constant rate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;digital image&lt;/p&gt;
&lt;p&gt;array of pixels&lt;/p&gt;
&lt;p&gt;each pixel represented by bits&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;coding&lt;/p&gt;
&lt;p&gt;use redundancy within and between images to decrease ## bits used to encode image&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;spatial&lt;/li&gt;
&lt;li&gt;temporal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;two type of video encoding method&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CBR: (constant bit rate)&lt;/p&gt;
&lt;p&gt;video encoding rate fixed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VBR: (variable bit rate)&lt;/p&gt;
&lt;p&gt;video encoding rate changes as amout of spatial, temporal encoding changes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;streaming&lt;/p&gt;
&lt;p&gt;client playout early part of video, while server still sending later part of video&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;main challenges&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;server-to-client bandwidth will vary over time&lt;/li&gt;
&lt;li&gt;packet loss, delay due to congestion&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="dash"&gt;DASH
&lt;/h4&gt;&lt;p&gt;Dynamic, Adaptive Streaming over HTTP&lt;/p&gt;
&lt;h5 id="server"&gt;server
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;divides video file into multiple chunks&lt;/li&gt;
&lt;li&gt;each chunk encoded at multiple different rates&lt;/li&gt;
&lt;li&gt;different rate encodings stroed in different files&lt;/li&gt;
&lt;li&gt;files replicated in various CDN nodes&lt;/li&gt;
&lt;li&gt;manifest file: provides URLs for different chunks&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="client"&gt;client
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;periodically estimates server-to-client bandwidth&lt;/li&gt;
&lt;li&gt;consulting manifest, requests one chunk at a time
&lt;ul&gt;
&lt;li&gt;chooses maximum coding rate sustainable given current bandwidth&lt;/li&gt;
&lt;li&gt;can choose different coding rates at different points in time (depending on available bandwidth at time), and from different servers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="cdns"&gt;CDNs
&lt;/h4&gt;&lt;p&gt;store/serve multiple copies of videos at multiple geographically distributed sites&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;enter deep&lt;/p&gt;
&lt;p&gt;push CDN servers deep into many access networks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bring home&lt;/p&gt;
&lt;p&gt;smaller number of larger clusters in POPs near access nets&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="socket-programming"&gt;Socket Programming
&lt;/h3&gt;&lt;p&gt;socket: the only api that sits between application layer and transport layer&lt;/p&gt;
&lt;h2 id="lecture-3transport-layer"&gt;Lecture 3(Transport Layer)
&lt;/h2&gt;&lt;p&gt;provide &lt;strong&gt;logical communication&lt;/strong&gt; between application processes running on different hosts&lt;/p&gt;
&lt;p&gt;actions in end systems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sender: break application messages into segments, passes to network layer&lt;/li&gt;
&lt;li&gt;receiver: reassembles segments into messages, passes to application layer&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="transport-layer-vs-network-layer"&gt;Transport layer vs. Network layer
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;network layer: logical communication between hosts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transport layer: logical communication between processes&lt;/p&gt;
&lt;p&gt;relies on, enhances, network layer services&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;analogy&lt;/p&gt;
&lt;p&gt;12 kids in Ann&amp;rsquo;s house sending letters to 12 kids in Bill&amp;rsquo;s&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hosts=houses&lt;/li&gt;
&lt;li&gt;processes=kids&lt;/li&gt;
&lt;li&gt;app messages =letters in envelops&lt;/li&gt;
&lt;li&gt;transport protocol= Ann and Bill who demux to in-hohuse siblings&lt;/li&gt;
&lt;li&gt;network-layer protocol= postal service&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="actions"&gt;Actions
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Sender:
&lt;ul&gt;
&lt;li&gt;is passed an application-layer message&lt;/li&gt;
&lt;li&gt;determines segment header fields values&lt;/li&gt;
&lt;li&gt;creates segment&lt;/li&gt;
&lt;li&gt;passes segment to IP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Receiver
&lt;ul&gt;
&lt;li&gt;receives segment from IP&lt;/li&gt;
&lt;li&gt;checks header values&lt;/li&gt;
&lt;li&gt;extracts application-layer message&lt;/li&gt;
&lt;li&gt;demultiplexes messages up to application via socket&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="types"&gt;Types
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;TCP: transmission control protocol
&lt;ul&gt;
&lt;li&gt;reliable, &lt;strong&gt;in-order&lt;/strong&gt; delivery&lt;/li&gt;
&lt;li&gt;congestion control&lt;/li&gt;
&lt;li&gt;flow control&lt;/li&gt;
&lt;li&gt;connection setup&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UDP: user datagram protocol
&lt;ul&gt;
&lt;li&gt;unreliable, unordered delivery&lt;/li&gt;
&lt;li&gt;no-frills extension of &amp;ldquo;best-effort&amp;rdquo; IP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Services not available:
&lt;ul&gt;
&lt;li&gt;delay guarantees&lt;/li&gt;
&lt;li&gt;bandwidth guarantees&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="demultiplexing-and-multiplexing"&gt;Demultiplexing and multiplexing
&lt;/h3&gt;&lt;p&gt;demultiplexing at receiver:&lt;/p&gt;
&lt;p&gt;use header info to deliver received segments to correct socket&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;host receives IP datagrams&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;each datagram has source IP address, destination IP address&lt;/li&gt;
&lt;li&gt;each datagram carries one transport-layer segement&lt;/li&gt;
&lt;li&gt;each segment has source, destination number&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/d7sfDjt/image-20221022194123464.png"
loading="lazy"
alt="image-20221022194123464"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;host uses IP address &amp;amp; port number to direct segment to appropriate socket&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="connection-oriented-demultiplex"&gt;connection-oriented demultiplex
&lt;/h4&gt;&lt;p&gt;tcp socket identified by 4-tuple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;source IP address&lt;/li&gt;
&lt;li&gt;source port number&lt;/li&gt;
&lt;li&gt;dest IP address&lt;/li&gt;
&lt;li&gt;dest port number&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="udp"&gt;UDP
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&amp;ldquo;no frills&amp;rdquo;,&amp;ldquo;bare bones&amp;rdquo; Internet transport protocol&lt;/li&gt;
&lt;li&gt;&amp;ldquo;best effort&amp;rdquo; service, UDP segments may be：
&lt;ul&gt;
&lt;li&gt;lost&lt;/li&gt;
&lt;li&gt;delivered out-of-order to app&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;connectionless
&lt;ul&gt;
&lt;li&gt;no handshaking&lt;/li&gt;
&lt;li&gt;each UDP segment handled independently&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="segment-format"&gt;segment format
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;source port&lt;/li&gt;
&lt;li&gt;dest port&lt;/li&gt;
&lt;li&gt;length&lt;/li&gt;
&lt;li&gt;checksum&lt;/li&gt;
&lt;li&gt;application data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/2NW7Bw7/image-20221022200348119.png"
loading="lazy"
alt="image-20221022200348119"
&gt;&lt;/p&gt;
&lt;h5 id="checksum"&gt;checksum
&lt;/h5&gt;&lt;p&gt;goal: detect errors in transmitted segment&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sender
&lt;ul&gt;
&lt;li&gt;treat contents of UDP segment( including UDP header fields and IP addresses) as sequence of 16-bit integers&lt;/li&gt;
&lt;li&gt;checksum: addition (one&amp;rsquo;s complement sum) of segment content&lt;/li&gt;
&lt;li&gt;put checksum value into UDP checksum field&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;receiver
&lt;ul&gt;
&lt;li&gt;compute checksum&lt;/li&gt;
&lt;li&gt;check if equals&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="reliable-data-transfer"&gt;Reliable Data Transfer
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/tK0wtbK/image-20221022204239430.png"
loading="lazy"
alt="image-20221022204239430"
&gt;&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;h3 id="tcp"&gt;TCP
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/ggsLWs5/image-20221022211547831.png"
loading="lazy"
alt="image-20221022211547831"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;sequence number&lt;/p&gt;
&lt;p&gt;indicate the byte stream number of the first byte in segment payload&lt;/p&gt;
&lt;p&gt;count of bytes( not segments)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Acknowledgement number&lt;/p&gt;
&lt;p&gt;used by receiver to tell sender the sequence number of the next byte that&amp;rsquo;s expected to be received from the sender&lt;/p&gt;
&lt;p&gt;serves as a cumulative acknowledgement for all bytes of data that have occurred before that sequence number and&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="congestion-control"&gt;congestion control
&lt;/h4&gt;&lt;p&gt;multiple senders/receivers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;end-end congestion control
&lt;ul&gt;
&lt;li&gt;no explicit feedback from network&lt;/li&gt;
&lt;li&gt;congestion inferred from observed loss, delay&lt;/li&gt;
&lt;li&gt;approch taken by TCP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;network-assisted congestion control&lt;/li&gt;
&lt;li&gt;routers provides direct feedback to sending/receiving hosts with flows passing through congested router&lt;/li&gt;
&lt;li&gt;may indicate congestion level or explicitly set sending rate&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tcp-congestion-control"&gt;TCP congestion control
&lt;/h4&gt;&lt;h5 id="loss-based"&gt;Loss-based
&lt;/h5&gt;&lt;h6 id="aimd"&gt;AIMD
&lt;/h6&gt;&lt;p&gt;senders can increase sending rate until packet loss (congestion) occurs, then decrease sending rate on loss event&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Additive Increase&lt;/p&gt;
&lt;p&gt;increase sending rate by 1 maximum segment size every RTT until loss detected&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multiplicative Decrease&lt;/p&gt;
&lt;p&gt;cut sending rate in half at each loss event&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="slow-start"&gt;slow start
&lt;/h6&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/nQcrDmc/image-20221022223827678.png"
loading="lazy"
alt="image-20221022223827678"
&gt;&lt;/p&gt;
&lt;h4 id="delay-based"&gt;Delay-based
&lt;/h4&gt;&lt;p&gt;Keeping the just pipe full but not fuller&lt;/p&gt;
&lt;h4 id="flow-control"&gt;flow control
&lt;/h4&gt;&lt;p&gt;one sender one receiver&lt;/p&gt;
&lt;h2 id="lecture-4-network-layer-data-plane"&gt;Lecture 4 (Network-layer Data Plane)
&lt;/h2&gt;&lt;p&gt;transport segment from sending to receiving host&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;sender&lt;/p&gt;
&lt;p&gt;encapsulates segments into datagrams, passes to link layer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;receiver&lt;/p&gt;
&lt;p&gt;delivers segments to transport layer protocol&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;in every internet devices: hosts, routers&lt;/p&gt;
&lt;p&gt;routers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;examines header fields in all IP datagrams passing through it&lt;/li&gt;
&lt;li&gt;moves datagrams from input ports to output ports to transfer datagrams along end-end path&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="two-key-function"&gt;Two key function
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;forwarding&lt;/p&gt;
&lt;p&gt;move packets from a router&amp;rsquo;s input link to appropriate router output link&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;routing&lt;/p&gt;
&lt;p&gt;determine route taken by packets from source to destination&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="router"&gt;Router
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/tQQmdry/image-20221023145657394.png"
loading="lazy"
alt="image-20221023145657394"
&gt;&lt;/p&gt;
&lt;h4 id="input-port-functions"&gt;Input port functions
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/VSvYyn7/image-20221023150518101.png"
loading="lazy"
alt="image-20221023150518101"
&gt;&lt;/p&gt;
&lt;h5 id="decentralized-switching"&gt;decentralized switching
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;using header field values, lookup output port using forwarding table in input port memory(&amp;quot; match plus action&amp;quot;)&lt;/li&gt;
&lt;li&gt;destination-based forwarding: forward based only on destination IP address (traditional)&lt;/li&gt;
&lt;li&gt;generalized forwarding: forward based on any set of header field values&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="longest-prefix-matching"&gt;Longest prefix matching
&lt;/h5&gt;&lt;p&gt;when looking for forwarding table entry for given destination address, use longest address prefix that matches destination address&lt;/p&gt;
&lt;h4 id="switching-fabrics"&gt;Switching fabrics
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;transfer packet from input link to appropriate output link&lt;/li&gt;
&lt;li&gt;switching rate: rate at which packets can be transfer from inputs to outputs
&lt;ul&gt;
&lt;li&gt;often measured as multiple of input/output line rate&lt;/li&gt;
&lt;li&gt;N inputs: switching rate N times line rate desirable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="type-1"&gt;type
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;via memory&lt;/p&gt;
&lt;p&gt;first generation routers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;traditional computers with switching under direct control of CPU&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;via bus&lt;/p&gt;
&lt;p&gt;datagram from input port memory to output port memory via a shared bus&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;via interconnection network&lt;/p&gt;
&lt;p&gt;can exploiting parallelism:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fragment datagram into fixed length cells on entry&lt;/li&gt;
&lt;li&gt;switch cells through the fabric, reassemble datagram at exit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/gFZQ9KF/image-20221023151806995.png"
loading="lazy"
alt="image-20221023151806995"
&gt;&lt;/p&gt;
&lt;h4 id="input-port-queueing"&gt;Input port queueing
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;if switch fabric slower than input ports combined
&lt;ul&gt;
&lt;li&gt;queueing delay and loss due to input buffer overflow&lt;/li&gt;
&lt;li&gt;Head-of-the-Line(HOL) blocking: queued datagram at front of queue prevents others in queue from moving forward&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="output-port-queueing"&gt;output port queueing
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;buffering required when datagrams arrive from fabric faster than link transmission rate.&lt;/p&gt;
&lt;p&gt;drop policy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tail drop: drop arriving packet&lt;/li&gt;
&lt;li&gt;priority: drop on priority basis&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;scheduling discipline chooses among queued datagrams for transmission&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;first come, first served&lt;/li&gt;
&lt;li&gt;priority&lt;/li&gt;
&lt;li&gt;round robin&lt;/li&gt;
&lt;li&gt;weighted fair queueing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/wRWDtMR/image-20221023153118613.png"
loading="lazy"
alt="image-20221023153118613"
&gt;&lt;/p&gt;
&lt;h3 id="internet-protocol"&gt;Internet Protocol
&lt;/h3&gt;&lt;h4 id="ipv4"&gt;IPV4
&lt;/h4&gt;&lt;h5 id="ip-datagram-format"&gt;IP Datagram format
&lt;/h5&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/b3gzN6M/image-20221023161411158.png"
loading="lazy"
alt="image-20221023161411158"
&gt;&lt;/p&gt;
&lt;h4 id="address"&gt;address
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ip address&lt;/p&gt;
&lt;p&gt;32-bit identifier associated with each host or router interface&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;interface&lt;/p&gt;
&lt;p&gt;connection between host/router and physical link&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;router&amp;rsquo;s typically have multiple interfaces&lt;/li&gt;
&lt;li&gt;host typically has one or two interfaces (e.g., wired Ethernet, wireless 802.11)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/vs24SK2/image-20221023162100957.png"
loading="lazy"
alt="image-20221023162100957"
&gt;&lt;/p&gt;
&lt;p&gt;blue are are link layer detail&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;subnet part
devices in same subnet have common high order bits&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;host part&lt;/p&gt;
&lt;p&gt;remaining low order bits&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="ways-to-get-ip"&gt;ways to get IP
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;hard-coded by sysadmin in config file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dynamic Host Configuration Protocol: dynamically get address from a server&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;plug-and-play&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="cidr"&gt;CIDR
&lt;/h4&gt;&lt;p&gt;Classless InterDomain Routing( pronounced &amp;ldquo;cider&amp;rdquo;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;subnet portion of address of arbitrary length&lt;/li&gt;
&lt;li&gt;address format: a.b.c.d/x, where x is bit count in subnet portion of address&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/p4G54v2/image-20221023163856687.png"
loading="lazy"
alt="image-20221023163856687"
&gt;&lt;/p&gt;
&lt;h4 id="subnets"&gt;Subnets
&lt;/h4&gt;&lt;p&gt;definition&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;device interfaces that can physically reach each other without passing through an intervening router&lt;/li&gt;
&lt;li&gt;a piece of the network that contains all devices that can reach each other without passing through a network layer router&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="dhcp"&gt;DHCP
&lt;/h4&gt;&lt;p&gt;host dynamically obtains IP address from network server when it
&amp;ldquo;joins&amp;rdquo; network&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;can renew its lease on address in use&lt;/li&gt;
&lt;li&gt;allows reuse of addresses (only hold address while connected/on)&lt;/li&gt;
&lt;li&gt;support for mobile users who join/leave network&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;steps&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DHCP discover (optional)&lt;/p&gt;
&lt;p&gt;hsot broadcasts DHCP discover msg&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DHCP offer (optional)&lt;/p&gt;
&lt;p&gt;DHCP server responds with DHCP offer msg&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;above two steps can be skipped if a client remembers and wishes to reuse a previously allocated network address&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DHCP request&lt;/p&gt;
&lt;p&gt;host requests IP address with DHCP request msg&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DHCP ack&lt;/p&gt;
&lt;p&gt;DHCP server sends address: DHCP ack msg&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;typically, DHCP server will be co-located in router, serving all subnets to which router is attached&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/GcLK3FM/image-20221023172138826.png"
loading="lazy"
alt="image-20221023172138826"
&gt;&lt;/p&gt;
&lt;p&gt;DHCP can return more than just allocated IP address on subnet:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;address of first-hop router for client&lt;/li&gt;
&lt;li&gt;name and IP address of DNS server&lt;/li&gt;
&lt;li&gt;network mask (indicating network versus host portion of address)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="icann"&gt;ICANN
&lt;/h4&gt;&lt;p&gt;internet corporation for assigned names and numbers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;allocates IP addresses, through 5 regional registries( RRs) (who may allocate to local registries)&lt;/li&gt;
&lt;li&gt;manages DNS root zone, including delegation of individual TLD management&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="nat"&gt;NAT
&lt;/h4&gt;&lt;p&gt;network address translation:&lt;/p&gt;
&lt;p&gt;all devices in local network share just one IPv4 address as far as outside world is concerned&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/KrpxXkS/image-20221023174747031.png"
loading="lazy"
alt="image-20221023174747031"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;all devices in local network have 32-bit address in a &amp;ldquo;private&amp;rdquo; IP address space (10/8,172.16/12,192.168/16 prefixes) that can only be used in local network&lt;/li&gt;
&lt;li&gt;advantages:
&lt;ul&gt;
&lt;li&gt;just one IP address needed form provider ISP for all devices&lt;/li&gt;
&lt;li&gt;can change addresses of host in local network without notifying outside world&lt;/li&gt;
&lt;li&gt;can change ISP without changing addresses of devices in local network&lt;/li&gt;
&lt;li&gt;security: devices inside local net not directly addressable, visible by outside world&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;implimentation
&lt;ul&gt;
&lt;li&gt;outgoing datagrams replacement&lt;/li&gt;
&lt;li&gt;translation pair remembrance&lt;/li&gt;
&lt;li&gt;incoming datagrams replacement&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="ipv6"&gt;IPV6
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/YjCK7hM/image-20221023205223631.png"
loading="lazy"
alt="image-20221023205223631"
&gt;&lt;/p&gt;
&lt;p&gt;tunneling:&lt;/p&gt;
&lt;p&gt;ipv6 datagram carried as payload in ipv4 datagram among ipv4 routers&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/KhJnppc/image-20221023205301203.png"
loading="lazy"
alt="image-20221023205301203"
&gt;&lt;/p&gt;
&lt;h3 id="generalized-forwarding"&gt;Generalized Forwarding
&lt;/h3&gt;&lt;p&gt;match plus action&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;many header fields can determine action&lt;/li&gt;
&lt;li&gt;many action possible: drop/copy/modify/log packet&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="flow-table"&gt;Flow table
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;flow: defined by header field values (in link-,network-,transport layer fields)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/DpNtCGf/image-20221023211415475.png"
loading="lazy"
alt="image-20221023211415475"
&gt;&lt;/p&gt;
&lt;h2 id="lecture-5-network-layer-control-plane"&gt;Lecture 5 (Network-layer Control Plane)
&lt;/h2&gt;&lt;h3 id="per-router-control-plane"&gt;Per-router control plane
&lt;/h3&gt;&lt;h4 id="routing-algorithm"&gt;Routing algorithm
&lt;/h4&gt;&lt;p&gt;determine &amp;ldquo;good&amp;rdquo; paths (equivalently routes), from sending hosts to receiving host, through network of routers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;path: sequence of routers packets traverse from given initial source host to final destination host&lt;/li&gt;
&lt;li&gt;&amp;ldquo;good&amp;rdquo;: least &amp;ldquo;cost&amp;rdquo;, &amp;ldquo;fastest&amp;rdquo;, &amp;ldquo;least congested&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="classification"&gt;classification
&lt;/h5&gt;&lt;p&gt;pers1&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;global: all routers have complete topology, link cost info&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;link state&amp;rdquo; algorithm&lt;/p&gt;
&lt;p&gt;e.g. Dijkstra&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;decentralized: iterative process of computation, exchange of info with neighbors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;router initially only know link costs to attached neighbors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;distance vector&amp;rdquo; algorithms&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pers2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static: routes change slowly over time&lt;/li&gt;
&lt;li&gt;dynamic: routes change more quickly
&lt;ul&gt;
&lt;li&gt;periodic updates or in response to link cost changes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="scalable-routing"&gt;scalable routing
&lt;/h4&gt;&lt;p&gt;aggregate routers into regions known as &amp;ldquo;autonomous systems&amp;rdquo;(AS) (a.k.a &amp;ldquo;domains&amp;rdquo;)&lt;/p&gt;
&lt;h5 id="intra-as-intra-domain"&gt;intra-AS (&amp;ldquo;intra-domain&amp;rdquo;)
&lt;/h5&gt;&lt;p&gt;routing among routers within same AS (&amp;ldquo;netwrok&amp;rdquo;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;all routers in AS must run same intra-domain protocol&lt;/li&gt;
&lt;li&gt;routers in different AS can run different intra-domain routing protocols&lt;/li&gt;
&lt;li&gt;gateway router: at &amp;ldquo;edge&amp;rdquo; of its own AS, has link(s) to router(s) in other AS&amp;rsquo;es&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;most common intra-AS routing protocols&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RIP routing information protocol&lt;/li&gt;
&lt;li&gt;OSPF open shortest path first&lt;/li&gt;
&lt;li&gt;EIGRP enhanced interior gateway routing protocol&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="inter-as-inter-domain"&gt;inter-AS (&amp;ldquo;inter-domain&amp;rdquo;)
&lt;/h5&gt;&lt;p&gt;routing among AS&amp;rsquo;es&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gateways perform inter-domian routing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BGP( Border Gateway Protocol): the de facto inter-domain routing protocol&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;allows subnet to advertise its exsistence, and the destinations it can reach, to rest of Internet&lt;/li&gt;
&lt;li&gt;BGP provides each AS a means to:
&lt;ul&gt;
&lt;li&gt;obtain destination network reachability info from neighboring ASes (eBGP)&lt;/li&gt;
&lt;li&gt;determine routes to other networks based on reachability infomation and policy&lt;/li&gt;
&lt;li&gt;propagate reachability information to all AS-internal routers (iBGP)&lt;/li&gt;
&lt;li&gt;advertise (to neighboring) destination reachability info&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="icmp"&gt;ICMP
&lt;/h3&gt;&lt;p&gt;internet control message protocol&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;used by hosts and routers to communicate network-level information
&lt;ul&gt;
&lt;li&gt;error reporting: unreachable host, network, port, protocol&lt;/li&gt;
&lt;li&gt;echo request/reply (used by ping)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;network layer &amp;ldquo;above&amp;rdquo; IP:
&lt;ul&gt;
&lt;li&gt;ICMP messages carried in IP datagrams, protocol number: 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ICMP message: type, code plus header and first 8 bytes of IP datagram causing error&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/qrWz8r4/image-20221024152736352.png"
loading="lazy"
alt="image-20221024152736352"
&gt;&lt;/p&gt;
&lt;h2 id="lecture-6-link-layer"&gt;Lecture 6 (Link-Layer)
&lt;/h2&gt;&lt;h3 id="terminology"&gt;Terminology
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;nodes&lt;/p&gt;
&lt;p&gt;hosts, routers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;links&lt;/p&gt;
&lt;p&gt;communication channels that directly connect physically adjacent nodes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wired, wireless&lt;/li&gt;
&lt;li&gt;LANs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;frame&lt;/p&gt;
&lt;p&gt;layer-2 packet encapsulates datagram&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="context"&gt;Context
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;datagram transferred by different link protocols over different links
&lt;ul&gt;
&lt;li&gt;e.g. WiFi on first link, Ethernet on next link&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;each link protocol provides different services
&lt;ul&gt;
&lt;li&gt;e.g. may or may not provide reliable data tranfer over link&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="services-1"&gt;Services
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;framing, link access
&lt;ul&gt;
&lt;li&gt;encapsulate datagram into frame, adding header, trailer&lt;/li&gt;
&lt;li&gt;channel access if shared medium&lt;/li&gt;
&lt;li&gt;&amp;ldquo;MAC&amp;rdquo; accesses in frame headers identify source, destination&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;reliable delivery between adjacent nodes&lt;/li&gt;
&lt;li&gt;flow control
&lt;ul&gt;
&lt;li&gt;pacing between adjacent sending and receiving nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;error detection
&lt;ul&gt;
&lt;li&gt;error caused by signal attenuation, noise&lt;/li&gt;
&lt;li&gt;receiver detects errors, signals retranssmision, or drop frame&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;error correction
&lt;ul&gt;
&lt;li&gt;receiver identifies and corrects bit error(s) without retransmission&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;half-duplex and full-duplex
&lt;ul&gt;
&lt;li&gt;with half duplex, nodes at both ends of link can transmit, but not at same time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="implementation"&gt;implementation
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;in each-and-every host&lt;/li&gt;
&lt;li&gt;link layer implemented on-chip or in network interface card(NIC)&lt;/li&gt;
&lt;li&gt;attaches into host&amp;rsquo;s system buses&lt;/li&gt;
&lt;li&gt;combination of hardware, software, firmware&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/T84bLZc/image-20221024194755683.png"
loading="lazy"
alt="image-20221024194755683"
&gt;&lt;/p&gt;
&lt;h3 id="mac-addresses"&gt;MAC addresses
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;used &amp;ldquo;locally&amp;rdquo; to get frame from one interface to another physically connected interface&lt;/li&gt;
&lt;li&gt;48-bits MAC address burned in NIC ROM ,also sometimes software settable&lt;/li&gt;
&lt;li&gt;MAC address allocation administered by IEEEE&lt;/li&gt;
&lt;li&gt;manufacturer buys portion of MAC address space (to assure uniqueness)&lt;/li&gt;
&lt;li&gt;analogy
&lt;ul&gt;
&lt;li&gt;MAC address: like social security number&lt;/li&gt;
&lt;li&gt;IP address: like postal address&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MAC flat address: portability
&lt;ul&gt;
&lt;li&gt;can move interface from one LAN to another&lt;/li&gt;
&lt;li&gt;recall IP address not portable: depends on IP subnet to which node is attac&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;each interface on LAN&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;has unique 48-bit MAC address&lt;/li&gt;
&lt;li&gt;has a locally unique 32-bit IP address&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="multiple-access-links"&gt;Multiple access links
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;point to point
&lt;ul&gt;
&lt;li&gt;point-to-point link between Ethernet switch, host&lt;/li&gt;
&lt;li&gt;PPP for dial-up access&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;broadcast( shared wire or medium)
&lt;ul&gt;
&lt;li&gt;old-school Ethernet&lt;/li&gt;
&lt;li&gt;upstream HFC in cable-based access network&lt;/li&gt;
&lt;li&gt;802.11 wireless LAN, 4G/5G. satellite&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="multiple-access-protocols"&gt;Multiple access protocols
&lt;/h3&gt;&lt;p&gt;why&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;single shared broadcast channel&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;two or more simultaneous transmissions by nodes: interference&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;collision if node receives two or more signals at the same time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;distributed algorithm that determines how nodes share channel, i.e. ,determine which node can transmit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;communication about channel sharing must use channel itself&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no out-of-band channel for coordination&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="taxonomy"&gt;taxonomy
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;taking turns
&lt;ul&gt;
&lt;li&gt;nodes take turns, but nodes with more to send can take longer turns&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;random access
&lt;ul&gt;
&lt;li&gt;channel not divided, allow collisions&lt;/li&gt;
&lt;li&gt;&amp;ldquo;recover&amp;rdquo; from collisions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;channel partitioning
&lt;ul&gt;
&lt;li&gt;divide channel into smaller &amp;ldquo;pieces&amp;rdquo; (time slots, frequency, code)&lt;/li&gt;
&lt;li&gt;allocate piece to node for exclusive use&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="channel-partitioning"&gt;channel partitioning
&lt;/h4&gt;&lt;h5 id="tdma"&gt;TDMA
&lt;/h5&gt;&lt;p&gt;time division multiple access&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;access to channel in &amp;ldquo;rounds&amp;rdquo;&lt;/li&gt;
&lt;li&gt;each station gets fixed length slot (length= packet transmission time) in each round&lt;/li&gt;
&lt;li&gt;unused slots go idle&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/fHYXp8G/image-20221025151506652.png"
loading="lazy"
alt="image-20221025151506652"
&gt;&lt;/p&gt;
&lt;h5 id="fdma"&gt;FDMA
&lt;/h5&gt;&lt;p&gt;frequency division multiple access&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;channel spectrum divided into frequency bands&lt;/li&gt;
&lt;li&gt;each station assigned fixed frequency band&lt;/li&gt;
&lt;li&gt;unused transmission time in frequency bands go idle&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/HTLMNLx/image-20221025151446703.png"
loading="lazy"
alt="image-20221025151446703"
&gt;&lt;/p&gt;
&lt;h4 id="random-access"&gt;Random access
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;when node has packet to send
&lt;ul&gt;
&lt;li&gt;transmit at full channel data rate R&lt;/li&gt;
&lt;li&gt;no a priori coordination among nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;two+ sending nodes: &amp;ldquo;collision&amp;rdquo;&lt;/li&gt;
&lt;li&gt;random access protocol specifies:
&lt;ul&gt;
&lt;li&gt;when to send&lt;/li&gt;
&lt;li&gt;how to detect collisions&lt;/li&gt;
&lt;li&gt;how to recover from collisions (e.g., via delayed retransmissions)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;examples
&lt;ul&gt;
&lt;li&gt;ALOHA&lt;/li&gt;
&lt;li&gt;CSMA, CSMA/CD, CSMA/CA&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="slotted-aloha"&gt;Slotted ALOHA
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;allow collision to happen (and then recover via retransmission)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use randomization in choosing when to retransmit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;setting&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;all frames same size&lt;/li&gt;
&lt;li&gt;time divided into equal size slots (time to transmit 1 frame)&lt;/li&gt;
&lt;li&gt;nodes are synchronized&lt;/li&gt;
&lt;li&gt;nodes begin transmissions (if any) at slot start times&lt;/li&gt;
&lt;li&gt;if 2 or more nodes transmit in slot, collision detected by sender&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;operation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when node has new frame to send, transmit in next slot
&lt;ul&gt;
&lt;li&gt;if no collision: success&lt;/li&gt;
&lt;li&gt;if collision: node retransmits frame in each subsequent slot with probability p until success&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pros&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;single active node can continuously transmit at full rate of channel&lt;/li&gt;
&lt;li&gt;highly decentralized: only slots in nodes need to be in sync&lt;/li&gt;
&lt;li&gt;simple&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cons&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;synchronization&lt;/li&gt;
&lt;li&gt;collision, &amp;ldquo;wasting&amp;rdquo; slots&lt;/li&gt;
&lt;li&gt;idle slots, &amp;ldquo;wasting&amp;rdquo; slots&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;efficiency: long-run fraction of successful slots (many nodes, all with many frames to send)&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;at best 37%&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="csma"&gt;CSMA
&lt;/h5&gt;&lt;p&gt;carrier sense multiple access&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;sinle CSMA&lt;/p&gt;
&lt;p&gt;listen before transmit&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if channel sensed idel: transmit entire frame&lt;/li&gt;
&lt;li&gt;if channel sensed busy: defer transmission&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CSMA/CD&lt;/p&gt;
&lt;p&gt;CSMA with collision detection&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;collisions detected within short time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;colliding transmissions aborted, reducing channel wastage&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;collision detection easy in wired, difficult with wireless&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reduces the amount of time wasted in collisions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;algorithm&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ethernet receives datagram form network layer, creates frame&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if Ethernet senses channel:&lt;/p&gt;
&lt;p&gt;if idle: start frame transmission&lt;/p&gt;
&lt;p&gt;if busy: wait until channel idle, then transmit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if entire frame transmitted without collision: done&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if another transmission detected while sending: abort, send jam signal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;after aborting, entire binary (enponential) backoff:&lt;/p&gt;
&lt;p&gt;after mth collision, chooses K at random from {0,1,2,&amp;hellip;,2^m-1}. NIC waits K*512 bit times, returns to step 2&lt;/p&gt;
&lt;p&gt;more collisions: longer backoff interval&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="collisions"&gt;collisions
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;collision can still occur with carrier sensing:
&lt;ul&gt;
&lt;li&gt;propagation delay means two nodes may not hear each other&amp;rsquo;s just started transmission&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;collision: entire packet transmission time wasted
&lt;ul&gt;
&lt;li&gt;distance &amp;amp; propagation delay play role in determining collision probability&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="taking-turns"&gt;taking turns
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;channel allocated explicitly&lt;/li&gt;
&lt;li&gt;nodes won&amp;rsquo;t hold channel for long if nothing to send&lt;/li&gt;
&lt;li&gt;two approaches: polling, token passing&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="polling"&gt;polling
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;centralized controller uses polling messages to &amp;ldquo;invite&amp;rdquo; client nodes to transmit in turn&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="token-passing"&gt;token passing
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;control token message explicitly passed from one node to next, sequentially&lt;/li&gt;
&lt;li&gt;transmit while holding token&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="arp"&gt;ARP
&lt;/h3&gt;&lt;p&gt;address resolution protocol&lt;/p&gt;
&lt;p&gt;ARP table: each IP node (host, router) on LAN has table&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IP/MAC address mappings for some LAN nodes:&lt;/p&gt;
&lt;p&gt;&amp;lt;IP,MAC,TTL&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TTL(time to live): time after which address mapping will be forgotten (typically 20 min)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ethernet"&gt;Ethernet
&lt;/h3&gt;&lt;p&gt;&amp;ldquo;dominant&amp;rdquo; wired LAN technology&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;first widely used LAN technology&lt;/li&gt;
&lt;li&gt;simpler, cheap&lt;/li&gt;
&lt;li&gt;kept up with speed race: 10Mbps- 400 Gbps&lt;/li&gt;
&lt;li&gt;single chip, multiple speeds (e.g., Broadcom BCM5761)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="topology"&gt;topology
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;bus
&lt;ul&gt;
&lt;li&gt;popular through mid 90s&lt;/li&gt;
&lt;li&gt;all nodes ihn same collision domain (can collide with each other)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;switched
&lt;ul&gt;
&lt;li&gt;prevails today&lt;/li&gt;
&lt;li&gt;active link-layer 2 switch in center&lt;/li&gt;
&lt;li&gt;each &amp;ldquo;spoke&amp;rdquo; run a (seperate) Ethernet protocol (nodes do not collide with each other)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/bRf0WwD/image-20221025161439993.png"
loading="lazy"
alt="image-20221025161439993"
&gt;&lt;/p&gt;
&lt;h4 id="frame-structure"&gt;frame structure
&lt;/h4&gt;&lt;p&gt;sending interface encapsulates IP datagram (or other network layer protocol packet) in Ethernet frame&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/16gt5tG/image-20221025161546416.png"
loading="lazy"
alt="image-20221025161546416"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;preamble&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;used to synchronize receiver, sender clock rates&lt;/li&gt;
&lt;li&gt;7 bytes of 10101010 followed by one byte of 10101011&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dest. source address&lt;/p&gt;
&lt;p&gt;6 byte mac address&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if adapter receives frame with matching destination address, or with broadcast address (e.g., ARP packet), it passes data in frame to network layer protocol&lt;/li&gt;
&lt;li&gt;otherwise, adapter discards frame&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;type&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;indicates higher layer protocol&lt;/li&gt;
&lt;li&gt;mostly IP but others possible e.g., Novell IPX, AppleTalk&lt;/li&gt;
&lt;li&gt;used to demultiplex up at receiver&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CRC&lt;/p&gt;
&lt;p&gt;cyclic redundancy check at receiver&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;error detected: frame is dropped&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="feature"&gt;feature
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;connectionless: no handshaking between sending and receiving NICs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unreliable: receiving NIC doesn&amp;rsquo;t send ACKs or NAKs to sending NIC&lt;/p&gt;
&lt;p&gt;data in dropped frames recovered only if initial sender uses higher layer rdt (e.g. TCP), otherwise dropped data lost&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MAC protocol: unslotted CSMA/CD with binary backoff&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="standards"&gt;standards
&lt;/h4&gt;&lt;p&gt;standards:link &amp;amp; physical layers&lt;/p&gt;
&lt;p&gt;many different Ethernet standards&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;common MAC protocol and frame format&lt;/li&gt;
&lt;li&gt;different speeds: 2Mbps, 10Mbps, 100Mbps&amp;hellip;&lt;/li&gt;
&lt;li&gt;different physical layer media: fiber, cable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/jDgXkq6/image-20221025162853104.png"
loading="lazy"
alt="image-20221025162853104"
&gt;&lt;/p&gt;
&lt;h3 id="switch"&gt;Switch
&lt;/h3&gt;&lt;p&gt;link-layer device: take an active role&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;store, forward Ethernet frames&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;examine incoming frame&amp;rsquo;s MAC address, selectively forward frame to one-or-more outgoing links when frame is to be forwarded on segment, uses CSMA/CD to access segment&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transparent&lt;/p&gt;
&lt;p&gt;hosts unaware of presence of switches&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;plug-and-play, self-learning
don&amp;rsquo;t need to be configured&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="multiple-simultaneous-transmissions"&gt;multiple simultaneous transmissions
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;hosts have dedicated, direct connection to switch&lt;/li&gt;
&lt;li&gt;switches buffer packets&lt;/li&gt;
&lt;li&gt;Ethernet protocol used on each incoming link, so:
&lt;ul&gt;
&lt;li&gt;no collisions; full duplex&lt;/li&gt;
&lt;li&gt;each link is tis own collision domain&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="self-learning"&gt;self-learning
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;map host and mac address by link and source address in frame&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;frame destination location known&lt;/p&gt;
&lt;p&gt;selectively send&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;frame destination location unknown&lt;/p&gt;
&lt;p&gt;flood&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="vlan"&gt;VLAN
&lt;/h3&gt;&lt;p&gt;motivation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;single broadcast domain
&lt;ul&gt;
&lt;li&gt;scaling&lt;/li&gt;
&lt;li&gt;efficiency, security, privacy, efficiency issues&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;administrative issues&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;definition&lt;/p&gt;
&lt;p&gt;switch supporting VLAN capabilities can be configured to define multiple virtual LANs over single physical LAN infrastructure&lt;/p&gt;
&lt;h4 id="port-based-vlans"&gt;Port-based VLANs
&lt;/h4&gt;&lt;p&gt;switch ports grouped (by switch management software) so that single physical switch operates as multiple virtual switches&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/j3mqd2n/image-20221025165500032.png"
loading="lazy"
alt="image-20221025165500032"
&gt;&lt;/p&gt;</description></item><item><title>【Computer Vision】Notes</title><link>https://dyhes.github.io/p/computer-visionnotes/</link><pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/computer-visionnotes/</guid><description>&lt;h2 id="history"&gt;History
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1959 Hubel&amp;amp; Wiesel&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1963 Roberts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1970s David Marr&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1979 Gen.Cylinders&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1986 Canny&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1997 Norm.Cuts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;199 SIFT&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2001 V&amp;amp;J&lt;/p&gt;
&lt;p&gt;one of the first successful applications of machine learning to vision&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2001 PASCAL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2009 ImageNet&lt;/p&gt;
&lt;p&gt;Olympics of computer vision&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2012 AlexNet&lt;/p&gt;
&lt;p&gt;deep learning&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="another-viewpoint"&gt;Another viewPoint
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1958 perceptron&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1969 Minsky &amp;amp; Papert&lt;/p&gt;
&lt;p&gt;showed that perceptrons could not learn the XOR function caused a lot of sidillusionment in the field&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1980 Neocognition: Fukushima&lt;/p&gt;
&lt;p&gt;Computational model the visual system, directly inspired by Hubel and Wiesel&amp;rsquo;s hierarchy of complex and simple cells&lt;/p&gt;
&lt;p&gt;interleaved simple cells(convolution) and complex cells(pooling)&lt;/p&gt;
&lt;p&gt;no practical training algorithm&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Backprop: Rumelhart, Hinton, and williams, 1986&lt;/p&gt;
&lt;p&gt;introduced backpropagation for computing gradients in neural networks&lt;/p&gt;
&lt;p&gt;successfully trained perceptrons with multiple layers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convolutional Networks:LeCun et al, 1998&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;deep learning 2006&lt;/p&gt;
&lt;p&gt;people tried to train neural networks that were deeper and deeper&lt;/p&gt;
&lt;p&gt;not a mainstream research topic at this time&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="reason"&gt;Reason
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Algorithms&lt;/li&gt;
&lt;li&gt;Data&lt;/li&gt;
&lt;li&gt;Computation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dataset"&gt;DataSet
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;CIFAR10&lt;/li&gt;
&lt;li&gt;CIFAR100&lt;/li&gt;
&lt;li&gt;ImageNet&lt;/li&gt;
&lt;li&gt;Places365&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="type"&gt;type
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;train: train the model&lt;/li&gt;
&lt;li&gt;validation :choose hypterparameter&lt;/li&gt;
&lt;li&gt;test: check out performance on new data&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="cross-validation"&gt;cross-validation
&lt;/h3&gt;&lt;p&gt;split data into folds,try each fold as validation and average the results&lt;/p&gt;
&lt;h2 id="k-nearest-neighbor"&gt;K-Nearest Neighbor
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;very slow at test time&lt;/li&gt;
&lt;li&gt;distance metrics on pixels are not infomative&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="linear-classifier"&gt;Linear Classifier
&lt;/h2&gt;&lt;h3 id="three-viewpoints"&gt;Three Viewpoints
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Algebraic Viewpoint&lt;/p&gt;
&lt;p&gt;$f(x,W)=Wx$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Visual Viewpoint&lt;/p&gt;
&lt;p&gt;One template per class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Geometric Viewpoint&lt;/p&gt;
&lt;p&gt;Hyperplanes cutting up space&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="loss-function"&gt;Loss Function
&lt;/h2&gt;&lt;p&gt;a loss function tells how good our current classifier is&lt;/p&gt;
&lt;p&gt;Also called: object function, cost function&lt;/p&gt;
&lt;p&gt;Negative loss function sometimes called reward function, profit function, utility function, fitness function, etc&lt;/p&gt;
&lt;p&gt;Given a dataset
$$
{(x_i,y_i)}^N_{i=1}
$$
where $x_i$ is image and $y_i$ is (integer) label&lt;/p&gt;
&lt;p&gt;Loss function for it may be
$$
L_i(f(x_i,W),y_i)
$$
Loss for the dataset is average of per-example losses:
$$
L=\frac{1}{N}\sum_iL_i(f(x_i,W),y_i)
$$&lt;/p&gt;
&lt;h3 id="svm"&gt;SVM
&lt;/h3&gt;&lt;p&gt;Let $s=f(x_i,W)$ be scores&lt;/p&gt;
&lt;p&gt;Then the SVM loss has the form:
$$
L_i=\sum_{j\neq y_i}max(0,s_j-s_{y_i}+margin)
$$&lt;/p&gt;
&lt;h3 id="cross-entropymultinomial-logistic-regression"&gt;Cross-Entropy(Multinomial Logistic Regression)
&lt;/h3&gt;&lt;p&gt;interpret raw classifier scores as probabilities
$$
s=f(x_i;W)
$$
softmax
$$
P(Y=k \lvert X=x_i)=\frac{e^{s_k}}{\sum_je^{ s_j}}
$$
then
$$
L_i=-logP(Y=y_i|X=x_i)
$$&lt;/p&gt;
&lt;h3 id="regularization"&gt;Regularization
&lt;/h3&gt;&lt;p&gt;prevent the model from doing too well on training data
$$
L(W)=L=\frac{1}{N}\sum_iL_i(f(x_i,W),y_i)+\lambda R(W)
$$
where $\lambda$ is the regularization strength&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;L2 Regularization&lt;/p&gt;
&lt;p&gt;$R(W)=\sum_k\sum_lW^2_{k,l}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;L1 Regularization&lt;/p&gt;
&lt;p&gt;$R(W)=\sum_k\sum_l\lvert W_{k,l}\lvert$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Elastic net(L1+L2)&lt;/p&gt;
&lt;p&gt;$R(W)=\sum_k\sum_l\beta W^2_{k,l}+\lvert W_{k,l}\lvert$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="purpose"&gt;Purpose
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;express preferences in among models beyond &amp;ldquo;minimize training error&amp;rdquo;&lt;/li&gt;
&lt;li&gt;avoid overfitting: prefer simple models that generalize better&lt;/li&gt;
&lt;li&gt;improve optimization by adding curvature&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="optimization"&gt;Optimization
&lt;/h2&gt;&lt;p&gt;$$
w^*=arg,min_wL（w）
$$&lt;/p&gt;
&lt;h3 id="sgd"&gt;SGD
&lt;/h3&gt;&lt;p&gt;stochastic gradient descent
$$
x_{t+1}=x_{t}-\alpha \nabla f(x_t)
$$&lt;/p&gt;
&lt;h3 id="sgdmomentum"&gt;SGD+Momentum
&lt;/h3&gt;&lt;p&gt;$$
v_{t+1}=\rho v_{t}-\alpha \nabla f(x_t)
\newline
x_{t+1}=x_t+ v_{t+1}
$$&lt;/p&gt;
&lt;p&gt;add velocity&lt;/p&gt;
&lt;h3 id="nesterov-momentum"&gt;Nesterov Momentum
&lt;/h3&gt;&lt;p&gt;look ahead
$$
v_{t+1}=\rho v_t-\alpha\nabla f(x_t+\rho v_{t})
\newline
x_{t+1}=x_t+v_{t+1}
$$
let $\tilde{x_t}=x_t+\rho v_t$
$$
v_{t+1}=\rho v_t-\alpha \nabla f(\tilde{x_t})
\newline
\tilde{x_{t+1}}=\tilde{x_t}+v_{t+1}+\rho(v_{t+1}-v_t)
$$&lt;/p&gt;
&lt;h3 id="adagrad"&gt;AdaGrad
&lt;/h3&gt;&lt;p&gt;$$
S_{t+1}=S_{t}+\nabla f(x_t)^2
\newline
x_{t+1}=x_t-\alpha \frac{\nabla f(x_t)}{\sqrt{S_{t}}+1e-7}
$$&lt;/p&gt;
&lt;p&gt;might stop before converge&lt;/p&gt;
&lt;h3 id="rmsprop"&gt;RMSProp
&lt;/h3&gt;&lt;p&gt;&amp;ldquo;Leak Adagrad&amp;rdquo;
$$
S_{t+1}=\rho S_{t}+(1-\rho)\nabla f(x_t)^2
\newline
x_{t+1}=x_t-\alpha \frac{\nabla f(x_t)}{\sqrt{S_{t}}+1e-7}
$$&lt;/p&gt;
&lt;h4 id="adam"&gt;Adam
&lt;/h4&gt;&lt;p&gt;RMSProp+Momentum
$$
v_{t+1}=\rho v_{t}+\nabla f(x_t)
\newline
s_{t+1}=\beta s_{t}+(1-\beta)\nabla f(x_t)^2
\newline
v^{&amp;rsquo;}&lt;em&gt;{t+1}=\frac{v&lt;/em&gt;{t+1}}{1-\rho ^t}
\newline
s^{&amp;rsquo;}&lt;em&gt;{t+1}=\frac{s&lt;/em&gt;{t+1}}{1-\beta ^t}
\newline
x_{t+1}=x_t-\alpha \frac{v^{&amp;rsquo;}&lt;em&gt;{t+1}}{\sqrt{s^{&amp;rsquo;}&lt;/em&gt;{t+1}}+1e-7}
$$&lt;/p&gt;
&lt;h2 id="neural-network"&gt;Neural Network
&lt;/h2&gt;&lt;h3 id="activation-functions"&gt;Activation Functions
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sigmoid&lt;/p&gt;
&lt;p&gt;$\sigma(x)=\frac{1}{1+e^{-x}}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tanh&lt;/p&gt;
&lt;p&gt;$tanh(x)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ReLU&lt;/p&gt;
&lt;p&gt;$max(0,x)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leaky ReLU&lt;/p&gt;
&lt;p&gt;$max(0.1x,x)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maxout&lt;/p&gt;
&lt;p&gt;$max(w_1^Tx+b1,w_2^Tx+b2)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ELU&lt;/p&gt;
&lt;p&gt;$\left{
\begin{array}{lc}
x &amp;amp; x \geqslant 0 \
\alpha(e^x-1)&amp;amp;x&amp;lt;0\
\end{array}
\right.$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="back-propagation"&gt;Back propagation
&lt;/h2&gt;&lt;p&gt;$$
\frac{\partial L}{\partial y}=\frac{\partial g}{\partial y}\frac{\partial L}{\partial g}
$$&lt;/p&gt;
&lt;p&gt;where&lt;/p&gt;
&lt;p&gt;$\frac{\partial y}{\partial f}$ is the downstream gradient&lt;/p&gt;
&lt;p&gt;$\frac{\partial y}{\partial g}$ is the local gradient&lt;/p&gt;
&lt;p&gt;$\frac{\partial g}{\partial f}$ is the upstream gradient&lt;/p&gt;
&lt;h2 id="convolutional-networks"&gt;Convolutional Networks
&lt;/h2&gt;&lt;h3 id="convolutional-layer"&gt;Convolutional Layer
&lt;/h3&gt;&lt;h4 id="evaporative"&gt;evaporative
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Input W&lt;/li&gt;
&lt;li&gt;Filter: K&lt;/li&gt;
&lt;li&gt;Output: W-K+1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;add Padding&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Padding: P&lt;/li&gt;
&lt;li&gt;Output: W-K+1+2P&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;same padding: Input equals Output&lt;/p&gt;
&lt;h4 id="receptive-fields"&gt;Receptive Fields
&lt;/h4&gt;&lt;p&gt;each successive convolution adds K-1 to the receptive field size&lt;/p&gt;
&lt;p&gt;With L layers the receptive field size is 1+L*(K-1)&lt;/p&gt;
&lt;p&gt;to expand receptive fields&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stride: S&lt;/li&gt;
&lt;li&gt;output: (W-K+2P)/S+1&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="summary"&gt;summary
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Input: $C_{in}\times H \times W$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hyperparameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kernel size: $K_H \times K_W$&lt;/li&gt;
&lt;li&gt;Number of filters: $C_{out}$&lt;/li&gt;
&lt;li&gt;Padding: $P$&lt;/li&gt;
&lt;li&gt;stride: $S$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weight matrix: $C_{out} \times C_{in} \times K_H \times K_W$&lt;/p&gt;
&lt;p&gt;Bias Vector: $C_{out}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ouput: $C_{out} \times H^{&amp;rsquo;}\times W^{&amp;rsquo;}$&lt;/p&gt;
&lt;p&gt;where&lt;/p&gt;
&lt;p&gt;$H^{&amp;rsquo;}=(H-L+2P)/S+1$&lt;/p&gt;
&lt;p&gt;$W^{&amp;rsquo;}=(W-L+2P)/S+1$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;common settings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$K_H = K_W$&lt;/li&gt;
&lt;li&gt;same padding&lt;/li&gt;
&lt;li&gt;$C_{out} ,C_{in} =32,64,128,256$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pooling-layer"&gt;Pooling Layer
&lt;/h3&gt;&lt;p&gt;to introduces invariance to small spatial shifts&lt;/p&gt;
&lt;p&gt;Hyperparameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kernel size&lt;/li&gt;
&lt;li&gt;stride&lt;/li&gt;
&lt;li&gt;pooling function&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="batch-normalization"&gt;Batch Normalization
&lt;/h3&gt;&lt;p&gt;normalize the outputs of a layer so they have zero mean and unit variance&lt;/p&gt;
&lt;p&gt;It helps reduce &amp;ldquo;internal covariate shift&amp;rdquo;, improves optimization
$$
\hat{x}^{(k)}=\frac{x^{(k)}-E[x^{(k)}]}{\sqrt{Var[x^{(k)}]}}
$$
Input: $N\times D$ when in fully connected layers. convolutional layers are the same&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$\mu_j=\frac{1}{N}\sum_{i=1}^Nx_{i,j}$&lt;/p&gt;
&lt;p&gt;Per-channel mean, shape is $1\times D$&lt;/p&gt;
&lt;p&gt;average of values seen during training while testing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\sigma_j^2=\frac{1}{N}\sum_{i=1}^N(x_{i,j}-\mu_j)^2$&lt;/p&gt;
&lt;p&gt;per-channel std, shape is $1\times D$&lt;/p&gt;
&lt;p&gt;average of values seen during training while testing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\hat{x}&lt;em&gt;{i,j}=\frac{x&lt;/em&gt;{i,j}-\mu_j}{\sqrt{\sigma_j^2+\epsilon}}$&lt;/p&gt;
&lt;p&gt;normalized $x$, shape is $N\times D$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$y_{i,j}=\gamma_j\hat{x}_{i,j}+\beta_j$&lt;/p&gt;
&lt;p&gt;output $y$, shape is $N\times D$&lt;/p&gt;
&lt;p&gt;$\gamma$ and $\beta$ is learnable scale and shift parameter of shape $1\times D$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="layer-normalization"&gt;Layer Normalization
&lt;/h3&gt;&lt;p&gt;for fully connected layers&lt;/p&gt;
&lt;p&gt;avoid different behavior between training and testing&lt;/p&gt;
&lt;p&gt;the $\mu$ and $\sigma$ become shape of $N\times 1$&lt;/p&gt;
&lt;h4 id="instance-normalization"&gt;Instance Normalization
&lt;/h4&gt;&lt;p&gt;for convolutional layers&lt;/p&gt;
&lt;p&gt;the $\mu$ and $\sigma$ become shape of $N\times C\times 1\times 1$ rather than shape of $1\times C\times 1\times 1$ in batch normalization&lt;/p&gt;
&lt;p&gt;the $\gamma$ and $\beta$ remain as shape of $1\times C\times 1\times 1$&lt;/p&gt;
&lt;h2 id="residual-networks"&gt;Residual Networks
&lt;/h2&gt;&lt;p&gt;deep networks hard to train&lt;/p&gt;
&lt;p&gt;a residual network is a stack of many residual blocks&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/xJSzxph/image-20220924193218252.png"
loading="lazy"
alt="image-20220924193218252"
&gt;&lt;/p&gt;
&lt;h2 id="programming-gpus"&gt;Programming GPUs
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CUDA(NVIDIA only)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OpenCL&lt;/p&gt;
&lt;p&gt;similar to CUDA, but runs on anything&lt;/p&gt;
&lt;p&gt;usually slower on NVIDIA hardware&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="pytorch"&gt;Pytorch
&lt;/h2&gt;&lt;h3 id="three-levels-of-abstraction"&gt;Three levels of abstraction
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tensor&lt;/p&gt;
&lt;p&gt;like a numpy array, but can run on GPU&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Autograd&lt;/p&gt;
&lt;p&gt;Package for building computational graphs out of Tensors, and automatically computing gradients&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Module&lt;/p&gt;
&lt;p&gt;A neural network layer; may store state or learnable weights&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="training-neural-networks"&gt;Training Neural Networks
&lt;/h2&gt;&lt;h3 id="activation-function"&gt;Activation Function
&lt;/h3&gt;&lt;h4 id="sigmoid"&gt;Sigmoid
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&amp;lsquo;kill&amp;rsquo; the gradient when saturated&lt;/li&gt;
&lt;li&gt;outputs are not zero-centered&lt;/li&gt;
&lt;li&gt;exp() is a bit compute expensive&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tanh"&gt;tanh
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;zero centered&lt;/li&gt;
&lt;li&gt;&amp;lsquo;kill&amp;rsquo; the gradient when saturated&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="relu"&gt;ReLU
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Does not saturate(in position region)&lt;/li&gt;
&lt;li&gt;very computationally efficient&lt;/li&gt;
&lt;li&gt;converges much faster than sigmoid/tanh in practice&lt;/li&gt;
&lt;li&gt;not zero-centered output&lt;/li&gt;
&lt;li&gt;will never activate &amp;lsquo;dead ReLU&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="leaky-relu"&gt;Leaky ReLU
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Does not saturate(in position region)&lt;/li&gt;
&lt;li&gt;very computationally efficient&lt;/li&gt;
&lt;li&gt;converges much faster than sigmoid/tanh in practice&lt;/li&gt;
&lt;li&gt;not zero-centered output&lt;/li&gt;
&lt;li&gt;will not &amp;lsquo;die&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="parametric-rectifierprelu"&gt;Parametric Rectifier(PReLU)
&lt;/h4&gt;&lt;p&gt;$$
f(x)=max*\alpha x,x
$$&lt;/p&gt;
&lt;h4 id="exponential-linear-unitelu"&gt;Exponential Linear Unit(ELU)
&lt;/h4&gt;&lt;p&gt;$$
\left{
\begin{array}{lc}
x &amp;amp; x \geqslant 0 \
\alpha(e^x-1)&amp;amp;x&amp;lt;0\
\end{array}
\right.
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;all benefits of ReLU&lt;/li&gt;
&lt;li&gt;closer ti zero mean outputs&lt;/li&gt;
&lt;li&gt;negative saturation regime compared with Leaky ReLU adds some robustness to noise&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="scaled-exponential-linear-unitselu"&gt;Scaled Exponential Linear Unit(SELU)
&lt;/h4&gt;&lt;p&gt;$$
\left{
\begin{array}{lc}
\lambda x &amp;amp; x \geqslant 0 \
\lambda\alpha(e^x-1)&amp;amp;x&amp;lt;0\
\end{array}
\right.
$$&lt;/p&gt;
&lt;h4 id="summary-1"&gt;summary
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;don&amp;rsquo;t think too much. Just use ReLU&lt;/li&gt;
&lt;li&gt;Try out Leaky ReLU/ELU/SELU/GELU if you need to squeeze that last 0.1%&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t use sigmoid or tanh&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="data-preprocessing"&gt;Data Preprocessing
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;normalization&lt;/li&gt;
&lt;li&gt;PCA&lt;/li&gt;
&lt;li&gt;whitening&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="weight-initialization"&gt;Weight Initialization
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;small random numbers&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Din&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Dout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Xavier initialization&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Din&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Dout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Din&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kaiming/MSRA initialization&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Din&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Dout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Din&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="regularization-1"&gt;Regularization
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;L2&lt;/li&gt;
&lt;li&gt;L1&lt;/li&gt;
&lt;li&gt;Elastic net&lt;/li&gt;
&lt;li&gt;dropout&lt;/li&gt;
&lt;li&gt;data augmentation
&lt;ul&gt;
&lt;li&gt;random crops and scales&lt;/li&gt;
&lt;li&gt;translation&lt;/li&gt;
&lt;li&gt;rotation&lt;/li&gt;
&lt;li&gt;stretching&lt;/li&gt;
&lt;li&gt;shearing&lt;/li&gt;
&lt;li&gt;lens distortion&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fractional pooling&lt;/li&gt;
&lt;li&gt;stochastic depth&lt;/li&gt;
&lt;li&gt;cutout&lt;/li&gt;
&lt;li&gt;mixup&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="learning-rate-schedule"&gt;Learning rate schedule
&lt;/h3&gt;&lt;h4 id="decay"&gt;Decay
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;cosine&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
\alpha_t=\frac{1}{2}\alpha_0(1+cos(\frac{t\pi}{T}))
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linear&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
\alpha_t=\alpha_0(1-\frac{t}{T})
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inverse sqrt
$$
\alpha_t=\frac{\alpha_0}{\sqrt{t}}
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="early-stopping"&gt;early stopping
&lt;/h3&gt;&lt;p&gt;stop training the model when accuracy on the validation set decreases or train for a long time, but always keep track of the model snapshot that worked best on val.&lt;/p&gt;
&lt;h3 id="choosing-hyperparameters"&gt;choosing hyperparameters
&lt;/h3&gt;&lt;p&gt;random search is better than grid search&lt;/p&gt;
&lt;p&gt;steps&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;check initial loss&lt;/li&gt;
&lt;li&gt;overfit a small sample&lt;/li&gt;
&lt;li&gt;find LR that makes loss go down&lt;/li&gt;
&lt;li&gt;coarse gird, train for 1-5 epochs&lt;/li&gt;
&lt;li&gt;refine grid,train longer&lt;/li&gt;
&lt;li&gt;look at loss curves&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="model-ensembles"&gt;Model Ensembles
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;use multiple independent models&lt;/li&gt;
&lt;li&gt;use multiple snapshots of a single model during training&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="transfer-learning"&gt;Transfer Learning
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;train on imagenet&lt;/li&gt;
&lt;li&gt;use cnn as a feature extractor&lt;/li&gt;
&lt;li&gt;bigger dataset: Fine-Tuning&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="recurrent-networks"&gt;Recurrent Networks
&lt;/h2&gt;&lt;p&gt;$$
h_t=f_W(h_{t-1},x_t)
$$&lt;/p&gt;
&lt;h3 id="vanilla"&gt;Vanilla
&lt;/h3&gt;&lt;p&gt;$$
h_t=tanh(W_{hh}h_{t-1}+W_{xh}x_t)
\newline
y_t=W_{hy}h_t
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Exploding gradients&lt;/p&gt;
&lt;p&gt;gradient clipping:scale gradient if its norm is too big&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vanishing gradients&lt;/p&gt;
&lt;p&gt;change RNN architecture&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="truncated-backpropagation-through-time"&gt;Truncated Backpropagation Through Time
&lt;/h3&gt;&lt;p&gt;carry hidden states forward in time forever, but only backpropagate for some smaller number of steps&lt;/p&gt;
&lt;h3 id="lstm"&gt;LSTM
&lt;/h3&gt;&lt;p&gt;compute four gates at each timestep
$$
\begin{pmatrix}
i\
f\
o\
g\
\end{pmatrix}=
\begin{pmatrix}
\sigma\
\sigma\
\sigma\
tanh\
\end{pmatrix}W
\begin{pmatrix}
h_{t-1}\
x_t\
\end{pmatrix}
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;i&lt;/p&gt;
&lt;p&gt;input gate, whether to write cell&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;f&lt;/p&gt;
&lt;p&gt;forget gate, whether to erase cell&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;o&lt;/p&gt;
&lt;p&gt;output gate, how much to reveal cell&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;g&lt;/p&gt;
&lt;p&gt;gate gate, how much to write to cell&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
c_t=f\bigodot c_{t-1}+i\bigodot g
\newline
h_t=o\bigodot tanh(c_t)
$$&lt;/p&gt;
&lt;p&gt;where $c_t$ is the cell state and $h_t$ is the hidden state&lt;/p&gt;
&lt;h3 id="multilayer"&gt;Multilayer
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RNN
$$
h_t^l=tanhW^l\begin{pmatrix}h_t^{l-1}\h_{t-1}^l\end{pmatrix}
$$
where $h\in R^n$ and $W^l [n\times 2n]$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LSTM
$$
\begin{pmatrix}
i\
f\
o\
g\
\end{pmatrix}=
\begin{pmatrix}
sigm\
sigm\
sigm\
tanh\
\end{pmatrix}W^l
\begin{pmatrix}
h_{t}^{l-1}\
h_{t-1}^l\
\end{pmatrix}
\newline
$$&lt;/p&gt;
&lt;p&gt;$$
c_t^l=f\bigodot c^l_{t-1}+i\bigodot g
\newline
h_t^l=o\bigodot tanh(c_t^l)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="attention"&gt;Attention
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/WvVgRJP/image-20220929130002973.png"
loading="lazy"
alt="image-20220929130002973"
&gt;&lt;/p&gt;
&lt;p&gt;above $\sum_ia_{t,i}$ should be 1&lt;/p&gt;
&lt;p&gt;use a different context vector in each timestep of decoder&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/BrPWrzy/image-20220929133844786.png"
loading="lazy"
alt="image-20220929133844786"
&gt;&lt;/p&gt;
&lt;h3 id="attention-layer"&gt;Attention Layer
&lt;/h3&gt;&lt;p&gt;Input&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;query vector: $q$ (shape: $D_Q$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;input vectors: $X$ (shape:$N_X \times D_X$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;similarity function: $f_{att}$&lt;/p&gt;
&lt;p&gt;usually &lt;strong&gt;scaled dot product&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;the reason is&lt;/p&gt;
&lt;p&gt;large similarities will cause softmax to saturate and give vanishing gradients&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Computation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;similarities: $e$ (shape $N_X$)&lt;/p&gt;
&lt;p&gt;$e_i=f_{att}(q,X_i)$&lt;/p&gt;
&lt;p&gt;usually $e_i=q\cdot X_i/sqrt(D_Q)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;attention weights: $a=softmax(e)$ (shape $N_X$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;output vector: $y=\sum_ia_iX_i$ (shape $D_X$)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="multiple-query"&gt;multiple query
&lt;/h4&gt;&lt;p&gt;multiply query vectors&lt;/p&gt;
&lt;p&gt;Input&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;query vector: $Q$ (shape: $N_Q\times D_X$)&lt;/li&gt;
&lt;li&gt;input vectors: $X$ (shape:$N_X \times D_Q$)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Computation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;similarities: $E=QX^T$ (shape $N_Q\times N_X$)&lt;/p&gt;
&lt;p&gt;$E_{i,j}=Q_i\cdot X_j/sqrt(D_Q)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;attention weights: $a=softmax(E,dim=1)$ (shape $N_Q\times N_X$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;output vector: $Y=AX$ (shape $N_Q\times D_X$)&lt;/p&gt;
&lt;p&gt;$Y_i=\sum_jA_{i,j}X_j$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="seperate-key-and-value"&gt;seperate key and value
&lt;/h4&gt;&lt;p&gt;Input&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;query vector: $Q$ (shape: $N_Q\times D_Q$)&lt;/li&gt;
&lt;li&gt;input vectors: $X$ (shape:$N_X \times D_X$)&lt;/li&gt;
&lt;li&gt;key matrix: $W_K$ (shape:$D_X \times D_Q$)&lt;/li&gt;
&lt;li&gt;value matrix: $W_V$ (shape:$D_X \times D_V$)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Computation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;key vectors: $K=XW_K$ (shape $N_X\times D_Q$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;value vectors: $V=XW_V$ (shape $N_X\times D_V$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;similarities: $E=QK^T$ (shape $N_Q\times N_X$)&lt;/p&gt;
&lt;p&gt;$E_{i,j}=Q_i\cdot K_j/sqrt(D_Q)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;attention weights: $a=softmax(E,dim=1)$ (shape $N_Q\times N_X$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;output vector: $Y=AV$ (shape $N_Q\times D_V$)&lt;/p&gt;
&lt;p&gt;$Y_i=\sum_jA_{i,j}V_j$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="self-attention-layer"&gt;Self-Attention Layer
&lt;/h3&gt;&lt;p&gt;one query per input vector&lt;/p&gt;
&lt;p&gt;Input&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;input vectors: $X$ (shape:$N_X \times D_X$)&lt;/li&gt;
&lt;li&gt;key matrix: $W_K$ (shape:$D_X \times D_Q$)&lt;/li&gt;
&lt;li&gt;value matrix: $W_V$ (shape:$D_X \times D_V$)&lt;/li&gt;
&lt;li&gt;query matrix: $W_Q$ (shape:$D_X\times D_Q$)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Computation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;query vectors:$Q=XW_Q$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;key vectors: $K=XW_K$ (shape $N_X\times D_Q$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;value vectors: $V=XW_V$ (shape $N_X\times D_V$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;similarities: $E=QK^T$ (shape $N_Q\times N_X$)&lt;/p&gt;
&lt;p&gt;$E_{i,j}=Q_i\cdot K_j/sqrt(D_Q)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;attention weights: $a=softmax(E,dim=1)$ (shape $N_Q\times N_X$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;output vector: $Y=AV$ (shape $N_Q\times D_V$)&lt;/p&gt;
&lt;p&gt;$Y_i=\sum_jA_{i,j}V_j$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/h2zHF6Z/image-20220929144511303.png"
loading="lazy"
alt="image-20220929144511303"
&gt;&lt;/p&gt;
&lt;h4 id="masked-self-attention-layer"&gt;masked self-attention layer
&lt;/h4&gt;&lt;p&gt;don&amp;rsquo;t let vectors &amp;ldquo;look ahead&amp;rdquo; in the sqeuence&lt;/p&gt;
&lt;p&gt;used for language modeling (predict next word)&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/7QdcSqc/image-20220929145019078.png"
loading="lazy"
alt="image-20220929145019078"
&gt;&lt;/p&gt;
&lt;h3 id="multihead-self-attention-layer"&gt;Multihead self-attention layer
&lt;/h3&gt;&lt;p&gt;use $H$ independent &amp;ldquo;attention heads&amp;rdquo; in parallel&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/MnwG1G1/image-20220929145319763.png"
loading="lazy"
alt="image-20220929145319763"
&gt;&lt;/p&gt;
&lt;h3 id="cnn-with-self-attention"&gt;CNN with self-attention
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/WnsTP0Y/image-20220929145552813.png"
loading="lazy"
alt="image-20220929145552813"
&gt;&lt;/p&gt;
&lt;h3 id="processing-sequences"&gt;processing sequences
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/pxvZHyC/image-20220929150003833.png"
loading="lazy"
alt="image-20220929150003833"
&gt;&lt;/p&gt;
&lt;h4 id="transformer-block"&gt;transformer block
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/vV4k7Rd/image-20220929150218418.png"
loading="lazy"
alt="image-20220929150218418"
&gt;&lt;/p&gt;
&lt;h4 id="transformer"&gt;Transformer
&lt;/h4&gt;&lt;p&gt;a Transformer is a sequence of transformer blocks&lt;/p&gt;
&lt;p&gt;can be used for transfer learning&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;pretraining&lt;/p&gt;
&lt;p&gt;download a lot of text from the internet&lt;/p&gt;
&lt;p&gt;train a giant transformer model for language modeling&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;finetuning&lt;/p&gt;
&lt;p&gt;fine-tune the transformer on your own NLP task&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="object-detection"&gt;Object Detection
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Input:&lt;/p&gt;
&lt;p&gt;Single RGB Image&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;p&gt;A set of detected objects, for each object predict:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Category label (from fixed,known set of categories)&lt;/li&gt;
&lt;li&gt;Bounding box (four numbers: x,y,width,height)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;challenges&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;multiple outputs&lt;/li&gt;
&lt;li&gt;multiple types of output&lt;/li&gt;
&lt;li&gt;large images&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;method&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sliding window : too many boxes&lt;/li&gt;
&lt;li&gt;region proposals:
&lt;ul&gt;
&lt;li&gt;find a small set of boxes that are likely to cover all objects&lt;/li&gt;
&lt;li&gt;often based on heuristics&lt;/li&gt;
&lt;li&gt;relatively fast to run&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="intersection-over-union-iou"&gt;Intersection over Union (IoU)
&lt;/h3&gt;&lt;p&gt;$$
\frac{area;of;Intersection}{Area;of;Union}
$$&lt;/p&gt;
&lt;h3 id="overlapping-boxes-non-max-suppression-nms"&gt;Overlapping Boxes: Non-Max Suppression (NMS)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;problem: Object detectors often output many overlapping detections&lt;/li&gt;
&lt;li&gt;solution: post-process raw detections using NMS
&lt;ol&gt;
&lt;li&gt;select next highest-scoring box&lt;/li&gt;
&lt;li&gt;eliminate lower-scoring boxes with $IoU\gt threshold$&lt;/li&gt;
&lt;li&gt;if any boxes remain. goto 1.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="evaluating-mean-average-precision-map"&gt;Evaluating: Mean Average Precision (mAP)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;run object detector on all test images&lt;/li&gt;
&lt;li&gt;for each category, compute average precision(AP)=area under Precision vs Recall Curve
&lt;ul&gt;
&lt;li&gt;for each detection( highest score to lowest score)
&lt;ul&gt;
&lt;li&gt;if it matches some GT box with $IoU\gt 0.5$, mark it as positive and eliminate the GT&lt;/li&gt;
&lt;li&gt;otherwise mark it as negetive&lt;/li&gt;
&lt;li&gt;Plot a point on PR curve&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;average precision(AP)= area under PR curve&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mean average precision(mAP)=average of AP for each category&lt;/li&gt;
&lt;li&gt;for &amp;lsquo;COCO mAP&amp;rsquo;: compute mAP@thresh for each IoU threshold and take average&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="slow-r-cnn"&gt;&amp;ldquo;slow&amp;rdquo; R-CNN
&lt;/h3&gt;&lt;p&gt;Region-Based CNN&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;run region proposal method to compute ~2000 region proposals&lt;/li&gt;
&lt;li&gt;resize each region to fixed size and run independently through CNN to predict class scores and bbox transform&lt;/li&gt;
&lt;li&gt;use scores to select a subset of region proposals to output&lt;/li&gt;
&lt;li&gt;compare with ground-truth boxes&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fast-r-cnn"&gt;Fast R-CNN
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/Q91BDNF/image-20221013181339635.png"
loading="lazy"
alt="image-20221013181339635"
&gt;&lt;/p&gt;
&lt;h3 id="faster-r-cnn--learnable-region-proposals"&gt;Faster R-CNN: learnable Region Proposals
&lt;/h3&gt;&lt;p&gt;insert RPN to predict proposals from features&lt;/p&gt;
&lt;p&gt;otherwise same as Fast R-CNN&lt;/p&gt;
&lt;p&gt;jointly train with 4 losses:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RPN classification&lt;/li&gt;
&lt;li&gt;RPN regression&lt;/li&gt;
&lt;li&gt;Object classification&lt;/li&gt;
&lt;li&gt;Object regression&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="semantic-segmentation"&gt;Semantic Segmentation
&lt;/h3&gt;&lt;p&gt;Label each pixel in the image with a category label&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t differentiate instances, only care about pixels&lt;/p&gt;
&lt;h3 id="upsampling"&gt;Upsampling
&lt;/h3&gt;&lt;p&gt;unpooling&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bed of nails&lt;/li&gt;
&lt;li&gt;nearest neighbor&lt;/li&gt;
&lt;li&gt;bilinear interpolation&lt;/li&gt;
&lt;li&gt;bicubic interpolation&lt;/li&gt;
&lt;li&gt;max unpooling&lt;/li&gt;
&lt;li&gt;learnable upsampling: Transposed Convolution&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="instance-segmentation"&gt;Instance Segmentation
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;things: object categories that can be separated into object instance&lt;/li&gt;
&lt;li&gt;stuff: object categories that cannot be separated into instances&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mask R-CNN&lt;/p&gt;
&lt;h3 id="panoptic-segmentation"&gt;Panoptic Segmentation
&lt;/h3&gt;&lt;p&gt;Label all pixels in the image (both things and stuff)&lt;/p&gt;
&lt;p&gt;for &amp;ldquo;thing&amp;rdquo; categories also separate into ins&lt;/p&gt;
&lt;h2 id="3d-vision"&gt;3D Vision
&lt;/h2&gt;&lt;p&gt;two problems&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;predicting 3D shapes from single image&lt;/li&gt;
&lt;li&gt;Processing 3D input data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;more topics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Computing correspondences&lt;/li&gt;
&lt;li&gt;multi-view stereo&lt;/li&gt;
&lt;li&gt;structure from motion&lt;/li&gt;
&lt;li&gt;simultaneous localization and mapping (SLAM)&lt;/li&gt;
&lt;li&gt;Self-supervised learning&lt;/li&gt;
&lt;li&gt;View Synthesis&lt;/li&gt;
&lt;li&gt;Differentiable graphics&lt;/li&gt;
&lt;li&gt;3D Sensors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Many non-Deep Learning methods alive and well in 3D&lt;/p&gt;
&lt;h3 id="3d-shape-representations"&gt;3D Shape Representations
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Depth Map&lt;/p&gt;
&lt;p&gt;Problem: Scale/Depth Ambiguity&lt;/p&gt;
&lt;p&gt;Scale invariant loss&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Voxel Grid&lt;/p&gt;
&lt;p&gt;for each pixel, surface normals give a vector giving the normal vector to the object in the world for that pixel&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3D convolution&lt;/li&gt;
&lt;li&gt;Voxel Tubes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Problem: Memory Usage&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implicit Surface&lt;/p&gt;
&lt;p&gt;learn a function to classify arbitrary 3D points as inside/outside the shape&lt;/p&gt;
&lt;p&gt;$o:R^3-&amp;gt;[0,1]$&lt;/p&gt;
&lt;p&gt;The surface of the 3D object is the level set ${x:o(x)=\frac{1}{2}}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PointCloud&lt;/p&gt;
&lt;p&gt;represent shape as a set of P points in 3D space&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;can represent fine structures without huge numbers of points&lt;/li&gt;
&lt;li&gt;requires new architectures, losses, etc&lt;/li&gt;
&lt;li&gt;doesn&amp;rsquo;t explicitly represent the surface of the shape: extracting a mesh for rendering or other applications requires post-processing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mesh&lt;/p&gt;
&lt;p&gt;represent a 3D shape as a set of triangles&lt;/p&gt;
&lt;p&gt;Vertices: Set of V points in 3D space&lt;/p&gt;
&lt;p&gt;Faces: Set triangles over the vertices&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="graph-convolution"&gt;Graph Convolution
&lt;/h3&gt;&lt;p&gt;$$
f^{&amp;rsquo;}&lt;em&gt;i=W_0f_i+\sum&lt;/em&gt;{j\in N(i)}W_1f_j
$$&lt;/p&gt;
&lt;h3 id="metrics"&gt;Metrics
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Voxel IoU&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Chamfer Distance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;F1 Score
$$
F1@t=2*\frac{Precision@t*Recall@t}{Precision@t+Reca}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="generative-model"&gt;Generative Model
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Discriminative model
&lt;ul&gt;
&lt;li&gt;learn a probability distribution p(y|x)&lt;/li&gt;
&lt;li&gt;used to:
&lt;ul&gt;
&lt;li&gt;assign labels to data&lt;/li&gt;
&lt;li&gt;feature learning (with labels)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generative Model
&lt;ul&gt;
&lt;li&gt;distribution p(x)&lt;/li&gt;
&lt;li&gt;used to:
&lt;ul&gt;
&lt;li&gt;detect outliers&lt;/li&gt;
&lt;li&gt;feature learning (without label)&lt;/li&gt;
&lt;li&gt;sample to generate new data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conditional Generative Model
&lt;ul&gt;
&lt;li&gt;learn p(x|y)&lt;/li&gt;
&lt;li&gt;used to:
&lt;ul&gt;
&lt;li&gt;assign labels, while rejecting outliers. generate new data conditioned on input labels&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/8dXfpmR/image-20221005141347631.png"
loading="lazy"
alt="image-20221005141347631"
&gt;&lt;/p&gt;
&lt;h3 id="taxonomy"&gt;Taxonomy
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;explicit density&lt;/p&gt;
&lt;p&gt;model can compute $p(x)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tractable density&lt;/p&gt;
&lt;p&gt;Autoregressive&lt;/p&gt;
&lt;p&gt;NADE/MADE&lt;/p&gt;
&lt;p&gt;NICE/RealNVP&lt;/p&gt;
&lt;p&gt;Glow&lt;/p&gt;
&lt;p&gt;Ffjord&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Approximate density&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Variational&lt;/p&gt;
&lt;p&gt;Variational Autoencoder&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Markov Chain&lt;/p&gt;
&lt;p&gt;Boltzmann Machine&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;implicit density&lt;/p&gt;
&lt;p&gt;does not explicitly compute $p(x)$, but can sample from $p(x)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Markov Chain&lt;/p&gt;
&lt;p&gt;GSN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Direct&lt;/p&gt;
&lt;p&gt;Generative Adversarial Networks (GANs)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="autoregressive"&gt;Autoregressive
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Goal: write down an explicit function for $p(x)=f(x,W)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Given dataset $x^{(1)},x^{(2)}&amp;hellip;x^{(N)}$, train the model by solving
$$
W^{*}=arg,max_W\Pi_ip(x^{i})
$$
log trick to exchange product for sum
$$
arg,max_W\sum_ilogp(x^{i})
$$
namely
$$
arg,max_W\sum_ilogf(x^{i},W)
$$
this is the loss function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assume x consists of multiple subparts
$$
x=(x_1,x_2,x_3,&amp;hellip;,x_N)
$$
break down probability using the chain rule
$$
\begin{equation} \label{eq1}
\begin{split}
p(x) &amp;amp; =p(x_1,x_2,x_3,&amp;hellip;,x_N) \
&amp;amp; = p(x_1)p(x_2|x_1)p(x_3|x_1,x_2)&amp;hellip;\
&amp;amp;=\Pi_{t=1}^Tp(x_t|x_1,&amp;hellip;,x_{t-1})
\end{split}
\end{equation}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="pixelrnn"&gt;PixelRNN
&lt;/h4&gt;&lt;p&gt;Generate image pixels one at a time, starting at the upper left corner&lt;/p&gt;
&lt;p&gt;Compute a hidden state for each pixel that depends on hidden states and RGB values from the left and from above
$$
h_{x,y}=f(h_{x-1,y},h_{x,y-1},W)
$$
&lt;img src="https://i.ibb.co/rGgF84c/image-20221005145834282.png"
loading="lazy"
alt="image-20221005145834282"
&gt;&lt;/p&gt;
&lt;h4 id="pixelcnn"&gt;PixelCNN
&lt;/h4&gt;&lt;p&gt;still generate image pixels starting from corner&lt;/p&gt;
&lt;p&gt;dependency on previous pixels now modeled using a CNN over context region&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/dWS9XJx/image-20221005170818945.png"
loading="lazy"
alt="image-20221005170818945"
&gt;&lt;/p&gt;
&lt;h4 id="pros-and-cons"&gt;Pros and Cons
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Pros
&lt;ul&gt;
&lt;li&gt;can explicitly compute likelihood $p(x)$&lt;/li&gt;
&lt;li&gt;explicit likelihood of training data gives good evaluation metric&lt;/li&gt;
&lt;li&gt;good samples&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons
&lt;ul&gt;
&lt;li&gt;sequential generation =&amp;gt; slow&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="variational-autoencoder"&gt;Variational Autoencoder
&lt;/h3&gt;&lt;p&gt;variational autoencoder define an intractable density that we cannot explicitly compute or optimize&lt;/p&gt;
&lt;p&gt;But we will be able to directly optimize a lower bound on the density&lt;/p&gt;
&lt;h4 id="autoencoders"&gt;Autoencoders
&lt;/h4&gt;&lt;p&gt;unsupervised method for learning feature vectors from raw data x, without any labels&lt;/p&gt;
&lt;p&gt;features should extract useful information that we can use for downstream tasks&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/gZVmwQJ/image-20221005172527253.png"
loading="lazy"
alt="image-20221005172527253"
&gt;&lt;/p&gt;
&lt;p&gt;idea: use the features to reconstruct the input data with a decoder&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/r3vdqrb/image-20221005172636415.png"
loading="lazy"
alt="image-20221005172636415"
&gt;&lt;/p&gt;
&lt;p&gt;features need to be lower dimensional that the data&lt;/p&gt;
&lt;p&gt;after training, throw away decoder and use encoder for a downstream task&lt;/p&gt;
&lt;h4 id="variational-autoencoder-1"&gt;Variational Autoencoder
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;assume training data ${x^{(i)}}_{i=1}^N$ is generated from unobserved (latent) representation $z$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;assume simple prior $p(z)$, e.g. Gaussian&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;represent $p(x|z)$ with a neural network (similar to decoder from autoencoder)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;decoder must be probabilistic:&lt;/p&gt;
&lt;p&gt;Decoder input $z$, output mean $\mu_{x|z}$ and (diagonal) covariance $\sum_{x|z}$&lt;/p&gt;
&lt;p&gt;sample $x$ from Gaussian with mean $\mu_{x|z}$ and (diagonal) covariance $\sum_{x|z}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/1Tv4GGP/image-20221005201326846.png"
loading="lazy"
alt="image-20221005201326846"
&gt;&lt;/p&gt;
&lt;p&gt;so encoder and decoder be like&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/qnDVmc2/image-20221005201508840.png"
loading="lazy"
alt="image-20221005201508840"
&gt;
$$
\begin{equation} \label{eq2}
\begin{split}
logp_{\theta}(x) &amp;amp; =log\frac{p_{\theta}(x|z)p(z)}{p_{\theta}(z|x)}\
&amp;amp; = log\frac{p_{\theta}(x|z)p(z)q_{\phi}(z|x)}{p_{\theta}(z|x)q_{\phi}(z|x)}\
&amp;amp;=logp_{\theta}(x|z)-log\frac{q_{\phi}(z|x)}{p(z)}+log\frac{q_{\phi}(z|x)}{p_{\theta}(z|x)}\
&amp;amp;=E_z[logp_{\theta}(x|z)]-E_z[log\frac{q_{\phi}(z|x)}{p(z)}]+E_z[log\frac{q_{\phi}(z|x)}{p_{\theta}(z|x)}]\
&amp;amp;=E_{z\sim q_{\phi}(z|x)}[logp_{\theta}(x|z)]-D_{KL}(q_{\phi}(z|x),p(z))+D_{KL}(q_{\phi}(z|x),p(z))\
&amp;amp;\ge E_{z\sim q_{\phi}(z|x)}[logp_{\theta}(x|z)]-D_{KL}(q_{\phi}(z|x),p(z))
\end{split}
\end{equation}
$$
jointly train encoder q and decoder p to maximize the variational lower bound on the data likelihood&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;run input data through encoder to get a distribution over latent codes (encoder output should match the prior $p(z)$)&lt;/li&gt;
&lt;li&gt;sample $z$ from encoder output&lt;/li&gt;
&lt;li&gt;run sampled $z$ through decoder to get a distribution over data samples&lt;/li&gt;
&lt;li&gt;original input data should be likely under the distribution output&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/42NYv9H/image-20221005204831140.png"
loading="lazy"
alt="image-20221005204831140"
&gt;&lt;/p&gt;
&lt;h4 id="generate-new-data"&gt;generate new data
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;sample $z$ from prior $p(z)$&lt;/li&gt;
&lt;li&gt;run sampled $z$ through decoder to get distribution over data $x$&lt;/li&gt;
&lt;li&gt;sample from distribution obtained above to generate data&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="pros-and-cons-1"&gt;Pros and Cons
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Pros
&lt;ul&gt;
&lt;li&gt;principled approach to generative models&lt;/li&gt;
&lt;li&gt;allows inference of $q(z|x)$, can be useful feature representation for other tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons
&lt;ul&gt;
&lt;li&gt;maximizes lower bound of likelihood: okay, but not as good evaluation as PixelRNN/PixelCNN&lt;/li&gt;
&lt;li&gt;samples blurrier and lower quality compared to state-of-the-art (GANs)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="gan"&gt;GAN
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/XJ9YXSv/image-20221005212039207.png"
loading="lazy"
alt="image-20221005212039207"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Generative adversarial networks give up on modeling $p(x)$, but allow us to draw samples from $p(x)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assume we have data $x_i$ drawn from distribution $p_{data}(x)$. Want to sample from $p_{data}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Introduce a latent variable $z$ with simple prior $p(z)$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sample $z\sim p(z)$ and pass to a Generator network $x=G(z)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then $x$ is a sample from the Generator distribution $p_G$. want $P_G=P_{data}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Train Generator Network G to convert $z$ into fake data $x$ sampled from $p_G$&lt;/p&gt;
&lt;p&gt;by &amp;ldquo;fooling&amp;rdquo; the discriminator D&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Train Discriminator Network D to classify data as real or fake(1/0)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;jointly train generator G and discriminator D with a minmax game&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/x2br6t3/image-20221005212133215.png"
loading="lazy"
alt="image-20221005212133215"
&gt;
$$
\begin{equation}
\begin{split}
&amp;amp; min_G,max_D(E_{x\sim p_{data}}[logD(x)]+E_{z\sim p(z)}[log(1-D(G(z)))])\
&amp;amp;=min_G,max_DV(G,D)
\end{split}
\end{equation}
$$
update
$$
D=D+\alpha_D\frac{\partial V}{\partial D}
\newline
G=G-\alpha_G\frac{\partial V}{\partial G}
$$
this minimax game achieves its global minimum when $p_G=p_{data}$&lt;/p&gt;
&lt;p&gt;=&amp;gt;some mathematical derivation&lt;/p&gt;
&lt;h2 id="assignments"&gt;Assignments
&lt;/h2&gt;&lt;h3 id="pytorch-1"&gt;pytorch
&lt;/h3&gt;&lt;p&gt;&lt;a class="link" href="https://pytorch.org/" target="_blank" rel="noopener"
&gt;PyTorch&lt;/a&gt; is an open source machine learning framework. At its core, PyTorch provides a few key features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A multidimensional &lt;strong&gt;Tensor&lt;/strong&gt; object, similar to &lt;a class="link" href="https://numpy.org/" target="_blank" rel="noopener"
&gt;numpy&lt;/a&gt; but &lt;strong&gt;with GPU accelleration&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;An optimized &lt;strong&gt;autograd&lt;/strong&gt; engine for automatically computing derivatives&lt;/li&gt;
&lt;li&gt;A clean, modular API for building and deploying &lt;strong&gt;deep learning models&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A &lt;code&gt;torch&lt;/code&gt; &lt;strong&gt;tensor&lt;/strong&gt; is a multidimensional grid of values, all of the same type, and is indexed by a tuple of nonnegative integers. The number of dimensions is the &lt;strong&gt;rank&lt;/strong&gt; of the tensor; the &lt;strong&gt;shape&lt;/strong&gt; of a tensor is a tuple of integers giving the size of the array along each dimension.&lt;/p&gt;
&lt;p&gt;Accessing an element from a PyTorch tensor returns a PyTorch scalar; we can convert this to a Python scalar using the &lt;code&gt;.item()&lt;/code&gt; method&lt;/p&gt;
&lt;h4 id="tensor-indexing"&gt;tensor indexing
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;slice indexing&lt;/p&gt;
&lt;p&gt;Slicing a tensor returns a &lt;strong&gt;view&lt;/strong&gt; into the same data, so modifying it will also modify the original tensor. To avoid this, you can use the &lt;code&gt;clone()&lt;/code&gt; method to make a copy of a tensor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;integer indexing&lt;/p&gt;
&lt;p&gt;We can also use &lt;strong&gt;index arrays&lt;/strong&gt; to index tensors; this lets us construct new tensors with a lot more flexibility than using slices.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;a[idx0, idx1]
is equi
torch.tensor([
a[idx0[0], idx1[0]],
a[idx0[1], idx1[1]],
...,
a[idx0[N - 1], idx1[N - 1]]
])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A one-hot vector for an integer n is a vector that has a one in its nth slot, and zeros in all other slots. One-hot vectors are commonly used to represent categorical variables in machine learning models.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;boolean indexing&lt;/p&gt;
&lt;p&gt;Boolean tensor indexing lets you pick out arbitrary elements of a tensor according to a boolean mask. Frequently this type of indexing is used to select or modify the elements of a tensor that satisfy some condition.&lt;/p&gt;
&lt;p&gt;In PyTorch, we use tensors of dtype &lt;code&gt;torch.bool&lt;/code&gt; to hold boolean masks.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="reshape"&gt;Reshape
&lt;/h4&gt;&lt;p&gt;PyTorch provides many ways to manipulate the shapes of tensors. The simplest example is &lt;a class="link" href="https://pytorch.org/docs/stable/generated/torch.Tensor.view.html" target="_blank" rel="noopener"
&gt;&lt;code&gt;.view()&lt;/code&gt;&lt;/a&gt;: This returns a new tensor with the same number of elements as its input, but with a different shape.&lt;/p&gt;
&lt;p&gt;As its name implies, a tensor returned by &lt;code&gt;.view()&lt;/code&gt; shares the same data as the input, so changes to one will affect the other and vice-versa&lt;/p&gt;
&lt;p&gt;We can use &lt;code&gt;.view()&lt;/code&gt; to flatten matrices into vectors, and to convert rank-1 vectors into rank-2 row or column matrices:&lt;/p&gt;
&lt;p&gt;As a convenience, calls to &lt;code&gt;.view()&lt;/code&gt; may include a single -1 argument; this puts enough elements on that dimension so that the output has the same number of elements as the input. This makes it easy to write some reshape operations in a way that is agnostic to the shape of the tensor&lt;/p&gt;
&lt;p&gt;In general, you should only use &lt;code&gt;.view()&lt;/code&gt; to add new dimensions to a tensor, or to collapse adjacent dimensions of a tensor.&lt;/p&gt;
&lt;p&gt;For tensors with more than two dimensions, we can use the function &lt;a class="link" href="https://pytorch.org/docs/stable/generated/torch.transpose.html" target="_blank" rel="noopener"
&gt;&lt;code&gt;torch.transpose&lt;/code&gt;&lt;/a&gt;) to swap arbitrary dimensions.&lt;/p&gt;
&lt;h4 id="computation"&gt;Computation
&lt;/h4&gt;&lt;h5 id="elementwise"&gt;Elementwise
&lt;/h5&gt;&lt;p&gt;Basic mathematical functions operate elementwise on tensors, and are available as operator overloads, as functions in the &lt;code&gt;torch&lt;/code&gt; module, and as instance methods on torch objects; all produce the same results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="matrix"&gt;matrix
&lt;/h5&gt;&lt;p&gt;Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. PyTorch provides a number of linear algebra functions that compute different types of vector and matrix products. The most commonly used are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://pytorch.org/docs/stable/generated/torch.dot.html" target="_blank" rel="noopener"
&gt;&lt;code&gt;torch.dot&lt;/code&gt;&lt;/a&gt;: Computes inner product of vectors&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://pytorch.org/docs/stable/generated/torch.mm.html" target="_blank" rel="noopener"
&gt;&lt;code&gt;torch.mm&lt;/code&gt;&lt;/a&gt;: Computes matrix-matrix products&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://pytorch.org/docs/stable/generated/torch.mv.html" target="_blank" rel="noopener"
&gt;&lt;code&gt;torch.mv&lt;/code&gt;&lt;/a&gt;: Computes matrix-vector products&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://pytorch.org/docs/stable/generated/torch.addmm.html" target="_blank" rel="noopener"
&gt;&lt;code&gt;torch.addmm&lt;/code&gt;&lt;/a&gt; / &lt;a class="link" href="https://pytorch.org/docs/stable/generated/torch.addmv.html" target="_blank" rel="noopener"
&gt;&lt;code&gt;torch.addmv&lt;/code&gt;&lt;/a&gt;: Computes matrix-matrix and matrix-vector multiplications plus a bias&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://pytorch.org/docs/stable/generated/torch.bmm.html" target="_blank" rel="noopener"
&gt;&lt;code&gt;torch.bmm&lt;/code&gt;&lt;/a&gt; / &lt;a class="link" href="https://pytorch.org/docs/stable/generated/torch.baddbmm.html" target="_blank" rel="noopener"
&gt;&lt;code&gt;torch.baddmm&lt;/code&gt;&lt;/a&gt;: Batched versions of &lt;code&gt;torch.mm&lt;/code&gt; and &lt;code&gt;torch.addmm&lt;/code&gt;, respectively&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://pytorch.org/docs/stable/generated/torch.matmul.html" target="_blank" rel="noopener"
&gt;&lt;code&gt;torch.matmul&lt;/code&gt;&lt;/a&gt;: General matrix product that performs different operations depending on the rank of the inputs. Confusingly, this is similar to &lt;code&gt;np.dot&lt;/code&gt; in numpy.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find a full list of the available linear algebra operators &lt;a class="link" href="https://pytorch.org/docs/stable/torch.html#blas-and-lapack-operations" target="_blank" rel="noopener"
&gt;in the documentation&lt;/a&gt;.
All of these functions are also available as Tensor instance methods, e.g. &lt;a class="link" href="https://pytorch.org/docs/stable/generated/torch.Tensor.dot.html" target="_blank" rel="noopener"
&gt;&lt;code&gt;Tensor.dot&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;torch.dot&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is an example of using &lt;code&gt;torch.dot&lt;/code&gt; to compute inner products. Like the other mathematical operators we&amp;rsquo;ve seen, most linear algebra operators are available both as functions in the &lt;code&gt;torch&lt;/code&gt; module and as instance methods of tensors:&lt;/p&gt;
&lt;h4 id="vectorization"&gt;vectorization
&lt;/h4&gt;&lt;p&gt;In many cases, avoiding explicit Python loops in your code and instead using PyTorch operators to handle looping internally will cause your code to run a lot faster. This style of writing code, called &lt;strong&gt;vectorization&lt;/strong&gt;, avoids overhead from the Python interpreter, and can also better parallelize the computation (e.g. across CPU cores, on on GPUs). Whenever possible you should strive to write vectorized code.&lt;/p&gt;
&lt;h5 id="gpu"&gt;GPU
&lt;/h5&gt;&lt;p&gt;All PyTorch tensors also have a &lt;code&gt;device&lt;/code&gt; attribute that specifies the device where the tensor is stored &amp;ndash; either CPU, or CUDA (for NVIDA GPUs). A tensor on a CUDA device will automatically use that device to accelerate all of its operations.&lt;/p&gt;
&lt;p&gt;Just as with datatypes, we can use the &lt;a class="link" href="https://pytorch.org/docs/1.1.0/tensors.html#torch.Tensor.to" target="_blank" rel="noopener"
&gt;&lt;code&gt;.to()&lt;/code&gt;&lt;/a&gt; method to change the device of a tensor. We can also use the convenience methods &lt;code&gt;.cuda()&lt;/code&gt; and &lt;code&gt;.cpu()&lt;/code&gt; methods to move tensors between CPU and GPU.&lt;/p&gt;
&lt;p&gt;squared_euclidean_distance(train_data,train_data.view(-1))&lt;/p&gt;</description></item><item><title>【Stanford Compilers】Notes</title><link>https://dyhes.github.io/p/stanford-compilersnotes/</link><pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/stanford-compilersnotes/</guid><description>&lt;p&gt;Purpose of the compiler is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to detect non-valid programs&lt;/li&gt;
&lt;li&gt;to translate to valid ones&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="lexical-analysis"&gt;Lexical Analysis
&lt;/h2&gt;&lt;p&gt;partition the strings into tokens&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Token Class&lt;/strong&gt;: Identifier, Keyword &amp;hellip;&lt;/p&gt;
&lt;h3 id="regular-languages"&gt;&lt;strong&gt;Regular Languages&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Def. The regular expressions over $\sum$ are the smallest set of expressions including&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Union&lt;/li&gt;
&lt;li&gt;Concatenation&lt;/li&gt;
&lt;li&gt;Iteration&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="formal-languages"&gt;&lt;strong&gt;Formal Languages&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Def. Let $\sum$ be a set of characters (an alphabet). A language over $\sum$ is &lt;strong&gt;a set of strings of characters&lt;/strong&gt; drawn from $\sum$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A regular language is a type of formal language that &lt;strong&gt;can be generated by a regular expression or recognized by a finite automaton (FA)&lt;/strong&gt;. Regular languages are a subset of the class of formal languages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;meaning(mapping from syntax to semantics) is many to one rather than one to many.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="lexical-specification"&gt;&lt;strong&gt;Lexical Specification&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;maximal match&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;prioritized match&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Error match&lt;/p&gt;
&lt;p&gt;Error = {all strings not in the lexical specification}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="finite-automata"&gt;&lt;strong&gt;Finite Automata&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;regular expressions = specification&lt;/li&gt;
&lt;li&gt;finite automata = implementation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;a finite automaton consists of&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An input alphabet $\sum$&lt;/li&gt;
&lt;li&gt;A set of states $S$&lt;/li&gt;
&lt;li&gt;A start state $n$&lt;/li&gt;
&lt;li&gt;A set of accepting states $F\subseteq S$&lt;/li&gt;
&lt;li&gt;A set of transitions $state \rightarrow^{input} state$&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="deterministic-finite-automatadfa"&gt;&lt;strong&gt;Deterministic Finite Automata(DFA)&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;one transition per input per state&lt;/li&gt;
&lt;li&gt;No $\epsilon-$moves&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="nondeterministic-finite-automatanfa"&gt;&lt;strong&gt;Nondeterministic Finite Automata(NFA)&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;can have multiple transitions for one input in a given state&lt;/li&gt;
&lt;li&gt;can have $\epsilon-$moves&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DFAs are faster to execute&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/VQvZzgS/image-20230310211302078.png"
loading="lazy"
alt="image-20230310211302078"
&gt;&lt;/p&gt;
&lt;h5 id="subset-method-for-nfa-determinization"&gt;&lt;strong&gt;Subset Method for NFA Determinization&lt;/strong&gt;
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;$\epsilon-closure$&lt;/li&gt;
&lt;li&gt;transition&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="partition-method-for-dfa-minimization"&gt;&lt;strong&gt;Partition Method for DFA Minimization&lt;/strong&gt;
&lt;/h5&gt;&lt;h2 id="syntactic-analysis-parsing"&gt;Syntactic Analysis (Parsing)
&lt;/h2&gt;&lt;h3 id="cfg"&gt;&lt;strong&gt;CFG&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;CFG (context-free grammars) are a natural notation for the recursive structure of programming languages.&lt;/p&gt;
&lt;p&gt;A CFG consists of&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A set of terminals $T$&lt;/li&gt;
&lt;li&gt;A set of non-terminals $N$&lt;/li&gt;
&lt;li&gt;A start symbol $S$&lt;/li&gt;
&lt;li&gt;A set of productions (Productions can be read as rules)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;steps:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Begin with a string with only the start symbol $S$&lt;/li&gt;
&lt;li&gt;Replace any non-terminal $X$ in the string by the right-hand side of some production $X \rightarrow Y_1&amp;hellip;Y_n$&lt;/li&gt;
&lt;li&gt;Repeat 2. until there are no non-terminals&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Def. Let $G$ be a context-free grammar with start symbol $S$. Then the language $L(G)$ of $G$ is:
$$
{a_1&amp;hellip;a_n| a}
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Terminals are so-called because there are no rules for replacing them&lt;/li&gt;
&lt;li&gt;Once generated, terminals are permanent&lt;/li&gt;
&lt;li&gt;Terminals ought to be tokens of the language&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="derivations"&gt;Derivations
&lt;/h3&gt;&lt;p&gt;A derivation is a sequence of productions
$$
S\rightarrow &amp;hellip; \rightarrow &amp;hellip; \rightarrow &amp;hellip; \rightarrow &amp;hellip;
$$
A derivation can be drawn as a tree&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start symbol is the tree&amp;rsquo;s root&lt;/li&gt;
&lt;li&gt;For a production $X\rightarrow Y_1&amp;hellip;Y_n$ add children $Y_1&amp;hellip;Y_n$ to node $X$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;left-most derivation: at each step, replace the left-most non-terminal&lt;/p&gt;
&lt;p&gt;right-most derivation: at each step, replace the right-most non-terminal&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;right-most and left-most derivations have the same parse tree&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="parse-tree"&gt;Parse Tree
&lt;/h3&gt;&lt;p&gt;A parse tree has&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;terminals at the leaves&lt;/li&gt;
&lt;li&gt;non-terminals at the interior nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A in-order traversal of the leaves is the original input&lt;/p&gt;
&lt;p&gt;The parse tree shows the association of operations, the input string does not&lt;/p&gt;
&lt;h3 id="ambiguity"&gt;Ambiguity
&lt;/h3&gt;&lt;p&gt;A grammar is ambiguous if it has more than one parse tree for some string. Equivalently, there is more than one right-most or left-most derivation for some string&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Impossible to convert automatically an ambiguous grammar to an unanbiguous one&lt;/li&gt;
&lt;li&gt;Used with care, ambiguity can simplify the grammar
&lt;ul&gt;
&lt;li&gt;sometimes allows more natural definitions&lt;/li&gt;
&lt;li&gt;we need disambiguation mechanisms&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;most tools allow &lt;strong&gt;precedence and associativity declarations&lt;/strong&gt; to disambiguate grammars&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="error-handling"&gt;Error Handling
&lt;/h3&gt;&lt;h4 id="panic-mode"&gt;Panic mode
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;when an error is detected:
&lt;ul&gt;
&lt;li&gt;discard tokens until one with a clear role is found&lt;/li&gt;
&lt;li&gt;continue from there&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Looking for synchronizing tokens
&lt;ul&gt;
&lt;li&gt;typically the statement or expression terminators&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="error-productions"&gt;Error productions
&lt;/h4&gt;&lt;p&gt;specify known common mistakes in the grammar&lt;/p&gt;
&lt;h4 id="abstract-syntax-tree"&gt;Abstract Syntax Tree
&lt;/h4&gt;&lt;p&gt;Like parse trees but ignore some details&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A parse tree&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Traces the operation of the parser&lt;/li&gt;
&lt;li&gt;Captures nesting structure&lt;/li&gt;
&lt;li&gt;But too much information
&lt;ul&gt;
&lt;li&gt;Parentheses&lt;/li&gt;
&lt;li&gt;Single-successor nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Abstract Syntax Tree&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Also captures the nesting structure&lt;/li&gt;
&lt;li&gt;But abstracts from the concrete syntax
&lt;ul&gt;
&lt;li&gt;more compact and easier to use&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;An important data structure in a compiler&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="recursive-descent-algorithm"&gt;Recursive Descent Algorithm
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;The parse tree is constructed
&lt;ul&gt;
&lt;li&gt;from the top to down&lt;/li&gt;
&lt;li&gt;from left to right&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Terminals are seen in order of appearance in the token stream&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/tYRgn6W/image-20230311164126008.png"
loading="lazy"
alt="image-20230311164126008"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Limitation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if a production for non-terminal X succeeds cannot backtrack to try a different production for X later&lt;/li&gt;
&lt;li&gt;Left-recursion must be eliminated first&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sufficient for grammars where for any non-terminal at most one production can succeed&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;left recursion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;eg: $S-&amp;gt;Sa$, can be eliminated&lt;/p&gt;
&lt;h3 id="predictive-parser"&gt;Predictive Parser
&lt;/h3&gt;&lt;p&gt;like recursive-descent but parser can &amp;ldquo;predict&amp;rdquo; which production to use&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by looking at the next few tokens&lt;/li&gt;
&lt;li&gt;no backtracking&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Predictive parsers accept LL(k) (&lt;strong&gt;left-to-right left-most k-tokens-lookahead&lt;/strong&gt;) grammars&lt;/p&gt;
&lt;p&gt;LL(1): at each step, only one choice of production&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;left-factoring&lt;/strong&gt;: to eliminate the common prefixes of multiple productions for one non-terminal&lt;/p&gt;
&lt;p&gt;steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for the leftmost non-terminal $S$&lt;/li&gt;
&lt;li&gt;look at the next input token $a$&lt;/li&gt;
&lt;li&gt;choose the production shown at $[S, a]$ (parsing table)&lt;/li&gt;
&lt;li&gt;reject on reaching error state&lt;/li&gt;
&lt;li&gt;accept on end of input &amp;amp; empty stack&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;use a stack to record frontier of parse tree&lt;/p&gt;
&lt;p&gt;frontier:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;non-terminals that have yet to be expanded&lt;/li&gt;
&lt;li&gt;terminals that have yet to matched against the input&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;top of stack: leftmost pending terminal or non-terminal&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;consider non-terminal $A$, production $A\rightarrow \alpha$ and token $t$&lt;/li&gt;
&lt;li&gt;$T[A,t] = \alpha$ in two cases:&lt;/li&gt;
&lt;li&gt;if $\alpha \rightarrow^{*} t\beta$
&lt;ul&gt;
&lt;li&gt;$\alpha$ can derive a $t$ in the first position&lt;/li&gt;
&lt;li&gt;we say that $t\in First(\alpha)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;if $A\rightarrow \alpha$ and $\alpha \rightarrow^{&lt;em&gt;} \epsilon$ and $S\rightarrow^{&lt;/em&gt;} \beta A t \delta$
&lt;ul&gt;
&lt;li&gt;useful if stack has $A$, input is $t$, and $A$ cannot derive $t$&lt;/li&gt;
&lt;li&gt;in this case only option is to get rid of $A$ (by deriving $\epsilon$) : can work only if $t$ can follow $A$ in at least one derivation&lt;/li&gt;
&lt;li&gt;We say that $t\in Follow(A)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="first-set"&gt;&lt;strong&gt;First Set&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;Def.
$$
First(X)={t|X\rightarrow^{&lt;em&gt;}t\alpha}\cup{\epsilon | X\rightarrow^{&lt;/em&gt;}\epsilon}
$$
&lt;strong&gt;Algorithm&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$First(t)={t}$&lt;/li&gt;
&lt;li&gt;$\epsilon\in First(X)$
&lt;ul&gt;
&lt;li&gt;if $X\rightarrow \epsilon$&lt;/li&gt;
&lt;li&gt;if $X\rightarrow A_1&amp;hellip;A_n$ and $\epsilon\in First(A_i)$ for $1\le i \le n$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$First(\alpha)\subseteq First(X)$ if $X\rightarrow A_1&amp;hellip;A_n\alpha$ and $\epsilon\in First(A_i)$ for $1\le i \le n$&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="follow-set"&gt;Follow Set
&lt;/h4&gt;&lt;p&gt;Def.
$$
Follow(X) = {t|S\rightarrow^{*} \beta A t \delta}
$$
intuition&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if $X\rightarrow AB$ then $First(B)\subseteq Follow(A)$ and $Follow(X)\subseteq Follow(B)$&lt;/li&gt;
&lt;li&gt;if $B\rightarrow^{*}\epsilon$ then $Follow(X)\subseteq Follow(A)$&lt;/li&gt;
&lt;li&gt;if $S$ is the start symbol then $$\in Follow(S)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Algorithm&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$$\in Follow(S)$&lt;/li&gt;
&lt;li&gt;$First(\beta) -{\epsilon}\subseteq Follow(X)$ for each production $A\rightarrow\alpha X\beta$&lt;/li&gt;
&lt;li&gt;$Follow(A)\subseteq Follow(X)$ for each production $A\rightarrow \alpha X\beta$ where $\epsilon\in First(\beta)$&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="parsing-table"&gt;Parsing Table
&lt;/h4&gt;&lt;p&gt;for each production $A\rightarrow \alpha$ in G do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for each terminal $t\in First(\alpha)$ do $T[A,t] = \alpha$&lt;/li&gt;
&lt;li&gt;if $\epsilon\in First(\alpha)$, for each $t\in Follow(A)$ do $T[A,t] = \alpha$&lt;/li&gt;
&lt;li&gt;if $\epsilon \in First(\alpha)$ and $$\in Follow(A)$ do $T[A,$] = \alpha$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;LL(1) Table&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if any entry is multiply defined then G is not LL(1)&lt;/li&gt;
&lt;li&gt;Most programming language CFGs are not LL(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bottom-up-parsing"&gt;Bottom-Up Parsing
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Bottom-Up parsing is more general than (deterministic) top-down parsing&lt;/li&gt;
&lt;li&gt;Bottom-Up is the preferred method&lt;/li&gt;
&lt;li&gt;Bottom-Up parsing reduces a string to the start symbol by inverting productions&lt;/li&gt;
&lt;li&gt;A bottom-up parser traces a rightmost derivation in reverse&lt;/li&gt;
&lt;li&gt;Bottom-up parsing uses only two kinds of actions
&lt;ul&gt;
&lt;li&gt;Shift&lt;/li&gt;
&lt;li&gt;Reduce&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;shift-reduce conflict&lt;/strong&gt;: it is legal to shift or reduce&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;reduce-reduce conflict&lt;/strong&gt;: it is legal to reduce by two different productions (bad)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Handle&lt;/strong&gt;: a reduction that also allows further reductions back to the start symbol&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;handles always appear at the top of the stack&lt;/li&gt;
&lt;li&gt;never to the left of the rightmost non-terminal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bottom-up parsing algorithms are based on recognizing handles&lt;/p&gt;
&lt;h4 id="viable-prefix"&gt;viable prefix
&lt;/h4&gt;&lt;p&gt;Def. $\alpha$ is a viable prefix if there is an $\omega$ such that $\alpha|\omega$ is a state of a shift-reduce parser&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a viable prefix does not extend past the right end of the handle&lt;/li&gt;
&lt;li&gt;viable prefix is a prefix of the handle&lt;/li&gt;
&lt;li&gt;as long as a parser has viable prefixes on the stack no parsing error has been detected&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;For any grammar, the set of viable prefixes is a regular language&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="recognizing-vp"&gt;Recognizing VP
&lt;/h4&gt;&lt;p&gt;steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;add a dummy production $S^{&amp;rsquo;}\rightarrow S$ to $G$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The NFA states are the items of $G$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for item $E\rightarrow \alpha .X\beta$ add transition:
$$
(E\rightarrow \alpha.X\beta)\rightarrow^{X}(E\rightarrow \alpha X.\beta)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For item $E\rightarrow \alpha.X\beta$ and production $X\rightarrow \gamma$ add
$$
(E\rightarrow \alpha.X\beta)\rightarrow^{\epsilon}(X\rightarrow.\gamma)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;every state is an accepting state&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;start state is $S^{&amp;rsquo;}\rightarrow .S$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="lr0-parsing"&gt;LR(0) Parsing
&lt;/h4&gt;&lt;p&gt;LR(0) Parsing steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LR(0) Parsing: Assume
&lt;ul&gt;
&lt;li&gt;stack contains $\alpha$&lt;/li&gt;
&lt;li&gt;next input is $t$&lt;/li&gt;
&lt;li&gt;DFA on input $\alpha$ terminates in state $s$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reduce by $X\rightarrow\beta$ if
&lt;ul&gt;
&lt;li&gt;$s$ contains item $X\rightarrow\beta.$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shift if
&lt;ul&gt;
&lt;li&gt;$s$ contains item $X\rightarrow\beta.t\omega$&lt;/li&gt;
&lt;li&gt;equivalent to saying $s$ has a transition labeled $t$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LR(0) gas a reduce/reduce conflict if:
&lt;ul&gt;
&lt;li&gt;any state has two reduce items&lt;/li&gt;
&lt;li&gt;$X\rightarrow \beta.$ and $Y\rightarrow \omega$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LR(0) has a shift/reduce conflict if:
&lt;ul&gt;
&lt;li&gt;any state has a reduce item and a shift item&lt;/li&gt;
&lt;li&gt;$X\rightarrow \beta.$ and $Y\rightarrow\omega .t \delta$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="slr-parsing"&gt;SLR Parsing
&lt;/h4&gt;&lt;p&gt;simple left-to-right right-most parsing&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Assume
&lt;ul&gt;
&lt;li&gt;stack contains $\alpha$&lt;/li&gt;
&lt;li&gt;next input is $t$&lt;/li&gt;
&lt;li&gt;DFA on input $\alpha$ terminates in state $s$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reduce by $X\rightarrow\beta$ if
&lt;ul&gt;
&lt;li&gt;$s$ contains item $X\rightarrow\beta.$ and $t\in Follow(X)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shift if
&lt;ul&gt;
&lt;li&gt;$s$ contains item $X\rightarrow\beta.t\omega$&lt;/li&gt;
&lt;li&gt;equivalent to saying $s$ has a transition labeled $t$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LR(0) gas a reduce/reduce conflict if:
&lt;ul&gt;
&lt;li&gt;any state has two reduce items&lt;/li&gt;
&lt;li&gt;$X\rightarrow \beta.$ and $Y\rightarrow \omega$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LR(0) has a shift/reduce conflict if:
&lt;ul&gt;
&lt;li&gt;any state has a reduce item and a shift item&lt;/li&gt;
&lt;li&gt;$X\rightarrow \beta.$ and $Y\rightarrow\omega .t \delta$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;let $M$ be DFA for viable prefixes of $G$&lt;/li&gt;
&lt;li&gt;let $|x_1&amp;hellip;x_n$$ be initial configuration&lt;/li&gt;
&lt;li&gt;repeat until configuration is $S|$$
&lt;ul&gt;
&lt;li&gt;let $\alpha|\omega$ be current configuration&lt;/li&gt;
&lt;li&gt;run $M$ on current stack $\alpha$&lt;/li&gt;
&lt;li&gt;if $M$ rejects $\alpha$, report parsing error&lt;/li&gt;
&lt;li&gt;if $M$ accepts $\alpha$ with items $I$, let $a$ be next input
&lt;ul&gt;
&lt;li&gt;shift if $X\rightarrow \beta.a\gamma\in I$&lt;/li&gt;
&lt;li&gt;reduce if $X\rightarrow \beta.\in I$ and $a\in Follow(X)$&lt;/li&gt;
&lt;li&gt;report parsing error if neither applies&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="improvement"&gt;Improvement
&lt;/h5&gt;&lt;p&gt;change stack to contain pairs
$$
&amp;lt;Symbol,DFA\space State&amp;gt;
$$
the bottom of the stack is $&amp;lt;any, start&amp;gt;$ where&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$any$ is any dummy symbol&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$start$ is the start of state of the DFA&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define $goto[i,A]=j$ if $state_i\rightarrow^{A}state_j$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$goto$ is just the transition function of the DFA&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="semantic-analysis"&gt;Semantic Analysis
&lt;/h2&gt;&lt;p&gt;last &amp;ldquo;front end&amp;rdquo; phase&lt;/p&gt;
&lt;p&gt;catches all remaining errors&lt;/p&gt;
&lt;h3 id="scope"&gt;Scope
&lt;/h3&gt;&lt;p&gt;matching identifier declarations with uses&lt;/p&gt;
&lt;p&gt;the scope of an identifier is &lt;strong&gt;the portion of a program in which that identifier is accessible&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;most languages have static scope: scope depends only on the program text, not run-time behavior&lt;/p&gt;
&lt;p&gt;a few languages are dynamically scoped: scope depends on execution of the program&lt;/p&gt;
&lt;h3 id="symbol-tables"&gt;Symbol Tables
&lt;/h3&gt;&lt;p&gt;much of semantic analysis can be expressed as a recursive descent of an AST&lt;/p&gt;
&lt;p&gt;A symbol table is a data structure that tracks the current bindings of identifiers&lt;/p&gt;
&lt;h3 id="types"&gt;Types
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;the notion varies from language to language&lt;/li&gt;
&lt;li&gt;consensus
&lt;ul&gt;
&lt;li&gt;a set of values&lt;/li&gt;
&lt;li&gt;a set of operations on those values&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;classes are one instantiation of the modern notion of type&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the goal of type checking is to ensure that operations are used with the correct types&lt;/p&gt;
&lt;p&gt;three kinds of languages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Statically typed: all or almost all checking of types is done as part of compilation (C, Java)&lt;/li&gt;
&lt;li&gt;Dynamically typed: Almost all checking of types is done as part of program execution&lt;/li&gt;
&lt;li&gt;Untyped: No type checking (machine code)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A lot of code is written in statically typed languages with an &amp;ldquo;escape&amp;rdquo; mechanism&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type Checking is the process of verifying fully typed programs&lt;/li&gt;
&lt;li&gt;Type Inference is the process of filling in missing type information&lt;/li&gt;
&lt;li&gt;The two are different, but the terms are often used interchangeably&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="type-checking"&gt;Type Checking
&lt;/h4&gt;&lt;p&gt;A type system is sound if&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;whenever $\vdash e: T$&lt;/li&gt;
&lt;li&gt;then $e$ evaluates to a value of type $T$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;we only want sound rules, but some sound rules are better than others&lt;/p&gt;
&lt;p&gt;Type checking proves fact $e: T$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;proof is on the structure of the AST&lt;/li&gt;
&lt;li&gt;proof has the shape of the AST&lt;/li&gt;
&lt;li&gt;one type rule is used for each AST node&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;in the type rule used for a node $e$:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hypotheses are the proofs of types of $e$&amp;rsquo;s subexpressions&lt;/li&gt;
&lt;li&gt;conclusion is the type of $e$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;types are computed in a bottom-up pass over the AST&lt;/p&gt;
&lt;h4 id="type-environment"&gt;Type environment
&lt;/h4&gt;&lt;p&gt;a type environment gives types for free variables&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a type environment is a function from Object Identifiers to Types&lt;/li&gt;
&lt;li&gt;A variable is &lt;strong&gt;free&lt;/strong&gt; in an expression if it is not defined within the expression&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;let $O$ be a function from $ObjectIdentifiers$ to $Types$&lt;/p&gt;
&lt;p&gt;the sentence $O \vdash e: T$ is read: Under the assumption that variables have the types given by $O$, it is provable that the expression $e$ has the type $T$&lt;/p&gt;
&lt;p&gt;and we can write new rules:
$$
\frac{O(x)=T}{O\vdash x: T}
$$
The type environment is passed down the AST from the root towards the leaves&lt;/p&gt;
&lt;p&gt;Types are computed up the AST from the leaves towards the root&lt;/p&gt;
&lt;h4 id="subtyping"&gt;Subtyping
&lt;/h4&gt;&lt;p&gt;Define a relation $\le$ on classes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$X\le X$&lt;/li&gt;
&lt;li&gt;$X\le Y$ if $X$ inherits from $Y$&lt;/li&gt;
&lt;li&gt;$X\le Z$ if $X\le Y$ and $Y\le Z$&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="typing-methods"&gt;Typing Methods
&lt;/h4&gt;&lt;p&gt;method environment $M$&lt;/p&gt;
&lt;h4 id="general-themes"&gt;General themes
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Type rules are defined on the structure of expressions&lt;/li&gt;
&lt;li&gt;Types of variables are modeled by an environment&lt;/li&gt;
&lt;li&gt;cam be implemented in a single traversal over the AST&lt;/li&gt;
&lt;li&gt;Type environment is passes down the tree&lt;/li&gt;
&lt;li&gt;Types are passed up the tree&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="self_type"&gt;SELF_TYPE
&lt;/h4&gt;&lt;p&gt;if $SELF_TYPE $ appears textually in the class $C$ as the declared type of $E$ then
$$
dynamic_type(E)\le C
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in type checking it is always safe to replace $SELF_TYPE_c$ by $C$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="code-generation"&gt;Code Generation
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Management of run-time resources&lt;/li&gt;
&lt;li&gt;Correspondence between
&lt;ul&gt;
&lt;li&gt;static (compile-time)&lt;/li&gt;
&lt;li&gt;dynamic (run-time)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Storage organization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;compiler is responsible for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generating code&lt;/li&gt;
&lt;li&gt;Orchestrating use of the data area&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;two goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;correctness&lt;/li&gt;
&lt;li&gt;speed&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="activations"&gt;Activations
&lt;/h3&gt;&lt;p&gt;an invocation of procedure $P$ is an activation of $P$&lt;/p&gt;
&lt;p&gt;the lifetime of an activation of $P$ is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;all the steps to execute $P$&lt;/li&gt;
&lt;li&gt;including all the steps in procedures $P$ calls&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the lifetime of a variable $x$ is the portion of execution in which $x$ is defined&lt;/p&gt;
&lt;p&gt;note&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lifetime is a dynamic (run-time) concept&lt;/li&gt;
&lt;li&gt;scope is a static concept&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;lifetimes of procedure activations are properly nested&lt;/p&gt;
&lt;p&gt;activation lifetimes can be depicted as a tree&lt;/p&gt;
&lt;p&gt;the activation tree depends on run-time behavior&lt;/p&gt;
&lt;p&gt;since activations are properly nested, a stack can track currently active procedures&lt;/p&gt;
&lt;h4 id="activation-record-ar"&gt;Activation Record (AR)
&lt;/h4&gt;&lt;p&gt;the information needed to manage one procedure activation is called an activation record (AR) or frame&lt;/p&gt;
&lt;p&gt;if procedure $F$ calls $G$, then $G$&amp;rsquo;s activation record contains a mix of info about $F$ and $G$, $G$&amp;rsquo;s AR contains information needed to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Complete execution of $G$&lt;/li&gt;
&lt;li&gt;Resume execution of $F$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The compiler must determine, at compile-time, the layout of activation records and generate code that correctly accesses locations in the activation record&lt;/p&gt;
&lt;h3 id="globals--heap"&gt;Globals &amp;amp; Heap
&lt;/h3&gt;&lt;p&gt;Globals are assigned a fixed address once&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Variables with fixed address are &amp;ldquo;statically allocated&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A value that outlives the procedure that creates it cannot be kept in the AR&lt;/p&gt;
&lt;p&gt;Languages with dynamically allocated data use a Heap to store dynamic data&lt;/p&gt;
&lt;p&gt;Spaces&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/x1qwTLZ/image-20230314211257948.png"
loading="lazy"
alt="image-20230314211257948"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The code area contains object code&lt;/p&gt;
&lt;p&gt;for many languages, fixed size and read only&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The static area contains data (not code) with fixed addresses&lt;/p&gt;
&lt;p&gt;fixed size, may be readable and writable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The stack contains an AR for each currently active procedure&lt;/p&gt;
&lt;p&gt;each AR usually fixed size, contains locals&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Heap contains all other data&lt;/p&gt;
&lt;p&gt;heap is managed by malloc and free in C&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="alignment"&gt;Alignment
&lt;/h3&gt;&lt;p&gt;Data is word aligned if it begins at a word boundary&lt;/p&gt;
&lt;p&gt;Most machines have some alignment restrictions or performance penalties for poor alignment&lt;/p&gt;
&lt;h3 id="stack-machines"&gt;Stack Machines
&lt;/h3&gt;&lt;p&gt;only storage is a stack&lt;/p&gt;
&lt;p&gt;an instruction $r = F(a_1,&amp;hellip;a_n)$ :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pops $n$ operands from the stack&lt;/li&gt;
&lt;li&gt;Computes the operation $F$ using the operands&lt;/li&gt;
&lt;li&gt;Pushes the result $r$ on the stack&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;location of the operands/ result is not explicitly stated&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;always the top of the stack&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In contrast to a register machine&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add instead of add r1, r2, r3&lt;/li&gt;
&lt;li&gt;more compact programs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is an intermediate point between a pure stack machine and a pure register machine&lt;/p&gt;
&lt;p&gt;An n-register stack machine&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;conceptually, keep the top n locations of the pure stack machine&amp;rsquo;s stack in registers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;consider a 1-register stack machine&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the register is called the accumulator&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;consider an expression $op(e_1,&amp;hellip;,e_n)$, $e_1,&amp;hellip;,e_n$ are subexpressions&lt;/li&gt;
&lt;li&gt;for each $e_i$&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;compute $e_i$&lt;/li&gt;
&lt;li&gt;push result on the stack&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pop $n - 1$ values from the stack, compute $op$&lt;/li&gt;
&lt;li&gt;store result in the accumulator&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="code-generation-1"&gt;code generation
&lt;/h4&gt;&lt;p&gt;for each expression $e$ we generate MIPS code that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;computes the value of $e$ in $$a_0$&lt;/li&gt;
&lt;li&gt;Preserves $$sp$ and the contents of the stack&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;define a code generation function $cgen(e)$ whose result is the code generated for $e$&lt;/p&gt;
&lt;p&gt;code generation can be written as &lt;strong&gt;a recursive-descent of the AST&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="variables"&gt;variables
&lt;/h3&gt;&lt;p&gt;use a frame pointer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;always points to the return address on the stack&lt;/li&gt;
&lt;li&gt;since it does not move it can be used to find the variables&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;let $x_i$ be the $i-th$ formal parameter of the function for which code is being generated
$$
cgen(x_i) = lw\space $a_0\space 4*i($sp)
$$
The activation record must be designed together with the code generator&lt;/p&gt;
&lt;p&gt;Using a stack machine for compiler is recommended.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Production compilers&lt;/strong&gt; do different things&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;emphasis is on keeping values in registers&lt;/li&gt;
&lt;li&gt;intermediate results are laid out in the AR, not pushed and popped from the stack&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="temporaries"&gt;temporaries
&lt;/h3&gt;&lt;p&gt;the code generator must assign a fixed location in the AR for each temporary&lt;/p&gt;
&lt;p&gt;let $NT(e)$ = count of temps needed to evaluate $e$&lt;/p&gt;
&lt;p&gt;$NT(e_1+e_2)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;needs at least as many temporaries as $NT(e_1)$&lt;/li&gt;
&lt;li&gt;needs at least as many temporaries as $NT(e_2) + 1$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;for a function definition $f(x_1,&amp;hellip;,x_n) = e$ then AR has $2+n+NT(e)$ elements&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;return address&lt;/li&gt;
&lt;li&gt;frame pointer&lt;/li&gt;
&lt;li&gt;n arguments&lt;/li&gt;
&lt;li&gt;$NT(e)$ locations for intermediate results&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;code generation must know how many temporaries are in use at each point&lt;/p&gt;
&lt;p&gt;add a new argument to code generation: the position of the next available temporary&lt;/p&gt;
&lt;p&gt;the temporary area is used like a small, fixed-size stack&lt;/p&gt;
&lt;h3 id="object-layout"&gt;Object Layout
&lt;/h3&gt;&lt;p&gt;OO implementation = Basic code generation + More stuff&lt;/p&gt;
&lt;p&gt;OO slogan: If B is a subclass of A, then an object of class B can be used wherever an object of class A is expected&lt;/p&gt;
&lt;p&gt;This means that code in class A works unmodified for an object of class B&lt;/p&gt;
&lt;p&gt;Object are laid out in &lt;strong&gt;contiguous memory&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Class tag is an integer&lt;/p&gt;
&lt;p&gt;identifies class of the object&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object size is an integer&lt;/p&gt;
&lt;p&gt;size of the object in words&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dispatch ptr is a pointer to a table of methods&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;attributes in subsequent slots&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each attribute stored at a fixed offset in the object&lt;/p&gt;
&lt;p&gt;Observation: Given a layout for class A, a layout for subclass B can be defined by extending the layout of A with additional slots for the additional attributes of B&lt;/p&gt;
&lt;h2 id="semantics"&gt;Semantics
&lt;/h2&gt;&lt;p&gt;many ways to specify semantics:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operational Semantics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;describes program evaluation via execution rules (on an abstract machine)&lt;/li&gt;
&lt;li&gt;most useful for specifying implementations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Denotational Semantics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;program&amp;rsquo;s meaning is a mathematical function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Axiomatic Semantics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Program behavior described via logical formulae
&lt;ul&gt;
&lt;li&gt;if execution begins in state satisfying X, then it ends in state satisfying Y&lt;/li&gt;
&lt;li&gt;X, Y formulas&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Foundation of many program verification systems&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="operational-semantics"&gt;Operational Semantics
&lt;/h3&gt;&lt;p&gt;Recall the typing judgment
$$
Context \vdash e: C
$$
in the given context, expression e has type C&lt;/p&gt;
&lt;p&gt;We use something similar for evaluation
$$
Context \vdash e: v
$$
In the given context, expression e evaluates to value v&lt;/p&gt;
&lt;p&gt;We track variables and their values with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An environment : where in memory a variable is&lt;/li&gt;
&lt;li&gt;A store: what is in the memory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A variable environment maps variables to locations&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;keep track of which variables are in scope&lt;/li&gt;
&lt;li&gt;tells us where those variables are&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
E = [a: I_1,b : I_2]
$$&lt;/p&gt;
&lt;p&gt;A store maps memory locations to values
$$
S=[I_1\rightarrow5,I_2\rightarrow 7]
$$
$S^{&amp;rsquo;}= S[12/I_1]$ defines a store $S^{&amp;rsquo;}$ such that $S^{&amp;rsquo;}(I_1)=12$ and $S^{&amp;rsquo;} = S(I)$ if $I\ne I_1$&lt;/p&gt;
&lt;p&gt;The evaluation judgement is
$$
so, E, S\vdash e: v, S^{&amp;rsquo;}
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Given so the current value of self&lt;/li&gt;
&lt;li&gt;And E the current variable environment&lt;/li&gt;
&lt;li&gt;And S the current store&lt;/li&gt;
&lt;li&gt;If the evaluation of e terminates then&lt;/li&gt;
&lt;li&gt;The value of e is v&lt;/li&gt;
&lt;li&gt;And the new store is $S^{&amp;rsquo;}$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
E(id) = I_{id}\newline
S(I_{id}) = v \newline
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-\newline
so,E,S\vdash id:v,S
$$&lt;/p&gt;
&lt;h2 id="intermediate-code"&gt;Intermediate Code
&lt;/h2&gt;&lt;p&gt;A language between the source and the target&lt;/p&gt;
&lt;p&gt;Provides an intermediate level of abstraction&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;more details than the source&lt;/li&gt;
&lt;li&gt;fewer details than the target&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;high-level assembly&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;uses register names, but has an unlimited number&lt;/li&gt;
&lt;li&gt;uses control structures like assembly language&lt;/li&gt;
&lt;li&gt;uses opcodes but some are higher level&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;common form of intermediate code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;each instruction is of the form
$$
x:= y\space op\space z
\newline
x:= op\space y
$$
$y$ and $z$ are registers or constants&lt;/p&gt;
&lt;p&gt;similar to assembly code generation&lt;/p&gt;
&lt;p&gt;but use any number of IL registers to hold intermediate results&lt;/p&gt;
&lt;h2 id="optimization"&gt;Optimization
&lt;/h2&gt;&lt;p&gt;optimization is out &lt;strong&gt;last&lt;/strong&gt; compiler phase&lt;/p&gt;
&lt;p&gt;most &lt;strong&gt;complexity&lt;/strong&gt; in modern compilers is in the optimizer&lt;/p&gt;
&lt;p&gt;seeks to improve a program&amp;rsquo;s resource utilization&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;execution time (most often)&lt;/li&gt;
&lt;li&gt;code size&lt;/li&gt;
&lt;li&gt;network messages sent, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;when：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On AST&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pro: machine independent&lt;/li&gt;
&lt;li&gt;Con: too high level&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On assembly language&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pro: Exposes optimization opportunities&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Con:&lt;/p&gt;
&lt;p&gt;Machine dependent&lt;/p&gt;
&lt;p&gt;Must reimplement optimizations when retargeting&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On an intermediate language&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pro:&lt;/p&gt;
&lt;p&gt;Machine independent&lt;/p&gt;
&lt;p&gt;Exposes optimization opportunities&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="basic-block"&gt;Basic Block
&lt;/h3&gt;&lt;p&gt;A basic block is a maximal sequence of instructions with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no labels (except at the first instruction)&lt;/li&gt;
&lt;li&gt;no jumps (except at the last instruction)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;idea&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cannot jump into a basic block (except at beginning)&lt;/li&gt;
&lt;li&gt;cannot jump out of a basic block (except at end)&lt;/li&gt;
&lt;li&gt;a basic block is a single-entry, single-exit, straight-line code segment&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="control-flow-graph"&gt;control-flow graph
&lt;/h3&gt;&lt;p&gt;a control-flow-graph is a directed graph with&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;basic blocks as nodes&lt;/li&gt;
&lt;li&gt;an edge from block A to block B if the execution can pass form the last instruction in A to the first instruction in B&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the body of a method (or procedure) can be represented as a control-flow graph&lt;/p&gt;
&lt;h3 id="granularity"&gt;Granularity
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;local optimizations&lt;/p&gt;
&lt;p&gt;apply to a basic block in isolation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Global optimizations&lt;/p&gt;
&lt;p&gt;apply to a control-flow graph (method body) in isolation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inter-procedural optimizations&lt;/p&gt;
&lt;p&gt;apply across method boundaries&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;most compilers do 1. many do 2. few do 3.&lt;/p&gt;
&lt;p&gt;In practice, often a conscious decision is made not to implement the fanciest optimization known&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;some optimizations are hard to implement&lt;/li&gt;
&lt;li&gt;some optimizations are costly in compilation time&lt;/li&gt;
&lt;li&gt;some optimizations have low payoff&lt;/li&gt;
&lt;li&gt;many fancy optimizations are all three!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="local-optimization"&gt;Local Optimization
&lt;/h3&gt;&lt;p&gt;optimize one basic block&lt;/p&gt;
&lt;p&gt;no need to analyze the whole procedure body&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;some statement can be deleted&lt;/p&gt;
&lt;p&gt;$x:= x + 0$&lt;/p&gt;
&lt;p&gt;$x:= x*1$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;some statements can be simplified&lt;/p&gt;
&lt;p&gt;$x:=x*0$ to $x:=0$&lt;/p&gt;
&lt;p&gt;$y:= y**2$ to $y:=y*y$&lt;/p&gt;
&lt;p&gt;$x:=x*8$ to $x:=x&amp;laquo;3$&lt;/p&gt;
&lt;p&gt;$x:=x*15$ to $t:=x &amp;laquo; 4; x:=t-x$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Operations on constants can be computed at compile time&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if there is a statement $x:=y\space op\space z$&lt;/li&gt;
&lt;li&gt;and $y$ and $z$ are constants&lt;/li&gt;
&lt;li&gt;then $y$ op $z$ can be computed at compile time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;constant folding can be dangerous&lt;/p&gt;
&lt;p&gt;in cross-compiler&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Eliminate unreachable blocks&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;some optimizations are simplified if each register occurs only once on the left-hand side of an assignment&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;common subexpression elimination&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;if&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;basic block is in single assignment form&lt;/li&gt;
&lt;li&gt;a definition $x:=$ is the first use of $x$ in a block&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;then&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When two assignments have the same rhs, they compute the same value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;copy propagation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;if $w:= x$ appears in a block, replace subsequent uses of $w$ with uses of $x$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dead elimination&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;if&lt;/p&gt;
&lt;p&gt;$w:=rhs$ appears in a basic block&lt;/p&gt;
&lt;p&gt;$w$ does not appear anywhere else in the program&lt;/p&gt;
&lt;p&gt;then&lt;/p&gt;
&lt;p&gt;the statement $w:=rhs$ is dead and can be eliminated&lt;/p&gt;
&lt;p&gt;typically optimizations interact: performing one optimization enables another&lt;/p&gt;
&lt;p&gt;optimizing compilers repeat optimizations until no improvement is possible&lt;/p&gt;
&lt;h4 id="peephole-optimization"&gt;Peephole optimization
&lt;/h4&gt;&lt;p&gt;optimizations can be directly applied to assembly code&lt;/p&gt;
&lt;p&gt;Peephole optimization is effective for improving assembly code&lt;/p&gt;
&lt;p&gt;the &amp;ldquo;peephole&amp;rdquo; is a short sequence of (usually contiguous) instructions&lt;/p&gt;
&lt;p&gt;the optimizer replaces the sequence with another equivalent one (but faster)&lt;/p&gt;
&lt;h3 id="global-optimization"&gt;Global Optimization
&lt;/h3&gt;&lt;p&gt;Global optimization tasks share several traits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The optimization depends on knowing a property X at a particular point in program execution&lt;/li&gt;
&lt;li&gt;Proving X at any point requires knowledge of the entire program&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="dataflow-analysis"&gt;Dataflow Analysis
&lt;/h4&gt;&lt;p&gt;To replace a use of x by a constant k we must know: on every path to the use of x, the last assignment to x is $x:=k$&lt;/p&gt;
&lt;p&gt;Checking the condition requires global dataflow analysis: an analysis of the entire control-flow graph&lt;/p&gt;</description></item><item><title>【Stanford Reinforcement Learning】Notes</title><link>https://dyhes.github.io/p/stanford-reinforcement-learningnotes/</link><pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/stanford-reinforcement-learningnotes/</guid><description>&lt;h2 id="lecture-1-intro"&gt;Lecture 1 (intro)
&lt;/h2&gt;&lt;h3 id="element"&gt;Element
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;environment&lt;/li&gt;
&lt;li&gt;agent&lt;/li&gt;
&lt;li&gt;action&lt;/li&gt;
&lt;li&gt;observation and reward&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="history"&gt;history
&lt;/h3&gt;&lt;p&gt;History $h_t=(a_1,o_1,r_1,&amp;hellip;,a_t,o_t,r_t)$&lt;/p&gt;
&lt;p&gt;agent choose action based on history&lt;/p&gt;
&lt;h3 id="state"&gt;state
&lt;/h3&gt;&lt;p&gt;state is information assumed to determine what happens next&lt;/p&gt;
&lt;p&gt;function of history $s_t=f(h_t)$&lt;/p&gt;
&lt;p&gt;The true state of the world used to determine how world generates next observation and reward are often hidden or unknown to agent&lt;/p&gt;
&lt;p&gt;assume state used by the agent is sufficient statistic of history&lt;/p&gt;
&lt;p&gt;In practice often assume most recent observation is sufficient statistic of history: $s_t=o_t$&lt;/p&gt;
&lt;p&gt;state representation has big implications for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;computational complexity&lt;/li&gt;
&lt;li&gt;data required&lt;/li&gt;
&lt;li&gt;resulting performance&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="markov"&gt;Markov
&lt;/h3&gt;&lt;p&gt;state $s_t$ is Markov if and only if:
$$
p(s_{t+1}|s_{t},a_{t})=p(s_{t+1}|h_t,a_{t})
$$
future is independent of past given present&lt;/p&gt;
&lt;p&gt;setting state as history always Markov: $s_t=h_t$&lt;/p&gt;
&lt;h3 id="rl-algorithm-component"&gt;RL Algorithm component
&lt;/h3&gt;&lt;p&gt;often include one or more of&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Model&lt;/p&gt;
&lt;p&gt;representation of how the world changes in response to agent&amp;rsquo;s action&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Policy&lt;/p&gt;
&lt;p&gt;function mapping agent&amp;rsquo;s states to action&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Value function&lt;/p&gt;
&lt;p&gt;future rewards from being in a state and/or action when following a particular policy&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="model"&gt;Model
&lt;/h3&gt;&lt;p&gt;mathematical models of dynamics and reward, including:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Transition/dynamics model&lt;/strong&gt; predicts next agent state
$$
p(s_{t+1}=s^{&amp;rsquo;}|s_t=s,a_t=a)
$$
&lt;strong&gt;Reward model&lt;/strong&gt; predicts &lt;strong&gt;immediate&lt;/strong&gt; reward
$$
r(s_t=s,a_t=a)=E[r_t|s_t=s,a_t=a]
$$&lt;/p&gt;
&lt;h3 id="policy"&gt;Policy
&lt;/h3&gt;&lt;p&gt;policy $\pi:S\to A$, mapping from states to actions, determines how the agent chooses actions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;deterministic: $\pi(s)=a$&lt;/li&gt;
&lt;li&gt;stochastic: $\pi(a|s)=Pr(a_t=a|s_t=s)$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="value"&gt;Value
&lt;/h3&gt;&lt;p&gt;value function $V^\pi$ expected discounted sum of future rewards under a particular policy $\pi$
$$
V^\pi(s_t=s)=E_\pi[r_t+\gamma r_{t+1}+\gamma^2r_{t+2}+&amp;hellip;|s_t=s]
$$
discount factor $\gamma$ weighs immediate vs future rewards&lt;/p&gt;
&lt;p&gt;can be used to quantify goodness/badness of states and actions and decide how to act by comparing policies&lt;/p&gt;
&lt;h3 id="types-of-rl-agents"&gt;Types of RL agents
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Model-based
&lt;ul&gt;
&lt;li&gt;Explicit: Model&lt;/li&gt;
&lt;li&gt;May or may not have policy and/ or value function&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Model-free
&lt;ul&gt;
&lt;li&gt;Explicit: Value function and /or policy function&lt;/li&gt;
&lt;li&gt;No model&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/SK1SPXp/image-20220928112645620.png"
loading="lazy"
alt="image-20220928112645620"
&gt;&lt;/p&gt;
&lt;h2 id="lecture-2-mdp"&gt;Lecture 2 (MDP)
&lt;/h2&gt;&lt;h3 id="markov-process"&gt;Markov Process
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$S$ is a (finite) set of states ($s\in S$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$P$ is dynamics/transition model that specifies $p(s_{t+1}=s{&amp;rsquo;}|s_t=s)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;no reward, no actions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if finite number ($N$) of states, can express $P$ as a matrix
$$
P=\begin{pmatrix}
P(s_1|s_1) &amp;amp; P(s_2|s_1) &amp;amp; &amp;hellip; &amp;amp;P(s_N|s_1)\
P(s_1|s_2) &amp;amp; P(s_2|s_2) &amp;amp; &amp;hellip; &amp;amp;P(s_N|s_2)\
&amp;hellip; &amp;amp; &amp;hellip; &amp;amp; &amp;hellip; &amp;amp; &amp;hellip;\
P(s_1|s_N) &amp;amp; P(s_2|s_N) &amp;amp; &amp;hellip; &amp;amp;P(s_N|s_N)\
\end{pmatrix}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A Markov chain is the discrete-time version of a Markov process.&lt;/p&gt;
&lt;h3 id="markov-reward-processmrp"&gt;Markov Reward Process(MRP)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;$S$ is a (finite) set of states ($s\in S$)&lt;/li&gt;
&lt;li&gt;$P$ is dynamics/transition model that specifies $P(s_{t+1}=s{&amp;rsquo;}|s_t=s)$&lt;/li&gt;
&lt;li&gt;$R$ is a reward function $R(s_t=s)=E[r_t|s_t=s]$&lt;/li&gt;
&lt;li&gt;Discount factor $\gamma\in [0,1]$&lt;/li&gt;
&lt;li&gt;no actions&lt;/li&gt;
&lt;li&gt;if finite number ($N$) of states, can express $R$ as a vector&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="horizon"&gt;horizon
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;number of time steps in each episode&lt;/li&gt;
&lt;li&gt;can be infinite&lt;/li&gt;
&lt;li&gt;otherwise called finite Markov reward process&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="return-g_t-for-a-mrp"&gt;Return $G_t$ (for a MRP)
&lt;/h4&gt;&lt;p&gt;discounted sum of rewards from time step $t$ to horizon
$$
G_t=r_t+\gamma r_{t+1}+\gamma^2r_{t+2}+&amp;hellip;
$$&lt;/p&gt;
&lt;h4 id="state-value-function-vs-for-a-mrp"&gt;State Value Function, $V(s)$ (for a MRP)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;expected return from starting in state $s$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
\begin{split}
V(s) &amp;amp; = E[G_t|s_t=s] \
&amp;amp; = E[r_t+\gamma r_{t+1}+\gamma^2r_{t+2}+&amp;hellip;|s_t=s]
\end{split}
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MRP value function satisfies
$$
V(s)=R(s)+\gamma\sum_{s^{&amp;rsquo;}\in S}P(s^{&amp;rsquo;}|s)V(s^{&amp;rsquo;})
$$
where $R(s)$ is immediate reward and the later part is the discounted sum of future rewards&lt;/p&gt;
&lt;p&gt;then:
$$
V=R+\gamma PV
$$
namely:
$$
V=(I-\gamma P)^{-1}R
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="markov-decision-process-mdp"&gt;Markov Decision Process (MDP)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;$S$ is a (finite) set of states ($s\in S$)&lt;/li&gt;
&lt;li&gt;$A$ is a (finite) set of actions $a\in A$&lt;/li&gt;
&lt;li&gt;$P$ is dynamics/transition model that specifies $P(s_{t+1}=s{&amp;rsquo;}|s_t=s，a_t=a)$&lt;/li&gt;
&lt;li&gt;$R$ is a reward function $R(s_t=s,a_t=a)=E[r_t|s_t=s,a_t=a]$&lt;/li&gt;
&lt;li&gt;Discount factor $\gamma\in [0,1]$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MDP is a tuple: $(S,A,P,R,\gamma)$&lt;/p&gt;
&lt;h3 id="policy-1"&gt;Policy
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;policy specifies what action to take in each state&lt;/p&gt;
&lt;p&gt;can be deterministic or stochastic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for generality, consider as a conditional ditribution&lt;/p&gt;
&lt;p&gt;given a state, specifies a distribution over actions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Policy: $\pi(a|s)=P(a_t=a|s_t=s)$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MDP+$\pi(a|s)$=Markov Reward Process&lt;/p&gt;
&lt;p&gt;precisely, it is the MRP $(S,R^\pi,P^\pi,\gamma)$, where
$$
R^\pi(s)=\sum_{a\in A}\pi(a|s)R(s,a)
\newline
P^\pi(s^{&amp;rsquo;}|s)=\sum_{a\in A}\pi(a|s)P(s^{&amp;rsquo;}|s,a)
$$
implies we can use same techniques to evaluate the value of a policy for a MDP as we could to compute the value of a MRP, by defining a MRP with $R^{\pi}$ and $P^{\pi}$&lt;/p&gt;
&lt;h3 id="control"&gt;control
&lt;/h3&gt;&lt;p&gt;compute the optimal policy
$$
\pi^*(s)=arg,max_{\pi}V^{\pi}(s)
$$
there exists an unique optimal value function&lt;/p&gt;
&lt;p&gt;but the optimal policy is not unique&lt;/p&gt;
&lt;p&gt;optimal policy for a MDP in an infinite horizon problem (agent a acts forever) is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;deterministic&lt;/li&gt;
&lt;li&gt;stationary (does not depend on time step)&lt;/li&gt;
&lt;li&gt;not necessarily unique&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="policy-iteration"&gt;Policy Iteration
&lt;/h4&gt;&lt;p&gt;computes optimal value and policy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set $i= 0$&lt;/li&gt;
&lt;li&gt;initialize $\pi_0(s)$ randomly for all states $s$&lt;/li&gt;
&lt;li&gt;while $i==0$ or $||\pi_i-\pi_{i-1}||_1&amp;gt;0$ (L1-norm, measures if the policy changed for any state):
&lt;ul&gt;
&lt;li&gt;$V^{\pi_i}\leftarrow$ MDP V function policy evaluation of $\pi_i$&lt;/li&gt;
&lt;li&gt;$\pi_{i+1}\leftarrow $ Policy improvement&lt;/li&gt;
&lt;li&gt;$i=i+1$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="state-action-value-q"&gt;State-Action Value Q
&lt;/h5&gt;&lt;p&gt;State-action value of a policy
$$
Q^{\pi}(s,a)=R(s,a)+\gamma\sum_{s^{&amp;rsquo;}\in S}P(s^{&amp;rsquo;}|s,a)V^{\pi}(s^{&amp;rsquo;})
$$
take action a, then follow the policy $\pi$ later on&lt;/p&gt;
&lt;h5 id="policy-improvement"&gt;policy improvement
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;compute state-action value of a policy $\pi_i$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for $s$ in $S$ and $a$ in $A$:
$$
Q^{\pi_i}(s,a)=R(s,a)+\gamma\sum_{s^{&amp;rsquo;}\in S}P(s^{&amp;rsquo;}|s,a)V^{\pi_i}(s^{&amp;rsquo;})
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;conpute new policy $\pi_{i+1}$, for all $s\in S$
$$
\pi_{i+1}(s)=arg,max_a,Q^{\pi_i}(s,a),\forall s\in S
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="definition"&gt;definition
&lt;/h5&gt;&lt;p&gt;$$
V^{\pi_1}\ge V^{\pi_2}:V^{\pi_1}(s)\ge V^{\pi_2}(s),\forall s\in S
$$&lt;/p&gt;
&lt;h4 id="value-iteration"&gt;Value Iteration
&lt;/h4&gt;&lt;p&gt;miantain optimal value of starting in a state $s$ if have a finite number of steps $k$ left in the episode&lt;/p&gt;
&lt;p&gt;iterate to consider longer and longer episodes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;set $k=1$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;initialize $V_0(s)=0$ all states $s$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;loop until finite horizon or convergence:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;for each state $s$
$$
V_{k+1}(s)=max_aR(s,a)+\gamma\sum_{s^{&amp;rsquo;}\in S}P^{\pi}(s^{&amp;rsquo;}|s)V^{\pi}(s^{&amp;rsquo;})
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;view as bellman backup on value function
$$
V_{k+1}=BV_k
\newline
\pi_{k+1}(s)=arg,max_aR(s,a)+\gamma\sum_{s^{&amp;rsquo;}\in S}P^{\pi}(s^{&amp;rsquo;}|s)V^{\pi}(s^{&amp;rsquo;})
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="bellman"&gt;Bellman
&lt;/h5&gt;&lt;p&gt;value function of a policy must satisfy the Bellman equation
$$
V^{\pi}(s)=R^{\pi}(s)+\gamma\sum_{s^{&amp;rsquo;}\in S}P^{\pi}(s^{&amp;rsquo;}|s)V^{\pi}(s^{&amp;rsquo;})
$$
bellman backup operator&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;applied to a value function&lt;/li&gt;
&lt;li&gt;returns a new value function&lt;/li&gt;
&lt;li&gt;improves the value if possible&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
BV(s)={max}&lt;em&gt;aR(s,a)+\gamma\sum&lt;/em&gt;{s^{&amp;rsquo;}\in S}P^{\pi}(s^{&amp;rsquo;}|s)V^{\pi}(s^{&amp;rsquo;})
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$BV$ yields a value function over all states $s$&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="policy-iteration-as-bellman-operations"&gt;Policy iteration as Bellman Operations
&lt;/h4&gt;&lt;p&gt;Bellman backup operator $B^{\pi}$ for a particular policy is defined as
$$
B^{\pi}V(s)=R^{\pi}(s)+\gamma\sum_{s^{&amp;rsquo;}\in S}P^{\pi}(s^{&amp;rsquo;}|s)V^{\pi}(s^{&amp;rsquo;})
$$
policy evaluation amounts to computing the fixed point of $B^{\pi}$&lt;/p&gt;
&lt;p&gt;to do policy evaluation. repeatedly apply operator until $V$ stops chaning
$$
V^{\pi}=B^{\pi}&amp;hellip;B^{\pi}V
$$&lt;/p&gt;
&lt;h2 id="lecture-3-model-free-evaluation"&gt;Lecture 3 (model-free evaluation)
&lt;/h2&gt;&lt;h3 id="dynamic-programming-for-policy-evaluation"&gt;Dynamic programming for policy evaluation
&lt;/h3&gt;&lt;p&gt;given dynamics model $p$ and reward model $r$, namely the model is known&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;initialize $V_0(s)=0$ all states $s$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for $k=1$ until convergence&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;for all $s$ in $S$&lt;/p&gt;
&lt;p&gt;$V_{k}^{\pi}(s)=r(s,\pi(s))+\gamma\sum_{s^{&amp;rsquo;}\in S}P(s^{&amp;rsquo;}|s,\pi(s))V^{\pi}_{k-1}(s^{&amp;rsquo;})$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$V_{k}^{\pi}(s)$ is exact value of $k$-horizon value of state $s$ under policy $\pi$, and it&amp;rsquo;s an estimate of infinite horizon value of state $s$ under policy $\pi$
$$
V_{k}^{\pi}(s)=E_{\pi}[G_t|s_t=s]\approx E_{\pi}[r_t+\gamma V_{k-1})|s_t=s]
$$&lt;/p&gt;
&lt;h3 id="monte-carlo-policy-evaluation"&gt;Monte Carlo policy evaluation
&lt;/h3&gt;&lt;p&gt;does not require MDP dynamics/rewards so are used when model is unkown
$$
V^{\pi}(s)=E_{T\sim \pi}[G_t|s_t=s]
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;expectation of trajectories $T$ generated by following $\pi$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the idea is Value = mean return&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;does not assume state is Markov&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;can only be applied to episodic MDPs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;averaging over returns from a complete episode&lt;/li&gt;
&lt;li&gt;requires each episode to terminate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;aim: estimate $V^\pi(s)$ given episodes generated under policy $\pi$&lt;/p&gt;
&lt;p&gt;$s_1,a_1,r_1,s_2,a_2,r_2,&amp;hellip;$ where the actions are sampled from $\pi$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;initialize $N(s)=0,G(s)=0\forall s\in S$&lt;/li&gt;
&lt;li&gt;loop
&lt;ul&gt;
&lt;li&gt;sample episode $i=s_{i,1},a_{i,1},r_{i,1},s_{i,2},a_{i,2},r_{i,2},&amp;hellip;,s_{i,T_i},a_{i,T_i},r_{i,T_i}$&lt;/li&gt;
&lt;li&gt;define $G_{i,t}=r_{i,t}+\gamma r_{i,t+1}+\gamma^2r_{i,t+2}+&amp;hellip;\gamma^{T_i-1}r_{i,T_i}$ as return from time step $t$ onwards in $ith$ episode&lt;/li&gt;
&lt;li&gt;for each state $s$ visited in episode $i$
&lt;ul&gt;
&lt;li&gt;for first time $t$ that state $s$ is visited in episode $i$
&lt;ul&gt;
&lt;li&gt;increment counter of total first visits: $N(s)=N(s)+1$&lt;/li&gt;
&lt;li&gt;increment total return $G(s)=G(s)+G_{i,t}$&lt;/li&gt;
&lt;li&gt;update estimate $V^{\pi}(s)=G(s)/N(s)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="every-visit-mc"&gt;Every-Visit MC
&lt;/h4&gt;&lt;p&gt;instead of for first time $t$ that state $s$ is visited in episode $i$, update $N(s),G(s)$ and $V^{\pi}(s)$ for every time $t$ that state $s$ is visited in episode $i$&lt;/p&gt;
&lt;p&gt;this estimator is biased but is consistent and often has better MSE&lt;/p&gt;
&lt;h4 id="incremental-mc"&gt;Incremental MC
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;sample episode $i=s_{i,1},a_{i,1},r_{i,1},s_{i,2},a_{i,2},r_{i,2},&amp;hellip;,s_{i,T_i},a_{i,T_i},r_{i,T_i}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;define $G_{i,t}=r_{i,t}+\gamma r_{i,t+1}+\gamma^2r_{i,t+2}+&amp;hellip;\gamma^{T_i-1}r_{i,T_i}$ as return from time step $t$ onwards in $ith$ episode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for state $s$ visited at time step $t$ in episode $i$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;increment counter of total visits: $N(s)=N(s)+1$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;update estimate
$$
V^{\pi}(s)=V^{\pi}(s)\frac{N(s)-1}{N(s)}+\frac{G_{i,t}}{N(s)}=V^{\pi}(s)+\frac{1}{N(s)}(G_{i,t}-V^{\pi}(s))
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="running-mean"&gt;Running Mean
&lt;/h5&gt;&lt;p&gt;estimation is updated as
$$
V^{\pi}(s)=V^{\pi}(s)+\alpha(G_{i,t}-V^{\pi}(s))
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\alpha=\frac{1}{N(s)}$: identical to every visit MC&lt;/li&gt;
&lt;li&gt;$\alpha\gt\frac{1}{N(s)}$: forget older data, helpful for non-stationary domains&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="temporal-differencetd"&gt;Temporal Difference(TD)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;combination of Monte Carlo &amp;amp; dynamic programming methods&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Model-free&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bootstraps and samples&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;can be used in episodic or infinite-horizon non-episodic settings&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;immediately updates estimate of $V$ after each $(s,a,r,s^{&amp;rsquo;})$ tuple&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;aim: estimate $v^{\pi}(s)$ given episodes generated under policy $\pi$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;have an estimate of $V^{\pi}$, use to estimate expected return
$$
V^{\pi}(s)=V^{\pi}(s)+\alpha([r_t+\gamma V^{\pi}(s_{t+1})]-V^{\pi}(s))
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TD learning&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initialize $V^{\pi}(s)=0\forall s\in S$&lt;/li&gt;
&lt;li&gt;loop
&lt;ul&gt;
&lt;li&gt;sample tuple $(s_t,a_t,r_t,s_{t+1})$&lt;/li&gt;
&lt;li&gt;$V^{\pi}(s_t)=V^{\pi}(s_t)+\alpha([r_t+\gamma V^{\pi}(s_{t+1})]-V^{\pi}(s_t))$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="lecture-4-model-free-control"&gt;Lecture 4 (model-free control)
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;on-policy learning&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;direct experience&lt;/li&gt;
&lt;li&gt;learn to estimate and evaluate a policy from experience obtained from following that policy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;off-policy learning&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;learn to estimate and evaluate a policy using experience gathered from following a different policy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="mc-for-on-policy-q-evaluation"&gt;MC for On Policy Q Evaluation
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;initialize $N(s,a)=0,G(s,a)=0,Q^{\pi}(s,a)=0,\forall s\in S,\forall a\in A$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;loop&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;using policy $\pi$ sample episode $i=s_{i,1},a_{i,1},r_{i,1},s_{i,2},a_{i,2},r_{i,2},&amp;hellip;,s_{i,T_i},a_{i,T_i},r_{i,T_i}$&lt;/li&gt;
&lt;li&gt;$G_{i,t}=r_{i,t}+\gamma r_{i,t+1}+\gamma^2r_{i,t+2}+&amp;hellip;\gamma^{T_i-1}r_{i,T_i}$&lt;/li&gt;
&lt;li&gt;for each state,action $(s,a)$ visited in episode $i$
&lt;ul&gt;
&lt;li&gt;for first or every time $t$ that state $(s,a)$ is visited in episode $i$
&lt;ul&gt;
&lt;li&gt;$N(s,a)=N(s,a)+1,G(s,a)=G(s,a)+G_{i,t}$&lt;/li&gt;
&lt;li&gt;update estimate $Q^{\pi}(s,a)=G(s,a)/N(s,a)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;given an estimate $Q^{\pi_i}(s,a)\forall s,a$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;update new policy
$$
\pi_{i+1}(s)=arg,max_a,Q^{\pi_i}(s,a)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="monotonic-epsilon-greedy-policy-improvement"&gt;Monotonic $\epsilon$-greedy policy improvement
&lt;/h3&gt;&lt;p&gt;for any $\epsilon$-greedy policy $\pi_i$, the ϵ-greedy policy w.r.t.(with respect to) $Q^{\pi_i}$, $\pi_{i+1}$ is a monotonic improvement $V^{\pi_{i+1}}\ge V^{\pi}$
$$
\begin{split}
Q^{\pi_i}(s,\pi_{i+1}(s)) &amp;amp; = \sum_{a\in A}\pi_{i+1}(a|s)Q^{\pi}(s,a) \
&amp;amp; = \frac{\epsilon}{|A|}\sum_{a\in A}Q^{\pi_i}(s,a)+(1-\epsilon)max_aQ^{\pi_i}(s,a)
\end{split}
$$&lt;/p&gt;
&lt;h3 id="greedy-in-the-limit-of-infinite-explorationglie"&gt;Greedy in the Limit of Infinite Exploration(GLIE)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;all state-action pair are visited an infinite number of times
$$
{lim}_{i-&amp;gt;\infty}N_i(s,a)\to\infty
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;behavior policy converges to greedy policy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a simple GLIE strategy is $\epsilon$-greedy where $\epsilon$ is reduced to 0 with the following rate
$$
\epsilon_i=\frac{1}{i}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="monte-carlo-online-control-on-policy-improvement"&gt;Monte Carlo Online Control /On Policy Improvement
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;initialize $N(s,a)=0,G(s,a)=0,Q(s,a)=0,\forall s\in S,\forall a\in A,set,\epsilon=1,k=1$&lt;/li&gt;
&lt;li&gt;$\pi_1= \epsilon-greedy(Q)$&lt;/li&gt;
&lt;li&gt;loop
&lt;ul&gt;
&lt;li&gt;sample $k-th$ episode $(s_{k,1},a_{k,1},r_{k,1},s_{k,2},a_{k,2},r_{k,2},&amp;hellip;,s_{k,T},a_{k,T},r_{k,T})$&lt;/li&gt;
&lt;li&gt;$G_{k,t}=r_{k,t}+\gamma r_{k,t+1}+\gamma^2r_{k,t+2}+&amp;hellip;\gamma^{T-1}r_{k,T}$&lt;/li&gt;
&lt;li&gt;for $t=1,&amp;hellip;,T$ do
&lt;ul&gt;
&lt;li&gt;if first(or every ) vistit to $(s,a)$ in episode $k$ then
&lt;ul&gt;
&lt;li&gt;$N(s,a)=N(s,a)+1$&lt;/li&gt;
&lt;li&gt;$Q(s_t,a_t)=Q(s_t,a_t)+\frac{1}{N(s,a)}(G_{k,t}-Q(s_t,a_t))$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$k=k+1,\epsilon=\frac{1}{k}$&lt;/li&gt;
&lt;li&gt;$\pi_k= \epsilon-greedy(Q)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="sarsa"&gt;SARSA
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;set initial $\epsilon$-greedy policy $\pi$ randomly, $t$=0, initial state $s_t=s_0$&lt;/li&gt;
&lt;li&gt;take $a_t\sim\pi(s_t)$ //sample action from policy&lt;/li&gt;
&lt;li&gt;observe $(r_t,s_{t+1})$&lt;/li&gt;
&lt;li&gt;loop
&lt;ul&gt;
&lt;li&gt;take action $a_{t+1}\sim\pi(s_{t+1})$&lt;/li&gt;
&lt;li&gt;observe $(r_{t+1},s_{t+2})$&lt;/li&gt;
&lt;li&gt;$Q(s_t,a_t)=Q(s_t,a_t)+\alpha(r_t+\gamma Q(s_{t+1},a_{t+1})-Q(s_t,a_t))$&lt;/li&gt;
&lt;li&gt;$\pi(s_t)=arg,\max_aQ(s_t,a)$ w.prob $1-\epsilon$,else random&lt;/li&gt;
&lt;li&gt;$t=t+1$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="q-learning"&gt;Q-Learning
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;initialize $Q(s,a),\forall s\in S,a\in A,t=0 $initial state $s_t=s_0$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;set $\pi_b$ to be $\epsilon$-greedy w.r.t $Q$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;loop&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;take action $a_{t}\sim\pi_b(s_{t})$&lt;/li&gt;
&lt;li&gt;observe $(r_{t},s_{t+1})$&lt;/li&gt;
&lt;li&gt;$Q(s_t,a_t)=Q(s_t,a_t)+\alpha(r_t+\gamma max_aQ(s_{t+1},a)-Q(s_t,a_t))$&lt;/li&gt;
&lt;li&gt;$\pi(s_t)=arg,\max_aQ(s_t,a)$ w.prob $1-\epsilon$,else random&lt;/li&gt;
&lt;li&gt;$t=t+1$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="double-q-learning"&gt;Double Q-learning
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;initialize $Q_1(s,a)$ and $Q_2(s,a) ,\forall s\in S,a\in A,t=0 $ initial state $s_t=s_0$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;loop&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;select $a_t$ using $\epsilon$-greedy $\pi(s)=arg,max_aQ_1(s_t,a)+Q_2(s_t,a)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;observe $(r_{t},s_{t+1})$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if (with 0.5 probability then&lt;/p&gt;
&lt;p&gt;$Q_1(s_t,a_t)=Q_1(s_t,a_t)+\alpha(r_t+\gamma max_aQ_1(s_{t+1},a)-Q_1(s_t,a_t))$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;else&lt;/p&gt;
&lt;p&gt;$Q_2(s_t,a_t)=Q_2(s_t,a_t)+\alpha(r_t+\gamma max_aQ_2(s_{t+1},a)-Q_2(s_t,a_t))$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$t=t+1$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="lecture-5-value-function-approximation"&gt;Lecture 5 (Value Function Approximation)
&lt;/h2&gt;&lt;p&gt;represent a (state-action/state) value function with a parameterized function instead of a table
$$
\hat{V}(s;w)
\newline
\hat{Q}(s,a;w)
$$&lt;/p&gt;
&lt;h3 id="motivation"&gt;motivation
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;don&amp;rsquo;t want to have to explicitly store or learn for every single state a
&lt;ul&gt;
&lt;li&gt;dynamics or reward model&lt;/li&gt;
&lt;li&gt;value&lt;/li&gt;
&lt;li&gt;state-action value&lt;/li&gt;
&lt;li&gt;policy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;want more compact representation that generalized acress state or states and actions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="function-approximators"&gt;function approximators
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;linear combinations of features&lt;/li&gt;
&lt;li&gt;neural networks&lt;/li&gt;
&lt;li&gt;decision trees&lt;/li&gt;
&lt;li&gt;nearest neighbors&lt;/li&gt;
&lt;li&gt;fourier / wabelet bases&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="linear-value-function-approximation"&gt;Linear Value Function Approximation
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;represent a value function (or state-action value function) for a particular policy with a weighted linear combination of features
$$
\hat{V}(s;w)=\sum_{j=1}^nx_j(s)w_j=x(s)^Tw
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;objective function is
$$
J(w)=E_{\pi}[(V^{\pi}(s)-\hat{V}(s;w))^2]
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;recall weight update is
$$
\Delta w=-\frac{1}{2}\alpha \nabla_wJ(w)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="convergence-guarantees"&gt;convergence guarantees
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the markov chain defined by a MDP with a paticular policy will eventually converge to a &lt;strong&gt;probability distribution over state&lt;/strong&gt; $d(s)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$d(s)$ is called the stationary distribution over state of $\pi$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\sum_sd(s)=1$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$d(s)$ satisfies the following balance equation:
$$
d(s)=\sum_{s&amp;rsquo;}\sum_a\pi(s&amp;rsquo;|a)p(s&amp;rsquo;|s,a)d(s&amp;rsquo;)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;define the mean squared error of a linear value function approximation for a particular policy $\pi$ relative to the true value as
$$
MSVE(w)=\sum_{s\in S}d(s)(V^{\pi}(s)-\hat{V}^{\pi}(s;w))^2
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="monte-carlo-value-function-approximation"&gt;Monte Carlo Value Function Approximation
&lt;/h3&gt;&lt;p&gt;$$
J(w)=E_{\pi}[(G_t-\hat{V}(s;w))^2]
\newline
\Delta w=\alpha(G_t-x(s_t)^Tw)x(s_t)
$$&lt;/p&gt;
&lt;p&gt;monte carlo policy evaluation with VFA converges to the weights $w_{MC}$ which has the minimum mean squared error possible:
$$
MSVE(w_{MC})=min_w\sum_{s\in S}d(s)(V^{\pi}(s)-\hat{V}^{\pi}(s;w))^2
$$&lt;/p&gt;
&lt;h4 id="batch-monte-carlo-value-function-approximation"&gt;Batch Monte Carlo Value Function Approximation
&lt;/h4&gt;&lt;p&gt;let $G(s_i)$ be an unbiased sample of the true expected return $V^{\pi(s_i)}$
$$
arg,min_w\sum_{i=1}^N(G(s_i)-x(s_i)^Tw)^2
$$
take the derivative and set to 0
$$
w=(X^TX)^{-1}X^TG
$$
where $G$ is a vector of all N returns, and $X$ is a matrix of the features of each of the N states $x(s_)$&lt;/p&gt;
&lt;h3 id="td-value-function-approximation"&gt;TD value Function Approximation
&lt;/h3&gt;&lt;p&gt;$$
J(w)=E_{\pi}[r+\gamma \hat{V}(s&amp;rsquo;;w))^2]
\newline
\Delta w=\alpha(r+\gamma x(s&amp;rsquo;)^Tw-x(s)^Tw)x(s)
$$&lt;/p&gt;
&lt;p&gt;TD(0) policy evaluation with VFA converges to the weights $w_{TD}$ which is within a constant factor of the minimum mean squared error possible:
$$
MSVE(w_{TD})\le \frac{1}{1-\gamma}min_w\sum_{s\in S}d(s)(V^{\pi}(s)-\hat{V}^{\pi}(s;w))^2
$$&lt;/p&gt;
&lt;h3 id="control-using-value-function-approximation"&gt;control using Value Function Approximation
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;use value function approximation to represent state-ation values $\hat{Q}^{\pi}(s,a;w)\approx Q^{\pi}$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
J(w)=E_{\pi}[(Q^{\pi}(s,a)-\hat{Q}(s,a;w))^2]
\newline
\Delta w=\alpha E[(Q^{\pi}(s,a)-\hat{Q}(s,a;w))\nabla_w\hat{Q}^{\pi}(s,a;w)]
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;use features to represent both the state and action
$$
x(s,a)=\begin{pmatrix}
x_1(s,a)\
x_2(s,a)\
&amp;hellip;\
x_n(s,a)
\end{pmatrix}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;monte carlo
$$
\Delta w=\alpha (G_t-\hat{Q}(s,a;w))\nabla_w\hat{Q}^{\pi}(s,a;w)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SARSA
$$
\Delta w=\alpha (r+\gamma\hat{Q}(s&amp;rsquo;,a&amp;rsquo;;w)-\hat{Q}(s,a;w))\nabla_w\hat{Q}^{\pi}(s,a;w)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q_learning
$$
\Delta w=\alpha (r+\gamma,max_{a&amp;rsquo;}\hat{Q}(s&amp;rsquo;,a&amp;rsquo;;w)-\hat{Q}(s,a;w))\nabla_w\hat{Q}^{\pi}(s,a;w)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="lecture-6-deep-q-learning"&gt;Lecture 6 (Deep Q Learning)
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Linear VFA often work well given the right set of features&lt;/li&gt;
&lt;li&gt;But can require carefully hand designing that feature set&lt;/li&gt;
&lt;li&gt;An alternative is to use a much richer function approximation class that is able to directly go from states without requiring an explicit specification of features&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="deep-q-networksdqns"&gt;Deep Q-Networks(DQNs)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;represent state-action value function by Q-network with weights $w$
$$
\hat{Q}(s,a;w)\approx Q(s,a)
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="experience-replay"&gt;Experience Replay
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;to help remove correlations, store dataset (called a replay buffer) $D$ from prior experience&lt;/li&gt;
&lt;li&gt;to perform experience replay., repeat:
&lt;ul&gt;
&lt;li&gt;$(s,a,r,s&amp;rsquo;)\sim D$ :sample an experience tuple from the dataset&lt;/li&gt;
&lt;li&gt;compute the target value for the sampled $s$：$r+\gamma,max_{a&amp;rsquo;}\hat{Q}(s&amp;rsquo;,a&amp;rsquo;;w)$&lt;/li&gt;
&lt;li&gt;use stochastic gradient descent to update the network weight&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="prioritized-experience-replay"&gt;Prioritized Experience Replay
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;let $i$ be the index of the $i$-th tuple of experience $s_i,a_i,r_i,s_{i+1} $&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sample tuples for update using priority function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;priority of a tuple is proportional to DQN error
$$
p_i=|r+\gamma,max_{a&amp;rsquo;}\hat{Q}(s&amp;rsquo;,a&amp;rsquo;;w)-\hat{Q}(s,a;w)|
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;update $p_i$ every update&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$p_i$ for new tuples is set to 0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;one method:
$$
P(i)=\frac{p_i^{\alpha}}{\sum_kp_k^{\alpha n}}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="fixed-q-targets"&gt;Fixed Q-Targets
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;to help improve stability, fix the target weights used in the target calculation for multiple udpdates&lt;/li&gt;
&lt;li&gt;use a different set of weights to compute target that is being updated&lt;/li&gt;
&lt;li&gt;let parameters $w^-$ be the set of weights used in the target, and $``w$ be the weights that are being updated&lt;/li&gt;
&lt;li&gt;slight change to computation of target value:
&lt;ul&gt;
&lt;li&gt;sample $(s,a,r,s&amp;rsquo;)\sim D$&lt;/li&gt;
&lt;li&gt;compute $r+\gamma,max_{a&amp;rsquo;}\hat{Q}(s&amp;rsquo;,a&amp;rsquo;;w^-)$&lt;/li&gt;
&lt;li&gt;update $\Delta w=\alpha (r+\gamma,max_{a&amp;rsquo;}\hat{Q}(s&amp;rsquo;,a&amp;rsquo;;w^-)-\hat{Q}(s,a;w))\nabla_w\hat{Q}(s,a;w)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="double-dqn"&gt;Double DQN
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;current Q-network $w$ is used to select actions&lt;/li&gt;
&lt;li&gt;older Q-network $w^-$ is used to evaluate actions&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="advantage-function"&gt;Advantage Function
&lt;/h4&gt;&lt;p&gt;$$
A^{\pi}(s,a)=Q^{\pi}(s,a)-V^{\pi}(s)
$$&lt;/p&gt;
&lt;h2 id="lecture-7-imitation-learning"&gt;Lecture 7 (Imitation Learning)
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Expert provides a set of demonstration trajectories: sequences of states and actions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Imitation learning is useful when it is easier for the expert to demonstrate the desired behavior rather than:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;specifying a reward that would generate such behavior&lt;/li&gt;
&lt;li&gt;specifying the desired policy directly&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Input&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;state space, action space&lt;/li&gt;
&lt;li&gt;transition model $P(s&amp;rsquo;|s,a)$&lt;/li&gt;
&lt;li&gt;No reward function $R$&lt;/li&gt;
&lt;li&gt;set of one or more teacher&amp;rsquo;s demonstrations $(s_0,a_0,s_1,&amp;hellip;)$ (actions drawn from teacher&amp;rsquo;s policy $\pi^*$ )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;type&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Behavioral cloning&lt;/p&gt;
&lt;p&gt;directly learn the teacher&amp;rsquo;s policy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inverse RL&lt;/p&gt;
&lt;p&gt;recover $R$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apprenticeship learning via Inverse RL&lt;/p&gt;
&lt;p&gt;use $R$ to generate a good policy&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="behavioral-cloning"&gt;Behavioral Cloning
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;formulate problem as a standard machine learning problem:
&lt;ul&gt;
&lt;li&gt;fix a policy class (e.g. neural network, decision tree, etc.)&lt;/li&gt;
&lt;li&gt;estimate a policy from training examples $(s_0,a_0),s(_1,a_1)&amp;hellip;$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;not a good choice&lt;/p&gt;
&lt;h3 id="inverse-reinforcement-learning"&gt;Inverse reinforcement learning
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Goal: given input, infer the reward function R&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="linear-feature-reward-inverse-rl"&gt;Linear Feature Reward Inverse RL
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;consider reward is linear over features&lt;/p&gt;
&lt;p&gt;$$R(s)=w^Tx(s)$$&lt;/p&gt;
&lt;p&gt;where $w\in R^n,x:s\to R^n$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Goal: identify weight vector $w$ given a set of demonstrations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The resulting value function for a policy $\pi$ can be expressed as
$$
\begin{equation}
\begin{split}
V^{\pi}&amp;amp;=E[\sum_{t=0}^{\infty}\gamma^tR(s_t)|\pi]\
&amp;amp;=E[\sum_{t=0}^{\infty}\gamma^tw^Tx(s_t)|\pi]\
&amp;amp;=w^TE[\sum_{t=0}^{\infty}\gamma^tx(s_t)|\pi]\
&amp;amp;=w^T\mu(\pi)
\end{split}
\end{equation}
$$
where $\mu(\pi)(s)$ is defined as the discounted weighted frequency of state features under policy $\pi$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="apprenticeship-learning"&gt;Apprenticeship Learning
&lt;/h3&gt;&lt;p&gt;step&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;assumption:$R(s)=w^Tx(s)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Initialize policy $\pi_0$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;loop&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;find a reward function such that the teacher maximally outperforms all previous controllers:
$$
arg,max_wmax_{\gamma}s.t.w^T\mu(\pi^*)\ge w^T\mu(\pi)+\gamma,,\forall\pi\in{\pi_0,\pi_1,&amp;hellip;,\pi_{i-1}}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;s.t. $||w||_2\le 1$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;find optimal control policy $\pi_i$ for the current $w$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;exit if $\gamma\le\epsilon/2$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;summary&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if expert policy is suboptimal then the resulting policy is a mixture of somewhat arbitrary policies which have expert in the convex hull&lt;/li&gt;
&lt;li&gt;in practice: pick the best one of this set and pick the corresponding reward function&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="lecture-8-10-policy-gradient"&gt;Lecture 8-10 (Policy Gradient)
&lt;/h2&gt;&lt;p&gt;Directly parametrize the policy
$$
\pi_{\theta}(s,a)=P[a|s;\theta]
$$
Goal is to find a policy $\pi$ with the highest value function $V^{\pi}$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Advantages
&lt;ul&gt;
&lt;li&gt;better convergence properties&lt;/li&gt;
&lt;li&gt;effective in high-dimensional or continuous action spaces&lt;/li&gt;
&lt;li&gt;can learn stochastic policies&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Disadvantages
&lt;ul&gt;
&lt;li&gt;Typically converge to a local rather than global optimum&lt;/li&gt;
&lt;li&gt;Evaluating a policy is typically inefficient and&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>【UML需求建模】笔记</title><link>https://dyhes.github.io/p/uml%E9%9C%80%E6%B1%82%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/uml%E9%9C%80%E6%B1%82%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="组成要素"&gt;组成要素
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基本构造块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;建模元素，模型的主体&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;规则&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;支配基本构造块如何组织的规则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;公共机制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;运用于整个UML模型中的公共机制、拓展机制&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/Gppv7YV/image-20221130102037371.png"
loading="lazy"
alt="image-20221130102037371"
&gt;&lt;/p&gt;
&lt;h2 id="基本构造块"&gt;基本构造块
&lt;/h2&gt;&lt;h3 id="事物构造块"&gt;事物构造块
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;结构事物&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;静态部分，描述概念或物理元素&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;行为事物&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;动态部分&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分组事物&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;组织模型&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注释事物&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;描述模型&lt;/p&gt;
&lt;h4 id="结构事物"&gt;结构事物
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;类（class）和对象（object）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;类为一组同质对象的&lt;strong&gt;抽象&lt;/strong&gt;，对象为类的&lt;strong&gt;实例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接口（interface）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;描述某个类或构件的一个&lt;strong&gt;服务操作集&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主动类（active class）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其对象至少拥有一个进程或线程，能够启动&lt;strong&gt;控制活动&lt;/strong&gt;的类&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用例（use case）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用例实例是在系统中执行的&lt;strong&gt;一系列动作&lt;/strong&gt;，这些动作将生成特定执行者可见的价值结果&lt;/p&gt;
&lt;p&gt;一个用例定义一组用例实例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;协作（Collaboration）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;协作定义了一个&lt;strong&gt;交互&lt;/strong&gt;，它是由一组共同工作以提供某协作行为的角色和其他元素构成的一个群体。&lt;/p&gt;
&lt;p&gt;对于某个用例的实现就可以表示为一个协作&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;构件（Component）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比“类”更大的实体&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;节点（Node）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;运行时存在的物理元素，它表示了一种&lt;strong&gt;可计算的资源&lt;/strong&gt;，通常至少有存储空间和处理能力&lt;/p&gt;
&lt;h4 id="行为事物"&gt;行为事物
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;交互（interaction）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是在特定语境中，共同完成某个任务的一组对象之间&lt;strong&gt;交换的信息集合&lt;/strong&gt; 交互的表示法很简单，就是一条&lt;strong&gt;有向直线&lt;/strong&gt;，并在上面标有&lt;strong&gt;操作名&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;状态机（state machine）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个&lt;strong&gt;对象或交互&lt;/strong&gt;在生命周期内响应事件所经历的状态序列&lt;/p&gt;
&lt;h4 id="分组事物"&gt;分组事物
&lt;/h4&gt;&lt;p&gt;对结构事物、行为事物进行分组以更加有效地对其进行&lt;strong&gt;整合&lt;/strong&gt;，生成或简或繁、或宏观或微观的模型，在UML中，提供了 “包（Package）”来完成这一目标&lt;/p&gt;
&lt;h3 id="关系构造块"&gt;关系构造块
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/FY6MdCF/image-20221130104903476.png"
loading="lazy"
alt="image-20221130104903476"
&gt;&lt;/p&gt;
&lt;h2 id="规则"&gt;规则
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;命名&lt;/li&gt;
&lt;li&gt;范围（作用域）&lt;/li&gt;
&lt;li&gt;可见性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="公共机制"&gt;公共机制
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;规格描述&lt;/li&gt;
&lt;li&gt;构造型&lt;/li&gt;
&lt;li&gt;标记值&lt;/li&gt;
&lt;li&gt;约束&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="需求定义"&gt;需求定义
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;用户为了&lt;strong&gt;解决问题或达到某些目标&lt;/strong&gt;所需要的条件或能力&lt;/li&gt;
&lt;li&gt;系统或系统部件为了&lt;strong&gt;满足合同、标准、 规范或其它正式文档所规定的要求&lt;/strong&gt;而需要具备的条件或能力；&lt;/li&gt;
&lt;li&gt;对上述两种情况中的&lt;strong&gt;一个条件或一种能力&lt;/strong&gt;的一种&lt;strong&gt;文档化表述&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="需求内涵"&gt;需求内涵
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/QH69wTm/image-20220421105940379.png"
loading="lazy"
alt="image-20220421105940379"
&gt;&lt;/p&gt;
&lt;h6 id="问题域"&gt;问题域
&lt;/h6&gt;&lt;p&gt;当现实的状况与人们期望的状况产生&lt;strong&gt;差距&lt;/strong&gt;时，就产生了问题&lt;/p&gt;
&lt;p&gt;要解决问题，就需要改变现实当中某些实体的&lt;strong&gt;状态&lt;/strong&gt;或改变实体状态变化的&lt;strong&gt;演进顺序&lt;/strong&gt;，使其达到期望的状态或演进顺序&lt;/p&gt;
&lt;p&gt;这些&lt;strong&gt;实体和状态&lt;/strong&gt;构成了&lt;strong&gt;问题解决的基本范围&lt;/strong&gt;，称为该问题的问题域（Problem Domain）&lt;/p&gt;
&lt;p&gt;####### 特性&lt;/p&gt;
&lt;p&gt;问题域自治的规律性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结构特性&lt;/li&gt;
&lt;li&gt;行为特性&lt;/li&gt;
&lt;li&gt;约束&lt;/li&gt;
&lt;li&gt;假设&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="解系统"&gt;解系统
&lt;/h6&gt;&lt;p&gt;&lt;strong&gt;软件系统&lt;/strong&gt;通过&lt;strong&gt;影响问题域&lt;/strong&gt;，能够帮助人们解决问题，称为解系统 。&lt;/p&gt;
&lt;h6 id="共享现象"&gt;共享现象
&lt;/h6&gt;&lt;p&gt;软件系统能够与问题域进行交互和相互影响的原因在于，软件系统中的某些部分对问题域中的某些部分的具有模拟特性&lt;/p&gt;
&lt;p&gt;问题域中的某些信息能够和模型中的信息建立映射关系&lt;/p&gt;
&lt;p&gt;这些通过映射建立的共同知识，就是问题域和解系统之间的 共享现象&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/y6PLKGS/image-20220421110304191.png"
loading="lazy"
alt="image-20220421110304191"
&gt;&lt;/p&gt;
&lt;h6 id="需求"&gt;需求
&lt;/h6&gt;&lt;p&gt;需求是用户对&lt;strong&gt;问题域&lt;/strong&gt;当中的实体状态或事件的&lt;strong&gt;期望描述&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id="规格说明"&gt;规格说明
&lt;/h6&gt;&lt;p&gt;规格说明是解系统为满足用户需求而提供的解决方案，规定了&lt;strong&gt;解系统的行为特征&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要包括两个部分：&lt;/p&gt;
&lt;p&gt;– （1）对共享现象（模型）的描述；&lt;/p&gt;
&lt;p&gt;– （2）系统对共享现象所施加的操作的描述&lt;/p&gt;
&lt;p&gt;也可以看作是一种&lt;strong&gt;需求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;– 完全针对系统行为发出的期望&lt;/p&gt;
&lt;p&gt;– 一种理想的、完全不需要进行任何额外努力即可以转换为系统行为的需求。&lt;/p&gt;
&lt;h6 id="需求工程"&gt;需求工程
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;描述明确的问题域特性E;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义良好的系统行为S ;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;预期的需求R；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需求工程的目的就是根据E，构建S，使得 E, S |-&amp;gt; R&lt;/p&gt;
&lt;p&gt;####### 困难之处&lt;/p&gt;
&lt;p&gt;– （1）不存在描述明确的E；&lt;/p&gt;
&lt;p&gt;– （2）不存在确定的针对S的评估标准R；&lt;/p&gt;
&lt;p&gt;– （3） E, S =&amp;gt; R 是一个创造性的过程&lt;/p&gt;
&lt;p&gt;####### 主要工作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需求开发,确定R&lt;/li&gt;
&lt;li&gt;研究问题背景，描述问题域特性E&lt;/li&gt;
&lt;li&gt;构建解系统，描述解系统行为S ，使得 E, S |-&amp;gt; R&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="需求分类"&gt;需求分类
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;功能需求（Functional Requirement）&lt;/p&gt;
&lt;p&gt;和&lt;strong&gt;系统主要工作相关&lt;/strong&gt;的需求，即在不考虑物理约束的情况下， 用户希望系统所能够执行的活动，这些活动可以帮助用户完 成任务。功能需求主要表现为&lt;strong&gt;系统和环境之间的行为交互&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性能需求（Performance Requirement）&lt;/p&gt;
&lt;p&gt;系统整体或系统组成部分应该拥有的性能特征，例如CPU使 用率、内存使用率等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;质量属性（Quality Attribute）&lt;/p&gt;
&lt;p&gt;系统完成工作的质量，即系统需要在一个“好的程度”上实 现功能需求，例如可靠性程度、可维护性程度等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对外接口（External Interface）&lt;/p&gt;
&lt;p&gt;系统&lt;strong&gt;和环境中其他系统之间&lt;/strong&gt;需要建立的接口，包括硬件接口、软件接口、数据库接口等等&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口的用途&lt;/li&gt;
&lt;li&gt;接口的输入输出&lt;/li&gt;
&lt;li&gt;数据格式&lt;/li&gt;
&lt;li&gt;命令格式&lt;/li&gt;
&lt;li&gt;异常处理要求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;约束（Constraint）&lt;/p&gt;
&lt;p&gt;进行系统构造时需要遵守的约束，例如编程语言、硬 件设施等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统需求（System Requirement）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件需求（Hardware Requirement）&lt;/li&gt;
&lt;li&gt;软件需求（Software Requirement）&lt;/li&gt;
&lt;li&gt;其他需求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="功能需求"&gt;功能需求
&lt;/h6&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/5KnpgSX/image-20220421111647430.png"
loading="lazy"
alt="image-20220421111647430"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;业务需求&lt;/p&gt;
&lt;p&gt;系统建立的战略出发点，表现为高层次的目标（Objective），它描述了组织为什么要开发系统&lt;/p&gt;
&lt;p&gt;为了满足用户的业务需求，需求工程师需要描述系统高层次的解决方案，定义系统应该具备的特性（Feature）&lt;/p&gt;
&lt;p&gt;参与各方必须要对高层次的解决方案达成一致， 以建立一个共同的前景（Vision）&lt;/p&gt;
&lt;p&gt;特性说明了系统为用户提供的各项功能，它限定了系统的范围（Scope）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户需求&lt;/p&gt;
&lt;p&gt;执行实际工作的用户对系统所能完成的具体任务的期望，描述了系统能够&lt;strong&gt;帮助用户&lt;/strong&gt;做些什么&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统需求&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用户&lt;/strong&gt;对&lt;strong&gt;系统行为&lt;/strong&gt;的期望，一系列的系统行为联系在一起可以帮助用户完成任务，满足业务需求&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;用户需求&lt;/strong&gt;转化为&lt;strong&gt;系统需求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先需要分析问题领域及其特性，从中发现问题域和计算机 系统的共享知识，建立系统的知识模型；&lt;/li&gt;
&lt;li&gt;然后将用户需求部署到系统模型当中，即&lt;strong&gt;定义系列的系统行 为&lt;/strong&gt;，让它们联合起来实现用户需求，每一个系统行为即为一 个系统需求。&lt;/li&gt;
&lt;li&gt;该过程就是需求工程当中最为重要的&lt;strong&gt;需求分析&lt;/strong&gt;活动 ，又称建模与分析活动&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="需求工程路线"&gt;需求工程路线
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;问题分析和背景分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;明确问题&lt;/li&gt;
&lt;li&gt;定义业务需求&lt;/li&gt;
&lt;li&gt;指定解决方案&lt;/li&gt;
&lt;li&gt;确定系统特性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需求获取&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需求分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立综合考虑问题域特性和需求的系统模型&lt;/li&gt;
&lt;li&gt;根据系统模型将用户需求转化为系统需求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文档化和验证&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;产生规格说明&lt;/li&gt;
&lt;li&gt;进行验证&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="优秀需求"&gt;优秀需求
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;完整性&lt;/li&gt;
&lt;li&gt;正确性&lt;/li&gt;
&lt;li&gt;精确性&lt;/li&gt;
&lt;li&gt;可行性&lt;/li&gt;
&lt;li&gt;必要性&lt;/li&gt;
&lt;li&gt;无歧义&lt;/li&gt;
&lt;li&gt;可验证：通过分析、检查、模拟或者测试等方法能够判断需求是否被 满足&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="过程"&gt;过程
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/zfb7bSq/image-20220421115021192.png"
loading="lazy"
alt="image-20220421115021192"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需求开发&lt;/li&gt;
&lt;li&gt;需求管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/86mzZ2m/image-20220421114354571.png"
loading="lazy"
alt="image-20220421114354571"
&gt;&lt;/p&gt;
&lt;h4 id="需求开发"&gt;需求开发
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/x7thByJ/image-20220421114446279.png"
loading="lazy"
alt="image-20220421114446279"
&gt;&lt;/p&gt;
&lt;h6 id="需求获取"&gt;需求获取
&lt;/h6&gt;&lt;p&gt;是从&lt;strong&gt;人、文档或者环境&lt;/strong&gt;当中获取需求的过程&lt;/p&gt;
&lt;p&gt;需求获取和需求分析是&lt;strong&gt;交织&lt;/strong&gt;在一起的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;收集背景资料&lt;/li&gt;
&lt;li&gt;定义项目前景和范围&lt;/li&gt;
&lt;li&gt;选择信息的来源&lt;/li&gt;
&lt;li&gt;选择获取方法，执行获取&lt;/li&gt;
&lt;li&gt;记录获取结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="需求分析"&gt;需求分析
&lt;/h6&gt;&lt;p&gt;建模来&lt;strong&gt;整合&lt;/strong&gt;各种信息，以使得人们更好的理解问题&lt;/p&gt;
&lt;p&gt;为问题定义出一个&lt;strong&gt;需求集合&lt;/strong&gt;，这个集合能够为问题界定一个有效的解决方案&lt;/p&gt;
&lt;p&gt;检查需求当中存在的错误、遗漏、不一致等各种缺陷，并加以修正&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;背景分析&lt;/li&gt;
&lt;li&gt;确定系统边界&lt;/li&gt;
&lt;li&gt;需求建模&lt;/li&gt;
&lt;li&gt;需求细化&lt;/li&gt;
&lt;li&gt;确定优先级&lt;/li&gt;
&lt;li&gt;需求协商&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="需求规格说明"&gt;需求规格说明
&lt;/h6&gt;&lt;p&gt;获取的需求需要被编写成文档，主要目的是为了在&lt;strong&gt;系统涉众之间交流&lt;/strong&gt;需求信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;业务需求被写入项目前景和范围文档&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户需求被写入用户需求文档（或者用例文档）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统需求被写入需求规格说明&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="需求验证"&gt;需求验证
&lt;/h6&gt;&lt;p&gt;确保需求规格说明文档能正确、准确的反映用户的意图&lt;/p&gt;
&lt;h4 id="需求管理"&gt;需求管理
&lt;/h4&gt;&lt;p&gt;保证需求作用在整个软件的产品生命周期中的 续、稳定和有效发挥&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立和维护需求基线集&lt;/li&gt;
&lt;li&gt;建立需求跟踪信息&lt;/li&gt;
&lt;li&gt;进行变更控制&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="并发和迭代"&gt;并发和迭代
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/hBsgqr7/image-20220421115203298.png"
loading="lazy"
alt="image-20220421115203298"
&gt;&lt;/p&gt;
&lt;h4 id="过程模型"&gt;过程模型
&lt;/h4&gt;&lt;p&gt;软件开发过程&lt;/p&gt;
&lt;h6 id="瀑布式模型"&gt;瀑布式模型
&lt;/h6&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/z6YBZ02/image-20220421115332421.png"
loading="lazy"
alt="image-20220421115332421"
&gt;&lt;/p&gt;
&lt;p&gt;各阶段之间是紧密相关的，后一阶段的工作是依据前一阶段的工作结果而开展的。&lt;/p&gt;
&lt;h6 id="快速原型模型"&gt;快速原型模型
&lt;/h6&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/H7k69qc/image-20220421115533344.png"
loading="lazy"
alt="image-20220421115533344"
&gt;&lt;/p&gt;
&lt;h6 id="螺旋式模型"&gt;螺旋式模型
&lt;/h6&gt;&lt;p&gt;将瀑布式模型与快速原型模型&lt;strong&gt;结合&lt;/strong&gt;到一起，并加上&lt;strong&gt;风险分析&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;将瀑布式模型与快速原型模型结合到一起，并加上风险分析。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/hBsgqr7/image-20220421115203298.png"
loading="lazy"
alt="image-20220421120002130"
&gt;&lt;/p&gt;
&lt;h4 id="来源"&gt;来源
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;涉众
&lt;ul&gt;
&lt;li&gt;用户&lt;/li&gt;
&lt;li&gt;客户&lt;/li&gt;
&lt;li&gt;领域专家&lt;/li&gt;
&lt;li&gt;市场人员、销售人员等其他用户代替源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;相关产品
&lt;ul&gt;
&lt;li&gt;原有系统&lt;/li&gt;
&lt;li&gt;竞争产品&lt;/li&gt;
&lt;li&gt;协作产品（与解系统存在接口的其他软件系统）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;硬数据
&lt;ul&gt;
&lt;li&gt;登记表格、单据、报表等定量文档&lt;/li&gt;
&lt;li&gt;备忘录、日志等定性文档&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重要文档
&lt;ul&gt;
&lt;li&gt;原有系统的规格说明&lt;/li&gt;
&lt;li&gt;竞争产品的规格说明&lt;/li&gt;
&lt;li&gt;协作产品的规格说明&lt;/li&gt;
&lt;li&gt;客户的需求文档（委托开发的规格说明、招标书）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;相关技术标准和法规
&lt;ul&gt;
&lt;li&gt;相关法律、法规及规章制度&lt;/li&gt;
&lt;li&gt;行业规范、行业标准&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="方法"&gt;方法
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;传统方法&lt;/p&gt;
&lt;p&gt;面谈、问卷调查、硬数据分析、文档检查、需求剥离等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;集体获取方法&lt;/p&gt;
&lt;p&gt;头脑风暴（Brainstorming）、专题讨论会（Workshop）、JAD&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;认知方法&lt;/p&gt;
&lt;p&gt;任务分析（Task Analysis）、协议分析（Protocol Analysis）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于上下文的方法&lt;/p&gt;
&lt;p&gt;观察、民族志（Ethnography）和话语分析（Conversation Analysis）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="前景和范围"&gt;前景和范围
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;前景&lt;/p&gt;
&lt;p&gt;所有的涉众都从共同认同的项目前景出发，理解和描述问题域及需求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;范围&lt;/p&gt;
&lt;p&gt;范围内的事物和事件是描述的目标&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="问题分析"&gt;问题分析
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;明确问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发现业务需求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;确定高层次的解决方案&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;确定系统特性和解决方案的&lt;strong&gt;边界&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;确定解决方案的约束&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="建立系统边界"&gt;建立系统边界
&lt;/h6&gt;&lt;p&gt;将所有问题的解决方案进行综合，就可以得到整个解系统的功能和边界&lt;/p&gt;
&lt;p&gt;系统边界的常用技术描述手段是系统用例图和上下文图&lt;/p&gt;
&lt;h6 id="文档"&gt;文档
&lt;/h6&gt;&lt;p&gt;&lt;strong&gt;业务需求、高层次解决方案和系统特性&lt;/strong&gt;都应该被定义到项目前景与范围文档之中&lt;/p&gt;
&lt;h4 id="涉众分析与硬数据采样"&gt;涉众分析与硬数据采样
&lt;/h4&gt;&lt;h5 id="涉众分析"&gt;涉众分析
&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;涉众&lt;/strong&gt;：所有能够影响软件系统的实现，或者会被 实现后的软件系统所影响的个人和团体&lt;/p&gt;
&lt;h6 id="主要内容"&gt;主要内容
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;根据功能前景寻找涉众&lt;/li&gt;
&lt;li&gt;从涉众对象获取需求&lt;/li&gt;
&lt;li&gt;分析涉众的赢输条件，实施共赢策略&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="硬数据采样"&gt;硬数据采样
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;定量硬数据
&lt;ul&gt;
&lt;li&gt;统计报表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定性硬数据
&lt;ul&gt;
&lt;li&gt;组织描述文档&lt;/li&gt;
&lt;li&gt;业务指导文档&lt;/li&gt;
&lt;li&gt;业务备忘&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="面谈"&gt;面谈
&lt;/h4&gt;&lt;h6 id="类型"&gt;类型
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;结构化面谈&lt;/p&gt;
&lt;p&gt;完全按照事先的问题和结构来控制面谈&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;半结构化面谈&lt;/p&gt;
&lt;p&gt;事先需要根据面谈内容准备面谈的问题和面谈结构，但在面 谈过程当中，会见者可以根据实际情况采取一些灵活的策略&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非结构化面谈&lt;/p&gt;
&lt;p&gt;没有事先预定的议程安排&lt;/p&gt;
&lt;p&gt;甚至会在没有太多事前准备的情况下就直接到访被会见者的 工作地，就某个主题开展会谈&lt;/p&gt;
&lt;p&gt;会见者和被会见者谈话的主题可能非常广泛，而且每个主题 都不会非常深入&lt;/p&gt;
&lt;p&gt;也可能在非结构面谈中仅就某个特殊的主题进行深入的讨&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="原型"&gt;原型
&lt;/h4&gt;&lt;p&gt;“原型是一个系统，它内化了（capture）一 个更迟系统（later system）的本质特征。 原型系统通常被构造为不完整的系统，以 在将来进行改进、补充或者替代。 ”&lt;/p&gt;
&lt;h6 id="类别"&gt;类别
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;根据开发方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;探索式（exploratory）&lt;/li&gt;
&lt;li&gt;实验式（experimental）&lt;/li&gt;
&lt;li&gt;演化式（evolutionary）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前两种又被称为抛弃式原型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据构建技术&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;水平原型方法（horizontal prototyping）&lt;/p&gt;
&lt;p&gt;仅仅实现选定功能的某些&lt;strong&gt;特定层次&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;垂直原型方法（vertical prototyping）&lt;/p&gt;
&lt;p&gt;触及到选定功能实现的&lt;strong&gt;所有层次&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="过程-1"&gt;过程
&lt;/h6&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/2Y8WDSb/image-20220421124235805.png"
loading="lazy"
alt="image-20220421124152722"
&gt;&lt;/p&gt;
&lt;p&gt;####### 需求内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;角色&lt;/p&gt;
&lt;p&gt;指原型物件在用户工作中的价值，也就是说它为什么是对用户有用的。&lt;/p&gt;
&lt;p&gt;原型物件到底能够帮助用户完成什么样的工作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外观&lt;/p&gt;
&lt;p&gt;指用户对原型物件的具体感觉体验，即用户在使用原型物件时会看到什么、听到什么和感觉到什么&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现&lt;/p&gt;
&lt;p&gt;指原型物件完成功能的细节技术和方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/DDG1gcP/image-20220421124406617.png"
loading="lazy"
alt="image-20220421124406617"
&gt;&lt;/p&gt;
&lt;p&gt;####### 评估&lt;/p&gt;
&lt;p&gt;####### 修正&lt;/p&gt;
&lt;h2 id="根本任务"&gt;根本任务
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/6cMgv0T/image-20220422163908238.png"
loading="lazy"
alt="image-20220422163814670"
&gt;&lt;/p&gt;
&lt;h4 id="建立分析模型"&gt;建立分析模型
&lt;/h4&gt;&lt;p&gt;将复杂的系统分解成为简单的&lt;strong&gt;部分&lt;/strong&gt;以及它们之间的&lt;strong&gt;联系&lt;/strong&gt;，确定&lt;strong&gt;本质特征&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;和用户达成对信息内容的&lt;strong&gt;共同理解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分析的活动主要包括&lt;strong&gt;识别、定义和结构化&lt;/strong&gt;，它的目的是获取某个可以转换为知识的事物的信息&lt;/p&gt;
&lt;h6 id="模型"&gt;模型
&lt;/h6&gt;&lt;p&gt;“模型是&lt;strong&gt;对事物的抽象&lt;/strong&gt;，帮助人们在创建一个事物之前可以有更好的理解”&lt;/p&gt;
&lt;p&gt;集中关注问题的&lt;strong&gt;计算特性&lt;/strong&gt;（数据、功能、规则等等）
“它是对系统进行思考和推理的一种方式。建模的目标是建立系统的一个表示，这个表示以精确一致的方式描述系统，使得系统的使用更加容易”
建模方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;抽象
只关注重要的信息，忽略次要的内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分解&lt;/p&gt;
&lt;p&gt;将单个复杂和难以理解的问题分解成多个相对更容易的子问题，并掌握各子问题之间的联系&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;投影
多视点方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="类别-1"&gt;类别
&lt;/h6&gt;&lt;p&gt;####### 业务模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;strong&gt;问题域中的重要概念&lt;/strong&gt;作为模型的&lt;strong&gt;组元&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;概念之间的业务联系&lt;/strong&gt;作为组元之间的关系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用了业务描述的方式，具有&lt;strong&gt;非形式&lt;/strong&gt;化特征&lt;/p&gt;
&lt;p&gt;####### 计算模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用软件的构成单位作为模型的组元&lt;/li&gt;
&lt;li&gt;软件构建单位之间的关系作为模型组元之间的关系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于计算科学建立的，具有&lt;strong&gt;形式化&lt;/strong&gt;的特征&lt;/p&gt;
&lt;p&gt;####### 软件分析模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;介于业务模型和计算模型二者之间的模型形式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用了计算模型的组元形式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在组元的表现上采用了业务模型的表现方式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具有&lt;strong&gt;半形式化&lt;/strong&gt;的特征&lt;/p&gt;
&lt;h4 id="创建解决方案"&gt;创建解决方案
&lt;/h4&gt;&lt;p&gt;将一个问题分解成独立的、更简单和易于管理的&lt;strong&gt;子问题&lt;/strong&gt;来帮助寻找解决方案&lt;/p&gt;
&lt;p&gt;帮助开发者建立问题的&lt;strong&gt;定义&lt;/strong&gt;，并确定被定义的事物之间的&lt;strong&gt;逻辑关系&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/DQpc7R4/image-20220422172629026.png"
loading="lazy"
alt="image-20220422172629026"
&gt;&lt;/p&gt;
&lt;h2 id="常用技术"&gt;常用技术
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;结构化技术&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;过程建模
&lt;ul&gt;
&lt;li&gt;数据流图 DAata Flow Diagram&lt;/li&gt;
&lt;li&gt;上下文图 Context Diagram&lt;/li&gt;
&lt;li&gt;微规格说明 Mini-Specification&lt;/li&gt;
&lt;li&gt;数据字典 Data Dictionary&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据建模
&lt;ul&gt;
&lt;li&gt;实体关系图 Entity Relationship Diagram&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;行为建模
&lt;ul&gt;
&lt;li&gt;状态（转换）图/矩阵 State (Transition) Diagram/Matrix&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;过程/数据关系建模
&lt;ul&gt;
&lt;li&gt;功能实体矩阵Function/Entity Matrix&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;信息工程方法
&lt;ul&gt;
&lt;li&gt;功能分解图 Function Decomposition Diagram&lt;/li&gt;
&lt;li&gt;过程依赖图 Process Dependency Diagram&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面向对象技术&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UML
&lt;ul&gt;
&lt;li&gt;用例图 Use-Case Diagram&lt;/li&gt;
&lt;li&gt;类图 Class Diagram&lt;/li&gt;
&lt;li&gt;交互图（顺序图/通信图） Interaction ( Sequence/communication ) Diagram&lt;/li&gt;
&lt;li&gt;活动图 Activity Diagram&lt;/li&gt;
&lt;li&gt;对象约束语言 Object Constraint Language&lt;/li&gt;
&lt;li&gt;状态图 State Chart Diagram&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="结构化需求建模"&gt;结构化需求建模
&lt;/h2&gt;&lt;h4 id="过程建模"&gt;过程建模
&lt;/h4&gt;&lt;p&gt;结构化分析的核心是数据。数据包括&lt;strong&gt;在分析、设计和实现中涉及的概念、术语、属性等所有内容&lt;/strong&gt;，并把这些内容定义在&lt;strong&gt;数据字典&lt;/strong&gt;中。围绕数据字典，完成&lt;strong&gt;功能/过程模型、数据模型和行为模型&lt;/strong&gt;的结构化建模过程。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/yNwgvgK/image-20220422184634737.png"
loading="lazy"
alt="image-20220422184634737"
&gt;&lt;/p&gt;
&lt;h6 id="数据流图"&gt;数据流图
&lt;/h6&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/pQ4W9YB/image-20220422190620697.png"
loading="lazy"
alt="image-20220422190620697"
&gt;&lt;/p&gt;
&lt;p&gt;####### 基本元素&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据加工过程&lt;/p&gt;
&lt;p&gt;过程是指&lt;strong&gt;施加于数据的动作或者行为&lt;/strong&gt;，它们使得数据发生变化，包括&lt;strong&gt;被转换（transformed）、被存储（stored）或者被分布（distributed）&lt;/strong&gt;
可能是由软件系统控制的，也可能是由人工执行的，它重在数据发生变化的效果而不是其执行者
可能会表现为不同的抽象层次，其中内容足够细节和具体，能够对其直接进行“编码”处理的过程被称为原始过程（Primitive Process，又称为基本过程Elementary Process）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外部实体&lt;/p&gt;
&lt;p&gt;外部实体是指&lt;strong&gt;处于待构建系统之外的人、组织、设备或者其他软件系统&lt;/strong&gt;，它们不受系统的控制，开发者不能以任何方式操纵它们
需要进行建模的外部实体是那些和待构建的软件系统之间&lt;strong&gt;存在着数据交互&lt;/strong&gt;的外部实体，它们是待构建系统的&lt;strong&gt;数据源或者数据目的地&lt;/strong&gt;
所有的外部实体联合起来构成了软件系统的&lt;strong&gt;外部上下文环境&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据流&lt;/p&gt;
&lt;p&gt;数据流是指数据的运动，它是系&lt;strong&gt;统与其环境之间或者系统内两个过程之间的通信形式&lt;/strong&gt;
数据流可以&lt;strong&gt;分割和组合&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/ZcZWm04/image-20220422191044022.png"
loading="lazy"
alt="image-20220422191044022"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据字典和实体关系图ERD&lt;/strong&gt;通常被用来描述DFD的详细内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据存储&lt;/p&gt;
&lt;p&gt;数据存储是软件系统需要在&lt;strong&gt;内部收集、保存，以供日后使用的数据集合&lt;/strong&gt;
数据存储的详细内容通常也是用&lt;strong&gt;数据字典和ERD&lt;/strong&gt;来进行描述的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;####### 构建规则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;过程是对数据的处理&lt;/strong&gt;，必须有输入，也必须有输出，而且输入数据集和输出数据集应该存在&lt;strong&gt;差异&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;数据流是必须和过程&lt;strong&gt;产生关联&lt;/strong&gt;的，它要么是过程的数据输入，要么是过程的数据输出&lt;/li&gt;
&lt;li&gt;DFD当中所有的对象都应该有一个可以唯一标识自己的名称
&lt;ul&gt;
&lt;li&gt;过程使用动词&lt;/li&gt;
&lt;li&gt;外部实体、数据流和数据存储使用名词&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;####### 层次结构&lt;/p&gt;
&lt;p&gt;依据所含过程的不同抽象程度，DFD可以在&lt;strong&gt;不同的抽象层次&lt;/strong&gt;上进行系统的描述
一个比较抽象的过程可以被展开为一个子过程更加具体的DFD图&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;上下文图 Context diagram&lt;/p&gt;
&lt;p&gt;将整个系统看做是一个过程，这个过程实现系统的所有功能 ，是系统功能的&lt;strong&gt;最高抽象&lt;/strong&gt;。上下文图中&lt;strong&gt;存在且仅存在一个过程&lt;/strong&gt;，表示整个系统。这个单一的过程通常编号为0。上下文图中需要表示出&lt;strong&gt;所有和系统交互的外部实体&lt;/strong&gt;，并描述交互的数据流，包括&lt;strong&gt;系统输入和系统输出&lt;/strong&gt;。上下文图中不会出现数据存储实例，它非常适合于&lt;strong&gt;描述系统的应用环境、定义系统的边界&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;0层图（顶层图）Level-0 diagram&lt;/p&gt;
&lt;p&gt;位于上下文图下面一层，是上下文图中&lt;strong&gt;单一过程的细节描述&lt;/strong&gt;，是对该单一过程的&lt;strong&gt;第一次功能分解&lt;/strong&gt;， 是整个系统的&lt;strong&gt;功能概图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;0层图应该被描述的简洁、清晰，需求工程师要根据系统的复杂度掌握0层图中过程的抽象程度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;N层图 Level-N diagram&lt;/p&gt;
&lt;p&gt;对0层图的过程分解产生的子图称为1层图，对N层图的过程分解后产生的子图称为N+1层图（N&amp;gt;0） ，过程分解是可以持续进行的， 直至最终产生的子图都是原始DFD图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有过程都已经被简化为一个选择、计算或者数据库操作；&lt;/li&gt;
&lt;li&gt;所有数据存储都仅仅表示了一个单独的数据实体；&lt;/li&gt;
&lt;li&gt;用户已经不关心比子图更为细节的内容，或者子图的描述已经详细的足以支持后续的开发活动；&lt;/li&gt;
&lt;li&gt;每一个数据流都已经不需要进行更详细的切分，以展示对不同数据的不同处理方式；&lt;/li&gt;
&lt;li&gt;每一个业务表单、事务、计算机的屏幕显示（computer online display）和业务报表都已经被表示为一个单独的数据流；&lt;/li&gt;
&lt;li&gt;系统的每一个最低层菜单选项都能在子图中找到独立的过程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原始DFD图可以进一步展开为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微规格说明&lt;/li&gt;
&lt;li&gt;数据字典&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在低于0层图的子图上通常&lt;strong&gt;不显示外部实体&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;####### 验证&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;验证DFD的语法
&lt;ul&gt;
&lt;li&gt;确保DFD中不会发生语法错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;验证DFD的结构
&lt;ul&gt;
&lt;li&gt;验证DFD层次结构之间的一致性&lt;/li&gt;
&lt;li&gt;验证DFD层次结构说明的完备性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;验证DFD的语义
&lt;ul&gt;
&lt;li&gt;确保DFD所说明内容的正确性和准确性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="微规格说明"&gt;微规格说明
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;目的：细化原始DFD图&lt;/li&gt;
&lt;li&gt;方式
&lt;ul&gt;
&lt;li&gt;结构化英语/伪码&lt;/li&gt;
&lt;li&gt;行为图&lt;/li&gt;
&lt;li&gt;决策表&lt;/li&gt;
&lt;li&gt;决策树&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="数据字典"&gt;数据字典
&lt;/h6&gt;&lt;p&gt;数据字典以&lt;strong&gt;结构化方式&lt;/strong&gt;定义了在建模过程中涉及到的所有数据信息、控制信息。
它是当前系统的软件词典，提供用户和软件人员的概念解释，也提供在系统开发过程中各种有关数据和控制的描述信息，使得系统所有的相关人员对信息有共同的、一致的理解。
常用方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;词条描述&lt;/p&gt;
&lt;p&gt;词条描述为每个数据元素组织描述信息&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/rG9pGty/image-20220422195803167.png"
loading="lazy"
alt="image-20220422195803167"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义式&lt;/p&gt;
&lt;p&gt;定义式要求对数据元素（尤其是其结构）的描述要精确、严格和明确&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/XpGD5PG/image-20220422195840225.png"
loading="lazy"
alt="image-20220422195840225"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="数据建模"&gt;数据建模
&lt;/h4&gt;&lt;p&gt;数据模型：描述数据的定义、结构和关系等特性的模型说明了问题域和解系统共享的事物、对共享事物的描述和共享事物之间的关系能够反映企业业务的核心知识
建立数据模型的过程被称为数据建模&lt;/p&gt;
&lt;h2 id="面向对象分析与uml建模"&gt;面向对象分析与UML建模
&lt;/h2&gt;&lt;p&gt;UML（Unified Modeling Language）是一种统一的、标准化的建模语言&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OMT (James Rumbaugh)&lt;/li&gt;
&lt;li&gt;Booch方法(Grady Booch)&lt;/li&gt;
&lt;li&gt;OOSE (Ivar Jacobson）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="组成元素"&gt;组成元素
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基本构造块&lt;/p&gt;
&lt;p&gt;也就是建模元素，是模型的主体&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UML规则&lt;/p&gt;
&lt;p&gt;也就是支配基本构造块如何放在一起的规则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;公共机制&lt;/p&gt;
&lt;p&gt;运用于整个UML模型中的公共机制、扩展机制&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/vDgtm8Q/image-20220422210117052.png"
loading="lazy"
alt="image-20220422210117052"
&gt;&lt;/p&gt;
&lt;h5 id="基本构造块-1"&gt;基本构造块
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;事物构造块&lt;/p&gt;
&lt;p&gt;对模型中&lt;strong&gt;最具有代表性的成分&lt;/strong&gt;的抽象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;结构事物：UML中的&lt;strong&gt;名词&lt;/strong&gt;，它是模型的静态部分，描述概念或物理元素。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;类（class）和对象（object）&lt;/p&gt;
&lt;p&gt;UML中类是用一个矩形表示的，它包含三个区域，最上面是类名、中间是类的属性、最下面是类的方法&lt;/p&gt;
&lt;p&gt;对象则是类的一个实例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口（interface）&lt;/p&gt;
&lt;p&gt;接口是描述某个类或构件的一个&lt;strong&gt;服务操作集&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主动类（active class）&lt;/p&gt;
&lt;p&gt;主动类实际上是一种特殊的类。引用它的原因，实际上是在开发中需要有一些类能够起到&lt;strong&gt;启动控制活动&lt;/strong&gt;的作用&lt;/p&gt;
&lt;p&gt;主动类是指其对象&lt;strong&gt;至少拥有一个进程或线程，能够启动控制活动&lt;/strong&gt;的类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用例（use case）&lt;/p&gt;
&lt;p&gt;用例实例是&lt;strong&gt;在系统中执行的一系列动作&lt;/strong&gt;，这些动作将生成特定执行者可见的价值结果&lt;/p&gt;
&lt;p&gt;一个用例定义一组用例实例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;协作（collaboration）&lt;/p&gt;
&lt;p&gt;定义了&lt;strong&gt;一个交互&lt;/strong&gt;，它是由一组共同工作以提供某协作行为的角色和其他元素构成的一个&lt;strong&gt;群体&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构件（component）&lt;/p&gt;
&lt;p&gt;构件是&lt;strong&gt;系统设计的一个模块化部分&lt;/strong&gt;，它隐藏了内部的实现，对外提供了一组外部接口。在系统中满足相同接口的组件可以自由地替换
可以用来描述实际的PC机、打印机、服务器等软件运行的基础硬件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;节点（node）&lt;/p&gt;
&lt;p&gt;运行时存在的&lt;strong&gt;物理元素&lt;/strong&gt;，它表示了一种可计算的资源，通常至少有存储空间和处理能力&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行为事物：UML中的&lt;strong&gt;动词&lt;/strong&gt;，它是模型中的动态部分，是一种跨越时间、空间的行为。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;交互（Interaction）&lt;/p&gt;
&lt;p&gt;共同完成某个任务的一组对象之间交换的&lt;strong&gt;信息集合&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;状态机（state machine）&lt;/p&gt;
&lt;p&gt;是一个&lt;strong&gt;对象或交互&lt;/strong&gt;在生命周期内响应事件所经历的&lt;strong&gt;状态序列&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分组事物：UML中的&lt;strong&gt;容器&lt;/strong&gt;，用来组织模型，使模型更加的结构化。&lt;/p&gt;
&lt;p&gt;对于一个中大型的软件系统而言，通常会包含大量的类， 因此也就会存在大量的结构事物、行为事物，为了能够 更加有效地对其进行整合，生成或简或繁、或宏观或微 观的模型，就需要对其进行分组。在UML中，提供了 **“包（Package）”**来完成这一目标&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注释事物：UML中的&lt;strong&gt;解释部分&lt;/strong&gt;，和代码中的注释语句一样，是用来描述模型的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关系构造块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;关联关系&lt;/p&gt;
&lt;p&gt;表示两个类之间存在某种&lt;strong&gt;语义上的联系&lt;/strong&gt;。关联关系提供了通信的路径，它是所有关系中最通用、语义最弱的。&lt;/p&gt;
&lt;p&gt;在UML中，使用一条实线来表示关联关系&lt;/p&gt;
&lt;p&gt;在关联关系中，有两种比较特殊的关系：聚合和组合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;聚合关系：聚合（Aggregation）是一种特殊形式的关联。聚合表
示类之间的关系是整体与部分的关系&lt;/li&gt;
&lt;li&gt;组合关系：如果发现“部分”类的存在，是完全依赖于“整体”类的，那么
就应该使用“组合”关系来描述&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;泛化关系&lt;/p&gt;
&lt;p&gt;描述了一般事物与该事物中的特殊种类之间的关系，也就是父类与子类之间的关系&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现关系&lt;/p&gt;
&lt;p&gt;用来规&lt;strong&gt;定接口和实现接口的类或组件之间&lt;/strong&gt;的关系。接口是操作的集合，这些操作用于规定类或组件的服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拓展关系&lt;/p&gt;
&lt;p&gt;表示将一个&lt;strong&gt;构造型&lt;/strong&gt;附加到一个元类（metaclass）上，使得元类的定义中包括这个构造型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;依赖关系&lt;/p&gt;
&lt;p&gt;有两个元素X、Y，如果修改元素X的定义可能会引起对另一个元素Y的定义的修改，则称元素Y依赖（Dependency）于元素X&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/PNCmVw6/image-20220422211529933.png"
loading="lazy"
alt="image-20220422211529933"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;图&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/BgGhsTv/image-20220422215006859.png"
loading="lazy"
alt="image-20220422215006859"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="规则-1"&gt;规则
&lt;/h5&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/gMKMVkZ/image-20220422212655915.png"
loading="lazy"
alt="image-20220422212655915"
&gt;&lt;/p&gt;
&lt;h5 id="公共机制-1"&gt;公共机制
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;规格描述&lt;/p&gt;
&lt;p&gt;在图形表示法的每个部分后面都有一个规格描述（也称为详述），它用来对构造块的语法和语义进行文字叙述。 这种构思，也就使可视化视图和文字视图的分离&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扩展机制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;构造型&lt;/p&gt;
&lt;p&gt;在实际的建模过程中，可能会需要定义一些&lt;strong&gt;特定于某个领域或某个系统&lt;/strong&gt;的构造块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标记值&lt;/p&gt;
&lt;p&gt;用来为事物&lt;strong&gt;添加新特性&lt;/strong&gt;。标记值的表示方法是用形如“{标记信息}”的字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;约束&lt;/p&gt;
&lt;p&gt;是用来&lt;strong&gt;增加新的语义或改变已存在规则&lt;/strong&gt;的一种机制。约束的表示法和标记值法类似，都是使用花括号括起来的串来表示，不过它是不能够放在元素中的，而是放在相关的元素附近&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="模型划分"&gt;模型划分
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用例模型 Use Case Model&lt;/p&gt;
&lt;p&gt;描述使用系统功能的角色和系统相关的功能，是需求建模的重要工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;静态模型（领域模型）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;类图（class diagram）&lt;/p&gt;
&lt;p&gt;类图是系统模型的基础，描述系统的静态结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象层：描述系统实体以及承载的系统责任&lt;/li&gt;
&lt;li&gt;特征层：描述实体抽象的特征&lt;/li&gt;
&lt;li&gt;关系层：实体类的固有关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;包图（package diagram）&lt;/p&gt;
&lt;p&gt;描述系统的组织模型，为控制表示的复杂性&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态模型（行为模型）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;顺序图（sequence diagram）&lt;/p&gt;
&lt;p&gt;描述按时间顺序排列的对象交互&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;协作图（collaboration diagram）&lt;/p&gt;
&lt;p&gt;表示交互对象的行为组织结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;状态转换图（state chart diagram）&lt;/p&gt;
&lt;p&gt;描述对象在生命周期内，响应事件的状态转换过程，以及响应事件后所做的反映&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;活动图（activity diagram）&lt;/p&gt;
&lt;p&gt;用来描述任务流程或算法过程，可用来分析系统并发事务流程&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;物理实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;部署图（deplotment diagram）&lt;/p&gt;
&lt;p&gt;用来描述&lt;strong&gt;系统中计算结点的拓扑结构&lt;/strong&gt;，一个系统只有一个部署图，可用来分析分布式系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构件图（component diagram）&lt;/p&gt;
&lt;p&gt;描述一组构件以及相互间的关系，是系统实现的物理建模&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="建模过程"&gt;建模过程
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/CMw2wDQ/image-20220422215919066.png"
loading="lazy"
alt="image-20220422215919066"
&gt;&lt;/p&gt;
&lt;h4 id="用例模型"&gt;用例模型
&lt;/h4&gt;&lt;p&gt;用例图（Use Case）用于对&lt;strong&gt;系统的功能及与系统进行交互的外部事物&lt;/strong&gt;建模&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/37st6wk/image-20220422220151742.png"
loading="lazy"
alt="image-20220422220151742"
&gt;&lt;/p&gt;
&lt;h5 id="用例"&gt;用例
&lt;/h5&gt;&lt;p&gt;一个用例描述系统的&lt;strong&gt;一项功能&lt;/strong&gt;，该项功能可被描述为参与者可视的&lt;strong&gt;一组操作&lt;/strong&gt;，其中的每个操作表示参与者与系统的&lt;strong&gt;一个交互过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用例描述系统外部可见的功能需求，只描述做什么，不描述怎么做
多数是由参与者发起的动作，也允许系统发起的动作，例如：异常情况处理&lt;/p&gt;
&lt;h5 id="用例关系"&gt;用例关系
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;包含关系《include》：描述用例间具有的公用行为&lt;/li&gt;
&lt;li&gt;扩展关系《extend》 ：描述用例间可选的独立行为&lt;/li&gt;
&lt;li&gt;泛化关系 generalization ： 用例之间的继承关系&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="静态模型"&gt;静态模型
&lt;/h4&gt;&lt;h6 id="面向对象建模"&gt;面向对象建模
&lt;/h6&gt;&lt;p&gt;类图，是系统建模过程中最重要的部分，也是花费精力最大的活动。类图描述系统中各个对象之间存在的关系，表达系统的静态结构，也叫做“对象建模”&lt;/p&gt;
&lt;h6 id="接口类"&gt;接口类
&lt;/h6&gt;&lt;p&gt;把类的公共可见性操作组织在一起， 提供的服务集合&lt;/p&gt;
&lt;p&gt;接口类作为类之间&lt;strong&gt;交互操作的契约&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id="包图"&gt;包图
&lt;/h6&gt;&lt;p&gt;包是对模型成分分组的机制&lt;/p&gt;
&lt;p&gt;多个包可以形成严格的树形层次结构，用于描述系统的组织结构&lt;/p&gt;
&lt;p&gt;一个包可以嵌套在另一个包内，内层的包成分，同时属于内层和外层两个包。&lt;/p&gt;
&lt;h4 id="动态模型"&gt;动态模型
&lt;/h4&gt;&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;h4 id="物理实现"&gt;物理实现
&lt;/h4&gt;&lt;p&gt;构件图Component Diagram 与部署图Deployment Diagram 是在系统设计时，用来表示系统软件成分以及之间关系结构的工具&lt;/p&gt;
&lt;p&gt;分析构件及其间的关系，并对它们在运行节点上的成分给与描述，也叫“物理事物建模”&lt;/p&gt;
&lt;h5 id="构件图"&gt;构件图
&lt;/h5&gt;&lt;p&gt;类表示逻辑抽象，是逻辑模块，构件表示机器空间中的物理模块，是逻辑元素及协作关系的物理实现&lt;/p&gt;
&lt;p&gt;类有属性和操作，构件仅通过接口向外提供可请求的操作&lt;/p&gt;
&lt;h6 id="构件种类"&gt;构件种类
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;部署构件&lt;/p&gt;
&lt;p&gt;可用于构造的执行系统，如：动态连接库（DLL）和可执行程序（EXE）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;产品构件&lt;/p&gt;
&lt;p&gt;开发过程的产物，包括创建部署构件的源代码文件及数据文件等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可执行构件&lt;/p&gt;
&lt;p&gt;由执行系统创建的构件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="部署图"&gt;部署图
&lt;/h5&gt;&lt;p&gt;分析构件及其间的关系，并对它们在运行节点上的成分给与描述，也叫“物理事物建模”&lt;/p&gt;
&lt;p&gt;构件是系统执行的事物，节点是执行构件的事物。
构件代表逻辑元素的物理打包，节点可表示构件的物理部署&lt;/p&gt;
&lt;p&gt;节点上可以有一个或多个构件，一个构件也可以部署在一个或多个节点上。&lt;/p&gt;
&lt;h2 id="需求验证-1"&gt;需求验证
&lt;/h2&gt;&lt;h4 id="方法-1"&gt;方法
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;评审&lt;/p&gt;
&lt;p&gt;由作者之外的其他人来检查产品问题的方法
是&lt;strong&gt;主要的静态分析手段&lt;/strong&gt;
原则上，每一条需求都应该进行评审&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原型与测试&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开发测试用例&lt;/p&gt;
&lt;p&gt;如果无法为某条需求定义完备的测试用例，那么它可能就存在着模糊、信息遗漏、不正确等缺陷&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户手册编制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用跟踪关系&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;业务需求 -&amp;gt; 用户需求 -&amp;gt; 系统需求&lt;/p&gt;
&lt;p&gt;如果业务需求和用户需求没有得到后项需求（用户需求和系统需求）的充分支持，那么软件需求规格说明文档就存在不完备的缺陷。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统需求 -&amp;gt; 用户需求 -&amp;gt; 业务需求&lt;/p&gt;
&lt;p&gt;如果不能依据跟踪关系找到一条系统需求的前项用户需求和前项业务需求，那么该需求就属于非必要的需求。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动化分析&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="需求管理-1"&gt;需求管理
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;维护需求基线&lt;/li&gt;
&lt;li&gt;实现需求跟踪&lt;/li&gt;
&lt;li&gt;控制变更&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="需求基线"&gt;需求基线
&lt;/h4&gt;&lt;p&gt;已经通过&lt;strong&gt;正式评审和批准&lt;/strong&gt;的规格说明或产品，它可以作为进一步开发的基础，并且只有通过&lt;strong&gt;正式的变更控制过程&lt;/strong&gt;才能修改它
定义：是被明确和固定下来的需求集合，是项目团队需要在某一特定产品版本中实现的特征和需求集合&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/MVBfJHz/image-20220422230125870.png"
loading="lazy"
alt="image-20220422230125870"
&gt;&lt;/p&gt;
&lt;h5 id="描述内容"&gt;描述内容
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;标识符（ID），为后续的项目工作提供一个共同的交流参照。&lt;/li&gt;
&lt;li&gt;当前版本号（Version），保证项目的各项工作都建立在最新的一致需求基础之上。&lt;/li&gt;
&lt;li&gt;源头（Source），在需要进一步深入理解或者改变需求时，可以回溯到需求的源头。&lt;/li&gt;
&lt;li&gt;理由（Rational），提供需求产生的背景知识。&lt;/li&gt;
&lt;li&gt;优先级（Priority），后续的项目工作可以参照优先级进行安排和调度。&lt;/li&gt;
&lt;li&gt;状态（Status），交流和具体需求相关的项目工作状况。&lt;/li&gt;
&lt;li&gt;成本、工作量、风险、可变性（Cost、Effort、Risk、Volatility），为需求的设计和实现提供参考信息，驱动设计和实现工作。&lt;/li&gt;
&lt;li&gt;需求创建的日期；&lt;/li&gt;
&lt;li&gt;和需求相关的项目工作人员，包括需求的作者、设计者、实现者、测试者等；&lt;/li&gt;
&lt;li&gt;需求涉及的子系统；&lt;/li&gt;
&lt;li&gt;需求涉及的产品版本号；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="需求跟踪"&gt;需求跟踪
&lt;/h4&gt;&lt;p&gt;避免在开发过程或者演化过程中与需求基线不一致或者偏离的风险&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前向跟踪是指被定义到软件需求规格说明文档之前的需求演化过程
&lt;ul&gt;
&lt;li&gt;向前跟踪到需求：说明涉众的需要和目标产生了哪些软件需求&lt;/li&gt;
&lt;li&gt;从需求向后回溯：说明软件需求来源于哪些涉众的需要和目标&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;后向跟踪是指被定义到软件需求规格说明文档之后的需求演化过程
&lt;ul&gt;
&lt;li&gt;从需求向前跟踪：说明软件需求是如何被后续的开发物件支持和实现的&lt;/li&gt;
&lt;li&gt;回溯到需求的跟踪：说明各种系统开发的物件是因为什么原因（软件需求）而被开发出来的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="需求变更控制"&gt;需求变更控制
&lt;/h4&gt;&lt;p&gt;以可控、一致的方式进行需求基线中需求的变更处理，包括对变化的评估、协调、批准或拒绝、实现和验证&lt;/p&gt;</description></item><item><title>【数字逻辑】笔记</title><link>https://dyhes.github.io/p/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E7%AC%94%E8%AE%B0/</guid><description>&lt;h4 id="数字信号与模拟信号"&gt;数字信号与模拟信号
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;模拟信号 Analog 连续&lt;/li&gt;
&lt;li&gt;数字信号 Digital 离散&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="逻辑电平"&gt;逻辑电平
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;正逻辑：高1低0&lt;/li&gt;
&lt;li&gt;负逻辑：高0低1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;标准：&lt;strong&gt;TTL&lt;/strong&gt;,&lt;strong&gt;CMOS&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id="时序图"&gt;时序图
&lt;/h4&gt;&lt;p&gt;将输入信号和输出信号的关系按照时间顺序排列得到的波形图&lt;/p&gt;
&lt;h3 id="进制转换"&gt;进制转换
&lt;/h3&gt;&lt;p&gt;整数连除，小数连乘（10&amp;ndash;&amp;gt;N）&lt;/p&gt;
&lt;h2 id="二进制符号表示"&gt;二进制符号表示
&lt;/h2&gt;&lt;h3 id="原码"&gt;原码
&lt;/h3&gt;&lt;p&gt;最高位为符号位（0正1负）&lt;/p&gt;
&lt;p&gt;大小以&lt;strong&gt;绝对值&lt;/strong&gt;表示&lt;/p&gt;
&lt;h3 id="反码"&gt;反码
&lt;/h3&gt;&lt;p&gt;绝对值的原码表示每一位取反再加上符号位&lt;/p&gt;
&lt;h3 id="补码"&gt;补码
&lt;/h3&gt;&lt;p&gt;定义:
$$
(N)_{补n}=2^n-N
$$&lt;/p&gt;
&lt;p&gt;与其小数位无关&lt;/p&gt;
&lt;p&gt;求法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原码补足n位后整体求反加一&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
N_{补}=N_{反}+1
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原码补足n位后&lt;strong&gt;从右向左&lt;/strong&gt;第一个1往右不变，其余取反&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="符号数表示法"&gt;符号数表示法
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;反码表示法：正数用&lt;strong&gt;原码&lt;/strong&gt;表示，负数用&lt;strong&gt;反码&lt;/strong&gt;表示&lt;/li&gt;
&lt;li&gt;补码表示法：正数用&lt;strong&gt;原码&lt;/strong&gt;表示，负数用&lt;strong&gt;绝对值的补码&lt;/strong&gt;表示（便于运算）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bcd码"&gt;BCD码
&lt;/h2&gt;&lt;p&gt;Binary Coded Decimal&lt;/p&gt;
&lt;h3 id="有权码前五位自然"&gt;有权码（前五位自然）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;8421码：自然码&lt;/li&gt;
&lt;li&gt;5421码：第一位镜像自反，其余三位对应&lt;/li&gt;
&lt;li&gt;2421码：镜像自反&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="无权码"&gt;无权码
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;余3码：8421码+3&lt;/li&gt;
&lt;li&gt;余3循环码：第一位镜像自反，其余镜像相等,逻辑相邻&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="格雷gray码"&gt;格雷(Gray)码
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/02vgH73/image-20220302215938158.png"
loading="lazy"
alt="image-20220302215938158"
&gt;&lt;/p&gt;
&lt;h4 id="格雷转二进制"&gt;格雷转二进制
&lt;/h4&gt;&lt;p&gt;$$
G_{n-1}=B_{n-1},B_{i}=G_{i} \oplus B_{i+1}
$$&lt;/p&gt;
&lt;h4 id="二进制转格雷"&gt;二进制转格雷
&lt;/h4&gt;&lt;p&gt;$$
G_{n-1}=B_{n-1},G_{i}=B_{i+1} \oplus B_{i}
$$&lt;/p&gt;
&lt;h2 id="逻辑函数"&gt;逻辑函数
&lt;/h2&gt;&lt;h3 id="相等"&gt;相等
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;输入变量相同，任意一组变量取值结果相同&lt;/li&gt;
&lt;li&gt;亦即真值表相同&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="反函数"&gt;反函数
&lt;/h3&gt;&lt;p&gt;输入相同，输出相反，成为互反（互补）&lt;/p&gt;
&lt;h3 id="对偶式"&gt;对偶式
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&amp;lsquo;*&amp;lsquo;与&amp;rsquo;+&amp;lsquo;互换&lt;/li&gt;
&lt;li&gt;0与1互换&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="标准形式"&gt;标准形式
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;与或（最小项之和）&lt;/li&gt;
&lt;li&gt;或与（最大项之积）&lt;/li&gt;
&lt;li&gt;与非-与非&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/CVmL9T4/image-20220307235255629.png"
loading="lazy"
alt="image-20220307235255629"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;或非-或非&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/n83vrdc/image-20220307235344512.png"
loading="lazy"
alt="image-20220307235344512"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与或非&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/st692Jj/image-20220307235419959.png"
loading="lazy"
alt="image-20220307235419959"
&gt;&lt;/p&gt;
&lt;p&gt;e.g.&lt;img src="https://i.ibb.co/Vp4M1CP/image-20220307232938130.png"
loading="lazy"
alt="image-20220307232938130"
&gt;&lt;/p&gt;
&lt;h2 id="基本定律"&gt;基本定律
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/4KDYw3d/image-20220307224145641.png"
loading="lazy"
alt="image-20220307224145641"
&gt;&lt;/p&gt;
&lt;h2 id="运算规则"&gt;运算规则
&lt;/h2&gt;&lt;h3 id="代入规则"&gt;代入规则
&lt;/h3&gt;&lt;p&gt;等式两边同一逻辑变量代以同样逻辑函数等式仍成立&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/sWG0bsZ/image-20220307225707305.png"
loading="lazy"
alt="image-20220307225707305"
&gt;&lt;/p&gt;
&lt;h3 id="反演规则"&gt;反演规则
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&amp;lsquo;*&amp;lsquo;与&amp;rsquo;+&amp;lsquo;互换&lt;/li&gt;
&lt;li&gt;0与1互换&lt;/li&gt;
&lt;li&gt;变量取反&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;得反函数&lt;/p&gt;
&lt;h3 id="对偶规则"&gt;对偶规则
&lt;/h3&gt;&lt;p&gt;两个函数相等则其对偶式相等&lt;/p&gt;
&lt;h2 id="基本定理"&gt;基本定理
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/dWTXXLL/image-20220307231710783.png"
loading="lazy"
alt="image-20220307231710783"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/xfqKqhr/image-20220307231719189.png"
loading="lazy"
alt="image-20220307231719189"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/XYGPYxt/image-20220307231729915.png"
loading="lazy"
alt="image-20220307231729915"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/4P1XKxX/image-20220307231739354.png"
loading="lazy"
alt="image-20220307231739354"
&gt;&lt;/p&gt;
&lt;h2 id="复合运算"&gt;复合运算
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;与非，或非，与或非&lt;/li&gt;
&lt;li&gt;异或&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/7K3WRnx/image-20220307231946227.png"
loading="lazy"
alt="image-20220307231946227"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/vCFGv9Y/image-20220307232339191.png"
loading="lazy"
alt="image-20220307232339191"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同或&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/znnZ3Cg/image-20220307232418504.png"
loading="lazy"
alt="image-20220307232418504"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/yhF6CFj/image-20220307232448191.png"
loading="lazy"
alt="image-20220307232448191"
&gt;&lt;/p&gt;
&lt;h2 id="最大项最小项"&gt;最大项、最小项
&lt;/h2&gt;&lt;p&gt;最大（小）项：n个变量或其反变量仅出现一次之和（积），均为2^n个&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/W56Y1Sg/image-20220307233905218.png"
loading="lazy"
alt="image-20220307233905218"
&gt;&lt;/p&gt;
&lt;h2 id="代数化简法"&gt;代数化简法
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/7k1qXv4/image-20220307234921454.png"
loading="lazy"
alt="image-20220307234921454"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/n130qMj/image-20220307234937027.png"
loading="lazy"
alt="image-20220307234937027"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/rw5vF7r/image-20220307234951959.png"
loading="lazy"
alt="image-20220307234951959"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/LZ8sbFZ/image-20220307235100605.png"
loading="lazy"
alt="image-20220307235100605"
&gt;&lt;/p&gt;
&lt;h3 id="变换方法"&gt;变换方法
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/0V2ZN21/image-20220307235558902.png"
loading="lazy"
alt="image-20220307235558902"
&gt;&lt;/p&gt;
&lt;h2 id="卡诺图化简法"&gt;卡诺图化简法
&lt;/h2&gt;&lt;h3 id="卡诺图"&gt;卡诺图
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/pvZ6psd/image-20220307235858189.png"
loading="lazy"
alt="image-20220307235858189"
&gt;&lt;/p&gt;
&lt;h4 id="特点"&gt;特点
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;n变量卡诺图有2^n个方格&lt;/li&gt;
&lt;li&gt;大于4时无法用二维表示&lt;/li&gt;
&lt;li&gt;形式不一&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/71TMFtm/image-20220308000409984.png"
loading="lazy"
alt="image-20220308000409984"
&gt;&lt;/p&gt;
&lt;h4 id="填法"&gt;填法
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;真值表：按0，1填&lt;/li&gt;
&lt;li&gt;与或：与项覆盖区域填1其余填0&lt;/li&gt;
&lt;li&gt;或与：或项覆盖区域填0其余填1&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="性质"&gt;性质
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;均1则1&lt;/li&gt;
&lt;li&gt;均0则0&lt;/li&gt;
&lt;li&gt;取反得反&lt;/li&gt;
&lt;li&gt;（两图）相乘为（各小格）与&lt;/li&gt;
&lt;li&gt;相加为或&lt;/li&gt;
&lt;li&gt;异或为异或&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="最小覆盖原则"&gt;最小覆盖原则
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;每个&amp;quot;1&amp;quot;&lt;strong&gt;至少&lt;/strong&gt;被覆盖一次&lt;/li&gt;
&lt;li&gt;圈尽量少亦即每个圈包含的&amp;quot;1&amp;quot;尽量多&lt;/li&gt;
&lt;li&gt;每个圈至少包含一个独有的&amp;quot;1&amp;quot;小格&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="非完全描述逻辑函数"&gt;非完全描述逻辑函数
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;完全描述逻辑函数：输入变量的每一组取值都有确定的函数值（&amp;ldquo;0&amp;quot;或&amp;quot;1&amp;rdquo;）与之对应&lt;/li&gt;
&lt;li&gt;非完全描述逻辑函数：有些取值组没有确定的函数值，可能有多种不同的最简形式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="任意项无关项"&gt;任意项（无关项）
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/jzFwGzV/image-20220308103606583.png"
loading="lazy"
alt="image-20220308103606583"
&gt;&lt;/p&gt;
&lt;h3 id="代数法化简"&gt;代数法化简
&lt;/h3&gt;&lt;p&gt;根据需要舍弃（定义为&amp;quot;0&amp;quot;）或加进（定义为&amp;quot;1&amp;quot;）以使逻辑相邻的最小项个数最大化&lt;/p&gt;
&lt;h2 id="逻辑函数描述方法"&gt;逻辑函数描述方法
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;真值表&lt;/li&gt;
&lt;li&gt;卡诺图&lt;/li&gt;
&lt;li&gt;逻辑表达式&lt;/li&gt;
&lt;li&gt;逻辑图&lt;/li&gt;
&lt;li&gt;时序图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/JmV5mky/image-20220308104342546.png"
loading="lazy"
alt="image-20220308104342546"
&gt;&lt;/p&gt;
&lt;h2 id="门电路"&gt;门电路
&lt;/h2&gt;&lt;h3 id="二极管"&gt;二极管
&lt;/h3&gt;&lt;p&gt;单向导电性&lt;/p&gt;
&lt;p&gt;钳位特性：导通时端电压可视为不变&lt;/p&gt;
&lt;h3 id="ddl与门"&gt;DDL“与门”
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/p1Bzwqn/image-20220322163536389.png"
loading="lazy"
alt="image-20220322163536389"
&gt;&lt;/p&gt;
&lt;h3 id="ddl或门"&gt;DDL“或门”
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/gPNsc8n/image-20220322163825340.png"
loading="lazy"
alt="image-20220322163825340"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;p&gt;DDL与门，输入为0V时，输出低电位被钳位在0.3V&lt;/p&gt;
&lt;p&gt;DDL或门，输入为3V时，输出高电位被钳位在3- 0.3=2.7V。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;存在电压阈值损失，不能多级互联&lt;/p&gt;
&lt;h2 id="三极管"&gt;三极管
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/df95RFW/image-20220322164235227.png"
loading="lazy"
alt="image-20220322164235227"
&gt;&lt;/p&gt;
&lt;h2 id="组合逻辑电路"&gt;组合逻辑电路
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;由逻辑门组成&lt;/li&gt;
&lt;li&gt;内部无反馈环节&lt;/li&gt;
&lt;li&gt;不具有&amp;quot;记忆&amp;quot;功能（输出仅由当前时刻的输入决定）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;compared with 时序逻辑电路：有反馈环节，具有“记忆”功能，输出和之前的状态有关&lt;/p&gt;
&lt;p&gt;组合电路是由逻辑门组成的多输入，多输出（或单输出）的逻辑电路&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/FsdfhG9/image-20220322164947456.png"
loading="lazy"
alt="image-20220322164947456"
&gt;&lt;/p&gt;
&lt;h3 id="分析一般步骤"&gt;分析一般步骤
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/1bkxZ7M/image-20220320211254319.png"
loading="lazy"
alt="image-20220320211254319"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写表达式&lt;/li&gt;
&lt;li&gt;列真值表&lt;/li&gt;
&lt;li&gt;分析功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="常用组合电路"&gt;常用组合电路
&lt;/h2&gt;&lt;h3 id="半加器"&gt;半加器
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/LS3f8j8/image-20220322170439899.png"
loading="lazy"
alt="image-20220322170439899"
&gt;&lt;/p&gt;
&lt;h3 id="全加器"&gt;全加器
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/DM8tr8w/image-20220322171233373.png"
loading="lazy"
alt="image-20220322171233373"
&gt;&lt;/p&gt;
&lt;h4 id="应用"&gt;应用
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;四位全加器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/sHZxF1D/image-20220322171432383.png"
loading="lazy"
alt="image-20220322171432383"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减法器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/HFZkRV2/image-20220322171515134.png"
loading="lazy"
alt="image-20220322171515134"
&gt;&lt;/p&gt;
&lt;h3 id="数据选择器"&gt;数据选择器
&lt;/h3&gt;&lt;p&gt;又称为多路开关，多路转换器&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/Y2KsDVS/image-20220322173812807.png"
loading="lazy"
alt="image-20220322173812807"
&gt;&lt;/p&gt;
&lt;h4 id="自扩展"&gt;自扩展
&lt;/h4&gt;&lt;p&gt;用多片某类选择器构成更大范围的选择器，如：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/QFXBpJt/image-20220322174110022.png"
loading="lazy"
alt="image-20220322174110022"
&gt;&lt;/p&gt;
&lt;h3 id="多路分配器"&gt;多路分配器
&lt;/h3&gt;&lt;p&gt;与数据选择器功能相反，将一个输入分别送到多个输出端&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/RQM5Wwq/image-20220322182215499.png"
loading="lazy"
alt="image-20220322182215499"
&gt;&lt;/p&gt;
&lt;h3 id="编码器"&gt;编码器
&lt;/h3&gt;&lt;p&gt;编码：用&lt;strong&gt;数码信号&lt;/strong&gt;表示&lt;strong&gt;特定对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;二进制编码：用多位二进制数形成一组二进制代码，并将代码赋予特定的含义&lt;/p&gt;
&lt;h4 id="8线-3线普通编码器"&gt;8线-3线普通编码器
&lt;/h4&gt;&lt;p&gt;输入8个高低电平信号，输出三位二进制数&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/xXN0LDj/image-20220322183001216.png"
loading="lazy"
alt="image-20220322183001216"
&gt;&lt;/p&gt;
&lt;h2 id="组合逻辑电路设计"&gt;组合逻辑电路设计
&lt;/h2&gt;&lt;h3 id="用小规模电路ssi实现各种逻辑门"&gt;用小规模电路(SSI)实现——各种逻辑门
&lt;/h3&gt;&lt;p&gt;实际逻辑问题=》真值表=》逻辑表达式=》逻辑化简=》逻辑电路图&lt;/p&gt;
&lt;h4 id="优先编码器"&gt;优先编码器
&lt;/h4&gt;&lt;p&gt;允许多个输入同时有效，按规定的优先级别进行编码&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/YWzbTXz/image-20220322184012763.png"
loading="lazy"
alt="image-20220322184012763"
&gt;&lt;/p&gt;
&lt;h5 id="典型优先编码器"&gt;典型优先编码器
&lt;/h5&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/Prp1gTG/image-20220322184821751.png"
loading="lazy"
alt="image-20220322184821751"
&gt;&lt;/p&gt;
&lt;h5 id="优先编码器扩展"&gt;优先编码器扩展
&lt;/h5&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/T2VSHpc/image-20220322185456554.png"
loading="lazy"
alt="image-20220322185456554"
&gt;&lt;/p&gt;
&lt;h4 id="译码器"&gt;译码器
&lt;/h4&gt;&lt;p&gt;编码的逆过程，将代码“翻译为特定的对象，将一组二进制代码“翻译”为一组高低电平信号&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通用译码器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;二进制译码器&lt;/p&gt;
&lt;p&gt;将n位二进制代码，译为特定含义的2^n个输出信号&lt;/p&gt;
&lt;p&gt;2线-4线，3线-8线，4线-16线&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二-十进制译码器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码转换器&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;显示译码器&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="通用译码器"&gt;通用译码器
&lt;/h5&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/HHk4dPn/image-20220322190432978.png"
loading="lazy"
alt="image-20220322190432978"
&gt;&lt;/p&gt;
&lt;h6 id="74ls138"&gt;74LS138
&lt;/h6&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/XLFpBM2/image-20220322190735824.png"
loading="lazy"
alt="image-20220322190735824"
&gt;&lt;/p&gt;
&lt;h6 id="4线-16线译码器74ls138扩展"&gt;4线-16线译码器（74LS138扩展）
&lt;/h6&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/C7MS9VK/image-20220322190747010.png"
loading="lazy"
alt="image-20220322190747010"
&gt;&lt;/p&gt;
&lt;h6 id="二-十进制译码器"&gt;二-十进制译码器
&lt;/h6&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/TW7ySq4/image-20220322193444313.png"
loading="lazy"
alt="image-20220322193444313"
&gt;&lt;/p&gt;
&lt;h5 id="显示译码器"&gt;显示译码器
&lt;/h5&gt;&lt;p&gt;将4位二进制代码译为数码显示器所需的信号&lt;/p&gt;
&lt;h6 id="七段译码显示器"&gt;七段译码显示器
&lt;/h6&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/d4KzNrC/image-20220322194500664.png"
loading="lazy"
alt="image-20220322194500664"
&gt;&lt;/p&gt;
&lt;p&gt;74LS47：输出低电平有效，用于共阳极数码管&lt;/p&gt;
&lt;p&gt;74LS48：输出高电平有效，用于共阴极数码管&lt;/p&gt;
&lt;h4 id="数值比较器"&gt;数值比较器
&lt;/h4&gt;&lt;p&gt;比较两个相同位数的二进制数的大小，由F_A&amp;lt;B,F_A=B,F_A&amp;gt;B三个输出表示比较的结果&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/1f667H0/image-20220322202859439.png"
loading="lazy"
alt="image-20220322202859439"
&gt;&lt;/p&gt;
&lt;h3 id="用中规模集成电路msi实现译码器选择器"&gt;用中规模集成电路（MSI）实现——译码器，选择器
&lt;/h3&gt;&lt;p&gt;采用中规模器件（一般指&lt;strong&gt;译码器、数据选择器和全加器&lt;/strong&gt;等）设计组合电路，应对逻辑函数进行变换，得到与指定器件相一致的表达式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用数据选择器设计&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果逻辑函数输入变量数与数据选择器控制端数量相同（如用8选1实现3变量函数），则输入变量与控制 变量一一相接，数据输入端接高、低电平。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/L1BNm1h/image-20220322212948907.png"
loading="lazy"
alt="image-20220322212948907"
&gt;&lt;/p&gt;
&lt;p&gt;如果逻辑函数输入变量数多于数据选择器控制端数 （如用4选1实现3变量函数），则需分离多余的变量。 未被分离的输入变量与控制变量相接，被分离变量 则与数据输入端相接&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/yBrVssf/image-20220322213505266.png"
loading="lazy"
alt="image-20220322213505266"
&gt;&lt;/p&gt;
&lt;p&gt;一般情况下，一个n变量的逻辑函数可用（2 n）选1 或（2 n-1）选1数据选择器实现。 如果部分变量出现的频率更低的话，则通过一些门 电路可实现更多变量的逻辑函数。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/b2bwK7D/image-20220322212924666.png"
loading="lazy"
alt="image-20220322212924666"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;译码器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于最小项译码器来说，其输出是输入变量的所有 最小项。 由于所有逻辑函数都可转化成其最小项的和的形式， 因此任何逻辑函数都可采用译码器实现。 首先需要将表达式转换成&lt;strong&gt;最小项的和的形式&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;3线-8线译码器可实现任何3变量的逻辑函数。&lt;/p&gt;
&lt;p&gt;4线-16线译码器可实现任何4变量的逻辑函数&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/df93qHT/image-20220322214850744.png"
loading="lazy"
alt="image-20220322214850744"
&gt;&lt;/p&gt;
&lt;h2 id="竞争和冒险"&gt;竞争和冒险
&lt;/h2&gt;&lt;p&gt;信号通过门传输需要时间，即实际的逻辑门存在传 输延迟时间。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/Xy5XJfS/image-20220322215057098.png"
loading="lazy"
alt="image-20220322215057098"
&gt;&lt;/p&gt;
&lt;p&gt;输入有竞争现象时，输出不一定都产生冒险。 冒险分为逻辑冒险和功能冒险两种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逻辑冒险&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当多个输入信号中某一个发生变化时，由于此信号在电路中经过的途径不同，使到达电路某个门的多个 输入信号之间产生时间差，即存在由所有的逻辑部件 的延迟时间引起的竞争，称为“逻辑竞争”，由此产生的冒险为“逻辑冒险”。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/Qpxr2Vz/image-20220322215250237.png"
loading="lazy"
alt="image-20220322215250237"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能冒险&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在组合电路的输入端，当有几个变量变化时，由于 其变化的快慢不同，传递到某个门的输入端必然存在 时间差，这种现象叫作“功能竞争” 。 由此产生的冒险为“功能冒险”。&lt;/p&gt;
&lt;p&gt;消除&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;加滤波电容&lt;/li&gt;
&lt;li&gt;引入禁止脉冲&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="触发器"&gt;触发器
&lt;/h2&gt;&lt;p&gt;能够存储&lt;strong&gt;1位二进制数字信号&lt;/strong&gt;的基本单元电路叫做 触发器。 触发器是构成各种复杂数字系统的基本逻辑单元。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/M728RKP/image-20220411161715659.png"
loading="lazy"
alt="image-20220411161715659"
&gt;&lt;/p&gt;
&lt;h4 id="原态与次态"&gt;原态与次态
&lt;/h4&gt;&lt;p&gt;触发器在接收信号之前所处的状态称为原态/初态， 用Q^n表示；&lt;/p&gt;
&lt;p&gt;触发器在接收信号之后建立的新的稳定状态，叫做次态/新态，用Q^n+1表示。&lt;/p&gt;
&lt;p&gt;显然，触发器的次态 Q^n+1是由输入信号和原态Q^n的取值情况所决定。&lt;/p&gt;
&lt;h4 id="基本rs触发器"&gt;基本RS触发器
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/h23K8Hy/image-20220411202336498.png"
loading="lazy"
alt="image-20220411202336498"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/P5XSNcJ/image-20220411203317682.png"
loading="lazy"
alt="image-20220411203317682"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/YZRS0fT/image-20220411203703330.png"
loading="lazy"
alt="image-20220411203703330"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/jgTfnn4/image-20220411203738033.png"
loading="lazy"
alt="image-20220411203738033"
&gt;&lt;/p&gt;
&lt;h4 id="同步rs触发器"&gt;同步RS触发器
&lt;/h4&gt;&lt;p&gt;在较复杂的数字系统中，当采用多个触发器时，往往要求各个触发器的翻转在时间上同步，因此需引入一个&lt;strong&gt;公用的同步信号&lt;/strong&gt;，使这些触发器只有在同步信号到达时才按输入信号改变输出状态。 通常称此同步信号为&lt;strong&gt;时钟脉冲信号&lt;/strong&gt;，简称&lt;strong&gt;时钟&lt;/strong&gt;，用&lt;strong&gt;CP&lt;/strong&gt;表示。&lt;/p&gt;
&lt;p&gt;同步触发器又称作&lt;strong&gt;电平触发型触发器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/j9NhWjy/image-20220411205844040.png"
loading="lazy"
alt="image-20220411205844040"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/5xkqCR2/image-20220411211128687.png"
loading="lazy"
alt="image-20220411211128687"
&gt;&lt;/p&gt;
&lt;h4 id="空翻"&gt;空翻
&lt;/h4&gt;&lt;p&gt;同一时钟脉冲作用期间，引起触发器发生两次以及多次翻转的现象&lt;/p&gt;
&lt;p&gt;同步RS触发器存在空翻现象，为了提高抗干扰能力， 克服空翻，希望一个CP脉冲作用期间Q只改变一次。可采用以下结构形式：主从型、边沿型。&lt;/p&gt;
&lt;h4 id="主从型触发器"&gt;主从型触发器
&lt;/h4&gt;&lt;p&gt;主从结构的触发器也叫做&lt;strong&gt;脉冲触发型触发器&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id="rs"&gt;RS
&lt;/h6&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/bXk2Ktm/image-20220411220022511.png"
loading="lazy"
alt="image-20220411220022511"
&gt;&lt;/p&gt;
&lt;p&gt;主从RS触发器和同步RS触发器的&lt;strong&gt;特性表相同&lt;/strong&gt;，但 工作时序不同。 ❑ 主从RS触发器在CP由1→0（下降沿）后根据CP＝1 期间S、R的状态而改变状态。 ❑ 即输出状态的变化发生在CP信号的下降沿。&lt;/p&gt;
&lt;h6 id="jk"&gt;JK
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CP=1，主触发器根据J、K状态而动作，从触发器保持&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CP=0，从触发器根据主触发器的状态进行输出&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/JnvS7M7/image-20220411221218429.png"
loading="lazy"
alt="image-20220411221218429"
&gt;&lt;/p&gt;
&lt;h6 id="注意"&gt;注意
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;只有CP=1期间输入信号未发生过变化的条件下， 用CP下降沿到达时输入的状态决定触发器的次态才是 正确的。&lt;/li&gt;
&lt;li&gt;主从JK触发器存在一次变化问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="边缘型触发器"&gt;边缘型触发器
&lt;/h4&gt;&lt;p&gt;为了进一步增强触发器的抗干扰能力，提高工作的可靠性，希望&lt;strong&gt;触发器的次态仅仅取决于CP的上升沿或下降沿到来时刻输入信号的状态&lt;/strong&gt;，而在此之前的或之后输入信号状态的任何变化对触发器的次态都没有影响。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维持阻塞结构的边沿触发器&lt;/li&gt;
&lt;li&gt;利用CMOS传输门的边沿触发器&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="逻辑功能"&gt;逻辑功能
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JK&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;D&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;T&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;T&amp;rsquo;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/0Gysvhj/image-20220412172225250.png"
loading="lazy"
alt="image-20220412172225250"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/FbrGrXD/image-20220412172252346.png"
loading="lazy"
alt="image-20220412172252346"
&gt;&lt;/p&gt;
&lt;h4 id="相互转换"&gt;相互转换
&lt;/h4&gt;&lt;p&gt;将具有某种逻辑功能的触发器FF，在其输入端加一转换电路（组合逻辑电路），可完成另一待求触发器的逻辑功能。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/M9ZQmNx/image-20220412172744905.png"
loading="lazy"
alt="image-20220412172744905"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/6ZMkxMB/image-20220412173151585.png"
loading="lazy"
alt="image-20220412173151585"
&gt;&lt;/p&gt;
&lt;h2 id="时序逻辑电路"&gt;时序逻辑电路
&lt;/h2&gt;&lt;p&gt;由组合逻辑电路和存储电路构成，它在某一时刻的输出状态不仅与该时刻输入信号有关， 还与电路原来的输出状态有关。&lt;/p&gt;
&lt;p&gt;包含&lt;strong&gt;组合电路&lt;/strong&gt;和&lt;strong&gt;存储电路&lt;/strong&gt;两部分 存储电路的输出&lt;strong&gt;反馈&lt;/strong&gt;到组合电路的输入端。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/FxnN8vR/image-20220412191344745.png"
loading="lazy"
alt="image-20220412191344745"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/KqbyhpQ/image-20220412191410185.png"
loading="lazy"
alt="image-20220412191410185"
&gt;&lt;/p&gt;
&lt;h4 id="功能描述方法"&gt;功能描述方法
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;逻辑函数表达式（3个方程）&lt;/li&gt;
&lt;li&gt;状态转换真值表&lt;/li&gt;
&lt;li&gt;状态转换图&lt;/li&gt;
&lt;li&gt;时序图&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="分类"&gt;分类
&lt;/h4&gt;&lt;h6 id="按照存储单元状态变化特点动作特点"&gt;按照存储单元状态变化特点（动作特点）
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;同步&lt;/strong&gt;时序逻辑电路&lt;/p&gt;
&lt;p&gt;所有触发器状态变化受同一CP控制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;异步&lt;/strong&gt;时序逻辑电路&lt;/p&gt;
&lt;p&gt;触发器状态不同时变化&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="按照输出信号特点"&gt;按照输出信号特点
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mealy型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输出信号取决于&lt;strong&gt;存储电路&lt;/strong&gt;与&lt;strong&gt;输入变量&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Moore型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输出仅仅取决于存储电路的状态&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="按照逻辑功能"&gt;按照逻辑功能
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;计数器&lt;/li&gt;
&lt;li&gt;寄存器&lt;/li&gt;
&lt;li&gt;移位寄存器&lt;/li&gt;
&lt;li&gt;顺序脉冲发生器&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="电路分析"&gt;电路分析
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;写方程&lt;/strong&gt;：根据逻辑电路图写出各触发器的&lt;strong&gt;时钟方程、驱动方程、输出方程&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;求状态方程&lt;/strong&gt;：将驱动方程代入相应触发器的特性方程，得到各触发器的&lt;strong&gt;状态方程&lt;/strong&gt;（即次态方程）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;列出状态转换真值表&lt;/strong&gt;：依次设初态，求次态，列出状态转换真值表&lt;/p&gt;
&lt;p&gt;或者画出状态转换图（有效循环无效循环，自启动）&lt;/p&gt;
&lt;p&gt;（或时序图）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;说明逻辑功能&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="名词解释"&gt;名词解释
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有效状态：使用的状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无效状态：未使用的状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有效循环： 在CP脉冲作用下，电路在有效状态中的循环&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无效循环： 在CP脉冲作用下，电路在无效状态中的循环&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自启动：电路一旦进入无效状态，在CP脉冲作用下，能自 返回到有效循环中去的电路叫能自启动，否则叫不能自启动。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="中规模时序逻辑电路"&gt;中规模时序逻辑电路
&lt;/h2&gt;&lt;h4 id="寄存器"&gt;寄存器
&lt;/h4&gt;&lt;p&gt;寄存器是存放二进制数码的逻辑部件，由触发器构成。 一个触发器可寄存一位二进制代码，N 个触发器构成的寄存器可寄存N 位二进制数码&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/WBr7sDX/image-20220412203204393.png"
loading="lazy"
alt="image-20220412203204393"
&gt;&lt;/p&gt;
&lt;h4 id="移位寄存器"&gt;移位寄存器
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;功能：存储代码, 移位。&lt;/p&gt;
&lt;p&gt;移位－寄存器中的代码在CP脉冲作用下，逐位左移或右移&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用途&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存数&lt;/li&gt;
&lt;li&gt;数据串行&amp;ndash;并行转换&lt;/li&gt;
&lt;li&gt;数值运算&lt;/li&gt;
&lt;li&gt;数据处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单向移位寄存器&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/yNSHMJY/image-20220412214320406.png"
loading="lazy"
alt="image-20220412214320406"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双向移位寄存器&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/sbYrbfK/image-20220412214645266.png"
loading="lazy"
alt="image-20220412214645266"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/zrgJvPG/image-20220412215443579.png"
loading="lazy"
alt="image-20220412215443579"
&gt;&lt;/p&gt;
&lt;h4 id="计数器"&gt;计数器
&lt;/h4&gt;&lt;p&gt;用于计算输入脉冲CP的个数&lt;/p&gt;
&lt;h6 id="应用-1"&gt;应用
&lt;/h6&gt;&lt;p&gt;计数、&lt;strong&gt;分频&lt;/strong&gt;（因此又称为分频器）、定时、产生脉冲序列及节拍脉冲， 进行数字运算等&lt;/p&gt;
&lt;h6 id="分类-1"&gt;分类
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;按计数增减：
&lt;ul&gt;
&lt;li&gt;加法计数器&lt;/li&gt;
&lt;li&gt;减法计数器&lt;/li&gt;
&lt;li&gt;可逆计数器&lt;/li&gt;
&lt;li&gt;其他计数器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;按动作特点：
&lt;ul&gt;
&lt;li&gt;同步计数器&lt;/li&gt;
&lt;li&gt;异步计数器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;按进制：
&lt;ul&gt;
&lt;li&gt;二进制计数器&lt;/li&gt;
&lt;li&gt;二-十进制计数器&lt;/li&gt;
&lt;li&gt;任意计数器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="同步计数器"&gt;同步计数器
&lt;/h6&gt;&lt;p&gt;####### 二进制加法&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最低位每来一个CP改变一次状态&lt;/li&gt;
&lt;li&gt;第i位在第0～(i－1)全为1时，改变状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/9gStJ19/image-20220412225416513.png"
loading="lazy"
alt="image-20220412225416513"
&gt;&lt;/p&gt;
&lt;p&gt;####### 十进制加法&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/YLmMqtk/image-20220412225453047.png"
loading="lazy"
alt="image-20220412225453047"
&gt;&lt;/p&gt;
&lt;p&gt;####### 二进制减法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在多位二进制数末位减1&lt;/li&gt;
&lt;li&gt;第i位以下皆为0时， 则第i位应翻转&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/XtPF3Sx/image-20220412230328193.png"
loading="lazy"
alt="image-20220412230328193"
&gt;&lt;/p&gt;
&lt;p&gt;####### 十进制减法&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/6JN0G0r/image-20220412230344753.png"
loading="lazy"
alt="image-20220412230344753"
&gt;&lt;/p&gt;
&lt;p&gt;####### 小结&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/Rj0J9Y6/image-20220412230031154.png"
loading="lazy"
alt="image-20220412230031154"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/kGD8hRK/image-20220412230043471.png"
loading="lazy"
alt="image-20220412230043471"
&gt;&lt;/p&gt;
&lt;h6 id="异步计数器"&gt;异步计数器
&lt;/h6&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/SrCb2c5/image-20220412231011204.png"
loading="lazy"
alt="image-20220412231011204"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/VWsdfxk/image-20220412231324655.png"
loading="lazy"
alt="image-20220412231324655"
&gt;&lt;/p&gt;
&lt;h6 id="对比"&gt;对比
&lt;/h6&gt;&lt;p&gt;异步计数器由于触发器逐级翻转，工作速度低； 将某些状态译码时，译码器输出端会有竞争冒险产 生的尖峰脉冲；但其结构简单，可自启动。 同步计数器工作频率较高，传输延迟短，但结构 复杂&lt;/p&gt;
&lt;h6 id="74ls191"&gt;74LS191
&lt;/h6&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/Z2hCKTy/image-20220412232128120.png"
loading="lazy"
alt="image-20220412232128120"
&gt;&lt;/p&gt;
&lt;h4 id="移位计数器"&gt;移位计数器
&lt;/h4&gt;&lt;p&gt;移位计数器是一种特殊形式的计数器。 它是在移位寄存器的基础上增加&lt;strong&gt;反馈电路&lt;/strong&gt;构成的。 常用的移位计数器有&lt;strong&gt;环形计数&lt;/strong&gt;器和&lt;strong&gt;扭环形计数器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/3hjwt5k/image-20220412234357328.png"
loading="lazy"
alt="image-20220412234357328"
&gt;&lt;/p&gt;
&lt;p&gt;优点：不需要译码&lt;/p&gt;
&lt;p&gt;缺点：状态利用率低，不能自启动&lt;/p&gt;
&lt;p&gt;解决自启动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;修改输出与输入之间的&lt;strong&gt;反馈逻辑&lt;/strong&gt;，使电路具有自启动能力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当电路进入无效状态时，利用触发器的异步置位、 复位端，把电路置成有效状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/t4ctcQW/image-20220412234626098.png"
loading="lazy"
alt="image-20220412234626098"
&gt;&lt;/p&gt;
&lt;h2 id="中规模集成计数器"&gt;中规模集成计数器
&lt;/h2&gt;&lt;h4 id="同步十进制加法计数器74160-"&gt;**同步十进制加法计数器74160 **
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/fD9pmcj/image-20220412235931664.png"
loading="lazy"
alt="image-20220412235931664"
&gt;&lt;/p&gt;
&lt;h4 id="同步四位二进制加法计数器74161-"&gt;**同步四位二进制加法计数器74161 **
&lt;/h4&gt;&lt;p&gt;74161（16进制）除了进制与74160（10进制）不同之外，其他功能与74160相同&lt;/p&gt;
&lt;h4 id="异步二-五-十进制加法计数器74290-"&gt;**异步二-五-十进制加法计数器74290 **
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/xXksZLX/image-20220413092603208.png"
loading="lazy"
alt="image-20220413092603208"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/VH7sGbW/image-20220413093225206.png"
loading="lazy"
alt="image-20220413093225206"
&gt;&lt;/p&gt;
&lt;h4 id="同步四位二进制加减法计数器cc4516"&gt;&lt;strong&gt;同步四位二进制加减法计数器CC4516&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/59zq5H2/image-20220413093246564.png"
loading="lazy"
alt="image-20220413093246564"
&gt;&lt;/p&gt;
&lt;h4 id="任意进制计数器设计"&gt;任意进制计数器设计
&lt;/h4&gt;&lt;p&gt;若已有N进制计数器芯片，需M进制计数器，分两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;M &amp;lt; N: 用一片N进制计数器即可。&lt;/p&gt;
&lt;p&gt;想办法跳过N-M个状态。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;清零法（复位法）（反馈归零法）： 适用于有清零端的计数器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;异步清零&lt;/li&gt;
&lt;li&gt;同步清零&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/9t2st9F/image-20220413094213667.png"
loading="lazy"
alt="image-20220413094213667"
&gt;&lt;/p&gt;
&lt;p&gt;（相与或与非取决于高电平有效还是低电平有效）&lt;/p&gt;
&lt;p&gt;异步控制可靠性差。清零信号随着计数器被置零立即消失，持续时间极短，易导致触发器的误动 作，该电路不可靠。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;置数法（置位法）: 适用于有预置数功能的计数器。&lt;/p&gt;
&lt;p&gt;通过给计数器重复置入某数值的方法跳越N-M个状态，从而获得M进制计数器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步式预置数的计数器（74160，74161）： 预置数信号从Si状态译出，待下一个CP信号到来， 才将所需数据置入。&lt;/li&gt;
&lt;li&gt;异步式预置数的计数器（74191）： 预置数信号从Si+1状态译出，只要预置数信号有效，立即将所需数据置入，不受CP信号控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;M &amp;gt; N:视情况需用多片N进制计数器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;适合于M=N1 X N2的情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;串行进位方式：低位片的进位输出信号作为高位片的时钟输入&lt;/li&gt;
&lt;li&gt;并行进位方式 ：低位片的进位输出信号作为高位片的工作状态控制信号（使能），两片的时钟输入端同时接输入信号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;适合于所有情况&lt;/p&gt;
&lt;p&gt;将2片N进制计数器通过级联构成NxN进制计数 器，并且假定M&amp;lt;NxN&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整体清零方式&lt;/li&gt;
&lt;li&gt;整体置数方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="顺序脉冲发生器"&gt;顺序脉冲发生器
&lt;/h2&gt;&lt;p&gt;在计算机和控制系统中，常常要求系统的某些操作按时间顺序分时工作，因此需要产生一个节拍控制脉冲，以协调各部分的工作。 能产生节拍脉冲的电路叫做节拍脉冲发生器，又称顺序脉冲发生器(脉冲分配器)&lt;/p&gt;
&lt;h4 id="分类-2"&gt;分类
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;计数器型&lt;/p&gt;
&lt;p&gt;该电路由计数器和译码器构成。 n个触发器构成的计数器有2 n个状态。在时钟脉冲 作用下，计数器不断改变状态，经译码后在2 n个输出端上每一时刻只有相应的一条输出线上出现高电 平(或低电平)，其他输出线上均出现低电平(或高电平)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：触发器翻转时刻不可能完全一致，可能存在干扰脉冲&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移位寄存器型&lt;/p&gt;
&lt;p&gt;采用环形计数器和扭环形计数器构成顺序脉冲发生器。可以避免在译码过程中出现干扰脉冲。&lt;/p&gt;
&lt;p&gt;环形计数器的每个触发 器的Q端输出就是节拍脉冲。 不需要另加译码器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="序列脉冲发生器"&gt;序列脉冲发生器
&lt;/h2&gt;&lt;p&gt;在数字信号的传输和数字系统的测试中，有时需要用到一组特定的串行数字信号，通常把这种串行数字信号叫做序列信号。 产生序列信号的电路称为序列信号/脉冲发生器&lt;/p&gt;
&lt;h4 id="构造方法"&gt;构造方法
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用计数器和数据选择器组成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用计数器加输出电路&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="时序逻辑电路设计"&gt;时序逻辑电路设计
&lt;/h2&gt;&lt;p&gt;时序电路设计是时序逻辑电路分析的逆过程。&lt;/p&gt;
&lt;p&gt;根据给出的逻辑问题（命题要求）， 设计出能实现逻辑要求的时序电路，画出逻辑图。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;经典设计方法，采用尽可能少的小规模器件 （触发器和门电路）；&lt;/li&gt;
&lt;li&gt;采用标准中规模、大规模集成器件进行逻辑 设计；&lt;/li&gt;
&lt;li&gt;采用可编程逻辑器件进行设计&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="同步时序逻辑电路"&gt;同步时序逻辑电路
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/82gPMLM/image-20220413104025073.png"
loading="lazy"
alt="image-20220413104025073"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;逻辑抽象&lt;/p&gt;
&lt;p&gt;确定输入变量、输出变量、及电路的状态数。 定义输入、输出状态及电路状态含义。 画原始状态转换图(表)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;状态化简&lt;/p&gt;
&lt;p&gt;合并等价状态,进行状态化简，求出最简状态转换图(表)。&lt;/p&gt;
&lt;p&gt;等价状态： 若两个状态在输入相同时输出相同,次态也相同, 称其为等价状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;状态分配&lt;/p&gt;
&lt;p&gt;确定触发器数目n，2^n-1&amp;lt;M&amp;lt;=2^n，进行状态编码(状态分配)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选定触发器类型&lt;/p&gt;
&lt;p&gt;确定触发器类型，求出： 状态方程 输出方程 驱动方程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;判断能否自启动&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>【数据库】笔记</title><link>https://dyhes.github.io/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="发展过程"&gt;发展过程
&lt;/h2&gt;&lt;h3 id="人工管理"&gt;人工管理
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/tKnZ5sV/image-20220304211030252.png"
loading="lazy"
alt="image-20220304211030252"
&gt;&lt;/p&gt;
&lt;h3 id="文件系统"&gt;文件系统
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数据只能是定长的&lt;/li&gt;
&lt;li&gt;文件间是独立的&lt;/li&gt;
&lt;li&gt;数据整体无结构&lt;/li&gt;
&lt;li&gt;最小存取单位是&lt;strong&gt;记录&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/M6JYnp4/image-20220304211047171.png"
loading="lazy"
alt="image-20220304211047171"
&gt;&lt;/p&gt;
&lt;h3 id="数据库系统"&gt;数据库系统
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数据结构化&lt;/li&gt;
&lt;li&gt;数据的共享性高，冗余度低，易扩充&lt;/li&gt;
&lt;li&gt;数据独立性高&lt;/li&gt;
&lt;li&gt;数据由DBMS统一管理和控制&lt;/li&gt;
&lt;li&gt;最小存取单位是&lt;strong&gt;数据项&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/w7WcNc7/image-20220304211606042.png"
loading="lazy"
alt="image-20220304211606042"
&gt;&lt;/p&gt;
&lt;p&gt;DBMS提供的数据控制功能具有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安全性（Security）&lt;/li&gt;
&lt;li&gt;完整性（Integrity)&lt;/li&gt;
&lt;li&gt;并发（Concurrency)&lt;/li&gt;
&lt;li&gt;恢复（Recovery）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="概念"&gt;概念
&lt;/h2&gt;&lt;h3 id="数据库db"&gt;数据库（DB）
&lt;/h3&gt;&lt;p&gt;存放数据的仓库，长期存储在计算机内，有组织的&lt;strong&gt;数据集合&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="数据库管理系统dbms"&gt;数据库管理系统（DBMS）
&lt;/h3&gt;&lt;p&gt;用户与操作系统之间的数据管理软件，负责对数据库的&lt;strong&gt;管理和维护&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="数据库系统dbs"&gt;数据库系统（DBS）
&lt;/h3&gt;&lt;p&gt;在计算机系统中引入数据库后的系统，一般由数据库、数据库管理系统（及其开发工具）、&lt;strong&gt;应用系统 、数据库管理员&lt;/strong&gt;构成。&lt;/p&gt;
&lt;h3 id="数据库管理员dba"&gt;数据库管理员（DBA）
&lt;/h3&gt;&lt;p&gt;进行数据库建立，使用和维护的专门人员&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/S33P4xF/image-20220304212217450.png"
loading="lazy"
alt="image-20220304212217450"
&gt;&lt;/p&gt;
&lt;h2 id="数据模型"&gt;数据模型
&lt;/h2&gt;&lt;p&gt;对现实世界的&lt;strong&gt;模拟&lt;/strong&gt;，表示现实世界中的各种&lt;strong&gt;事物&lt;/strong&gt;及其&lt;strong&gt;联系&lt;/strong&gt;的方法&lt;/p&gt;
&lt;h3 id="组成"&gt;组成
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数据结构&lt;/li&gt;
&lt;li&gt;数据操作&lt;/li&gt;
&lt;li&gt;数据完整性约束：对数据静态和动态特性的限定，定义相容数据库状态的集合及可允许的状态改变&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="概念模型信息模型"&gt;概念模型（信息模型）
&lt;/h3&gt;&lt;p&gt;独立于计算机之外，不涉及信息在计算机中的表示&lt;/p&gt;
&lt;p&gt;e. g. 实体-联系模型，语义数据模型&lt;/p&gt;
&lt;h3 id="数据模型-1"&gt;数据模型
&lt;/h3&gt;&lt;p&gt;面向计算机&lt;/p&gt;
&lt;p&gt;e. g. 层次模型，网状模型，关系模型&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/18fCctr/image-20220304212630193.png"
loading="lazy"
alt="image-20220304212630193"
&gt;&lt;/p&gt;
&lt;h2 id="三级模式结构"&gt;三级模式结构
&lt;/h2&gt;&lt;h3 id="外模式external-schema"&gt;外模式（External Schema）
&lt;/h3&gt;&lt;p&gt;亦称子模式（Subschema），对数据库用户的&lt;strong&gt;数据视图&lt;/strong&gt;，体现用户的数据观点，是对用户数据结构的逻辑描述&lt;/p&gt;
&lt;h3 id="模式schema"&gt;模式（Schema）
&lt;/h3&gt;&lt;p&gt;亦称概念模式或逻辑模式，数据库的总框架，对全体数据逻辑结构和特性的描述，独立于&lt;strong&gt;应用程序&lt;/strong&gt;和&lt;strong&gt;物理存储&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="内模式internal-schema"&gt;内模式（Internal Schema）
&lt;/h3&gt;&lt;p&gt;亦称存储模式，对数据库&lt;strong&gt;存储结构和存取方法&lt;/strong&gt;的描述，规定数据在存储介质上的物理组织方式，记录寻址方式，定义物理存储块大小，溢出处理方法。&lt;/p&gt;
&lt;h3 id="数据抽象"&gt;数据抽象
&lt;/h3&gt;&lt;p&gt;三级模式结构提供了视图级，概念级和物理级的数据抽象&lt;/p&gt;
&lt;h3 id="二级映像"&gt;二级映像
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/bmfDYxh/image-20220304214603741.png"
loading="lazy"
alt="image-20220304214603741"
&gt;&lt;/p&gt;
&lt;h2 id="数据库技术发展"&gt;数据库技术发展
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;第一代层次、网状数据库系统&lt;/li&gt;
&lt;li&gt;第二代关系数据库系统&lt;/li&gt;
&lt;li&gt;新一代数据库系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="e-r数据模型entity-relationship"&gt;E-R数据模型（Entity-Relationship）
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;实体（集）【方框】：现实世界中存在的（具有同类特性的）个体（的集合）&lt;/li&gt;
&lt;li&gt;属性【椭圆】：实体具有的特性或特质&lt;/li&gt;
&lt;li&gt;联系【菱形】： 一对一，一对多，多对多&lt;/li&gt;
&lt;li&gt;实体的参与度：参与联系的最小和最大次数&lt;/li&gt;
&lt;li&gt;弱实体【双框双线】：依赖于其他实体存在的实体&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="eer模型extended-e-r"&gt;EER模型（extended E-R）
&lt;/h3&gt;&lt;p&gt;增加了子类和超类的概念,使E-R数据模型具有更多的语义&lt;/p&gt;
&lt;p&gt;下层实体用两竖边为双线的矩形框表示，上层实体和下层实体之间用加小圈 的直线连接起来，下层实体称为上层实体的子 类，上层实体称为超类。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/rkz38K3/image-20220304225109954.png"
loading="lazy"
alt="image-20220304225109954"
&gt;&lt;/p&gt;
&lt;h2 id="层次数据模型"&gt;层次数据模型
&lt;/h2&gt;&lt;p&gt;也叫树形结构，树中的每个节点代表一种记录类型，其应满足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有且仅有一个结点无双亲，这个结点称为根结点&lt;/li&gt;
&lt;li&gt;其他结点有且仅有一个双亲结点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;层次模型中的基本数据结构是记录和由记 录组成的层次结构&lt;/p&gt;
&lt;h2 id="网状数据模型"&gt;网状数据模型
&lt;/h2&gt;&lt;p&gt;允许&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个结点可以有多个双亲结点&lt;/li&gt;
&lt;li&gt;多个结点可以无双亲结点&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="关系模型"&gt;关系模型
&lt;/h2&gt;&lt;h3 id="关系模式relation-schema"&gt;关系模式(relation schema)
&lt;/h3&gt;&lt;p&gt;对关系结构的描述，可用&lt;/p&gt;
&lt;p&gt;关系名（属性名1，属性名2,&amp;hellip;,属性名n）&lt;/p&gt;
&lt;h3 id="关系-relation"&gt;关系 (relation)
&lt;/h3&gt;&lt;p&gt;一张二维表，可用于描述一个实体集&lt;/p&gt;
&lt;h3 id="属性-attribute"&gt;属性 (attribute)
&lt;/h3&gt;&lt;p&gt;每一列为关系的一个属性&lt;/p&gt;
&lt;h3 id="域-domain"&gt;域 (domain)
&lt;/h3&gt;&lt;p&gt;属性的取值范围&lt;/p&gt;
&lt;h3 id="元组-tuple"&gt;元组 (tuple)
&lt;/h3&gt;&lt;p&gt;一个元组对应实体集中的一个个体&lt;/p&gt;
&lt;h3 id="键-key"&gt;键 (key)
&lt;/h3&gt;&lt;p&gt;一个或多个属性组成，能唯一标识一个元组&lt;/p&gt;
&lt;p&gt;一个关系可能有多个键，选取一个作为主键，其余作为候选键&lt;/p&gt;
&lt;h2 id="关系"&gt;关系
&lt;/h2&gt;&lt;p&gt;D1 X D2 X D3 &amp;hellip; X Dn 的子集称为在域D1, D2, &amp;hellip; , Dn上的关系，表示为 R（D1, D2, &amp;hellip; , Dn）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关系是笛卡尔积的&lt;strong&gt;有限&lt;/strong&gt;子集&lt;/li&gt;
&lt;li&gt;关系满足交换律而笛卡尔积不满足，因此为关系的每个列附加一个属性名以取消有序性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="三类关系"&gt;三类关系
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基本关系（基本表/基表）：实际存在的表，是实际存储数据的逻辑表示&lt;/li&gt;
&lt;li&gt;查询表 ：查询结果对应的表&lt;/li&gt;
&lt;li&gt;视图表 : 由基本表或其他视图表导出的虚表&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="基本关系性质"&gt;基本关系性质
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;列是同质的&lt;/li&gt;
&lt;li&gt;不同列可出自同一个域&lt;/li&gt;
&lt;li&gt;分量应为不可分的数据项&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="关系模式relation-schema-1"&gt;关系模式(Relation Schema)
&lt;/h2&gt;&lt;p&gt;关系模式**（型）&lt;strong&gt;：对关系&lt;/strong&gt;（值）**的描述，静态且稳定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;元组集合的结构&lt;/p&gt;
&lt;p&gt;​ 属性构成&lt;/p&gt;
&lt;p&gt;​ 属性来自的域&lt;/p&gt;
&lt;p&gt;​ 属性与域之间的映象关系&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;元组语义以及完整性约束条件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;属性间的数据依赖关系集合&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="关系-1"&gt;关系
&lt;/h3&gt;&lt;p&gt;关系模式在某一时刻的状态或内容&lt;/p&gt;
&lt;p&gt;动态、随时间变化&lt;/p&gt;
&lt;p&gt;二者往往统称为关系，关系模式为关系的内涵，关系的值为关系的外延&lt;/p&gt;
&lt;p&gt;模式中属性到对应域映射的有限集，通常写为&lt;strong&gt;r(R)&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="关系模式的形式化表示"&gt;关系模式的形式化表示
&lt;/h3&gt;&lt;p&gt;R(U, D, dom, F)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R: 关系名&lt;/li&gt;
&lt;li&gt;U: 组成该关系的属性名集合&lt;/li&gt;
&lt;li&gt;D: 属性组U中属性来自的域&lt;/li&gt;
&lt;li&gt;dom: 属性向域的映象集合&lt;/li&gt;
&lt;li&gt;F: 属性间的数据依赖关系集合&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简记为 R(U) 或 R(A1, A2, ……, An )&lt;/p&gt;
&lt;h3 id="关系数据库模式"&gt;关系数据库模式
&lt;/h3&gt;&lt;p&gt;关系模式的&lt;strong&gt;集合&lt;/strong&gt;，是对数据库中所有数据逻辑结构的描述，表示为&lt;strong&gt;R={R1, R2,……, Rp}&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="关系数据库"&gt;关系数据库
&lt;/h3&gt;&lt;p&gt;关系数据库模式中每个关系模式上的关系的集合，表示为&lt;strong&gt;d={r1, r2, &amp;hellip;, rp}&lt;/strong&gt; ，其中ri对应关系模式Ri上的一个关系&lt;/p&gt;
&lt;h2 id="候选键candidate-key"&gt;候选键（Candidate Key）
&lt;/h2&gt;&lt;p&gt;能唯一标识一个元组的某一&lt;strong&gt;属性组&lt;/strong&gt;，最简单情况下只包含一个属性，最极端情况下所有属性组为候选键，成为全键（All Key）&lt;/p&gt;
&lt;h3 id="主键primary-key"&gt;主键（Primary Key）
&lt;/h3&gt;&lt;p&gt;多个候选键中选定一个，其余作为隐含键（Implicit Key）或候补键（Alternate Key）&lt;/p&gt;
&lt;h3 id="主属性prime-attribute"&gt;主属性（Prime Attribute）
&lt;/h3&gt;&lt;p&gt;Prime attributes are &lt;strong&gt;the attributes of the candidate key which defines the uniqueness&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;包含在任何一个候选键中的属性&lt;/p&gt;
&lt;h2 id="完整性约束"&gt;完整性约束
&lt;/h2&gt;&lt;p&gt;对关系的某种约束条件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实体完整性（&lt;em&gt;Entity Integrity Constraint&lt;/em&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主属性不能取空值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参照完整性（&lt;em&gt;Referential Integrity Constraint&lt;/em&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对作为外键（Foreign Key）的值的约束&lt;/p&gt;
&lt;p&gt;R的外键为其他基本关系S的主键：&lt;/p&gt;
&lt;p&gt;称R为参照关系（Referencing Relation）&lt;/p&gt;
&lt;p&gt;称S为被参照关系（Referenced Relation）或目标关系 （Target Relation）&lt;/p&gt;
&lt;p&gt;外键为空或等于S中的某个主键值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户定义的完整性（&lt;em&gt;User-defined integrity&lt;/em&gt;）：保证一个数据的取值合理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="关系代数"&gt;关系代数
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一种抽象的&lt;strong&gt;查询语言&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;用&lt;strong&gt;对关系的运算&lt;/strong&gt;来表达查询&lt;/li&gt;
&lt;li&gt;关系数据操纵语言的一种传统表达方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="表示记号"&gt;表示记号
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/cwTV5VC/image-20220321234203719.png"
loading="lazy"
alt="image-20220321234203719"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/JqGLWy0/image-20220321234215859.png"
loading="lazy"
alt="image-20220321234215859"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/DYPSdkJ/image-20220321234228253.png"
loading="lazy"
alt="image-20220321234228253"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/jZs6R5j/image-20220321234855404.png"
loading="lazy"
alt="image-20220321234855404"
&gt;&lt;/p&gt;
&lt;h3 id="运算符"&gt;运算符
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;集合运算符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并&lt;/li&gt;
&lt;li&gt;差&lt;/li&gt;
&lt;li&gt;交&lt;/li&gt;
&lt;li&gt;笛卡尔积&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关系运算符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择（Selection）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;又称为限制（Restriction），从行的角度进行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;投影（Projection）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从R中选择出若干属性列组成新的关系,从列的角度进行运算（但可能为了避免重复取消某些元组）&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/18Ncyfj/image-20220321235138739.png"
loading="lazy"
alt="image-20220321235138739"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连接（Join）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从两个关系的&lt;strong&gt;笛卡尔积&lt;/strong&gt;中选取属性间满足一定条件的元组&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/pnCbBNP/image-20220321235356615.png"
loading="lazy"
alt="image-20220321235356615"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;等值连接(equijoin):比较关系为等号&lt;/li&gt;
&lt;li&gt;自然连接(Natural join)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/JxzsnXQ/image-20220321235545346.png"
loading="lazy"
alt="image-20220321235545346"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;除法（Division）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/myhVFxM/image-20220321235719790.png"
loading="lazy"
alt="image-20220321235719790"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时从行和列的角度进行运算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;扩充的关系运算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属性重命名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/Lp9LdMf/image-20220322000207770.png"
loading="lazy"
alt="image-20220322000207770"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/p3n4sW4/image-20220322000219571.png"
loading="lazy"
alt="image-20220322000219571"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外连接(Outer Join)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对自然连接的扩展。除了满足连接的元组外还包含没有被连接的元组&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;左外连接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;左外连接的连接结果中包含了关系R （左边关系）中不满足连接条件的元组，在这些元组对 应关系S属性上的值为空值&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/WgKXV1T/image-20220322000732778.png"
loading="lazy"
alt="image-20220322000732778"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;右外连接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;左外连接的连接结果中包含了关系S（右边关系）中不满足连接条件的元组，在这些元组对 应关系S属性上的值为空值&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/JtLPRNq/image-20220322000826120.png"
loading="lazy"
alt="image-20220322000826120"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全外连接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;完全外连接的连接结果中包含了关系R中不满 足连接条件的元组，同时也包含了关系S中不 满足连接条件的元组。即连接结果是左外连接 和右外连接结果的并&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/pjN5M7r/image-20220322000801966.png"
loading="lazy"
alt="image-20220322000801966"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算术比较符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逻辑运算符&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="关系代数表达式"&gt;关系代数表达式
&lt;/h3&gt;&lt;p&gt;关系代数运算经过有限次复合后形成的式子&lt;/p&gt;
&lt;h3 id="典型关系代数语言"&gt;典型关系代数语言
&lt;/h3&gt;&lt;p&gt;ISBL（Infotmation System Base Language）&lt;/p&gt;
&lt;h2 id="关系演算"&gt;关系演算
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;元组关系演算&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以&lt;strong&gt;元组变量&lt;/strong&gt;作为谓词变元的基本对象&lt;/p&gt;
&lt;p&gt;典型代表：&lt;strong&gt;ALPHA&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;域关系演算&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以&lt;strong&gt;域变量&lt;/strong&gt;作为谓词变元的基本对象&lt;/p&gt;
&lt;p&gt;典型代表：&lt;strong&gt;QBE&lt;/strong&gt;(Query By Example)&lt;/p&gt;
&lt;h3 id="alpha"&gt;ALPHA
&lt;/h3&gt;&lt;h4 id="检索语句-get"&gt;检索语句： GET
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/4td96bZ/image-20220322001459980.png"
loading="lazy"
alt="image-20220322001459980"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单检索&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/Vt5q3nV/image-20220322001638021.png"
loading="lazy"
alt="image-20220322001638021"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;限定检索&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/TqgMkZF/image-20220322001652646.png"
loading="lazy"
alt="image-20220322001652646"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;排序检索&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/6D5Mtkc/image-20220322001734654.png"
loading="lazy"
alt="image-20220322001734654"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定额检索&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/415gz9g/image-20220322001759852.png"
loading="lazy"
alt="image-20220322001759852"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;元组变量检索&lt;/p&gt;
&lt;p&gt;元组变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;含义：表示可以在某一关系范围内变化（也称为范围 变量Range Variable）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用途：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简化关系名&lt;/li&gt;
&lt;li&gt;操作条件中使用量词时必须用元组变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义格式：RANGE 关系名 变量名&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/PtyYgNG/image-20220322002108186.png"
loading="lazy"
alt="image-20220322002108186"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存在量词检索&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/qp3Cgjf/image-20220322002133485.png"
loading="lazy"
alt="image-20220322002133485"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/3TPTt1k/image-20220322002201442.png"
loading="lazy"
alt="image-20220322002201442"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全称量词检索&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/kcJm2Gn/image-20220322002257406.png"
loading="lazy"
alt="image-20220322002257406"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;蕴函（Implication）检索&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/FwfZS2H/image-20220322002343352.png"
loading="lazy"
alt="image-20220322002343352"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;集函数（Aggregation function）或内部函数（Build-in function）&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/54F7G83/image-20220322002502544.png"
loading="lazy"
alt="image-20220322002502544"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="更新语句putholdupdatedeletedrop"&gt;更新语句：PUT,HOLD,UPDATE,DELETE,DROP
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;插入：-建立新元组-PUT&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/XCWzDkQ/image-20220322094927425.png"
loading="lazy"
alt="image-20220322094927425"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改：-HOLD-修改-UPDATE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/1zFGTQq/image-20220322094704212.png"
loading="lazy"
alt="image-20220322094704212"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;宿主语言&lt;/strong&gt;：开发软件赖以生存的软件环境的程序语言&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除：-HOLD-DELETE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/C5pcjDf/image-20220322095010204.png"
loading="lazy"
alt="image-20220322095010204"
&gt;&lt;/p&gt;
&lt;h2 id="存储异常"&gt;存储异常
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数据冗余&lt;/li&gt;
&lt;li&gt;更新异常&lt;/li&gt;
&lt;li&gt;插入异常&lt;/li&gt;
&lt;li&gt;删除异常&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;原因：数据库模式没有反映数据间的依赖关系&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="规范化"&gt;规范化
&lt;/h2&gt;&lt;p&gt;规范化理论用于&lt;strong&gt;改造&lt;/strong&gt;关系模式，通过&lt;strong&gt;分解关系模式&lt;/strong&gt;来消除不合适的数据依赖，以解决存储异常问题。&lt;/p&gt;
&lt;h4 id="函数依赖"&gt;函数依赖
&lt;/h4&gt;&lt;h6 id="定义"&gt;定义
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设R（U）是一个属性集U上的关系模式，X 和Y是U的子集。若对于R（U）的任意一个 可能的关系r，r中不可能存在两个元组在X 上的属性值相等， 而在Y上的属性值不等 ， 则称 “X函数确定Y” 或 “Y函数依赖于 X”，记作X→Y。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若X→Y，则X称为这个函数依赖的&lt;strong&gt;决定属性集&lt;/strong&gt;（ Determinant）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若X→Y，并且Y→X, 则记为X ←→Y。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="平凡与非平凡函数依赖"&gt;平凡与非平凡函数依赖
&lt;/h6&gt;&lt;p&gt;在关系模式R（U）中，对于U的子集X和Y ，若X→Y&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;且Y不属于X，则称X→Y是&lt;strong&gt;非平凡&lt;/strong&gt;的函数依赖；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;但Y属于X, 则称 X→Y是&lt;strong&gt;平凡&lt;/strong&gt;的函数依赖。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="完全与部分函数依赖"&gt;完全与部分函数依赖
&lt;/h6&gt;&lt;p&gt;在关系模式R（U）中，如果X→Y，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;并且对于X的&lt;strong&gt;任何一个真子集&lt;/strong&gt;X’，都有X&amp;rsquo;-/&amp;gt;Y, 则称 Y完全函数依赖于X。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;但Y不完全函数依赖于X，则称Y部分函数依赖于X&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="传递与直接函数依赖"&gt;传递与直接函数依赖
&lt;/h6&gt;&lt;p&gt;在关系模式R（U）中，如果X→Y，Y→Z ，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;且Y不属于X，Y-/&amp;gt;X，则称Z传递函数依赖于 X&lt;/li&gt;
&lt;li&gt;且X ←→Y，则Z&lt;strong&gt;直接依赖&lt;/strong&gt;于X&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="键"&gt;键
&lt;/h6&gt;&lt;p&gt;设K为关系模式R中的属性或属性组合。若K→U（f），则K称为R的一个侯选键 （Candidate Key）。若关系模式R有多个 候选键，则选定其中的一个做为主键（ Primary Key）。&lt;/p&gt;
&lt;h4 id="范式"&gt;范式
&lt;/h4&gt;&lt;p&gt;范式是&lt;strong&gt;符合某一种级别要求&lt;/strong&gt;的&lt;strong&gt;关系模式的集合&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/5M932Zp/image-20220411102431155.png"
loading="lazy"
alt="image-20220411102431155"
&gt;&lt;/p&gt;
&lt;h6 id="第一范式nf"&gt;第一范式（NF）
&lt;/h6&gt;&lt;p&gt;一个关系模式R的所有属性都是&lt;strong&gt;不可分&lt;/strong&gt;的基本数据项&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第一范式实际上是对关系增加了一个约束 ，即关系中元组的&lt;strong&gt;每个属性都只能取一个值&lt;/strong&gt;。第一范式是对关系模式的基本要求， 不满足第一范式的数据库就不是关系数据库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id="第二范式2nf"&gt;第二范式（2NF）
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;1NF&lt;/li&gt;
&lt;li&gt;每一个非主属性都&lt;strong&gt;完全函数依赖&lt;/strong&gt;于R的键&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="第三范式3nf"&gt;第三范式（3NF）
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;不存在键X、属性组Y及非主属性Z（Z 不属于Y）, 使得X→Y，Y -/&amp;gt; X，Y→Z成立 ( 关系中每一个非主属性必须只依赖于主键)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在第二范式的基础上，消除非主属性对主键的&lt;strong&gt;传递函数依赖&lt;/strong&gt;可达到3NF。&lt;/p&gt;
&lt;p&gt;若R∈3NF，则R的每一个非主属性既不部 分函数依赖于候选键也不传递函数依赖于 候选键。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id="bc范式bcnfboyce-codd-normal-form"&gt;BC范式（BCNF）Boyce Codd Normal Form
&lt;/h6&gt;&lt;p&gt;通常认为BCNF是修正的第三范式，所以有时也称为扩充的第三范式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1NF&lt;/li&gt;
&lt;li&gt;若X→Y且Y不属于X时X必含有键 （每一个决定属性因素都包含键）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;若R∈BCNF，&lt;/p&gt;
&lt;p&gt;– 所有非主属性对每一个键都是完全函数依赖&lt;/p&gt;
&lt;p&gt;– 所有的主属性对每一个不包含它的键，也是完全函数依赖&lt;/p&gt;
&lt;p&gt;– 没有任何属性完全函数依赖于非键的任何一组属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id="多值依赖"&gt;多值依赖
&lt;/h6&gt;&lt;p&gt;####### 定义&lt;/p&gt;
&lt;p&gt;设R（U）是一个属性集U上的一个关系模式， X、 Y和Z是U的子集，并且Z＝U－X －Y，多值依赖 X→→Y成立当且仅当对R的任一关系r，r在（X，Z）上的每个值对应一组Y的值，这组值&lt;strong&gt;仅仅决定于X值&lt;/strong&gt;而与Z值无关&lt;/p&gt;
&lt;p&gt;若X→→Y，而Z＝φ，则称 X→→Y为平凡的多值依赖，否则称X→→Y为非平凡的多值依赖&lt;/p&gt;
&lt;p&gt;####### 性质&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多值依赖具有&lt;strong&gt;对称性&lt;/strong&gt;，若X→→Y，则X→→Z，其中Z＝U－X - Y&lt;/li&gt;
&lt;li&gt;多值依赖具有&lt;strong&gt;传递性&lt;/strong&gt;，若X→→Y，Y→→Z， 则X→→Z –Y&lt;/li&gt;
&lt;li&gt;函数依赖是多值依赖的特殊情况，若X→Y，则X→→Y&lt;/li&gt;
&lt;li&gt;若X→→Y，X→→Z，则
&lt;ul&gt;
&lt;li&gt;X→→Y并Z&lt;/li&gt;
&lt;li&gt;X→→Y交Z&lt;/li&gt;
&lt;li&gt;X→→Y-Z&lt;/li&gt;
&lt;li&gt;X→→Y-Z&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="第四范式4nf"&gt;第四范式（4NF）
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;1NF&lt;/li&gt;
&lt;li&gt;对于R的每个非平凡多值依赖X→→Y（Y不属于X），X都含有候选键&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如果R ∈ 4NF&lt;/p&gt;
&lt;p&gt;–不允许有非平凡且非函数依赖的多值依赖&lt;/p&gt;
&lt;p&gt;–允许的非平凡多值依赖是函数依赖&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id="连接依赖"&gt;连接依赖
&lt;/h6&gt;&lt;p&gt;设R是一个关系模式，R的属性子集为R1， R2，R3，R4，R5，…，当且仅当R的每个合法值都等于R1，R2，R3，R4，R5，…， 的投影连接时，称R满足连接依赖&lt;/p&gt;
&lt;h6 id="第五范式5nf"&gt;第五范式（5NF）
&lt;/h6&gt;&lt;p&gt;R的每一个非平凡连接依赖都被R的候选键所蕴含（4NF中消除非候选键所蕴含的连接依赖)&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/4WDxTDB/image-20220411110316591.png"
loading="lazy"
alt="image-20220411110316591"
&gt;&lt;/p&gt;
&lt;h2 id="armstrong公理系统"&gt;Armstrong公理系统
&lt;/h2&gt;&lt;h4 id="逻辑蕴含"&gt;逻辑蕴含
&lt;/h4&gt;&lt;p&gt;对于满足一组函数依赖 F 的关系模式R ，其任何一个关系r，若函数依赖X→Y都成立, （即r中任意两元组t，s，若t[X]=s[X]，则 t[Y]=s[Y]），则称F逻辑蕴含X →Y&lt;/p&gt;
&lt;h4 id="推理规则"&gt;推理规则
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;A1. 自反律（Reflexivity）：若Y 属于X 属于 U， 则X →Y为F所蕴含&lt;/li&gt;
&lt;li&gt;A2. 增广律（Augmentation）：若X→Y为F所蕴含，且Z属于U，则XZ→YZ为F所蕴含&lt;/li&gt;
&lt;li&gt;A3. 传递律（Transitivity）：若X→Y及Y→Z 为F所蕴含，则X→Z为F所蕴含&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进而：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;合并规则：由X→Y，X→Z，有X→YZ&lt;/li&gt;
&lt;li&gt;伪传递规则：由X→Y，WY→Z，有XW→Z&lt;/li&gt;
&lt;li&gt;分解规则：由X→Y及Z属于Y，有X→Z&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据合并规则和分解规则，可得如下引理 X→A1 A2 …Ak成立⇔X→Ai成立（i=1，2， … ，k）&lt;/p&gt;
&lt;h4 id="有效与完备"&gt;有效与完备
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有效性：指由F出发根据Armstrong公理推导出来的每个函数依赖一定在F所蕴含的函数依赖的全体之中。有效性可由正确性证明&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完备性：F所蕴含的函数依赖的全体中的每一个函数依赖， 必定可以由F根据Armstrong公理导出&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="闭包"&gt;闭包
&lt;/h4&gt;&lt;p&gt;在R中，X ⊆U，X_F^+= {A | X→A能由F根据 Armstrong公理导出}，称X_F^+为属性集X关于函数依赖集F的闭包。&lt;/p&gt;
&lt;h6 id="计算方法"&gt;计算方法
&lt;/h6&gt;&lt;p&gt;计算X（i）（i=0，1，…）&lt;/p&gt;
&lt;p&gt;（1）X（0）=X&lt;/p&gt;
&lt;p&gt;（2）X（i+1）=X（i）A 其中A是这样的属性：在F中寻找尚未用过的左边是 X（i）的子集的FD：Y→A，其中Y是X（i）的子集。&lt;/p&gt;
&lt;p&gt;（3）判断X（i+1）=X（i），若是转（4），否则转（2 ）&lt;/p&gt;
&lt;p&gt;（4） 输出X（i），即为X+&lt;/p&gt;
&lt;h2 id="等价与覆盖"&gt;等价与覆盖
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;等价：F，G为FD集，F+=G+&lt;/li&gt;
&lt;li&gt;覆盖：F，G为FD集，G属于F，称F覆盖G&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="最小依赖集"&gt;最小依赖集
&lt;/h2&gt;&lt;p&gt;满足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;右部单属性化&lt;/strong&gt;：F中任一函数依赖X→ A，A必是单属性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不存在多余FD&lt;/strong&gt;：F中不存在X→ A，使得F与F-｛X→ A｝等价&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每个FD左部没有多余属性&lt;/strong&gt;：F中不存在X→ A，使得X存在真子集Z，使得F与F-｛X→ A｝并｛Z→ A｝（先减后并）等价&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="模式分解"&gt;模式分解
&lt;/h2&gt;&lt;p&gt;三种模式分解等价的定义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分解具有无损连接性（一定能达到4NF）&lt;/li&gt;
&lt;li&gt;分解保持函数依赖（一定能达到3NF）&lt;/li&gt;
&lt;li&gt;既保持函数依赖又具有无损连接性（一定能达到3NF）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="关键字求解"&gt;关键字求解
&lt;/h2&gt;&lt;p&gt;给定关系模式S和FD集F，按F中函数依赖将S中属性分为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L类：仅在FD左部出现&lt;/li&gt;
&lt;li&gt;R类：仅在FD右部出现&lt;/li&gt;
&lt;li&gt;LR类：左右均出现&lt;/li&gt;
&lt;li&gt;N类：左右均未出现&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="引理"&gt;引理
&lt;/h4&gt;&lt;p&gt;X为&lt;strong&gt;L类或N类&lt;/strong&gt;属性，则必为&lt;strong&gt;主属性&lt;/strong&gt;（包含在候选键中）&lt;/p&gt;
&lt;p&gt;推论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X为S中&lt;strong&gt;N类和L类组成的属性集&lt;/strong&gt;且X+包含S中&lt;strong&gt;全部&lt;/strong&gt;属性，X必为S的&lt;strong&gt;唯一&lt;/strong&gt;候选键&lt;/li&gt;
&lt;li&gt;X为S中的&lt;strong&gt;R类属性&lt;/strong&gt;，即X为S的非主属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="设计步骤"&gt;设计步骤
&lt;/h2&gt;&lt;p&gt;需求分析和概念设计独立于任何数据库管理系统&lt;/p&gt;
&lt;p&gt;逻辑设计和物理设计与选用的DBMS密切相关&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/t3P8pwy/image-20220420154849775.png"
loading="lazy"
alt="image-20220420154849775"
&gt;&lt;/p&gt;
&lt;h4 id="需求分析"&gt;需求分析
&lt;/h4&gt;&lt;h6 id="任务"&gt;任务
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;明确用户的各种需求&lt;/li&gt;
&lt;li&gt;确定新系统的功能&lt;/li&gt;
&lt;li&gt;充分考虑今后可能的扩充和改变&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结构化分析方法（Structured Analysis）&lt;/p&gt;
&lt;p&gt;从最上层的系统组织机构入手，自顶向下、逐层分解分析系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;系统抽象为&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/942558V/image-20220420160131348.png"
loading="lazy"
alt="image-20220420160131348"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分解处理功能和数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分解处理功能&lt;/p&gt;
&lt;p&gt;将处理功能的具体内容分解为若干子功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分解数据&lt;/p&gt;
&lt;p&gt;处理功能逐步分解的同时，逐级分解所用的数据，形成若干层次的&lt;strong&gt;数据流图&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表达方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;处理逻辑：判定表或判定树&lt;/li&gt;
&lt;li&gt;数据：数据字典&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;征取用户认可&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="数据字典"&gt;数据字典
&lt;/h6&gt;&lt;p&gt;####### 用途&lt;/p&gt;
&lt;p&gt;进行详细的数据收集和数据分析所获得的主要结果&lt;/p&gt;
&lt;p&gt;####### 内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据项&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不可再分&lt;/strong&gt;的数据单位&lt;/p&gt;
&lt;p&gt;描述=｛数据项名，数据项含义说明，别名，数据类型，长度，取值范围，取值含义，与其他数据项的逻辑关系，数据项之间的联系｝&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据结构&lt;/p&gt;
&lt;p&gt;反映数据之间的&lt;strong&gt;组合关系&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以由若干个数据项组成，也可以由若干数据结构组成，或若干二者混合&lt;/p&gt;
&lt;p&gt;描述=｛数据结构名，含义说明，组成：｛数据项或数据结构｝｝&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据流&lt;/p&gt;
&lt;p&gt;数据结构在系统内的&lt;strong&gt;传输路径&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;描述=｛数据流名，说明，数据流来源，数据流去向，组成：｛数据结构｝，平均流量，高峰期流量｝&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据存储&lt;/p&gt;
&lt;p&gt;数据结构停留或保存的地方，数据流的来源和去向之一&lt;/p&gt;
&lt;p&gt;描述=｛数据存储名，说明，编号，输入的数据流，输出的数据流，组成：｛数据结构｝，数据量，存取频度，存取方式｝&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理过程&lt;/p&gt;
&lt;p&gt;一般用判定表或判定树来描述&lt;/p&gt;
&lt;p&gt;描述=｛处理过程名，说明，输入：｛数据流｝，输出：｛数据流｝，处理：｛简要说明｝｝&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/ZGTmS8h/image-20220420161610114.png"
loading="lazy"
alt="image-20220420161610114"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/6tCNYGN/image-20220420161645960.png"
loading="lazy"
alt="image-20220420161645960"
&gt;&lt;/p&gt;
&lt;p&gt;数据字典是关于数据库中数据的描述，是&lt;strong&gt;元数据&lt;/strong&gt;，而不是数据本身。&lt;/p&gt;
&lt;p&gt;数据字典在需求分析阶段建立，在数据库设计过程中不断修改、充实、完善。&lt;/p&gt;
&lt;h4 id="概念设计"&gt;概念设计
&lt;/h4&gt;&lt;p&gt;将需求分析得到的用户需求抽象为信息结构即&lt;strong&gt;概念模型&lt;/strong&gt;的过程就是概念结构设计&lt;/p&gt;
&lt;h6 id="工具"&gt;工具
&lt;/h6&gt;&lt;p&gt;E-R模型&lt;/p&gt;
&lt;h6 id="设计方法"&gt;设计方法
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;自顶向下：首先定义全局概念结构的框架，然后逐步细化&lt;/li&gt;
&lt;li&gt;自底向上：首先定义各局部应用的概念结构，然后将其集成起来&lt;/li&gt;
&lt;li&gt;逐步扩张：首先核心概念结构，然后向外扩充&lt;/li&gt;
&lt;li&gt;混合策略：自顶向下设计&lt;strong&gt;全局概念框架&lt;/strong&gt;，自底向上设计&lt;strong&gt;各局部概念结构&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="常用策略"&gt;常用策略
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自顶向下进行需求分析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自底向上设计概念结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抽象数据并设计局部视图&lt;/li&gt;
&lt;li&gt;集成局部视图，得到全局概念结构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="数据抽象-1"&gt;数据抽象
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分类（Classification）：&lt;/p&gt;
&lt;p&gt;定义某一类概念作为现实世界中一组对象的类型。&lt;/p&gt;
&lt;p&gt;抽象了对象值与型之间的“&lt;strong&gt;is member of&lt;/strong&gt;”的语义&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/tPQ6LTy/image-20220420162716701.png"
loading="lazy"
alt="image-20220420162716701"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;聚集（Aggregation）：&lt;/p&gt;
&lt;p&gt;定义某一类型的组成成分&lt;/p&gt;
&lt;p&gt;抽象了对象内部类型和成分之间“&lt;strong&gt;is part of&lt;/strong&gt;”的语义&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/P5PsyC9/image-20220420162733911.png"
loading="lazy"
alt="image-20220420162733911"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;概括（Generalization）：&lt;/p&gt;
&lt;p&gt;定义类型只见那的一种子集联系&lt;/p&gt;
&lt;p&gt;抽象了类型之间的“&lt;strong&gt;is subset of&lt;/strong&gt;”的语义&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/C7gm2PQ/image-20220420162746102.png"
loading="lazy"
alt="image-20220420162746102"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="局部视图设计"&gt;局部视图设计
&lt;/h6&gt;&lt;p&gt;在多层的数据流图中选择一个适当层次的数据流图，作为设计分E-R图的出发点&lt;/p&gt;
&lt;p&gt;通常以中层数据流图作为设计分E-R图的依据&lt;/p&gt;
&lt;p&gt;####### 准则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属性不能再具有需要描述的性质，即属性必须是不可分的数据项&lt;/li&gt;
&lt;li&gt;属性不能与其他实体具有联系，联系只发生在实体之间&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="集成"&gt;集成
&lt;/h6&gt;&lt;p&gt;####### 消除冲突&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属性冲突
&lt;ul&gt;
&lt;li&gt;属性域冲突
&lt;ul&gt;
&lt;li&gt;属性值的类型&lt;/li&gt;
&lt;li&gt;取值范围&lt;/li&gt;
&lt;li&gt;取值集合不同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;属性取值单位冲突&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;命名冲突
&lt;ul&gt;
&lt;li&gt;同名异义：不同意义的对象在不同的局部应用中具有相同的名字&lt;/li&gt;
&lt;li&gt;异名同义：同一意义的对象在不同的局部应用中具有不同名字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;结构冲突
&lt;ul&gt;
&lt;li&gt;同一对象在不同应用中具有不同的抽象。&lt;/li&gt;
&lt;li&gt;同一实体在不同分E-R图中所包含的属性个数
和属性排列次序不完全相同。&lt;/li&gt;
&lt;li&gt;实体之间的联系在不同局部视图中呈现不同的
类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;####### 消除冗余&lt;/p&gt;
&lt;p&gt;冗余的数据是指可由基本数据导出的数据&lt;/p&gt;
&lt;p&gt;冗余的联系是指可由其他联系导出的联系&lt;/p&gt;
&lt;p&gt;冗余数据和冗余联系容易破坏数据库的完整性，给数据库维护增加困难&lt;/p&gt;
&lt;p&gt;方法：&lt;/p&gt;
&lt;p&gt;求 F L的最小覆盖 GL ，差集为D = F L-G L。逐一 考察 D中的函数依赖，确定是否是冗余的联系， 若是，就把它去掉&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;冗余的联系一定在D中，而 D中的联系不一定是冗余的&lt;/li&gt;
&lt;li&gt;当实体之间存在多种联系时要将实体之间的联系在形式上加以区分&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id="逻辑设计"&gt;逻辑设计
&lt;/h4&gt;&lt;p&gt;把概念结构设计阶段设计好的基本E-R图转换 为与选用DBMS产品所支持的数据模型相符合 的逻辑结构&lt;/p&gt;
&lt;h6 id="步骤"&gt;步骤
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;将概念结构转化为一般的关系、网状、层次模型&lt;/li&gt;
&lt;li&gt;将转换来的关系、网状、层次模型向特定DBMS支持下的数据模型转换&lt;/li&gt;
&lt;li&gt;对数据模型进行优化&lt;/li&gt;
&lt;li&gt;设计用户子模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="er图转关系模型"&gt;ER图转关系模型
&lt;/h6&gt;&lt;p&gt;将实体、实体的属性和实体之间的联系转换为关系模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个1:1联系可以转换为一个独立的关系模式，也可以与任意一端对应的关系模式合并。&lt;/li&gt;
&lt;li&gt;一个1:n联系可以转换为一个独立的关系模式，也可以与n端对应的关系模式合并。&lt;/li&gt;
&lt;li&gt;一个m:n联系转换为一个关系模式。&lt;/li&gt;
&lt;li&gt;三个或三个以上实体间的一个多元联系转 换为一个关系模式。&lt;/li&gt;
&lt;li&gt;具有相同键的关系模式可合并&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="优化"&gt;优化
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;确定数据依赖&lt;/li&gt;
&lt;li&gt;消除冗余联系&lt;/li&gt;
&lt;li&gt;确定所属范式&lt;/li&gt;
&lt;li&gt;确定合并或分解&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;####### 水平分解&lt;/p&gt;
&lt;p&gt;把（基本）关系的元组分为若干子集合，定义每个子集合为一个子关系，以提高系统的效率&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;满足“80/20原则”的应用&lt;/li&gt;
&lt;li&gt;并发事务经常存取不相交的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;####### 垂直分解&lt;/p&gt;
&lt;p&gt;把关系模式R的属性分解为若干子集合，形成若干子关系模式&lt;/p&gt;
&lt;h6 id="设计用户子模式"&gt;设计用户子模式
&lt;/h6&gt;&lt;ol&gt;
&lt;li&gt;使用更符合用户习惯的别名。&lt;/li&gt;
&lt;li&gt;针对不同级别的用户定义不同的外模式，以满足系统对安全性的要求。&lt;/li&gt;
&lt;li&gt;简化用户对系统的使用。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="物理设计"&gt;物理设计
&lt;/h4&gt;&lt;p&gt;数据库在物理设备上的&lt;strong&gt;存储结构&lt;/strong&gt;与&lt;strong&gt;存取方法&lt;/strong&gt;称为数据库的物理结构，依赖于选定的数据库管理系统&lt;/p&gt;
&lt;p&gt;为一个给定的逻辑数据模型选取一个最适合应用环境的物理结构的过程，就是数据库的物理设计&lt;/p&gt;
&lt;p&gt;对物理结构进行评价，评价的重点是时间和空间效率&lt;/p&gt;
&lt;h6 id="内容"&gt;内容
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;为关系模式选择存取方法（建立存取路径）
&lt;ul&gt;
&lt;li&gt;索引方法：B+树索引方法（最普遍）&lt;/li&gt;
&lt;li&gt;局促方法（Cluster）&lt;/li&gt;
&lt;li&gt;HASH方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设计关系、索引等数据库文件的物理存储结构&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="数据库实施"&gt;数据库实施
&lt;/h4&gt;&lt;p&gt;运用DBMS提供的数据库语言及宿主语言，根据逻辑设计和物理设计的结果&lt;/p&gt;
&lt;h4 id="数据库运行和维护"&gt;数据库运行和维护
&lt;/h4&gt;&lt;h2 id="简介"&gt;简介
&lt;/h2&gt;&lt;p&gt;SQL语言的前身是&lt;strong&gt;SQUARE&lt;/strong&gt;（Specifying Queries As Relational Expression）语 言，是1974年由Boyce和Chamberlin提出 的，并在IBM公司的关系数据库系统 System R上实现，后改名为&lt;strong&gt;SEQUEL&lt;/strong&gt;（ Structured English QUEry Language） 语言，SEUQUEL简称SQL&lt;/p&gt;
&lt;p&gt;SQL语言集&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据定义语言DDL&lt;/li&gt;
&lt;li&gt;数据操纵语言DML&lt;/li&gt;
&lt;li&gt;数据控制语言DCL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;的功能于一体&lt;/p&gt;
&lt;p&gt;数据查询：SELECT&lt;/p&gt;
&lt;p&gt;数据定义：CREATE、DROP、ALTER&lt;/p&gt;
&lt;p&gt;数据操纵：INSERT、UPDATE、DELETE&lt;/p&gt;
&lt;p&gt;数据控制：GRANT、REVOKE&lt;/p&gt;
&lt;h2 id="系统结构"&gt;系统结构
&lt;/h2&gt;&lt;p&gt;SQL语言支持数据库的三级模式结构，在SQL语言中，关系模式称为基本表，外模式称为视图，内模式称为索引&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基本表&lt;/p&gt;
&lt;p&gt;本身独立存在的表，SQL中一个关系对应一个基本表，基本表对应存储文件，一个表可以携带若干索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;视图&lt;/p&gt;
&lt;p&gt;从一个或多个基本表导出的“虚表”，可在视图上再定义视图，只存放定义而不存放数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="数据定义"&gt;数据定义
&lt;/h2&gt;&lt;h3 id="模式"&gt;模式
&lt;/h3&gt;&lt;p&gt;实际上定义了一个命名空间，在空间中可定义该模式包含的数据库对象如基本表、视图、索引等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建模式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SCHEMA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;schemaName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AUTHORIZATION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;userName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tableDefinition&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;|&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;viewDefinition&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;|&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;authorizationDefiinition&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SCHEMA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;S-T&amp;#34;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AUTHORIZATION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SHERRY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除模式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;DROP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SCHEMA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;CASCADE&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="k"&gt;RESTRICT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CASCADE（级联）&lt;/p&gt;
&lt;p&gt;删除模式同时把该模式中所有的数据库对象全部删除&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RESTRICT（限制）&lt;/p&gt;
&lt;p&gt;如该模式中定义了下属的数据库对象（表、视图等），则拒绝该删除语句执行，仅当该模式中没有任何下属对象时才能执行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="基本表-模式"&gt;基本表 （模式）
&lt;/h3&gt;&lt;p&gt;每一个基本表都属于某一个模式,一个模式包含多个基本表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建表&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;colName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dataType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;constraint&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;colName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dataType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;constraint&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;PRIMARY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* 列级完整性约束条件*/&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;UNIQUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* Sname取唯一值*/&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;Ssex&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;Sage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;SMALLINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Course&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Cno&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;PRIMARY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;Cname&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;Cpno&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;Ccredit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;SMALLINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FOREIGN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Cpno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;REFERENCES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Course&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Cno&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/6br0YPM/image-20220426105836165.png"
loading="lazy"
alt="image-20220426105836165"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除表&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;DROP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;［&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;RESTRICT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;CASCADE&lt;/span&gt;&lt;span class="err"&gt;］；&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改表定义&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;colname&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;datatype&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;constriant&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;DROP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;colname&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;CASCADE&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="k"&gt;RESTRICT&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;colname&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;datatype&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ALTER TABLE Student ADD S_entrance DATE；&lt;/p&gt;
&lt;p&gt;ALTER TABLE Student ADD S_entrance DATE；&lt;/p&gt;
&lt;p&gt;ALTER TABLE Course ADD UNIQUE（Cname）；&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;
### 视图 （外模式）
* 定义视图（外模式）
* 创建视图
* 删除视图
* 间接修改视图定义：删除+创建
* 创建索引
CREATE [UNIQUE] [CLUSTER] INDEX &amp;lt;idxname&amp;gt; ON &amp;lt;tablename&amp;gt; (
&amp;lt;colname&amp;gt;
)
* 删除索引
* 间接修改索引定义：删除+创建
![image-20220426103755768](https://i.ibb.co/z2PSyXs/image-20220426103755768.png)
### 索引（内模式）
索引是关系数据库的内部实现技术，属于内模式范畴
**目的**：加快查询速度
**创建**：**DBA或表的属主**可以建立索引，DBMS一般会自动建立**PRIMARY KEY**和**UNIQUE**列上的索引
**使用**：DBMS自动维护索引，自动选择是否使用、使用哪个索引
**方法**：RDBMS中索引一般采用B+树、HASH索引
* B+树索引具有动态平衡的优点
* HASH索引具有查找速度快的特点
**类别**：唯一索引、非唯一索引、聚簇索引
​ 在最经常查询的列上建立聚簇索引以提高查询效率
​ 一个基本表上最多只能建立**一个**聚簇索引
​ **经常更新**的列**不宜**建立聚簇索引
* 创建索引
```sql
CREATE [UNIQUE][CLUSTER] INDEX &amp;lt;indexName&amp;gt; ON &amp;lt;tableName&amp;gt; (&amp;lt;colName&amp;gt;[&amp;lt;order&amp;gt;][,&amp;lt;colName&amp;gt;[order]]...);
CREATE UNIQUE INDEX Stusno ON Student（Sno）；
CREATE UNIQUE INDEX Coucno ON Course（Cno）；
CREATE UNIQUE INDEX SCno ON SC（Sno ASC，Cno DESC）；
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;UNIQUE : 相当于对列添加了一个UNIQUE约束&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CLUSTER：建立聚簇索引后，基表中数据也需要按指定的 聚簇属性值的升序或降序存放。也即聚簇索引 的索引项顺序与表中记录的物理顺序一致&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ORDER：ASC,DESC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除索引&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;DROP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;INDEX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;indexName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="数据操纵"&gt;数据操纵
&lt;/h2&gt;&lt;h3 id="数据查询"&gt;数据查询
&lt;/h3&gt;&lt;p&gt;SELECT [ALL|DISTINCT]&lt;colexpression&gt;[,&lt;colexpression&gt;]&lt;/p&gt;
&lt;p&gt;FROM &lt;table or view&gt;[,&lt;table or view&gt;]&lt;/p&gt;
&lt;p&gt;[WHERE &lt;conditon&gt;]&lt;/p&gt;
&lt;p&gt;[GROUP BY &lt;colname&gt;[HAVING &lt;condition&gt;]]&lt;/p&gt;
&lt;p&gt;[ORDER BY &lt;colname&gt; [ASC|DESC]];&lt;/p&gt;
&lt;h4 id="单表查询"&gt;单表查询
&lt;/h4&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="k"&gt;DISTINCT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;colExpression&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;colExpression&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tableOrViewName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tableOrViewName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;GROUP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;列名&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;HAVING&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;condtion&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;列名&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ASC&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查询指定列&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查询全部列&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查询经过计算的值&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1996&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Sage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/*假定当年的年
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt;份为1996年*/&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Year of Birth:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1996&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;Sage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ISLOWER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Year of Birth: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;BIRTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1996&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Sage&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;BIRTHDAY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;LOWER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DEPARTMENT&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取消取值中的重复行&lt;/p&gt;
&lt;p&gt;DISTINCT短语的作用范围是所有目标列&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ALL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DISTINCT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="err"&gt;去掉重复行&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DISTINCT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Cno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Grade&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查询满足条件的元组&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://imgtu.com/i/O8btZF" target="_blank" rel="noopener"
&gt;&lt;img src="https://s1.ax1x.com/2022/05/09/O8btZF.png"
loading="lazy"
alt="O8btZF.png"
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;字符匹配：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;NOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LIKE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;匹配串&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;ESCAPE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;换码字符&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="k"&gt;between&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sage&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BETWEEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AND&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sage&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NOT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BETWEEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AND&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Ssex&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;IN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;IS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MA&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Ssex&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NOT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;IN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;IS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MA&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="k"&gt;like&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Ssex&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LIKE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;刘%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LIKE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;欧阳__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LIKE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__阳%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Ssex&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NOT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LIKE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;刘%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="err"&gt;查询以&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;DB_&amp;#34;&lt;/span&gt;&lt;span class="err"&gt;开头，且倒数第&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;个字符为&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i的课程的详细情况&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Course&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Cname&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LIKE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DB\_%i_ _&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ESCAPE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\\&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;(&lt;/span&gt;&lt;span class="err"&gt;只有一个\&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Cno&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;From&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GRADE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;IS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Cno&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Grade&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;IS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NOT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ORDER BY&lt;/p&gt;
&lt;p&gt;升序：ASC；降序：DESC；缺省值为升序&lt;/p&gt;
&lt;p&gt;ASC：排序列为空值的元组最后显示&lt;/p&gt;
&lt;p&gt;DESC：排序列为空值的元组最先显示&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Grade&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Cno&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Grade&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;聚集函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;计数&lt;/p&gt;
&lt;p&gt;COUNT（ *）&lt;/p&gt;
&lt;p&gt;COUNT（[DISTINCT|ALL] &amp;lt;列名&amp;gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算总和&lt;/p&gt;
&lt;p&gt;SUM（[DISTINCT|ALL] &amp;lt;列名&amp;gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算平均值&lt;/p&gt;
&lt;p&gt;AVG（[DISTINCT|ALL] &amp;lt;列名&amp;gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最大最小值&lt;/p&gt;
&lt;p&gt;MAX（[DISTINCT|ALL] &amp;lt;列名&amp;gt;）&lt;/p&gt;
&lt;p&gt;MIN（[DISTINCT|ALL] &amp;lt;列名&amp;gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AVG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Grade&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Cno&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Group By&lt;/p&gt;
&lt;p&gt;细化聚集函数的作用对象，未对查询结果分组，聚集函数将作用于整个查询结果，对查询结果分组后，聚集函数将分别作用于每个组&lt;/p&gt;
&lt;p&gt;使用GROUP BY子句后，SELECT子句的列名列表中&lt;strong&gt;只能出现分组属性和聚集函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用HAVING短语筛选最终输出结果，只有满足HAVING短语指定条件的组才输出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WHERE子句作用于基表或视图，从中选择满足条件的&lt;strong&gt;元组&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;HAVING短语作用于组，从中选择满足条件的&lt;strong&gt;组&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;GROUP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;HAVING&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Grade&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;GROUP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;HAVING&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="连接查询"&gt;连接查询
&lt;/h4&gt;&lt;p&gt;同时涉及多个表的查询&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;表名&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.]&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;列名&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;比较运算符&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;表名&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.]&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;列名&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;表名&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.]&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;列名&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BETWEEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;表名&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.]&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;列名&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AND&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;表名&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.]&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;列名&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;连接条件中的各连接字段类型必须是可比的，但名字不必是相同的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;嵌套循环法 (NESTED-LOOP)&lt;/p&gt;
&lt;p&gt;首先在表1中找到第一个元组，然后从头开始扫描表2，逐一查找满足连接条件的元组，找到后就将表1中的第一个元组与该元组拼接起来，形成结果表中一个元组&lt;/p&gt;
&lt;p&gt;表2全部查找完后，再找表1中第二个元组，然后再从头开始扫描表2，逐一查找满足连接条件的元组，找到后就将表1中的第二个元组与该元组拼接起来，形成结果表中一个元组，&lt;/p&gt;
&lt;p&gt;重复上述操作，直到表1中的全部元组都处理完毕&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;排序合并法 (SORT-MERGE)&lt;/p&gt;
&lt;p&gt;常用于=连接&lt;/p&gt;
&lt;p&gt;对表1的第一个元组，从头开始扫描表2，顺序查找满足连接条件的元组，找到后就将表1中的第一个元组与该元组拼接起来，形成结果表中一个元组。当遇到表2中第一条大于表1连接字段值的元组时，对表2的查询不再继续&lt;/p&gt;
&lt;p&gt;找到表1的第二条元组，然后从刚才的中断点处继续顺序扫描表2，查找满足连接条件的元组，找到后就将表1中的第二个元组与该元组拼接起来，形成结果表中一个元组。直接遇到表2中大于表1连接字段值的元组时，对表2的查询不再继续。&lt;/p&gt;
&lt;p&gt;重复上述操作，直到表1或表2中的全部元组都处理完毕为止&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;索引连接（INDEX-JOIN）&lt;/p&gt;
&lt;p&gt;对表2按连接字段建立索引。 对表1中的每个元组，依次根据其连接字段值查询表2的索引，从中找到满足条件的元组，找到后就将表1中的第一个元组与该元组拼接起来，形成结果表中一个元组。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;类型&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;等值连接&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自然连接&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Ssex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Cno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Grade&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自身连接&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FIRST&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;SECOND&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cpno&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Course&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FIRST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Course&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SECOND&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FIRST&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cpno&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SECOND&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cno&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="嵌套查询"&gt;嵌套查询
&lt;/h4&gt;&lt;p&gt;一个SELECT-FROM-WHERE语句称为一个&lt;strong&gt;查询块&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询&lt;/p&gt;
&lt;p&gt;子查询的限制:不能使用ORDER BY子句&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不相关子查询&lt;/p&gt;
&lt;p&gt;子查询的查询条件不依赖于父查询&lt;/p&gt;
&lt;p&gt;由里向外逐层处理。即每个子查询在上一级查询处理之前求解，子查询的结果用于建立其父查询的查找条件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相关子查询&lt;/p&gt;
&lt;p&gt;首先取外层查询中表的第一个元组，根据它与内层查询相关的属性值处理内层查询，若 WHERE子句返回值为真，则取此元组放入结 果表。&lt;/p&gt;
&lt;p&gt;然后再取外层表的下一个元组。&lt;/p&gt;
&lt;p&gt;重复这一过程，直至外层表全部检查完为止。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;IN&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;刘晨&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Cno&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Grade&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AVG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Grade&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;带有EXISTS谓词的子查询不返回任何数据 ，只产生逻辑真值“true”或逻辑假值 “false”。&lt;/p&gt;
&lt;p&gt;– 若内层查询结果非空，则外层的WHERE子句返回真值&lt;/p&gt;
&lt;p&gt;– 若内层查询结果为空，则外层的WHERE子句返回假值&lt;/p&gt;
&lt;p&gt;由EXISTS引出的子查询，其目标列表达式 通常都用* ，因为带EXISTS的子查询只返回真值或假值，给出列名无实际意义&lt;/p&gt;
&lt;p&gt;SQL语言中没有全称量词，可以把带有全称量词的谓词转换为等价的带有存在量词的谓词&lt;/p&gt;
&lt;p&gt;SQL语言中没有蕴涵（Implication）逻辑运算，可以利用谓词演算对逻辑蕴涵谓词进行等价转换&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;EXISTS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/*相关子查询*/&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AND&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;Cno&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;EXISTS&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AND&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;刘晨&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NOT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;EXISTS&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Course&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NOT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;EXISTS&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;AND&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Cno&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cno&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="o"&gt;##&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;查询选修了全部课程的学生姓名&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DISTINCT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SCX&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NOT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;EXISTS&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SCY&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SCY&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;95002&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AND&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;NOT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;EXISTS&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SCZ&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SCZ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SCX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AND&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;SCZ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cno&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SCY&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cno&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="o"&gt;##&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;查询至少选修了学生&lt;/span&gt;&lt;span class="mi"&gt;95002&lt;/span&gt;&lt;span class="err"&gt;选修的全部课程的学生号码&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="集合查询"&gt;集合查询
&lt;/h4&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;queryBlock&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;UNION&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="k"&gt;INTERSECT&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="k"&gt;EXCEPT&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;queryBlock&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;并&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CS&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;UNION&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sage&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;交&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CS&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;INTERSECT&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sage&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;差&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-SQL" data-lang="SQL"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CS&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;EXCEPT&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sage&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="数据更新"&gt;数据更新
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;插入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;INTO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tableName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;col1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;col2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;，…&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;VALUES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;INTO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;VALUES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;95020&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;陈冬&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;男&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;IS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;INTO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Deptage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Avgage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;AVG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;GROUP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;UPDATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tableName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;UPDATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;95001&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;DELETE&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tableName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;DELETE&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;95019&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;DELETE&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;DELETE&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CS&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="视图"&gt;视图
&lt;/h2&gt;&lt;p&gt;虚表，从一个或几个基本表（或视图）导出的表&lt;/p&gt;
&lt;p&gt;只存放视图的定义，不会出现数据冗余&lt;/p&gt;
&lt;p&gt;基本表中数据发生改变时，从视图中查询出的数据也随之改变&lt;/p&gt;
&lt;h3 id="创建视图"&gt;创建视图
&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;VIEW&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;viewName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;colName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;colName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]...)]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;subQuery&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;WITH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;CHECK&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;OPTION&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="形式"&gt;形式
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;行列子集视图&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;VIEW&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IS_Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sage&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;IS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WITH CHECK OPTION的视图&lt;/p&gt;
&lt;p&gt;要求修改和插入时仍满足只有IS系学生&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;VIEW&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IS_Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sage&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;IS&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WITH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;CHECK&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;OPTION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;修改、删除时&lt;/p&gt;
&lt;p&gt;DBMS自动加上条件 Sdept=&amp;lsquo;IS‘&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;插入时&lt;/p&gt;
&lt;p&gt;DBMS自动检查Sdept是否为&amp;rsquo;IS&amp;rsquo;，不是则拒绝插入，未提供则自动补充为&amp;rsquo;IS&amp;rsquo;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于多个基表的视图&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;VIEW&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IS_S1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Grade&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Grade&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;IS&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AND&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sTUDENT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AND&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cno&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于视图的视图&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;VIEW&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IS_S2&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Grade&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IS_S1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Grade&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;带表达式的视图&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;VIEW&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BT_S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sbirth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1996&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Sage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/*假定当年的年份为
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt;1996年*/&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分组视图&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;VIEW&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;S_G&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Gavg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;AVG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Grade&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;AVG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Grade&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;GROUP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="删除视图"&gt;删除视图
&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;DROP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;VIEW&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;viewName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由该视图导出的视图定义仍在数据字典中，但已不能使用，必须显式删除&lt;/p&gt;
&lt;p&gt;删除基表时，由该基表导出的所有视图定义都必须显式删除&lt;/p&gt;
&lt;h3 id="查询视图"&gt;查询视图
&lt;/h3&gt;&lt;p&gt;从用户角度，查询视图与查询基本表相同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;视图实体化法(View Materialization)
&lt;ul&gt;
&lt;li&gt;有效性检查：检查所查询视图是否存在&lt;/li&gt;
&lt;li&gt;执行试图定义，将视图临时实体化，生成临时表&lt;/li&gt;
&lt;li&gt;查询临时表&lt;/li&gt;
&lt;li&gt;查询完毕删除被实体化的视图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;视图消解法（View Resolution）
&lt;ul&gt;
&lt;li&gt;有效性检查：检查所查询视图是否存在&lt;/li&gt;
&lt;li&gt;将视图定义中的子查询与用户查询结合，转换成等价的对基本表的查询&lt;/li&gt;
&lt;li&gt;执行修正后的查询&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="更新视图"&gt;更新视图
&lt;/h3&gt;&lt;p&gt;同样有实体化法和消解法&lt;/p&gt;
&lt;p&gt;有些视图不可更新&lt;/p&gt;
&lt;h2 id="数据控制"&gt;数据控制
&lt;/h2&gt;&lt;p&gt;亦称为数据保护，包括数据的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安全性控制&lt;/p&gt;
&lt;p&gt;保护数据库，防止不合法的使用所造成的数据泄露和破坏&lt;/p&gt;
&lt;p&gt;GRANT、REVOKE&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完整性控制&lt;/p&gt;
&lt;p&gt;数据库的完整性是指数据库中数据的正确性与相容性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;键&lt;/li&gt;
&lt;li&gt;取值唯一的列&lt;/li&gt;
&lt;li&gt;参照完整性&lt;/li&gt;
&lt;li&gt;其他约束条件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;并发控制&lt;/p&gt;
&lt;p&gt;当多个用户并发地对数据库进行操作时，对他们加以控制、协调，以保证并发操作正确执行，保持数据库的一致性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;恢复&lt;/p&gt;
&lt;p&gt;当发生各种类型的故障导致数据库处于不一致状态时，将数据库恢复到一致状态的功能&lt;/p&gt;
&lt;p&gt;回滚、重做（UNDO、REDO）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="安全性"&gt;安全性
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;授权&lt;/strong&gt;:DBA与表的属主可以建立&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;GRANT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;authority1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;authority2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;targetType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;targetName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;TO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;userName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;userName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;WITH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;GRANT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;OPTION&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;GRANT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;TO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;U1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;GRANT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ALL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;PRIVILEGES&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Course&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;TO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;U2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;U3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;GRANT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;TO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;PUBLIC&lt;/span&gt;&lt;span class="p"&gt;;(&lt;/span&gt;&lt;span class="k"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;GRANT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;UPDATE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;TO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;U4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;GRANT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CREATETAB&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DATABASE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;TO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;U8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;WITH GRANT OPTION：被授权对象可以传播权限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;收回&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;REVOKE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;authority1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;authority2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;targetType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;targetName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;userName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;userName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]...;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;REVOKE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;UPDATE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;U4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;REVOKE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;PUBLIC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="嵌入式sql"&gt;嵌入式SQL
&lt;/h2&gt;&lt;p&gt;嵌入式SQL是将SQL语句嵌入程序设计语言中，被嵌入的程序设计语言，如C、C++、Java，称为宿主语言，简称主语言&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;EXEC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SQLStatement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SQL通信区&lt;/p&gt;
&lt;p&gt;SQLCA: SQL Communication Area&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主变量&lt;/p&gt;
&lt;p&gt;Host Variable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;游标&lt;/p&gt;
&lt;p&gt;游标是系统为用户开设的一个数据缓冲区，存放SQL语句的执行结果&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;EXEC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="k"&gt;DISTINCT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;INTO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;host_var&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;indicator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;host_var&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;indicator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]]...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tableorview&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tableorview&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;GROUP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;colname1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;HAVING&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;colname2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;ASC&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;EXEC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Ssex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;INTO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Hsno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Hname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Hsex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Hage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Hdept&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;givensno&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;EXEC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Ssex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;Sdept&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;INTO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Hsno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Hname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Hsex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Hage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Hdept&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;givensno&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;EXEC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DELETE&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sno&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;stdname&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;指示变量只能用于INTO子句中&lt;/li&gt;
&lt;li&gt;如果INTO子句中主变量后面跟有指示变量，则当查询得出的某个数据项为空值时，系统会自动将相应主变量后面的指示变量置为负值，但不向该主变量执行赋值操作，即主变量值仍保持执行SQL语句之前的值&lt;/li&gt;
&lt;li&gt;当发现指示变量值为负值时，不管主变量为何值，均应认为主变量值为NULL&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="游标"&gt;游标
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;EXEC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DECLARE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cursorName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;CURSOR&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FOR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SELECTStatement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;说明性语句，并不执行查询&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;EXEC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;OPEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cursorName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打开游标实际上是&lt;strong&gt;执行&lt;/strong&gt;相应的SELECT语句，把所有满足查询条件的记录从指定表取到缓冲区中
–这时游标处于活动状态，指针指向查询结果集中第一条记录之前&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;推动&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;EXEC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FETCH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="k"&gt;NEXT&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="k"&gt;PRIOR&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="k"&gt;FIRST&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="k"&gt;LAST&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cursorName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;INTO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;host_var&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;indicator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;][,&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;host_var&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;indicator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]]...;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;指定方向推动游标指针，然后将缓冲区中的当 前记录取出来送至主变量供主语言进一步处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关闭&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;EXEC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;CLOSE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cursorName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;关闭游标，释放结果集占用的缓冲区及其他资源&lt;/p&gt;
&lt;p&gt;游标被关闭后，就不再和原来的查询结果集相联系，被关闭的游标可以再次被打开，与新的查询结果相联系&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="查询处理"&gt;查询处理
&lt;/h2&gt;&lt;p&gt;查询处理是指从数据库中提取数据所涉及的处理过程，包括将用户提交的查询语句转变为数据库的查询计划，并且执行这个查询计划获得查询结果&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/vDrnmfJ/image-20220530182950515.png"
loading="lazy"
alt="image-20220530182950515"
&gt;&lt;/p&gt;
&lt;p&gt;连接操作实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;嵌套循环法（Nested Loop）&lt;/li&gt;
&lt;li&gt;索引连接法（Index Join）&lt;/li&gt;
&lt;li&gt;排序合并法（Sort-merge Join Merge Join）&lt;/li&gt;
&lt;li&gt;散列合并法（Hash Join）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="查询优化"&gt;查询优化
&lt;/h3&gt;&lt;h4 id="代数优化"&gt;代数优化
&lt;/h4&gt;&lt;p&gt;通过对关系代数表达式的等价变换来提高查询效率&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;启发式规则&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择运算应尽可能先做。&lt;/li&gt;
&lt;li&gt;把投影运算和选择运算同时进行&lt;/li&gt;
&lt;li&gt;把投影同其前或其后的双目运算结合起来&lt;/li&gt;
&lt;li&gt;把某些选择同在它前面要执行的笛卡尔积结合起来成为一个连接运算&lt;/li&gt;
&lt;li&gt;找出公共子表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="物理优化"&gt;物理优化
&lt;/h4&gt;&lt;p&gt;代数优化改变查询语句中操作的次序和组合，不涉及底层的存取路径。
对于一个查询语句有许多存取方案，它们的执行效率不同， 仅仅进行代数优化是不够的。
物理优化就是要选择高效合理的操作算法或存取路径，求得优化的查询计划&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于存取路径
&lt;ul&gt;
&lt;li&gt;选择操作&lt;/li&gt;
&lt;li&gt;连接操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基于代数估算&lt;/li&gt;
&lt;li&gt;两者结合&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="安全性-1"&gt;安全性
&lt;/h2&gt;&lt;p&gt;数据库的安全性是指保护数据库，防止因用户非法使用数据库造成数据泄露、更改或破坏&lt;/p&gt;
&lt;h3 id="安全技术"&gt;安全技术
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;访问控制技术&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存取控制技术&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自主存取控制（Discretionary Access Control ，简称DAC）
C2级、灵活
同一用户对于不同的数据对象有不同的存取权限
不同的用户对同一对象也有不同的权限
用户还可将其拥有的存取权限转授给其他用户&lt;/li&gt;
&lt;li&gt;强制存取控制（Mandatory Access Control，简称 MAC）
B1级、严格
每一个数据对象被标以一定的密级
每一个用户也被授予某一个级别的许可证
对于任意一个对象，只有具有合法许可证的用户才
可以存取&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据加密技术&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库审计&lt;/p&gt;
&lt;p&gt;在数据库系统运行期间，记录数据库的访问情况，以利用审计数据分析数据库是否受到非法存取&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在用户数量比较大的情况下，为了便于权限管理，需要引入角色的概念。&lt;/p&gt;
&lt;p&gt;数据库角色：被命名的&lt;strong&gt;一组&lt;/strong&gt;与数据库操作相关的&lt;strong&gt;权限&lt;/strong&gt;。
– 角色是权限的集合
– 可以为一组具有相同权限的用户创建一个角色
– 简化授权的过程&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ROLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;roleName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;GRANT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;authority&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;authority&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;targetType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TargetName&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;TO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;roleName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;roleName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;GRANT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;role1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;role2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;TO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;role3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;user1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;WITH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ADMIN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;OPTION&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;REVOKE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;authority&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;authority&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;targetType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TargetName&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;roleName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;roleName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="强制存取"&gt;强制存取
&lt;/h4&gt;&lt;p&gt;强制存取控制（MAC）是指系统为保证更高程度的安全性，按照TDI/TCSEC标准中安全策略的要求，所采取的强制存取检查手段&lt;/p&gt;
&lt;p&gt;在MAC中，DBMS所管理的全部实体被分为主体和客体两大类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主体是系统中的活动实体
– DBMS所管理的实际用户
– 代表用户的各进程&lt;/li&gt;
&lt;li&gt;客体是系统中的被动实体，是受主体操纵的
– 文件
– 基表
– 索引
– 视图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于主体和客体，DBMS为它们每个实例（值）指派一个敏感度标记（Label）。
敏感度标记分成若干级&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绝密（Top Secret）&lt;/li&gt;
&lt;li&gt;机密（Secret）&lt;/li&gt;
&lt;li&gt;可信（Confidential）&lt;/li&gt;
&lt;li&gt;公开（Public）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;– 主体的敏感度标记称为许可证级别（Clearance Level）。
– 客体的敏感度标记称为密级（Classification Level）。
– MAC机制就是通过对比主体的Label和客体的Label，最终确定主体是否能够存取客&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仅当主体的许可证级别大于或等于客体的密级时，该主体才能读取相应的客体。&lt;/li&gt;
&lt;li&gt;仅当主体的许可证级别等于客体的密级时，该主体才能写相应的客体&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修正规则
– 主体的许可证级别 ≤客体的密级 主体能写客体
– 用户可为写入的数据对象赋予高于自己的许可证级别的密级。
– 一旦数据被写入，该用户自己也不能再读该数据对象。&lt;/p&gt;
&lt;h3 id="审计"&gt;审计
&lt;/h3&gt;&lt;p&gt;审计日志（Audit Log）将用户对数据库的所有操作记录在上面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户级审计
针对自己创建的数据库表或视图进行审计记录所有用户对这些表或视图的一切成功和（或）不成功的访问要求以及各种类型的SQL操作&lt;/li&gt;
&lt;li&gt;系统级审计
DBA设置监测成功或失败的登录要求监测GRANT和REVOKE操作以及其他数据库级权限下的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;AUDIT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;设置审计功能&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;AUDIT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="k"&gt;UPDATE&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;NOAUDIT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;取消审计功能&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;NOAUDIT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="k"&gt;UPDATE&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="完整性"&gt;完整性
&lt;/h2&gt;&lt;p&gt;数据库的完整性是指数据的正确性、有效性和相容性，其主要目的是防止错误的数据进入数据库。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所谓正确性是指数据的合法性。&lt;/li&gt;
&lt;li&gt;所谓有效性是指数据是否属于所定义的有效范围。&lt;/li&gt;
&lt;li&gt;相容性是指表示同一事实的两个数据应相同，不一致就是不相容&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="实现方法"&gt;实现方法
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;约束&lt;/li&gt;
&lt;li&gt;默认值&lt;/li&gt;
&lt;li&gt;规则&lt;/li&gt;
&lt;li&gt;触发器&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="列级约束"&gt;列级约束
&lt;/h3&gt;&lt;p&gt;主要是对属性的数据类型、数据格式和取值范围、精度等的约束。具体包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对数据类型的约束，包括数据类型、长度、精度等的约束。例如学生姓名的数据类型是字符型，长度是20。&lt;/li&gt;
&lt;li&gt;对数据格式的约束，例如规定日期的格式为YYYY/MM/DD。&lt;/li&gt;
&lt;li&gt;对取值域的约束，例如学生成绩的取值范围必须是0～100。&lt;/li&gt;
&lt;li&gt;对空值的约束 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="元组约束"&gt;元组约束
&lt;/h3&gt;&lt;p&gt;一个元组是由若干个属性组成的，元组级约束就是元组中各个属性之间的约束关系。例如订货关系中发货日期不能小于订货日期，发货量不得超过订货量等&lt;/p&gt;
&lt;h3 id="关系约束"&gt;关系约束
&lt;/h3&gt;&lt;p&gt;关系约束是指一个关系的各个元组之间、或者多个关系之间存在的各种联系或约束。常见的关系约束有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;实体完整性约束&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主键的值不能取空值&lt;/li&gt;
&lt;li&gt;主键的值唯一&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关系模型的实体完整性用PRIMARY KEY定义
单属性构成的主键有两种说明方法：定义为列级约束条件、定义为表级约束条件
对多个属性构成的主键只有一种说明方法：定义为表级约束条件
PRIMARY KEY约束可以作为表定义的一部分在定义表时定义，也可以在表创建之后再添加&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参照完整性约束&lt;/p&gt;
&lt;p&gt;参照完整性给出了数据表之间互相关联的基本要求，其核心是&lt;strong&gt;不允许引用不存在的元组&lt;/strong&gt;，也就是说，外键字段的取值要么为空值，要么就是被引用关系中元组的对应值。&lt;/p&gt;
&lt;p&gt;参照完整性在CREATE TABLE中用FOREIGN KEY和REFERENCES定义&lt;/p&gt;
&lt;p&gt;– FOREIGN KEY短语指明表中的哪些字段是外键，REFERENCES短语指明该表中的外键所参照的数据表名和字段名。
– FOREIGN KEY约束可以作为表定义的一部分在创建表时创建，也可以在已有表中创建FOREIGN KEY约束&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户自定义完整性约束&lt;/p&gt;
&lt;p&gt;用户定义的完整性就是针对某一具体应用的数据必须满足的语义要求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;列值非空（NOT NULL）&lt;/li&gt;
&lt;li&gt;列值唯一（UNIQUE）&lt;/li&gt;
&lt;li&gt;检查列值是否满足一个布尔表达式（CHECK）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;CONSTRAINT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;constraintName&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;PRIMARY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Statement&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="k"&gt;FOREIGN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Statement&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="k"&gt;CHECK&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Statement&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CREATE TABLE Student
（Sno NUMERIC（6）
CONSTRAINT C1 CHECK （Sno BETWEEN 90000 AND 99999）,
Sname CHAR（20）
CONSTRAINT C2 NOT NULL，
Sage NUMERIC（3）
CONSTRAINT C3 CHECK （Sage &amp;lt; 30），
Ssex CHAR（2）
CONSTRAINT C4 CHECK （Ssex IN （‘男’，‘女’）），
CONSTRAINT StudentKey PRIMARY KEY（Sno）
）；&lt;/p&gt;
&lt;p&gt;ALTER TABLE Student
DROP CONSTRAINT C1；
ALTER TABLE Student
ADD CONSTRAINT C1 CHECK （Sno BETWEEN
900000 AND 999999）；
ALTER TABLE Student
DROP CONSTRAINT C3；
ALTER TABLE Student
ADD CONSTRAINT C3 CHECK （Sage &amp;lt; 40）;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;
* 函数依赖约束
* 统计约束
### 触发器
触发器是一种特殊类型的存储过程，在对表或视图发出 UPDATE、INSERT 或DELETE 语句时自动执行
```sql
CREATE TRIGGER &amp;lt;triggerName&amp;gt;
{ BEFORE | AFTER} &amp;lt;triggerEvent&amp;gt; ON &amp;lt;tableName&amp;gt;
FOR EACH {ROW | STATEMENT}
[WHEN &amp;lt;triggerCondition&amp;gt;]
&amp;lt;triggerBody&amp;gt;
CREATE TRIGGER Insert_Or_Update_Sal
BEFORE INSERT OR UPDATE ON Teacher
/*触发事件是插入或更新操作*/
FOR EACH ROW /*行级触发器*/
AS BEGIN /*定义触发动作体，是PL/SQL过程块*/
IF （new.Job=‘教授’）AND （new.Sal &amp;lt; 4000）
THEN
new.Sal :=4000;
END IF；
END；
CREATE TRIGGER Insert_Sal
AFTER INSERT ON Teacher
/*触发事件是INSERT*/
FOR EACH ROW
AS BEGIN
INSERT INTO Sal_log VALUES（
new.Eno，new.Sal，CURRENT_USER，
CURRENT_TIMESTAMP）；
END；
CREATE TRIGGER Update_Sal
AFTER UPDATE ON Teacher
/*触发事件是UPDATE */
FOR EACH ROW
AS BEGIN
IF （new.Sal &amp;lt;&amp;gt; old.Sal）
THEN INSERT INTO Sal_log VALUES（
new.Eno，new.Sal，CURRENT_USER，
CURRENT_TIMESTAMP）；
END IF；
END；
DROP TRIGGER &amp;lt;triggerName&amp;gt; ON &amp;lt;t&amp;gt;；
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;BEFORE
表示在触发事件进行以前，判断触发条件是否满足若满足条件则先执行触发动作部分的操作然后再执行触发事件的操作&lt;/li&gt;
&lt;li&gt;AFTER
表示在触发事件完成之后，判断触发条件是否满足若满足条件则执行触发动作部分的操作如果触发事件因错误（如违反约束或语法错误）而失败，触发器将不会执行&lt;/li&gt;
&lt;li&gt;行级触发器（FOR EACH ROW）
对每一个修改的元组都会触发触发器的检查和执行&lt;/li&gt;
&lt;li&gt;语句级触发器（FOR EACH STATEMENT）
只在SQL语句执行时候进行触发条件的检查和触发器的执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="恢复"&gt;恢复
&lt;/h2&gt;&lt;h3 id="事务transaction"&gt;事务（Transaction）
&lt;/h3&gt;&lt;p&gt;用户定义的一个数据库操作序列，是一个不可分割的工作单位&lt;/p&gt;
&lt;p&gt;事务是恢复和并发控制的基本单位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;显式定义&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;BEGIN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TRANSACTION&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Statement1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Statement2&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;COMMIT&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="k"&gt;ROLLBACK&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;COMMIT：事务正常结束&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隐式定义&lt;/p&gt;
&lt;p&gt;当用户没有显式地定义事务时，DBMS按缺省 规定自动划分事务&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;四个特征（ACID特性）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;原子性（Atomicity）&lt;/p&gt;
&lt;p&gt;事务是数据库操作的逻辑工作单位，不可分割&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一致性（Consistency）&lt;/p&gt;
&lt;p&gt;事务执行的结果必须从一个状态转换到另一个状态时保持一致&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隔离性（Isolation）&lt;/p&gt;
&lt;p&gt;一个事务的执行不能影响到另一个事务，即一个事务的内部操作相对于外部事务是隔离的，并发执行事务时事务间不能相互干扰&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="事务状态"&gt;事务状态
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;活动状态（active）&lt;/p&gt;
&lt;p&gt;初始状态，事务执行时处于活动状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部分提交状态（partially committed）&lt;/p&gt;
&lt;p&gt;事务最后一条语句执行完毕后进入部分提交状态，此时事务中对数据的操作已经全部完成，但结果数据还驻留在内存中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;失败状态（failed）&lt;/p&gt;
&lt;p&gt;事务不能正常执行，必须回滚&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中止状态（aborted）&lt;/p&gt;
&lt;p&gt;事务回滚并且数据库已经恢复到事务执行前的状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提交状态（committed）&lt;/p&gt;
&lt;p&gt;数据库系统将事务中对数据的更改完全写入磁盘时，写入一条事务日志信息，标志着事务成功完成&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="故障"&gt;故障
&lt;/h3&gt;&lt;p&gt;某个事务在运行过程中由于种种原因未运行至正常终止点就夭折了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;系统故障&lt;/p&gt;
&lt;p&gt;整个系统的正常运行突然被破坏，所有正在运行的事务都非正常终止，内存中数据库缓冲区的信息全部丢失，外部存储设备上的数据未受影响&lt;/p&gt;
&lt;p&gt;恢复：&lt;/p&gt;
&lt;p&gt;反向UNDO处理Undo队列事务&lt;/p&gt;
&lt;p&gt;正向REDO处理Redo队列事务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务内部的故障&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储设备故障&lt;/p&gt;
&lt;p&gt;硬件故障使存储在外存中的数据部分丢失或全部丢失&lt;/p&gt;
&lt;p&gt;恢复：&lt;/p&gt;
&lt;p&gt;装入数据库发生介质故障前某个时刻的数据副本&lt;/p&gt;
&lt;p&gt;重做自此时始的所有成功事务，将结果重新记入数据库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他原因&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="故障恢复"&gt;故障恢复
&lt;/h4&gt;&lt;p&gt;由恢复子系统利用日志文件撤销（UNDO）此事务已对数据库进行的修改&lt;/p&gt;
&lt;h3 id="关键问题"&gt;关键问题
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如何建立冗余数据
&lt;ul&gt;
&lt;li&gt;数据转储（backup）&lt;/li&gt;
&lt;li&gt;登记日志文件（logging）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何利用冗余数据进行数据库恢复&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="转储"&gt;转储
&lt;/h3&gt;&lt;p&gt;DBA将整个数据库复制到磁带或另一个磁盘上保存起来的过程，备用的数据称为后备副本或者后援副本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;转储状态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;静态转储&lt;/p&gt;
&lt;p&gt;在系统中无运行事务时进行转储，转储期间不允许对数据库进行任何的存取、修改活动&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态转储&lt;/p&gt;
&lt;p&gt;转储操作与用户事务并发进行，转储期间允许对数据库进行存取或修改&lt;/p&gt;
&lt;p&gt;不能保证副本中的数据正确有效，需加上日志文件才能把数据库恢复至某一时刻的正确状态&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;转储方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;海量转储&lt;/p&gt;
&lt;p&gt;每次转储全部数据库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;增量转储&lt;/p&gt;
&lt;p&gt;只转储上次转储后更新过的数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="日志文件"&gt;日志文件
&lt;/h3&gt;&lt;p&gt;用来记录事务对数据库的更新操作的文件&lt;/p&gt;
&lt;h4 id="格式"&gt;格式
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;以记录为单位的日志文件&lt;/li&gt;
&lt;li&gt;以数据块为单位的日志文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="内容-1"&gt;内容
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;各事务开始标记（BEGIN TRANSACTION）&lt;/li&gt;
&lt;li&gt;各事务结束标记（COMMIT|ROLLBACK）&lt;/li&gt;
&lt;li&gt;各事务所有更新操作&lt;/li&gt;
&lt;li&gt;与事务有关的内部更新操作&lt;/li&gt;
&lt;li&gt;日志文件中的一个日志记录（log record）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于记录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务标识&lt;/li&gt;
&lt;li&gt;操作类型（插入、删除、修改）&lt;/li&gt;
&lt;li&gt;操作对象（记录ID、BLOCK NO.）&lt;/li&gt;
&lt;li&gt;更新前数据的旧值&lt;/li&gt;
&lt;li&gt;更新后数据的新值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于数据块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务标识&lt;/li&gt;
&lt;li&gt;操作对象（记录ID、BLOCK NO.）&lt;/li&gt;
&lt;li&gt;更新前数据所在整个数据块的值&lt;/li&gt;
&lt;li&gt;更新后整个数据块的值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="规则"&gt;规则
&lt;/h4&gt;&lt;p&gt;为保证数据库可恢复，登记日志文件时必须遵循&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;登记的次序严格按照并行事务执行的时间次序&lt;/li&gt;
&lt;li&gt;必须先写日志文件，后写数据库（把标识修改的日志记录写至日志文件，把对数据的修改写至数据库）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="检查点checkpoint"&gt;检查点（CheckPoint）
&lt;/h4&gt;&lt;p&gt;在日志文件中增加检查点记录（checkpoint）&lt;/p&gt;
&lt;p&gt;增加重新开始文件&lt;/p&gt;
&lt;p&gt;恢复子系统在登记日志文件期间动态地维护日志&lt;/p&gt;
&lt;p&gt;记录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立检查点时刻所有正在执行的事务清单&lt;/li&gt;
&lt;li&gt;这些事务最近的一个日志记录的地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="数据库镜像恢复"&gt;数据库镜像恢复
&lt;/h3&gt;&lt;p&gt;介质故障是对系统影响最为严重的一种故障，严重影响数据库的可用性&lt;/p&gt;
&lt;p&gt;数据库镜像：&lt;/p&gt;
&lt;p&gt;在不同的设备上同时存在两份数据库，一个是主设备，一个是镜像设备，每当主设备的数据库发生更新是，系统自动更新镜像设备的数据，使得两个设备的数据始终保持一致&lt;/p&gt;
&lt;h2 id="并发"&gt;并发
&lt;/h2&gt;&lt;p&gt;不同的事务执行方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;事务串行执行&lt;/p&gt;
&lt;p&gt;每个时刻只有一个事务运行，不能充分利用系统资源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;交叉并发方式（Interleaved Concurrency）&lt;/p&gt;
&lt;p&gt;在单处理机系统中，事务的并行执行是这些并行事务的并行操作轮流交叉进行，没有真正并行运行，但能提高系统效率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同时并发方式（simultaneous concurrency）&lt;/p&gt;
&lt;p&gt;多处理机系统中，每个处理机运行一个事务，多个处理机同时运行多个事务&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="异常"&gt;异常
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;丢失修改（Lost Update）&lt;/li&gt;
&lt;li&gt;不可重复读（Non-Repeatable Read）&lt;/li&gt;
&lt;li&gt;读”脏“数据（Dirty Read）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="可串行化调度"&gt;可串行化调度
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;调度（Schedule）&lt;/strong&gt;：并发事务的操作顺序&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可串行化调度&lt;/strong&gt;：多个事务并发执行的结果与按某一次序穿行执行的结果相同&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可串行性&lt;/strong&gt;：并发事务正确调度的准则&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;冲突操作&lt;/strong&gt;：不同事务对同一个数据的读写操作和写写操作&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;冲突等价&lt;/strong&gt;：一个调度S能通过一系列非冲突操作执行顺序的交换变成调度S1，称S与S1冲突等价&lt;/p&gt;
&lt;p&gt;不可交换：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;冲突操作&lt;/li&gt;
&lt;li&gt;同一事务内的两个操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;冲突可串行化调度&lt;/strong&gt;：调度Sc可在保证冲突操作的次序不变的情况下通过交换两事务不冲突操作的次序得到可串行化调度&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据库状态等价性&lt;/strong&gt;：在数据库初始状态相同时，等价的调度能产生同样的数据库状态&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调度状态可串行&lt;/strong&gt;：该调度等价于一个串行调度&lt;/p&gt;
&lt;p&gt;冲突可串行化调度是可串行化调度的充分条件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可串行化测试&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ti在Tj Read(A)或者Write(A)之前Write(A)或Read(A)&lt;/li&gt;
&lt;li&gt;Ti在Tj Write(A)之前Write(A)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;则连Ti-&amp;gt;Tj&lt;/p&gt;
&lt;p&gt;若结果出现回路则不是冲突可串行，否则是冲突可串行&lt;/p&gt;
&lt;h3 id="封锁"&gt;封锁
&lt;/h3&gt;&lt;p&gt;事务T在对某个数据对象（表、记录）操作之前，先向系统发出请求，对其加锁，在事务T释放锁之前，其他的事务不能更新此数据对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;排它锁（Exclusive Locks）X锁 （写锁）&lt;/p&gt;
&lt;p&gt;只允许T读取和修改A，其他任何事务不能再对A加任何类型的锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;共享锁（Share Locks) S锁 （读锁）&lt;/p&gt;
&lt;p&gt;其他事务只能对A再加S锁，不能加X锁，可以读A，但不能对A做任何修改&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;锁的正确使用要保证&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务的一致性&lt;/li&gt;
&lt;li&gt;调度的合法性&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="一级封锁协议"&gt;一级封锁协议
&lt;/h4&gt;&lt;p&gt;事务T在修改数据之前必须先加X锁，直到事务结束释放&lt;/p&gt;
&lt;p&gt;可防止丢失修改&lt;/p&gt;
&lt;h4 id="二级封锁协议"&gt;二级封锁协议
&lt;/h4&gt;&lt;p&gt;一级+读数据前加S锁，读完即可释放S锁&lt;/p&gt;
&lt;p&gt;可防止丢失修改、读”脏“数据&lt;/p&gt;
&lt;h4 id="三级封锁协议"&gt;三级封锁协议
&lt;/h4&gt;&lt;p&gt;一级+读数据前加S锁，事务结束才释放&lt;/p&gt;
&lt;p&gt;可防止丢失修改，读”脏“数据、不可重复读&lt;/p&gt;
&lt;h4 id="活锁"&gt;活锁
&lt;/h4&gt;&lt;p&gt;请求不断被后来者覆盖&lt;/p&gt;
&lt;p&gt;先来先服务可解决&lt;/p&gt;
&lt;h4 id="死锁"&gt;死锁
&lt;/h4&gt;&lt;p&gt;两个封锁者等待彼此释放&lt;/p&gt;
&lt;h5 id="防止"&gt;防止
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一次封锁法：要求每个事务一次将所有要使用的数据全部加锁&lt;/p&gt;
&lt;p&gt;降低并发度&lt;/p&gt;
&lt;p&gt;难以事先精确确定封锁对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;顺序封锁法：余线对数据对象规定封锁顺序&lt;/p&gt;
&lt;p&gt;维护成本高&lt;/p&gt;
&lt;p&gt;难以实现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务重试法：回滚其中一个事务&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="检测"&gt;检测
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;超时法&lt;/li&gt;
&lt;li&gt;事务等待图法：形成事务等待图，周期性检测事务等待图寻找回路&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="两阶段封锁协议two-phase-locking-2pl"&gt;两阶段封锁协议（Two-Phase Locking 2PL）
&lt;/h4&gt;&lt;p&gt;所有事务分两个阶段对数据项加锁和解锁，在读写之前获得锁，释放锁之后不再申请和获得其他封锁&lt;/p&gt;
&lt;p&gt;并行执行的所有事务均遵守两阶段封锁协议，则对这些事务的所有并行调度策略都是可串行化的&lt;/p&gt;
&lt;p&gt;遵循第三级封锁协议必然遵守两阶段封锁协议&lt;/p&gt;
&lt;h4 id="锁表"&gt;锁表
&lt;/h4&gt;&lt;p&gt;锁管理器为目前已加所的数据项维护一个记录链表，每个锁请求为一个记录，按请求到达顺序排序&lt;/p&gt;
&lt;h3 id="多粒度封锁"&gt;多粒度封锁
&lt;/h3&gt;&lt;p&gt;封锁粒度（Granularity）：封锁对象的大小&lt;/p&gt;
&lt;p&gt;在一个系统中同时支持多种封锁粒度供不同的事务选择&lt;/p&gt;
&lt;h4 id="多粒度封锁协议"&gt;多粒度封锁协议
&lt;/h4&gt;&lt;p&gt;允许多粒度树中的贝格节点被独立地加锁&lt;/p&gt;
&lt;p&gt;对一个结点加锁意味着对所有后裔加同样的锁&lt;/p&gt;
&lt;p&gt;一个数据对象可能以两种方式封锁：显式封锁和隐式封锁&lt;/p&gt;
&lt;h4 id="意向锁"&gt;意向锁
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;目的&lt;/strong&gt;：提高对某个数据对象加锁时系统的检查效率&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内容&lt;/strong&gt;：对任一结点加基本锁必须先对上层结点加意向锁，对任一结点加意向锁说明下层结点正在被封锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;意向共享锁（Intent Share Lock) IS锁&lt;/li&gt;
&lt;li&gt;意向排它锁（Intent Exclusive Lock）IX锁&lt;/li&gt;
&lt;li&gt;共享意向排它锁（Share Intent Exclusive Lock） SIX锁=S+IX&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;锁的强度&lt;/strong&gt;：对其他锁的排斥程度&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/0j3Z3DN/image-20220609212512191.png"
loading="lazy"
alt="image-20220609212512191"
&gt;&lt;/p&gt;
&lt;p&gt;具有意向锁的多粒度封锁：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;申请时自上向下&lt;/li&gt;
&lt;li&gt;释放时自下向上&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>【计算机图形学】笔记</title><link>https://dyhes.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="图形系统"&gt;图形系统
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/pbyr85r/image-20220518170931699.png"
loading="lazy"
alt="image-20220518170931699"
&gt;&lt;/p&gt;
&lt;h2 id="光栅图像"&gt;光栅图像
&lt;/h2&gt;&lt;p&gt;也称为图像、位图、点阵图、像素图，以像素数组的形式存贮在帧缓冲区中&lt;/p&gt;
&lt;h2 id="基本图元"&gt;基本图元
&lt;/h2&gt;&lt;h3 id="点"&gt;点
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;设置点大小
glPointSize(Glfloat size);&lt;/li&gt;
&lt;li&gt;设置点绘制模式
glBegin(GL_POINTS);
glEnd();&lt;/li&gt;
&lt;li&gt;设置点位置
glVertex3f(Glfloat x, Glfloat y, Glfloat z);&lt;/li&gt;
&lt;li&gt;设置点颜色
glColor3f(Glfloat r, Glfloat g, Glfloat b);&lt;/li&gt;
&lt;li&gt;光滑（反走样）
glEnable (GL_POINT_SMOOTH);
glEnable (GL_BLEND);
glBlendFunc (GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="直线"&gt;直线
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设置线的宽度
glLineWidth(Glfloat width)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置直线绘制模式
glBegin(GL_LINES); 两两连线
glBegin(GL_LINE_STRIP)；持续连线
glBegin(GL_LINE_LOOP)；首尾也相连&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点画线(虚线)
glEnable(GL_LINE_STIPPLE);
glLineStipple(GLint factor, GLushort pattern);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;光滑（反走样）&lt;/p&gt;
&lt;p&gt;glEnable (GL_LINE_SMOOTH);
glEnable (GL_BLEND);
glBlendFunc (GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="三角形"&gt;三角形
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设置三角型绘制模式&lt;/p&gt;
&lt;p&gt;glBegin(GL_TRIANGLES);&lt;/p&gt;
&lt;p&gt;GL_TRIANGLE_STRIP； 三角带&lt;/p&gt;
&lt;p&gt;GL_TRIANGLE_FAN； 三角扇&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;着色模式
glShadeModel(GL_FLAT);
glShadeModel(GL_SMOOTH);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;背面消除
glEnable(GL_CULL_FACE);
glFrontFace(GL_CCW) GL_CW&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多边形模式
glPolygonMode(GL_BACK,GL_LINE);
GL_BACK/GL_FRONT/GL_FRONT_AND_BACK
GL_LINE/GL_POINT/GL_FILL&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="坐标系"&gt;坐标系
&lt;/h2&gt;&lt;p&gt;使用OpenGL方式定义坐标系：&lt;strong&gt;右手&lt;/strong&gt;坐标系&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;世界坐标系&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最大&lt;/strong&gt;的坐标系，描述其他坐标系的参考框架&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;物体（模型）坐标系&lt;/p&gt;
&lt;p&gt;与特定&lt;strong&gt;物体相关&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;随着物体运动而运动&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;惯性坐标系&lt;/p&gt;
&lt;p&gt;物体坐标系到世界坐标系转换的&lt;strong&gt;中间阶段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;位置与物体坐标系一致，方向与世界坐标系一致&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;物体坐标系转世界坐标系：以惯性坐标系为媒介，旋转至惯性坐标系后平移至世界坐标系&lt;/p&gt;
&lt;h2 id="深度缓冲"&gt;深度缓冲
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;显示模式设置为深度缓冲区
glutInitDisplayMode(GLUT_DEPTH);&lt;/li&gt;
&lt;li&gt;设置深度缓冲区允许位
glEnable(GL_DEPTH_TEST);&lt;/li&gt;
&lt;li&gt;每帧绘制前清除深度缓冲区
glClear(GL_DEPTH_BUFFER_BIT);&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="四种变换"&gt;四种变换
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://img-blog.csdnimg.cn/20210122164933255.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpbmdzTWFuNjY2,size_16,color_FFFFFF,t_70#pic_center"
loading="lazy"
alt="三维图形显示和相机拍照之间的对应关系"
&gt;&lt;/p&gt;
&lt;p&gt;模型变换和视点变换本质上是一致的,对一个的变换相当于对另一个反方向变换&lt;/p&gt;
&lt;p&gt;模型视点变换：通过模型变换从局部坐标系转换为世界坐标系，再通过视点变换从世界坐标系转换为视口坐标系&lt;/p&gt;
&lt;h3 id="控制模型"&gt;控制模型
&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;glTranslatef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mz&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;glRotatef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;glRotatef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;glRotatef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;glScalef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="控制视点"&gt;控制视点
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;glRotatef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;glRotatef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;glRotatef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;glTranslatef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mz&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="控制"&gt;控制
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;控制键盘&lt;/p&gt;
&lt;p&gt;glutKeyboardFunc(&amp;amp;myKeyboardFunc);&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="矩阵"&gt;矩阵
&lt;/h2&gt;&lt;p&gt;列向量只可以右乘矩阵（结果仍为列向量），用在OpenGL、多数图形学书籍中。&lt;/p&gt;
&lt;p&gt;向量可由三个线性无关的基向量的线性组合表示&lt;/p&gt;
&lt;p&gt;由基向量构成的矩阵就是坐标系&lt;/p&gt;
&lt;h3 id="空间变换"&gt;空间变换
&lt;/h3&gt;&lt;p&gt;两种变换等价，将物体变换一个量相当于将原始坐标系变换一个相反的量&lt;/p&gt;
&lt;p&gt;在实际的3D对象绘制过程中，实质上是进行的坐标系的变换，以节省大量的计算时间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;变换物体：物体上所有点变换到新位置，坐标改变&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/wKpd0cG/image-20220519115346305.png"
loading="lazy"
alt="image-20220519115346305"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;变换坐标系：物体上的点没有移动，在新的坐标系中描述（计算量小，速度快）&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/Gk2Nhw4/image-20220519115531727.png"
loading="lazy"
alt="image-20220519115531727"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;坐标系变换理解&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正向：&lt;img src="https://i.ibb.co/BBKL4kd/image-20220519121924407.png"
loading="lazy"
alt="image-20220519121924407"
&gt;&lt;/li&gt;
&lt;li&gt;逆向：&lt;img src="https://i.ibb.co/jkCdGkY/image-20220519121837565.png"
loading="lazy"
alt="image-20220519121837565"
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在坐标系M下的a向量表示为 &lt;strong&gt;Ma&lt;/strong&gt;
其在坐标系N下表示为 &lt;strong&gt;b&lt;/strong&gt;= &lt;strong&gt;N-1Ma&lt;/strong&gt;（&lt;strong&gt;Ma=Nb&lt;/strong&gt;）&lt;/p&gt;
&lt;h2 id="旋转"&gt;旋转
&lt;/h2&gt;&lt;p&gt;旋转的正方向:由右手定则判定，拇指向上，四指弯曲。拇指方向是坐标轴正方向，四指弯曲方向则为旋转正方向&lt;/p&gt;
&lt;h2 id="方位"&gt;方位
&lt;/h2&gt;&lt;p&gt;通过与相对已知方位（源方位）的旋转来表述，旋转的量称作角位移&lt;/p&gt;
&lt;p&gt;初始方位：自旋转角度为0，方向为（0,0,-1）（z轴负向），此时欧拉角为（0，0，0）&lt;/p&gt;
&lt;h2 id="欧拉角"&gt;欧拉角
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;角位移&lt;/strong&gt;分解为绕三个&lt;strong&gt;相互垂直的轴&lt;/strong&gt;的三个旋转组成的序列&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;heading/yaw 偏航 h (y轴)&lt;/li&gt;
&lt;li&gt;pitch 俯仰/ 纵摇 p(x轴)&lt;/li&gt;
&lt;li&gt;bank/roll 倾侧/翻滚 b(z轴)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;初始方位角为（0，0，-1），转动为0&lt;/p&gt;
&lt;p&gt;取值范围限定 h,b在-180到180，p在-90到90&lt;/p&gt;
&lt;h2 id="四元数"&gt;四元数
&lt;/h2&gt;&lt;p&gt;包括一个标量和一个3D向量，代表一角位移：绕n转θ角，q与-q代表相同的角位移&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单位四元数&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/Y00LWP9/image-20220622150418003.png"
loading="lazy"
alt="image-20220622150418003"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;共轭四元数：向量部分变负&lt;/p&gt;
&lt;p&gt;q*=[w v]*=[w -v]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四元数的逆：共轭除以模的平方&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/VS04Bfr/image-20220622150114195.png"
loading="lazy"
alt="image-20220622150114195"
&gt;&lt;/p&gt;
&lt;p&gt;qq-1=[1,0]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四元数乘法&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/CJN1pnf/image-20220622145812616.png"
loading="lazy"
alt="image-20220622145812616"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;满足结合律，不满足交换律&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四元数乘的模等于模的乘积，单位四元数的乘仍然是单位四元数&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/r0mKbYc/image-20220622150055802.png"
loading="lazy"
alt="image-20220622150055802"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四元数乘积的逆等于各四元数逆反顺序相乘&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/Rhtfyz3/image-20220622150040033.png"
loading="lazy"
alt="image-20220622150040033"
&gt;&lt;/p&gt;
&lt;p&gt;扩展3d点(x,y,z)到四元数空间为p=[0,(x,y,z)]&lt;/p&gt;
&lt;p&gt;设q为单位化四元数，n为旋转轴,θ为旋转角。则p绕n旋转θ公式为：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/BGNxFJf/image-20220622150643141.png"
loading="lazy"
alt="image-20220622150643141"
&gt;&lt;/p&gt;
&lt;p&gt;若q为一般形式的四元数，可通过标准化转换求得旋转轴和旋转角度&lt;/p&gt;
&lt;p&gt;连续旋转：先转a,再转b，等于执行ba旋转&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/4Jt5XWk/image-20220622152104195.png"
loading="lazy"
alt="image-20220622152104195"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新乘法&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/2hbFNg5/image-20220622152016441.png"
loading="lazy"
alt="image-20220622152016441"
&gt;&lt;/p&gt;
&lt;p&gt;在新四元数乘法定义下：先a旋转，再b旋转，等于执行一次ab旋转。乘法顺序与旋转顺序相同。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/x5wPBj8/image-20220622152043474.png"
loading="lazy"
alt="image-20220622152043474"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/sQGm8vZ/image-20220622152213642.png"
loading="lazy"
alt="image-20220622152213642"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四元数的差：一个方位到另一个方位的角位移&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/HxSZM6w/image-20220622152602016.png"
loading="lazy"
alt="image-20220622152602016"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四元数点乘：对于单位四元数a,b有-1&amp;lt;=a*b&amp;lt;=1，其点乘越大，则a、b所代表的角位移越相似&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/X8wCyHG/image-20220622152707212.png"
loading="lazy"
alt="image-20220622152707212"
&gt;&lt;/p&gt;
&lt;p&gt;θ为a、b之差d的夹角，则&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/JxKXnjS/image-20220622152922378.png"
loading="lazy"
alt="image-20220622152922378"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四元数对数&lt;/p&gt;
&lt;p&gt;记α为θ/2,定义：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/1v68G7z/image-20220622153042707.png"
loading="lazy"
alt="image-20220622153042707"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四元数指数&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/Ypc7VG8/image-20220622153158545.png"
loading="lazy"
alt="image-20220622153158545"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四元数数乘：标量值直接乘以四元数中每个分量，满足交换律&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/pZGT2dg/image-20220622153247625.png"
loading="lazy"
alt="image-20220622153247625"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四元数的幂：表示角位移的t倍&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/jWRK1mJ/image-20220622154310060.png"
loading="lazy"
alt="image-20220622154310060"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="四元数插值"&gt;四元数插值
&lt;/h3&gt;&lt;h4 id="slerp插值"&gt;Slerp插值
&lt;/h4&gt;&lt;p&gt;开始四元数q0和结束四元数q1,差值参数t，0≤t ≤1，slerp(q0,q1,t)返回q0到q1间的方位&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/QvxzsrT/image-20220622154907238.png"
loading="lazy"
alt="image-20220622154907238"
&gt;&lt;/p&gt;
&lt;p&gt;简化&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/LZ6Qtq0/image-20220622155729925.png"
loading="lazy"
alt="image-20220622155729925"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;四元数加法（实部实部相加，虚部虚部相加），要考虑两个四元数w方向是否相同。如果相反则改为相减。&lt;/li&gt;
&lt;li&gt;k0+k1≠1，因此插值后的四元数模不为1，需要单位化后使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="squad插值"&gt;Squad插值
&lt;/h4&gt;&lt;p&gt;实现多个方位角之间的平滑序列，不介绍&lt;/p&gt;
&lt;h2 id="视点控制"&gt;视点控制
&lt;/h2&gt;&lt;p&gt;glRotated(-m_hpb[2],0,0,1); //b 绕z轴转
glRotated(-m_hpb[1],1,0,0); //p 绕x轴转
glRotated(-m_hpb[0],0,1,0); //h 绕y轴转
glTranslated(-m_pos.x,-m_pos.y,-m_pos.z);
视点位置记录在m_pos,视点方位角在m_hpb&lt;/p&gt;
&lt;h2 id="包围盒"&gt;包围盒
&lt;/h2&gt;&lt;p&gt;AABB（axially aligned bounding box)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对变换后物体重新计算AABB&lt;/li&gt;
&lt;li&gt;对AABB做和物体相同变换(不保证轴对齐，非AABB)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="光照"&gt;光照
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;启动光照
glEnable(GL_LIGHTING);
glEnable(GL_LIGHT0);&lt;/li&gt;
&lt;li&gt;创建光源
glLight{if}[v](GLenum light , GLenum pname, TYPE param)
Pname:
GL_AMBIENT 环境反射
GL_DIFFUSE 漫反射
GL_SPECULAR 镜面反射
GL_POSITION 当第w位为0时表示平行光源，为1表示点光源&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="纹理"&gt;纹理
&lt;/h2&gt;&lt;h2 id="特殊效果"&gt;特殊效果
&lt;/h2&gt;&lt;h2 id="opengl内部矩阵"&gt;OpenGL内部矩阵
&lt;/h2&gt;&lt;h3 id="gl_modelview模型视图矩阵"&gt;GL_MODELVIEW（模型视图矩阵）
&lt;/h3&gt;&lt;p&gt;把空间点从&lt;strong&gt;模型坐标系&lt;/strong&gt;最终变换到&lt;strong&gt;眼坐标系&lt;/strong&gt;下，包括视图矩阵和模型矩阵的两个矩阵的乘积，在绘制对象的时候执行变换，把glBegin和glEnd之间的顶点乘以当前模型视图矩阵得到眼坐标系下的空间坐标。&lt;/p&gt;
&lt;h3 id="gl_projection投影矩阵"&gt;GL_PROJECTION（投影矩阵）
&lt;/h3&gt;&lt;p&gt;把&lt;strong&gt;眼空间坐标系&lt;/strong&gt;下的视锥体内点转变到&lt;strong&gt;矩形规范体&lt;/strong&gt;（裁剪坐标系）内的点坐标。便于后续操作。转换后的坐标范围是(-1,-1,-1)~(1,1,1)。范围外点不在视锥体内，要被裁剪掉，包括透视投影或者平行投影两类。&lt;/p&gt;
&lt;p&gt;裁剪坐标=投影矩阵*眼坐标
投影结果：x∈[-1,1] y∈[-1,1] z∈[-1,1]
z转换到0~1区间后存入深度缓冲：z’=(z+1)*0.5&lt;/p&gt;
&lt;h3 id="gl_texture纹理矩阵"&gt;GL_TEXTURE（纹理矩阵）
&lt;/h3&gt;&lt;h2 id="opengl函数"&gt;OpenGL函数
&lt;/h2&gt;&lt;h3 id="glreadpixels"&gt;glReadPixels
&lt;/h3&gt;&lt;h3 id="glutinitdisplaymodeunsigned-int-mode"&gt;glutInitDisplayMode(unsigned int mode);
&lt;/h3&gt;&lt;p&gt;设置初始显示模式&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;对应宏定义&lt;/th&gt;
&lt;th&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GLUT_RGB&lt;/td&gt;
&lt;td&gt;0x0000&lt;/td&gt;
&lt;td&gt;指定 &lt;a class="link" href="https://baike.baidu.com/item/RGB" target="_blank" rel="noopener"
&gt;RGB&lt;/a&gt; 颜色模式的窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GLUT_RGBA&lt;/td&gt;
&lt;td&gt;0x0000&lt;/td&gt;
&lt;td&gt;指定 &lt;a class="link" href="https://baike.baidu.com/item/RGBA" target="_blank" rel="noopener"
&gt;RGBA&lt;/a&gt; 颜色模式的窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GLUT_INDEX&lt;/td&gt;
&lt;td&gt;0x0001&lt;/td&gt;
&lt;td&gt;指定颜色索引模式的窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GLUT_SINGLE&lt;/td&gt;
&lt;td&gt;0x0000&lt;/td&gt;
&lt;td&gt;指定单缓存窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GLUT_DOUBLE&lt;/td&gt;
&lt;td&gt;0x0002&lt;/td&gt;
&lt;td&gt;指定双缓存窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GLUT_ACCUM&lt;/td&gt;
&lt;td&gt;0x0004&lt;/td&gt;
&lt;td&gt;窗口使用累加缓存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GLUT_ALPHA&lt;/td&gt;
&lt;td&gt;0x0008&lt;/td&gt;
&lt;td&gt;窗口的颜色分量包含 alpha 值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GLUT_DEPTH&lt;/td&gt;
&lt;td&gt;0x0010&lt;/td&gt;
&lt;td&gt;窗口使用深度缓存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GLUT_STENCIL&lt;/td&gt;
&lt;td&gt;0x0020&lt;/td&gt;
&lt;td&gt;窗口使用模板缓存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GLUT_MULTISAMPLE&lt;/td&gt;
&lt;td&gt;0x0080&lt;/td&gt;
&lt;td&gt;指定支持多样本功能的窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GLUT_STEREO&lt;/td&gt;
&lt;td&gt;0x0100&lt;/td&gt;
&lt;td&gt;指定立体窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GLUT_LUMINANCE&lt;/td&gt;
&lt;td&gt;0x0200&lt;/td&gt;
&lt;td&gt;窗口使用亮度颜色模型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="glclearcolorrbga"&gt;glClearColor(r,b,g,a);
&lt;/h3&gt;&lt;p&gt;背景颜色&lt;/p&gt;
&lt;h3 id="glclearglbitfield-mask"&gt;glClear(GLbitfield mask);
&lt;/h3&gt;&lt;p&gt;GLbitfield：可以使用 | 运算符组合不同的缓冲标志位，表明&lt;strong&gt;需要清除的缓冲&lt;/strong&gt;，例如glClear（GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT）表示要清除颜色缓冲以及深度缓冲，可以使用以下标志位&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt; GL_COLOR_BUFFER_BIT: 颜色缓冲
GL_DEPTH_BUFFER_BIT: 深度缓冲
GL_ACCUM_BUFFER_BIT: 累积缓冲
GL_STENCIL_BUFFER_BIT: 模板缓冲
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　也就是用glClearColor或者glClearDepth、glClearIndex、glClearStencil、glClearAccum等函数所指定的值来清除指定的缓冲区&lt;/p&gt;
&lt;h3 id="glflushglfinish"&gt;glFlush()/glFinish()
&lt;/h3&gt;&lt;p&gt;强制刷新缓冲，保证绘图命令将被执行&lt;/p&gt;
&lt;h3 id="glswapbuffer"&gt;glSwapBuffer()
&lt;/h3&gt;&lt;h3 id="glbegin"&gt;glBegin();
&lt;/h3&gt;&lt;p&gt;glBegin表示一组用于定义一个或者多个图元的顶点的开始&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;GL_POINTS 单个顶点集
GL_LINES 多组双顶点线段,如果顶点数为奇数，最后一个顶点就会被忽略。
GL_LINE_STRIP 不闭合折线
GL_LINE_LOOP 闭合折线
GL_POLYGON 单个简单填充凸多边形
GL_TRIANGLES 多组独立填充三角形
GL_TRIANGLE_STRIP 线型连续填充三角形串
GL_TRIANGLE_FAN 扇形连续填充三角形串
GL_QUADS 多组独立填充四边形
GL_QUAD_STRIP 连续填充四边形串
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;glTranslatef()等此类几何转换接口在glBegin()和glEnd()之间是无效的。因此，如果想对模型的位置进行转换，要在调用glBegin()和glEnd()接口对之前行处理。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;在glBegin()和glEnd()之间可调用的函数如下：
glVertex()：设置顶点坐标 　　
glColor()：设置当前颜色 　
glIndex()：设置当前颜色表 　
glNormal()：设置法向坐标 　
glEvalCoord()：产生坐标 　
glCallList()、glCallLists()：执行显示列表 　
glTexCoord()：设置纹理坐标 　
glEdgeFlag()：控制边界绘制 　
glMaterial()：设置材质　
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="glend"&gt;glEnd();
&lt;/h3&gt;&lt;p&gt;glEnd表示一组用于定义一个或者多个图元的顶点的结束&lt;/p&gt;
&lt;h3 id="glenable"&gt;glEnable():
&lt;/h3&gt;&lt;p&gt;用于启用各种功能。功能由参数决定&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GL_ALPHA_TEST&lt;/td&gt;
&lt;td&gt;4864&lt;/td&gt;
&lt;td&gt;跟据函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129562173721267500ID146.html" target="_blank" rel="noopener"
&gt;glAlphaFunc&lt;/a&gt;的条件要求来决定图形透明的层度是否显示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_AUTO_NORMAL&lt;/td&gt;
&lt;td&gt;3456&lt;/td&gt;
&lt;td&gt;执行后，图形能把光反射到各个方向&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_BLEND&lt;/td&gt;
&lt;td&gt;3042&lt;/td&gt;
&lt;td&gt;启用颜色混合。例如实现半透明效果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_CLIP_PLANE0 ~ GL_CLIP_PLANE5&lt;/td&gt;
&lt;td&gt;12288 ~ 12283&lt;/td&gt;
&lt;td&gt;根据函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129562975344837500ID147.html" target="_blank" rel="noopener"
&gt;glClipPlane&lt;/a&gt;的条件要求 启用图形切割管道。这里指六种缓存管道&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_COLOR_LOGIC_OP&lt;/td&gt;
&lt;td&gt;3058&lt;/td&gt;
&lt;td&gt;启用每一像素的色彩为位逻辑运算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_COLOR_MATERIAL&lt;/td&gt;
&lt;td&gt;2930&lt;/td&gt;
&lt;td&gt;执行后，图形（材料）将根据光线的照耀进行反射 反射要求由函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129563854289985000ID148.html" target="_blank" rel="noopener"
&gt;glColorMaterial&lt;/a&gt;进行设定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_CULL_FACE&lt;/td&gt;
&lt;td&gt;2884&lt;/td&gt;
&lt;td&gt;根据函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129564426328125000ID149.html" target="_blank" rel="noopener"
&gt;glCullFace&lt;/a&gt;要求启用隐藏图形材料的面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_DEPTH_TEST&lt;/td&gt;
&lt;td&gt;2929&lt;/td&gt;
&lt;td&gt;启用深度测试 根据坐标的远近自动隐藏被遮住的图形（材料）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_DITHER&lt;/td&gt;
&lt;td&gt;3024&lt;/td&gt;
&lt;td&gt;启用抖动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_FOG&lt;/td&gt;
&lt;td&gt;2912&lt;/td&gt;
&lt;td&gt;雾化效果 例如距离越远越模糊&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_INDEX_LOGIC_OP&lt;/td&gt;
&lt;td&gt;3057&lt;/td&gt;
&lt;td&gt;逻辑操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_LIGHT0 ~ GL_LIGHT7&lt;/td&gt;
&lt;td&gt;16384 ~ 16391&lt;/td&gt;
&lt;td&gt;启用0号灯到7号灯(光源) 光源要求由函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129564581700000000ID150.html" target="_blank" rel="noopener"
&gt;glLight&lt;/a&gt;函数来完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_LIGHTING&lt;/td&gt;
&lt;td&gt;2896&lt;/td&gt;
&lt;td&gt;启用灯源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_LINE_SMOOTH&lt;/td&gt;
&lt;td&gt;2848&lt;/td&gt;
&lt;td&gt;执行后，过虑线段的锯齿&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_LINE_STIPPLE&lt;/td&gt;
&lt;td&gt;2852&lt;/td&gt;
&lt;td&gt;执行后，画虚线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_LOGIC_OP&lt;/td&gt;
&lt;td&gt;3057&lt;/td&gt;
&lt;td&gt;逻辑操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_MAP1_COLOR_4&lt;/td&gt;
&lt;td&gt;3472&lt;/td&gt;
&lt;td&gt;根据函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566170546093750ID151.html" target="_blank" rel="noopener"
&gt;Map1&lt;/a&gt;对贝赛尔曲线的设置， 启用&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566173102187500ID152.html" target="_blank" rel="noopener"
&gt;glEvalCoord1&lt;/a&gt;,glEvalMesh1,glEvalPoint1 生成RGBA曲线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_MAP1_INDEX&lt;/td&gt;
&lt;td&gt;3473&lt;/td&gt;
&lt;td&gt;根据函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566170546093750ID151.html" target="_blank" rel="noopener"
&gt;Map1&lt;/a&gt;对贝赛尔曲线的设置， 启用&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566173102187500ID152.html" target="_blank" rel="noopener"
&gt;glEvalCoord1&lt;/a&gt;,glEvalMesh1,glEvalPoint1 生成颜色索引曲线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_MAP1_NORMAL&lt;/td&gt;
&lt;td&gt;3474&lt;/td&gt;
&lt;td&gt;根据函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566170546093750ID151.html" target="_blank" rel="noopener"
&gt;Map1&lt;/a&gt;对贝赛尔曲线的设置， 启用&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566173102187500ID152.html" target="_blank" rel="noopener"
&gt;glEvalCoord1&lt;/a&gt;,glEvalMesh1,glEvalPoint1 生成法线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_MAP1_TEXTURE_COORD_1&lt;/td&gt;
&lt;td&gt;3475&lt;/td&gt;
&lt;td&gt;根据函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566170546093750ID151.html" target="_blank" rel="noopener"
&gt;Map1&lt;/a&gt;对贝赛尔曲线的设置， 启用&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566173102187500ID152.html" target="_blank" rel="noopener"
&gt;glEvalCoord1&lt;/a&gt;,glEvalMesh1,glEvalPoint1 生成文理坐标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_MAP1_TEXTURE_COORD_2&lt;/td&gt;
&lt;td&gt;3476&lt;/td&gt;
&lt;td&gt;根据函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566170546093750ID151.html" target="_blank" rel="noopener"
&gt;Map1&lt;/a&gt;对贝赛尔曲线的设置， 启用&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566173102187500ID152.html" target="_blank" rel="noopener"
&gt;glEvalCoord1&lt;/a&gt;,glEvalMesh1,glEvalPoint1 生成文理坐标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_MAP1_TEXTURE_COORD_3&lt;/td&gt;
&lt;td&gt;3477&lt;/td&gt;
&lt;td&gt;根据函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566170546093750ID151.html" target="_blank" rel="noopener"
&gt;Map1&lt;/a&gt;对贝赛尔曲线的设置， 启用&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566173102187500ID152.html" target="_blank" rel="noopener"
&gt;glEvalCoord1&lt;/a&gt;,glEvalMesh1,glEvalPoint1 生成文理坐标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_MAP1_TEXTURE_COORD_4&lt;/td&gt;
&lt;td&gt;3478&lt;/td&gt;
&lt;td&gt;根据函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566170546093750ID151.html" target="_blank" rel="noopener"
&gt;Map1&lt;/a&gt;对贝赛尔曲线的设置， 启用glEvalCoord1,glEvalMesh1,glEvalPoint1 生成文理坐标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_MAP1_VERTEX_3&lt;/td&gt;
&lt;td&gt;3479&lt;/td&gt;
&lt;td&gt;根据函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566170546093750ID151.html" target="_blank" rel="noopener"
&gt;Map1&lt;/a&gt;对贝赛尔曲线的设置， 启用&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566173102187500ID152.html" target="_blank" rel="noopener"
&gt;glEvalCoord1&lt;/a&gt;,glEvalMesh1,glEvalPoint1 在三维空间里生成曲线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_MAP1_VERTEX_4&lt;/td&gt;
&lt;td&gt;3480&lt;/td&gt;
&lt;td&gt;根据函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566170546093750ID151.html" target="_blank" rel="noopener"
&gt;Map1&lt;/a&gt;对贝赛尔曲线的设置， 启用&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566173102187500ID152.html" target="_blank" rel="noopener"
&gt;glEvalCoord1&lt;/a&gt;,glEvalMesh1,glEvalPoint1 在四维空间里生成法线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_MAP2_COLOR_4&lt;/td&gt;
&lt;td&gt;3504&lt;/td&gt;
&lt;td&gt;根据函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566170546093750ID151.html" target="_blank" rel="noopener"
&gt;Map2&lt;/a&gt;对贝赛尔曲线的设置， 启用&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566173102187500ID152.html" target="_blank" rel="noopener"
&gt;glEvalCoord2&lt;/a&gt;,glEvalMesh2,glEvalPoint2 生成RGBA曲线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_MAP2_INDEX&lt;/td&gt;
&lt;td&gt;3505&lt;/td&gt;
&lt;td&gt;根据函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566170546093750ID151.html" target="_blank" rel="noopener"
&gt;Map2&lt;/a&gt;对贝赛尔曲线的设置， 启用&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566173102187500ID152.html" target="_blank" rel="noopener"
&gt;glEvalCoord2&lt;/a&gt;,glEvalMesh2,glEvalPoint2 生成颜色索引&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_MAP2_NORMAL&lt;/td&gt;
&lt;td&gt;3506&lt;/td&gt;
&lt;td&gt;根据函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566170546093750ID151.html" target="_blank" rel="noopener"
&gt;Map2&lt;/a&gt;对贝赛尔曲线的设置， 启用&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566173102187500ID152.html" target="_blank" rel="noopener"
&gt;glEvalCoord2&lt;/a&gt;,glEvalMesh2,glEvalPoint2 生成法线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_MAP2_TEXTURE_COORD_1&lt;/td&gt;
&lt;td&gt;3507&lt;/td&gt;
&lt;td&gt;根据函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566170546093750ID151.html" target="_blank" rel="noopener"
&gt;Map2&lt;/a&gt;对贝赛尔曲线的设置， 启用&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566173102187500ID152.html" target="_blank" rel="noopener"
&gt;glEvalCoord2&lt;/a&gt;,glEvalMesh2,glEvalPoint2 生成纹理坐标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_MAP2_TEXTURE_COORD_2&lt;/td&gt;
&lt;td&gt;3508&lt;/td&gt;
&lt;td&gt;根据函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566170546093750ID151.html" target="_blank" rel="noopener"
&gt;Map2&lt;/a&gt;对贝赛尔曲线的设置， 启用&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566173102187500ID152.html" target="_blank" rel="noopener"
&gt;glEvalCoord2&lt;/a&gt;,glEvalMesh2,glEvalPoint2 生成纹理坐标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_MAP2_TEXTURE_COORD_3&lt;/td&gt;
&lt;td&gt;3509&lt;/td&gt;
&lt;td&gt;根据函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566170546093750ID151.html" target="_blank" rel="noopener"
&gt;Map2&lt;/a&gt;对贝赛尔曲线的设置， 启用&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566173102187500ID152.html" target="_blank" rel="noopener"
&gt;glEvalCoord2&lt;/a&gt;,glEvalMesh2,glEvalPoint2 生成纹理坐标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_MAP2_TEXTURE_COORD_4&lt;/td&gt;
&lt;td&gt;3510&lt;/td&gt;
&lt;td&gt;根据函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566170546093750ID151.html" target="_blank" rel="noopener"
&gt;Map2&lt;/a&gt;对贝赛尔曲线的设置， 启用&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566173102187500ID152.html" target="_blank" rel="noopener"
&gt;glEvalCoord2&lt;/a&gt;,glEvalMesh2,glEvalPoint2 生成纹理坐标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_MAP2_VERTEX_3&lt;/td&gt;
&lt;td&gt;3511&lt;/td&gt;
&lt;td&gt;根据函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566170546093750ID151.html" target="_blank" rel="noopener"
&gt;Map2&lt;/a&gt;对贝赛尔曲线的设置， 启用&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566173102187500ID152.html" target="_blank" rel="noopener"
&gt;glEvalCoord2&lt;/a&gt;,glEvalMesh2,glEvalPoint2 在三维空间里生成曲线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_MAP2_VERTEX_4&lt;/td&gt;
&lt;td&gt;3512&lt;/td&gt;
&lt;td&gt;根据函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566170546093750ID151.html" target="_blank" rel="noopener"
&gt;Map2&lt;/a&gt;对贝赛尔曲线的设置， 启用&lt;a class="link" href="http://www.cx2012.com/Article/ArText129566173102187500ID152.html" target="_blank" rel="noopener"
&gt;glEvalCoord2&lt;/a&gt;,glEvalMesh2,glEvalPoint2 在三维空间里生成曲线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_NORMALIZE&lt;/td&gt;
&lt;td&gt;2977&lt;/td&gt;
&lt;td&gt;根据函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129567069415160000ID153.html" target="_blank" rel="noopener"
&gt;glNormal&lt;/a&gt;的设置条件，启用法向量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_POINT_SMOOTH&lt;/td&gt;
&lt;td&gt;2832&lt;/td&gt;
&lt;td&gt;执行后，过虑线点的锯齿&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_POLYGON_OFFSET_FILL&lt;/td&gt;
&lt;td&gt;32823&lt;/td&gt;
&lt;td&gt;根据函数glPolygonOffset的设置，启用面的深度偏移&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_POLYGON_OFFSET_LINE&lt;/td&gt;
&lt;td&gt;10754&lt;/td&gt;
&lt;td&gt;根据函数glPolygonOffset的设置，启用线的深度偏移&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_POLYGON_OFFSET_POINT&lt;/td&gt;
&lt;td&gt;10753&lt;/td&gt;
&lt;td&gt;根据函数glPolygonOffset的设置，启用点的深度偏移&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_POLYGON_SMOOTH&lt;/td&gt;
&lt;td&gt;2881&lt;/td&gt;
&lt;td&gt;过虑图形（多边形）的锯齿&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_POLYGON_STIPPLE&lt;/td&gt;
&lt;td&gt;2882&lt;/td&gt;
&lt;td&gt;执行后，多边形为矢量画图&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_SCISSOR_TEST&lt;/td&gt;
&lt;td&gt;3089&lt;/td&gt;
&lt;td&gt;根据函数&lt;a class="link" href="http://www.cx2012.com/Article/ArText129568692124062500ID155.html" target="_blank" rel="noopener"
&gt;glScissor&lt;/a&gt;设置，启用图形剪切&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_STENCIL_TEST&lt;/td&gt;
&lt;td&gt;2960&lt;/td&gt;
&lt;td&gt;启用模板测试&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_TEXTURE_1D&lt;/td&gt;
&lt;td&gt;3552&lt;/td&gt;
&lt;td&gt;启用一维文理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_TEXTURE_2D&lt;/td&gt;
&lt;td&gt;3553&lt;/td&gt;
&lt;td&gt;启用二维文理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_TEXTURE_GEN_Q&lt;/td&gt;
&lt;td&gt;3171&lt;/td&gt;
&lt;td&gt;根据函数glTexGen，启用纹理处理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_TEXTURE_GEN_R&lt;/td&gt;
&lt;td&gt;3170&lt;/td&gt;
&lt;td&gt;根据函数glTexGen，启用纹理处理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_TEXTURE_GEN_S&lt;/td&gt;
&lt;td&gt;3168&lt;/td&gt;
&lt;td&gt;根据函数glTexGen，启用纹理处理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GL_TEXTURE_GEN_T&lt;/td&gt;
&lt;td&gt;3169&lt;/td&gt;
&lt;td&gt;根据函数glTexGen，启用纹理处理&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="gldisable"&gt;glDisable()
&lt;/h3&gt;&lt;p&gt;用来关闭的。与glDisable()参数一致&lt;/p&gt;
&lt;h3 id="glshademodel"&gt;glShadeModel()
&lt;/h3&gt;&lt;p&gt;参数mode可以是GL_SMOOTH（默认值）或GL_FLAT。采用恒定着色时（即GL_FLAT），使用图元中某个顶点的颜色来渲染整个图元。
在使用光滑着色时（即GL_SMOOTH），独立的处理图元中各个顶点的颜色。对于线段图元，线段上各点的颜色将根据两个顶点的颜色通过差值得到。对于多边形图元，多边形内部区域的颜色将根据所有顶点的颜色差值得到。&lt;/p&gt;
&lt;h3 id="glfrontfaceglenum-mode"&gt;&lt;strong&gt;glFrontFace&lt;/strong&gt;(GLenum &lt;em&gt;mode&lt;/em&gt;)
&lt;/h3&gt;&lt;p&gt;作用是控制多边形的正面是如何决定的&lt;/p&gt;
&lt;p&gt;GL_CCW 表示窗口坐标上投影多边形的顶点顺序为逆时针方向的表面为正面。&lt;/p&gt;
&lt;p&gt;GL_CW 表示顶点顺序为顺时针方向的表面为正面。&lt;/p&gt;
&lt;p&gt;在默认情况下，mode是GL_CCW&lt;/p&gt;
&lt;h3 id="glpolygonmodeglenum-faceglenum-mode"&gt;glPolygonMode(GLenum face,GLenum mode)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;face这个参数确定显示模式将适用于物体的哪些部分，控制多边形的正面和背面的绘图模式：&lt;/p&gt;
&lt;p&gt;GL_FRONT表示显示模式将适用于物体的前向面（也就是物体能看到的面）&lt;/p&gt;
&lt;p&gt;GL_BACK表示显示模式将适用于物体的后向面（也就是物体上不能看到的面）&lt;/p&gt;
&lt;p&gt;GL_FRONT_AND_BACK表示显示模式将适用于物体的所有面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mode这个参数确定选中的物体的面以何种方式显示（显示模式）：&lt;/p&gt;
&lt;p&gt;GL_POINT表示显示顶点，多边形用点显示&lt;/p&gt;
&lt;p&gt;GL_LINE表示显示线段，多边形用轮廓显示&lt;/p&gt;
&lt;p&gt;GL_FILL表示显示面，多边形采用填充形式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="gltranslatefxyz"&gt;glTranslatef(x,y,z)
&lt;/h3&gt;&lt;p&gt;沿X轴正方向平移x个单位(x是有符号数)&lt;/p&gt;
&lt;p&gt;沿Y轴正方向平移y个单位(y是有符号数)&lt;/p&gt;
&lt;p&gt;沿Z轴正方向平移z个单位(z是有符号数)&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/jJfcHVs/image-20220519165435701.png"
loading="lazy"
alt="image-20220519165435701"
&gt;&lt;/p&gt;
&lt;h3 id="glscalefxyz"&gt;glScalef(x,y,z)
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/yyv57WT/image-20220519165740518.png"
loading="lazy"
alt="image-20220519165740518"
&gt;&lt;/p&gt;
&lt;h3 id="glrotatefangleabc"&gt;glRotatef(angle,a,b,c)
&lt;/h3&gt;&lt;p&gt;绕过原点与（a,b,c）的轴正方向旋转angle度&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/r7SZ6S0/image-20220520150625381.png"
loading="lazy"
alt="image-20220520150625381"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/W0DZqH0/image-20220519170552122.png"
loading="lazy"
alt="image-20220519170552122"
&gt;&lt;/p&gt;
&lt;h3 id="glloadidentity"&gt;&lt;strong&gt;glLoadIdentity()&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;重置当前指定的矩阵为单位矩阵&lt;/p&gt;
&lt;p&gt;glViewport(GLint x,GLint y,GLsizei width, GLsizei height);&lt;/p&gt;
&lt;p&gt;左下角坐标，宽，高&lt;/p&gt;
&lt;h3 id="glclipplaneglenum-planeconst-gldouble-equation"&gt;glClipPlane(GLenum plane,Const GLdouble *equation);
&lt;/h3&gt;&lt;p&gt;定义一个裁剪平面，quation参数指向平面方程Ax + By + Cz + D = 0的4个系数。&lt;/p&gt;
&lt;h3 id="gluunproject"&gt;gluUnProject()
&lt;/h3&gt;&lt;p&gt;int WINAPI gluUnProject(
GLdouble winx,
GLdouble winy,
GLdouble winz,
const GLdouble modelMatrix[16],
const GLdouble projMatrix[16],
const GLint viewport[4],
GLdouble *objx,
GLdouble *objy,
GLdouble *objz
);&lt;/p&gt;
&lt;p&gt;(winx,winy,winz)为要映射的窗口坐标&lt;/p&gt;
&lt;p&gt;(objx,objy,objz)为计算的 x&lt;/p&gt;
&lt;p&gt;modelview 矩阵从 glGetDoublev 调用&lt;/p&gt;
&lt;p&gt;projMatrix投影矩阵从 glGetDoublev 调用&lt;/p&gt;
&lt;p&gt;视区从 glGetIntegerv 调用&lt;/p&gt;
&lt;h3 id="glulookat"&gt;gluLookAt()
&lt;/h3&gt;&lt;pre tabindex="0"&gt;&lt;code&gt;gluLookAt(GLdouble eyex,GLdouble eyey,GLdouble eyez,GLdouble centerx,GLdouble centery,GLdouble centerz,GLdouble upx,GLdouble upy,GLdouble upz);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第一组eyex, eyey,eyez 相机在世界坐标的位置&lt;/p&gt;
&lt;p&gt;第二组centerx,centery,centerz &lt;a class="link" href="https://baike.baidu.com/item/%e7%9b%b8%e6%9c%ba%e9%95%9c%e5%a4%b4/10294376" target="_blank" rel="noopener"
&gt;相机镜头&lt;/a&gt;对准的物体在世界坐标的位置&lt;/p&gt;
&lt;p&gt;第三组upx,upy,upz 相机向上的方向在世界坐标中的方向&lt;/p&gt;
&lt;p&gt;你把相机想象成为你自己的脑袋：&lt;/p&gt;
&lt;p&gt;第一组数据就是脑袋的位置&lt;/p&gt;
&lt;p&gt;第二组数据就是眼睛看的物体的位置&lt;/p&gt;
&lt;p&gt;第三组就是头顶朝向的方向（因为你可以歪着头看同一个物体）&lt;/p&gt;
&lt;h3 id="gluperspectivegldouble-fovy-gldouble-aspect-gldouble-znear-gldouble-zfar-"&gt;gluPerspective(GLdouble fovy, GLdouble aspect, GLdouble zNear, GLdouble zFar );
&lt;/h3&gt;&lt;p&gt;fovy 上平面与下平面的夹角°
aspect 屏幕的宽高比
zNear 近视点距离
zFar 远视点距离&lt;/p&gt;
&lt;h3 id="void-glortho-gldouble-left-gldouble-right-gldouble-bottom-gldouble-top-gldouble-znear-gldouble-zfar-"&gt;void glOrtho( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );
&lt;/h3&gt;&lt;p&gt;正交投影&lt;/p&gt;
&lt;h3 id="glpushmatrix"&gt;glPushMatrix()
&lt;/h3&gt;&lt;p&gt;将当前矩阵保存入&lt;a class="link" href="https://baike.baidu.com/item/%e5%a0%86%e6%a0%88" target="_blank" rel="noopener"
&gt;堆栈&lt;/a&gt;顶(保存当前矩阵)&lt;/p&gt;
&lt;h3 id="glpopmatrix"&gt;glPopMatrix()
&lt;/h3&gt;&lt;p&gt;当经过一系列的变换后，栈顶矩阵被修改，此时调用glPopMatrix()时，栈顶矩阵被弹出，且又会恢复为原来的状态。glPushMatrix()和glPopMatrix()的配对使用可以消除上一次的变换对本次变换的影响。使本次变换是以世界坐标系的原点为参考点进行。&lt;/p&gt;
&lt;h3 id="glmatrixmode"&gt;glMatrixMode()
&lt;/h3&gt;&lt;p&gt;mode 指定哪一个矩阵堆栈是下一个矩阵操作的目标,可选值:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GL_MODELVIEW,对模型视图矩阵堆栈应用随后的矩阵操作。可以在执行此命令后，输出自己的物体图形了。&lt;/li&gt;
&lt;li&gt;GL_PROJECTION,对投影矩阵堆栈应用随后的矩阵操作。可以在执行此命令后，为我们的场景增加透视。&lt;/li&gt;
&lt;li&gt;GL_TEXTURE,对纹理矩阵堆栈应用随后的矩阵操作。可以在执行此命令后，为我们的图形增加纹理贴图。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="glloadmatrixfm"&gt;glLoadMatrixf(M)
&lt;/h3&gt;&lt;p&gt;replace the current &lt;a class="link" href="https://so.csdn.net/so/search?q=matrix&amp;amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener"
&gt;matrix&lt;/a&gt; with an arbitrary matrix M&lt;/p&gt;
&lt;h3 id="glmultmatrixfm"&gt;glMultMatrixf(M)
&lt;/h3&gt;&lt;p&gt;将当前矩阵乘以任意矩阵&lt;/p&gt;
&lt;h3 id="glkeybordfuncunsigned-char-keyint-xint-y"&gt;glKeybordFunc(unsigned char key,int x,int y)
&lt;/h3&gt;&lt;p&gt;键盘回调函数&lt;/p&gt;
&lt;h3 id="gluttimerfuncunsigned-int-millis-void-funcint-value-int-value"&gt;glutTimerFunc(unsigned int millis, void (*func)(int value), int value)
&lt;/h3&gt;&lt;p&gt;调用毫秒数，回调Timer，Timer的标识值&lt;/p&gt;
&lt;p&gt;其真实意义是在millis毫秒后回调Timer,因此应在回调Timer中重新调用该函数以形成循环&lt;/p&gt;</description></item><item><title>【计算机组成原理】笔记</title><link>https://dyhes.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="hint"&gt;Hint
&lt;/h2&gt;&lt;h3 id="chapter-1"&gt;chapter 1
&lt;/h3&gt;&lt;p&gt;存储程序概念&lt;/p&gt;
&lt;h3 id="chapter-2"&gt;chapter 2
&lt;/h3&gt;&lt;p&gt;重点IEEE754&lt;/p&gt;
&lt;h3 id="chapter-3"&gt;chapter 3
&lt;/h3&gt;&lt;p&gt;w9 c1&lt;/p&gt;
&lt;p&gt;3.4.10.13.14.18.22&lt;/p&gt;
&lt;p&gt;拓展操作码-设计&lt;/p&gt;
&lt;p&gt;EA计算&lt;/p&gt;
&lt;p&gt;一定要画出指令结构图&lt;/p&gt;
&lt;p&gt;标清B、H、Q&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/hKhm645/image-20221216173244940.png"
loading="lazy"
alt="image-20221216173244940"
&gt;&lt;/p&gt;
&lt;p&gt;位数写够&lt;/p&gt;
&lt;h3 id="chapter-4"&gt;chapter 4
&lt;/h3&gt;&lt;p&gt;一位定点数的乘除法&lt;/p&gt;
&lt;p&gt;w12 c3&lt;/p&gt;
&lt;p&gt;6.8.10 (2) (4) .12&lt;/p&gt;
&lt;p&gt;均n次移位&lt;/p&gt;
&lt;p&gt;补乘 辅助位$y_{n+1}-y_{n}$&lt;/p&gt;
&lt;p&gt;原除 变补&lt;/p&gt;
&lt;h3 id="chapter-5"&gt;chapter 5
&lt;/h3&gt;&lt;p&gt;主存储器容量扩展-设计&lt;/p&gt;
&lt;p&gt;cache计算&lt;/p&gt;
&lt;p&gt;w10 12:13&lt;/p&gt;
&lt;p&gt;例题&lt;/p&gt;
&lt;p&gt;w14 c1&lt;/p&gt;
&lt;p&gt;10.13.14.16.17.18. 25&lt;/p&gt;
&lt;p&gt;画图标注！&lt;/p&gt;
&lt;p&gt;Rom不连 WE非！&lt;/p&gt;
&lt;p&gt;芯片规格、译码器规格、高低有效电平&lt;/p&gt;
&lt;p&gt;cache&lt;/p&gt;
&lt;p&gt;主存：区号+组号+块号+块内地址&lt;/p&gt;
&lt;p&gt;组相联映象&lt;/p&gt;
&lt;p&gt;主存和Cache按同样大小划分成块， 还按同样大小划分成组。&lt;/p&gt;
&lt;p&gt;从主存的组到Cache的组之间采用直接映象方式。 在两个对应的组内部采用全相联映象（1对1）方式。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/zJr6rBy/image-20221217104226051.png"
loading="lazy"
alt="image-20221217104226051"
&gt;&lt;/p&gt;
&lt;h3 id="chapter-6"&gt;chapter 6
&lt;/h3&gt;&lt;p&gt;微指令编码法-设计&lt;/p&gt;
&lt;p&gt;6,7,9,12,13,20&lt;/p&gt;
&lt;p&gt;参数计算公式&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/ng489zb/image-20221217171233397.png"
loading="lazy"
alt="image-20221217171233397"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/p32cq8f/image-20221217192938713.png"
loading="lazy"
alt="image-20221217192938713"
&gt;&lt;/p&gt;
&lt;p&gt;微命令设计&lt;/p&gt;
&lt;p&gt;结构和命令&lt;/p&gt;
&lt;p&gt;结构画出来、阐述&lt;/p&gt;
&lt;p&gt;命令一条条写出来&lt;/p&gt;
&lt;h3 id="chapter-9"&gt;chapter 9
&lt;/h3&gt;&lt;p&gt;数字磁记录方式-画图&lt;/p&gt;
&lt;p&gt;2.3.5&lt;/p&gt;
&lt;p&gt;数字磁记录方式 X 7&lt;/p&gt;
&lt;p&gt;计算&lt;/p&gt;
&lt;p&gt;4.29.25&lt;/p&gt;
&lt;p&gt;接口、端口&lt;/p&gt;
&lt;p&gt;中断与子程序区别&lt;/p&gt;
&lt;p&gt;CPU响应中断的条件&lt;/p&gt;
&lt;p&gt;中断隐指令&lt;/p&gt;
&lt;p&gt;允许、禁止中断&lt;/p&gt;
&lt;p&gt;中断全过程&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/vw7xLHd/image-20221218163105855.png"
loading="lazy"
alt="image-20221218163105855"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/VBsRYDb/image-20221218163125391.png"
loading="lazy"
alt="image-20221218163125391"
&gt;&lt;/p&gt;
&lt;h2 id="chapter-2-数据的机器层次表示"&gt;Chapter 2 数据的机器层次表示
&lt;/h2&gt;&lt;h3 id="浮点表示法"&gt;浮点表示法
&lt;/h3&gt;&lt;p&gt;$$
N=M\times r^E
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;r为阶码的底，与尾数的基数相同，通常 $r=2$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;E为阶码（纯整数）&lt;/p&gt;
&lt;p&gt;常用原码或补码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;M为尾数（纯小数）&lt;/p&gt;
&lt;p&gt;常用移码或补码&lt;img src="https://i.ibb.co/G3q6h13/image-20221009205448124.png"
loading="lazy"
alt="image-20221009205448124"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设用补码表示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最大正数&lt;/p&gt;
&lt;p&gt;$(1-2^{-N})\times 2^{2^K-1}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最小正数&lt;/p&gt;
&lt;p&gt;$(1-2^{-N})\times 2^{-2^K}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;绝对值最大负数&lt;/p&gt;
&lt;p&gt;$-2^{2^K-1}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;规格化浮点数：尾数最高数位为有效值
$$
\frac{1}{r}\le|M|\lt 1
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;规格化最小正数&lt;/p&gt;
&lt;p&gt;$2^{-1}\times 2^{-2^K}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;规格化绝对值最小负数&lt;/p&gt;
&lt;p&gt;$(-2^{-1}-2^{-N})\times 2^{-2^K}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="移码"&gt;移码
&lt;/h4&gt;&lt;p&gt;同一数值的移码和补码除最高位相反外，其他各位相同&lt;/p&gt;
&lt;h4 id="ieee754"&gt;IEEE754
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/2qVBwKc/image-20221009213107297.png"
loading="lazy"
alt="image-20221009213107297"
&gt;&lt;/p&gt;
&lt;h3 id="非数值数据"&gt;非数值数据
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;字符串&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;向量法&lt;/li&gt;
&lt;li&gt;串表法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;国标码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;区位码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;机内码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;汉字字形码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unicode&lt;/p&gt;
&lt;p&gt;16-bit&lt;/p&gt;
&lt;p&gt;Unicode的实现方式不同于编码方式。一个字符的Unicode 编码是确定的，但是在实际传输过程中，由于不同系统平台的设计不一定一致，以及出于节省空间的目的，对Unicode编码的实现方式有所不同。Unicode的实现方式称为Unicode转换格式（&lt;strong&gt;Unicode Translation Format&lt;/strong&gt;，简称为UTF）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chapter-3-指令系统"&gt;Chapter 3 指令系统
&lt;/h2&gt;&lt;h3 id="指令格式"&gt;指令格式
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;操作码：指明性质及功能&lt;/li&gt;
&lt;li&gt;地址码：指明地址（特殊情况下也可能直接给出操作数本身）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;长度可以等于机器字长，也可以大于或小于机器字长&lt;/p&gt;
&lt;p&gt;双操作数指令除操作码外：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A1：第一操作数地址&lt;/li&gt;
&lt;li&gt;A2：第二操作数地址&lt;/li&gt;
&lt;li&gt;A3：操作结果存放地址&lt;/li&gt;
&lt;li&gt;A4：下条将要执行指令的地址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;显地址：明显给出&lt;/p&gt;
&lt;p&gt;隐地址：依照约定用隐含的方式给出&lt;/p&gt;
&lt;h4 id="操作码"&gt;操作码
&lt;/h4&gt;&lt;p&gt;唯一标识&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;规整型（定长）&lt;/p&gt;
&lt;p&gt;简化硬件设计，减少指令译码时间，存在信息冗余&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非规整型（变长）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="寻址技术"&gt;寻址技术
&lt;/h3&gt;&lt;p&gt;寻找&lt;strong&gt;操作数&lt;/strong&gt;或&lt;strong&gt;下一条&lt;/strong&gt;将要执行的指令&lt;strong&gt;地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;包括编址方式和寻址方式&lt;/p&gt;
&lt;h4 id="编址方式"&gt;编址方式
&lt;/h4&gt;&lt;p&gt;需要编址的设备：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU中的通用寄存器&lt;/li&gt;
&lt;li&gt;主存储器&lt;/li&gt;
&lt;li&gt;输入输出设备&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编址单位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字编址：编址单位=访问单位&lt;/li&gt;
&lt;li&gt;字节编址：编址单位&amp;lt;访问单位&lt;/li&gt;
&lt;li&gt;位编址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;地址码位数与主存容量和最小寻址单位（编址单位）有关&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;寻址&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据寻址&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指令寻址&lt;/p&gt;
&lt;p&gt;寻找下一条执行指令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;顺序寻址&lt;/p&gt;
&lt;p&gt;程序计数器PC+1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跳跃寻址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接（绝对）寻址&lt;/li&gt;
&lt;li&gt;相对寻址&lt;/li&gt;
&lt;li&gt;间接寻址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="数据寻址"&gt;数据寻址
&lt;/h4&gt;&lt;p&gt;寻找操作数地址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;立即寻址&lt;/p&gt;
&lt;p&gt;op|立即数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;寄存器寻址&lt;/p&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快&lt;/li&gt;
&lt;li&gt;地址码短&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;直接寻址&lt;/p&gt;
&lt;p&gt;地址码给出的地址即为操作数地址&lt;/p&gt;
&lt;p&gt;操作数地址不能修改，与程序本身所在位置无关，又称为绝对寻址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;间接寻址&lt;/p&gt;
&lt;p&gt;地址码给出的地址指向操作数的存放地址&lt;/p&gt;
&lt;p&gt;通常在指令格式中划出一位@为标志位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@=0 直接寻址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@=1 间接寻址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多级间接寻址&lt;/p&gt;
&lt;p&gt;0 找到有效地址&lt;/p&gt;
&lt;p&gt;1 继续间接寻址&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;寄存器间接寻址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;变址寻址&lt;/p&gt;
&lt;p&gt;把指令给出的形式地址A与变址寄存器Rx的内容相加&lt;/p&gt;
&lt;p&gt;面向用户，访问字符串、向量和数组等批数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基址寻址&lt;/p&gt;
&lt;p&gt;把基址寄存器Rb的内容与位移量相加&lt;/p&gt;
&lt;p&gt;位移量可正可负&lt;/p&gt;
&lt;p&gt;面向系统，主要用于逻辑地址和物理地址的变换，用以解决程序在主存中的再定位和扩大寻址空间等问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;页面寻址&lt;/p&gt;
&lt;p&gt;将整个主存空间分成若干个大小相同的区，每个区成为一页&lt;/p&gt;
&lt;p&gt;页面地址：页编号&lt;/p&gt;
&lt;p&gt;业内地址：页内单元编号&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基页（零页）寻址&lt;/li&gt;
&lt;li&gt;当前页寻址
页面地址等于程序计数器pc的高位部分&lt;/li&gt;
&lt;li&gt;页寄存器寻址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/GcSMbWF/image-20221030172309408.png"
loading="lazy"
alt="image-20221030172309408"
&gt;&lt;/p&gt;
&lt;h5 id="区分寻址"&gt;区分寻址
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;显式&lt;/p&gt;
&lt;p&gt;OP|MOD|A&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隐式&lt;/p&gt;
&lt;p&gt;OP|A&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="堆栈"&gt;堆栈
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;寄存器堆栈（硬堆栈）&lt;/p&gt;
&lt;p&gt;寄器组相互连接，栈顶固定，具有对应位自动推移功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储器堆栈（软堆栈）&lt;/p&gt;
&lt;p&gt;栈底固定，栈顶浮动，高地址向低地址生长，SP指针&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="指令类型"&gt;指令类型
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据传送类指令&lt;/p&gt;
&lt;p&gt;实现寄存器之间，寄存器与主存单元之间，主存单元之间数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一般传送&lt;/li&gt;
&lt;li&gt;堆栈操作&lt;/li&gt;
&lt;li&gt;数据交换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运算类指令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算术运算&lt;/li&gt;
&lt;li&gt;逻辑运算&lt;/li&gt;
&lt;li&gt;移位
&lt;ul&gt;
&lt;li&gt;算术移位&lt;/li&gt;
&lt;li&gt;逻辑移位&lt;/li&gt;
&lt;li&gt;循环移位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序控制类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;无条件转移&lt;/p&gt;
&lt;p&gt;JMP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子程序调用&lt;/p&gt;
&lt;p&gt;CALL&lt;/p&gt;
&lt;p&gt;RET&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入输出类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;独立编址&lt;/p&gt;
&lt;p&gt;把外设端口和主存单元分别独立编址&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/f19tmQX/image-20221030182945796.png"
loading="lazy"
alt="image-20221030182945796"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;统一编址&lt;/p&gt;
&lt;p&gt;把外设寄存器和主存单元统一编址&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/RSb4YXz/image-20221030182959953.png"
loading="lazy"
alt="image-20221030182959953"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="发展"&gt;发展
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;复杂指令系统计算机 CISC&lt;/li&gt;
&lt;li&gt;精简指令系统计算机 RISC&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chapter-4-数值的机器运算"&gt;Chapter 4 数值的机器运算
&lt;/h2&gt;&lt;h3 id="加法器-不要求"&gt;加法器 （不要求？）
&lt;/h3&gt;&lt;p&gt;加法器是由&lt;strong&gt;全加器&lt;/strong&gt;再配以&lt;strong&gt;其他必要的逻辑电路&lt;/strong&gt;组成的&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/GPvSwcK/image-20221204141723724.png"
loading="lazy"
alt="image-20221204141723724"
&gt;
$$
S_i=A_i\oplus B_i\oplus C_{i-1}
\
C_i=A_iB_i+(A_i\oplus B_i)C_{i-1}
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;串行加法器&lt;/p&gt;
&lt;p&gt;只有一个全加器。数据逐位串行送入加法器进行运算&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;并行加法器&lt;/p&gt;
&lt;p&gt;由多个全加器组成。提高其速度的关键是尽量加快进位的产生和传递的速度。&lt;/p&gt;
&lt;p&gt;若不考虑$G_i$、$P_i$的形成时间，从$C_0-&amp;gt;C_n$的最长延迟时间为 $2nty$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="并行快速进位"&gt;并行快速进位
&lt;/h4&gt;&lt;p&gt;$$
C_i=A_iB_i+(A_i\oplus B_i)C_{i-1}
$$&lt;/p&gt;
&lt;p&gt;令&lt;/p&gt;
&lt;p&gt;$G_i=A_iB_i$，表示若本位的两个输入均为1，必然要向高位产生进位&lt;/p&gt;
&lt;p&gt;$P_i=A_i\oplus B_i$，表示当两个有入中一个为1，低位进位$C_{i-1}$将超越本位向更高位传送
$$
C_i=G_i+P_iC_{i-1}
$$
由此可得&lt;strong&gt;并行加法器的快速进位&lt;/strong&gt;
$$
G_0=C_0
\
C_i=\sum_{j=0}^iG_i\Pi_{k=j+1}^iP_{k}
$$
&lt;img src="https://i.ibb.co/yRHkskj/image-20221204145851973.png"
loading="lazy"
alt="image-20221204145851973"
&gt;&lt;/p&gt;
&lt;h4 id="分组并行进位"&gt;分组并行进位
&lt;/h4&gt;&lt;p&gt;把n位字长分为若干小组，在组内各位之间实行并行快速进位，组间采用串行进位或并行快速进位&lt;/p&gt;
&lt;h5 id="单级先行进位方式"&gt;单级先行进位方式
&lt;/h5&gt;&lt;p&gt;组内并行，组间串行&lt;/p&gt;
&lt;p&gt;CLA: Carry-Lookahead Adder&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/mvXkr2V/image-20221204150548543.png"
loading="lazy"
alt="image-20221204150548543"
&gt;&lt;/p&gt;
&lt;p&gt;若不考虑$G_i$、$P_i$的形成时间，从$C_0-&amp;gt;C_n$的最长延迟时间为 $2kty$，其中k为组数&lt;/p&gt;
&lt;h5 id="多级先行进位方式"&gt;多级先行进位方式
&lt;/h5&gt;&lt;p&gt;组内并行，组间并行&lt;/p&gt;
&lt;p&gt;BCLA: Blocked Carry-Lookahead Adder&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/bJbD7SF/image-20221204151537333.png"
loading="lazy"
alt="image-20221204151537333"
&gt;&lt;/p&gt;
&lt;p&gt;若不考虑$G_i$、$P_i$的形成时间，从$C_0-&amp;gt;C_n$的最长延迟时间为 $6ty$&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/fHwx6MR/image-20221204152740583.png"
loading="lazy"
alt="image-20221204152740583"
&gt;&lt;/p&gt;
&lt;h3 id="定点乘法"&gt;定点乘法
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;寄存器&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A寄存器：部分积与最后乘积的&lt;strong&gt;高位部分&lt;/strong&gt;，初值为0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B寄存器：被乘数X。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C寄存器：乘数Y，运算后C寄存器中不再需要保留乘数，改为存放乘积的&lt;strong&gt;低位部分&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="原码一位乘法"&gt;原码一位乘法
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;规则&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参加运算的操作数取其绝对值&lt;/li&gt;
&lt;li&gt;令乘数的最低位为判断位，若为 “1”，加被乘数，若为“0”，不加被乘数 （加0）；&lt;/li&gt;
&lt;li&gt;累加后的部分积&lt;strong&gt;右移&lt;/strong&gt;一位；&lt;/li&gt;
&lt;li&gt;重复n次（前提为n个数值位，1个符号位）2.和3.；&lt;/li&gt;
&lt;li&gt;符号位单独处理，同号为正，异号为负。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;右移n次，变乘为加&lt;/p&gt;
&lt;h4 id="补码一位乘法"&gt;补码一位乘法
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;规则&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参加运算的数用&lt;strong&gt;补码&lt;/strong&gt;表示；&lt;/li&gt;
&lt;li&gt;符号位参加运算；&lt;/li&gt;
&lt;li&gt;乘数最低位后面增加一位附加位 $Y_{n+1}$，其初值为0；&lt;/li&gt;
&lt;li&gt;由于每求一次部分积要&lt;strong&gt;右移&lt;/strong&gt;一位， 所以乘数的最低两位$Y_n$、$Y_{n+1}$的值决定了每次应执行的操作；&lt;/li&gt;
&lt;li&gt;移位按补码右移规则进行&lt;/li&gt;
&lt;li&gt;共需做n+1次累加，n次移位，第 n+1次不移位。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;永远右移，$Y_{i+1}-Yi$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$\gt0$：加X（补）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\lt0$：减X（补）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="定点除法"&gt;定点除法
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;寄存器&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A寄存器：存放被除数X，最后A寄存器中剩下的是扩大了若干倍的余数。运算过程中A寄存器的内容将不断地发生变化&lt;/li&gt;
&lt;li&gt;B寄存器：存放除数Y&lt;/li&gt;
&lt;li&gt;C寄存器：存放商Q，它的初值为0&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="原码加减交替法"&gt;原码加减交替法
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;规则&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;被除数减去除数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当余数为正时，商为“1”，余数&lt;strong&gt;左移&lt;/strong&gt;一位，减除数&lt;/p&gt;
&lt;p&gt;当余数为负时，商为“0”，余数&lt;strong&gt;左移&lt;/strong&gt;一位，加除数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重复步骤2.，做n+1步加减运算(n步移位)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若余数为负回正（第n+2步）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="补码加减交替法"&gt;补码加减交替法
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;规则&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;被除数与除数同号，被除数减去除数；被除数与除数异号，被除数加上除数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;余数和除数同号，商上1，余数左移一位，下次减除数&lt;/p&gt;
&lt;p&gt;余数和除数异号，商上0，余数左 移一位，下次加除数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重复步骤2.，包括符号位在内，共做n+1步加减运算(n步移位)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;商的末位恒置1&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="规格化浮点数运算"&gt;规格化浮点数运算
&lt;/h3&gt;&lt;p&gt;$$
A=M_A\times2^{E_A}
\
B=M_B\times2^{E_B}
$$&lt;/p&gt;
&lt;p&gt;仅要求加减&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;对阶&lt;/strong&gt;：小阶向大阶看齐，尾数右移&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尾数加/减&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尾数结果规格化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;左规&lt;/p&gt;
&lt;p&gt;若干次&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;右规&lt;/p&gt;
&lt;p&gt;假溢出 1次&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="chapter-5-存储系统"&gt;Chapter 5 存储系统
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;由几个容量、速度和价格各不相同的存储器构成的系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从CPU的角度来看，n种不同的存储器 （$M_1$～$M_n$）在逻辑上是一个整体，整个存储系统具有&lt;/li&gt;
&lt;li&gt;接近于$M_1$的速度&lt;/li&gt;
&lt;li&gt;相等或接近$M_n$的容量&lt;/li&gt;
&lt;li&gt;接近于$M_n$的位价格&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cache存储系统是为解决主存速度不足而提出来的&lt;/p&gt;
&lt;p&gt;它对系统 程序员和应用程序员都是透明的&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/72Gg9tM/image-20221031213210544.png"
loading="lazy"
alt="image-20221031213210544"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚拟存储系统是为解决主存容量不足而提出来的&lt;/p&gt;
&lt;p&gt;虚拟存储系统需要通过操作系统调度，因此对系统程序员是不透明的， 但对应用程序员是透明的&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/VQpS9WZ/image-20221031213412473.png"
loading="lazy"
alt="image-20221031213412473"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="存储器"&gt;存储器
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;按作用分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;高速缓冲存储器&lt;/p&gt;
&lt;p&gt;主存与CPU之间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主存储器&lt;/p&gt;
&lt;p&gt;CPU可直接随机访问&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;辅助存储器&lt;/p&gt;
&lt;p&gt;CPU不能直接访问&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按存取方式分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;随机存取存储器RAM&lt;/p&gt;
&lt;p&gt;CPU可随机读写访问，存取时间相同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只读存储器ROM&lt;/p&gt;
&lt;p&gt;可视为特殊只读RAM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;顺序存取存储器SAM&lt;/p&gt;
&lt;p&gt;只能按某种顺序存取，存取时间与物理位置有关&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;直接存取存储器DAM&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按存储介质分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;磁芯存储器&lt;/p&gt;
&lt;p&gt;不会因断电丢失；破坏性读出&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;半导体存储器&lt;/p&gt;
&lt;p&gt;双极型（TTL或ECL电路）和MOS型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;磁表面存储器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;光存储器&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按信息的可保存性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;易失性存储器&lt;/p&gt;
&lt;p&gt;断电后存储信息即消失&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非易失性存储器&lt;/p&gt;
&lt;p&gt;断电后信息仍保存&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="主存"&gt;主存
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;存储体&lt;/p&gt;
&lt;p&gt;核心，存放程序和数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;地址译码驱动电路&lt;/p&gt;
&lt;p&gt;包含&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;译码器&lt;/p&gt;
&lt;p&gt;将地址总线输入的地址码转换成与之对应的译码输出线上的有 效电平，以表示选中了某一单元&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;驱动器&lt;/p&gt;
&lt;p&gt;提供驱动电流去驱动相应的读、写电路， 完成对被选中单元的读、写操作&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I/O和读写电路&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;放大器&lt;/li&gt;
&lt;li&gt;写入电路&lt;/li&gt;
&lt;li&gt;读/写控制电路&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/BgLx3BV/image-20221031213519616.png"
loading="lazy"
alt="image-20221031213519616"
&gt;&lt;/p&gt;
&lt;p&gt;字节编址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;大端方案&lt;/p&gt;
&lt;p&gt;高字节存放在低地址&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/FYxbDxn/image-20221031214408948.png"
loading="lazy"
alt="image-20221031214408948"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小端方案&lt;/p&gt;
&lt;p&gt;高字节存放在高地址&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/bzsvTwW/image-20221031214358395.png"
loading="lazy"
alt="image-20221031214358395"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="技术指标"&gt;技术指标
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;存储容量&lt;/p&gt;
&lt;p&gt;主存所能容纳的二进制信息总量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存取速度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;存取时间&lt;/p&gt;
&lt;p&gt;从启动以此存储器操作到完成该操作所经历的时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存取周期&lt;/p&gt;
&lt;p&gt;存储器进行以此完整的读写操作所需要的全部时间，即连续两次访问存储器操作之间所需要的最短时间&lt;/p&gt;
&lt;p&gt;在读写操作之后， 总要有一段恢复内部状态的复原时间&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主存带宽&lt;/p&gt;
&lt;p&gt;数据传输率 Bps,bps,Wps&lt;/p&gt;
&lt;p&gt;Bm =主存等效工作频率×主存位宽 ÷8&lt;/p&gt;
&lt;p&gt;​ =内存时钟频率×倍增系数×主存位数 ÷ 8（不做要求）&lt;/p&gt;
&lt;p&gt;提高措施&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缩短存取周期&lt;/li&gt;
&lt;li&gt;增加存储字长&lt;/li&gt;
&lt;li&gt;增加存储体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="半导体随机存储器和只读存储器"&gt;半导体随机存储器和只读存储器
&lt;/h3&gt;&lt;p&gt;主存储器通常分为RAM和ROM两大部分&lt;/p&gt;
&lt;h3 id="ram"&gt;RAM
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;记忆单元&lt;/p&gt;
&lt;p&gt;存放一个二进制位的物理器件，是存储器的最基本构件&lt;/p&gt;
&lt;p&gt;记忆单元可以由各种材料制成，但最常见的由&lt;strong&gt;MOS电路&lt;/strong&gt;组成。MOS型存储器根据记忆单元的结构又可分为静态RAM和动态RAM两种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态RAM，即SRAM（Static RAM），其存储电路以&lt;strong&gt;双稳态触发器&lt;/strong&gt;为基础；&lt;/li&gt;
&lt;li&gt;动态RAM，即DRAM（Dynamic RAM），其存储电路以&lt;strong&gt;电容&lt;/strong&gt;为基础。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储单元&lt;/p&gt;
&lt;p&gt;由地址码相同的多个记忆单元构成&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="dram"&gt;DRAM
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;刷新&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了维持MOS型动态记忆单元的存储信息，每隔一定时间&lt;strong&gt;对存储体中的所有记忆单元的栅极电容补充电荷&lt;/strong&gt;的过程&lt;/p&gt;
&lt;p&gt;一般选定MOS型动态存储器允许的最大刷新间隔为2ms，也就是说，应在 2ms内，将全部存储体刷新一遍。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;刷新 vs. 重写（再生）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重写是&lt;strong&gt;随机&lt;/strong&gt;的，一般按&lt;strong&gt;存储单元&lt;/strong&gt;进行的，某个存储单元只有在&lt;strong&gt;破坏性读出&lt;/strong&gt;之后才需要重写&lt;/li&gt;
&lt;li&gt;刷新是&lt;strong&gt;定时&lt;/strong&gt;的，通常以&lt;strong&gt;存储体矩阵中的一行&lt;/strong&gt;为单位进行，即使许多记忆单元长期未被访问，若不及时补充电荷的话，信息也会丢失。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;刷新方式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;集中式&lt;/p&gt;
&lt;p&gt;在允许的最大刷新间隔内，按照存储芯片容量的大小集中安排若干个刷新周期， 刷新时停止读写操作。&lt;/p&gt;
&lt;p&gt;刷新时间=存储体矩阵行数×刷新周期&lt;/p&gt;
&lt;p&gt;这里刷新周期是指刷新一行所需要的时间，由于刷新过程就是“假读”的过程， 所以刷新周期就等于存取周期。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/PQb9z3w/image-20221112121550108.png"
loading="lazy"
alt="image-20221112121550108"
&gt;&lt;/p&gt;
&lt;p&gt;优点：读/写操作时不 受刷新工作的影响，因此系统的存取速度比较高。&lt;/p&gt;
&lt;p&gt;缺点：在集中刷新期间必须停止 读/写，这一段时间称为“死区”，而且存储容量越大，死区就越长。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分散式&lt;/p&gt;
&lt;p&gt;把刷新操作分散到每个存取周期内进行，此时系统的存取周期被分为两部分，前一部分时间进行读/写操作或保持，后一部分时间进行刷新操作。一个系统存取周期内刷新存储矩阵中的一行。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/MVHB7Xw/image-20221112121815318.png"
loading="lazy"
alt="image-20221112121815318"
&gt;&lt;/p&gt;
&lt;p&gt;优点：没有死区&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;p&gt;加长了系统的存取周期&lt;/p&gt;
&lt;p&gt;刷新过于频繁，尤其是当存储容量比较小的情况下，没有充分利用所允许的最大刷新间隔（2ms）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;异步式&lt;/p&gt;
&lt;p&gt;结合集中式和分散式，它充分利用了最大刷新间隔时间， 把刷新操作平均分配到整个最大刷新间隔时间内进行&lt;/p&gt;
&lt;p&gt;相邻两行的刷新间隔=最大刷新间隔时间/行数&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/86LX2cD/image-20221112122106487.png"
loading="lazy"
alt="image-20221112122106487"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;刷新控制&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对CPU是透明的。&lt;/li&gt;
&lt;li&gt;刷新通常是一行一行地进行的，每一行中各记忆单元同时被刷新，故刷新操作时仅需要行地址，不需要列地址&lt;/li&gt;
&lt;li&gt;刷新操作类似于读出操作&lt;/li&gt;
&lt;li&gt;因为所有芯片同时被刷新，所以在考虑刷新问题时，应当从单个芯片的存储容量着手，而不是从整个存储器的容量着手&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="ram芯片分析"&gt;RAM芯片分析
&lt;/h4&gt;&lt;p&gt;存储芯片通过&lt;strong&gt;地址线、数据线和控制线&lt;/strong&gt;与外部连接。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;地址线&lt;/p&gt;
&lt;p&gt;单向输入的，其数目与&lt;strong&gt;芯片容量&lt;/strong&gt;有关。如容量为1024×4时，地址线 有10根；容量为64K×1时，地址线有16根&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据线&lt;/p&gt;
&lt;p&gt;双向的，既可输入，也可输出，其数目与&lt;strong&gt;数据位数&lt;/strong&gt;有关。如1024×4的芯片，数据线有4根；64K×1的芯片，数据线只有1根。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;控制线&lt;/p&gt;
&lt;p&gt;主要有读/写控制线（或写允许线）和片选线两种，读/写控制线是用来决定芯片是&lt;strong&gt;进行读操作还是写操作&lt;/strong&gt;，片选线是用来决定 该芯片&lt;strong&gt;是否被选中&lt;/strong&gt;的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;地址复用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于DRAM芯片&lt;strong&gt;集成度高，容量大&lt;/strong&gt;，为了减少芯片引脚数量，DRAM芯片把地址线分成相等的两部分，分两次从相同的引脚送入。两次输入的地址分别称为行地址和列地址，行地址由行地址选通信号送入存储芯片，列地址由列地址选通信号送入存储芯片。由于采用了地址复用技术， 因此，&lt;strong&gt;DRAM芯片每增加一条地址线，实际上是增加了两位地址，也即增加了4倍的容量&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;地址译码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;地址译码电路把地址线送来的&lt;strong&gt;地址信号&lt;/strong&gt;翻译成对应存储单元的&lt;strong&gt;选择信号&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单译码&lt;/p&gt;
&lt;p&gt;又称&lt;strong&gt;字选法&lt;/strong&gt;，它所对应的存储器结构是&lt;strong&gt;字结构&lt;/strong&gt;的，容量为M个字的存储器（M个字，每字b位），排列成M行×b列的矩阵，矩阵的每一行对应一个字， 有一条公用的选择线wi （字线）。字线选 中某一行时，同一行中的各位就都被选中， 由读写电路对被选中的各位实施读出或写 入操作。&lt;/p&gt;
&lt;p&gt;优点：结构简单&lt;/p&gt;
&lt;p&gt;缺点：使用的外围电路多，成本昂贵。更严重的是，当 字数大大超过位数时，存储器会形成纵向很长而横向很窄的不合理结构，所以这种方式只适用于&lt;strong&gt;容量不大的存储器&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双译码&lt;/p&gt;
&lt;p&gt;又称为重合法。通常是把K位地址码分成接近相等的两段，一段用于水平方向作X地址线，供X地址译码器译码； 一段用于垂直方向作Y地址线，供Y地址译码器译码。X和Y两个方向的选择线在存储体内部的一个记忆单元上交叉，以选择相应的记忆单元&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/ySRbcfv/image-20221112123522903.png"
loading="lazy"
alt="image-20221112123522903"
&gt;&lt;/p&gt;
&lt;p&gt;双译码方式对应的存储芯片结构可以是&lt;strong&gt;位结构&lt;/strong&gt;的，则在Z方向上重叠b个芯片，也可以是&lt;strong&gt;字段结构&lt;/strong&gt;的。&lt;/p&gt;
&lt;p&gt;以Intel 2114为例&lt;/p&gt;
&lt;p&gt;存储容量为1K×4，由4096个六管记忆单元电路组成，它们排成64×64的矩阵， 采用字段结构。CPU送来的地址总线10位 （A0～A9），其中&lt;strong&gt;6位&lt;/strong&gt;作为行选择电路的输入，经行地址译码器产生64条行选择线； 另&lt;strong&gt;4位&lt;/strong&gt;作为列选择电路的输入，经列地址译码器产生16条列选择线，每条列选择线再经列I/O电路把4条数据线（I/O1～I/O4）连接到各字段的相应位上&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/M79SQYy/image-20221112124627393.png"
loading="lazy"
alt="image-20221112124627393"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CS：Chip Select&lt;/p&gt;
&lt;p&gt;WE：write&lt;/p&gt;
&lt;h3 id="rom"&gt;ROM
&lt;/h3&gt;&lt;p&gt;具有非易失性，即使电源断电，ROM中存储的信息也不会丢失&lt;/p&gt;
&lt;p&gt;我们把向ROM写入数据的过程称为对ROM进行&lt;strong&gt;编程&lt;/strong&gt;，根据编程方法的不同，ROM通常可以分为以下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;掩膜式ROM（MROM）&lt;/p&gt;
&lt;p&gt;内容是由半导体生产厂家按用户提出的要求在芯片的生产过程中直接写入的， 写入后任何人都无法改变其内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一次可编程ROM（PROM）&lt;/p&gt;
&lt;p&gt;PROM允许用户利用专门的设备（编程器或写入器）写入自己的程序，但一旦写入后便无法改变，因此它是一种一次性可编程的ROM。&lt;/p&gt;
&lt;p&gt;通常，生产厂家提供的PROM芯片初始内容为全“0”，用户根据自编的程序， 使用编程器外加足够大的电压（或电流）， 将“1”写入相应位，PROM的编程是逐位进行的。常见的PROM根据写入原理可分为两类：结破坏型和熔丝型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可擦除可编程ROM（EPROM）&lt;/p&gt;
&lt;p&gt;内容不仅可以由用户利用编程器写入，而且可以对其内容进行多次改写。但要注意的是：在+5V的电源条件下只能读出不能写入，用编程器写入信息时必须用+25V的高压。与前两种ROM相 比，EPROM使用起来最为方便，因此应用非常广泛&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;UVEPROM（紫外线擦除）&lt;/p&gt;
&lt;p&gt;用紫外线灯进行擦除的，所以只能对&lt;strong&gt;整个芯片擦除&lt;/strong&gt;，而不能对芯片中个别需要改写的存储单元单独擦除和重写。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EEPROM（电擦除）&lt;/p&gt;
&lt;p&gt;用电气方法来进行擦除的，它在联机 条件下可以用&lt;strong&gt;字擦除&lt;/strong&gt;方式擦除，也可以用数据块擦除方式擦除。以字擦除方式操作时，能够只擦除被选中的那个存储单元的内容；在数据块擦除方式操作时，可擦除数据块内所有单元的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;选择题&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;闪速存储器（flash memory）&lt;/p&gt;
&lt;p&gt;一种快擦写型存储器，它的主要特点 是：既可在不加电的情况下长期保存信息， 又能在线进行快速擦除与重写，兼备了 EEPROM和RAM的优点。 目前，大多数微机的主板采用闪速存储器来存储BIOS（基本输入/输出系统）程序。闪速存储器除了具有ROM的一般特性外，还有低电压改写的特点，便于用户自动升级BIOS&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="主存储器的连接与控制"&gt;主存储器的连接与控制
&lt;/h3&gt;&lt;h4 id="主存容量的扩展"&gt;主存容量的扩展
&lt;/h4&gt;&lt;p&gt;要组成一个主存，首先要考虑&lt;strong&gt;选片&lt;/strong&gt;的问题，然后就是如何把芯片&lt;strong&gt;连接&lt;/strong&gt;起来的问题。 根据存储器所要求的容量和选定的存储芯片的容量，就可以计算出总的芯片数，即&lt;/p&gt;
&lt;p&gt;总片数＝ 总容量 /芯片容量&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;位拓展&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在位数方向扩展（加大字长），而芯片的字数和存储器的字数是一致的。&lt;/p&gt;
&lt;p&gt;位扩展的连接方式是将各存储芯片的&lt;strong&gt;地址线、片选线和读/写线相应地并联起来&lt;/strong&gt;， 而将各芯片的数据线单独列出&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/b5JysXY/image-20221112145434593.png"
loading="lazy"
alt="image-20221112145434593"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/Krg2zRm/image-20221112145452733.png"
loading="lazy"
alt="image-20221112145452733"
&gt;&lt;/p&gt;
&lt;p&gt;当CPU访问该存储器时，其发出的地址和控制信号同时传给8个芯片，选中每个芯片的同一单元，其单元的内容被同时读至数据总线的相应位，或将数据总线上的内容分别同时写入相应单元。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字拓展&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;仅在字数方向扩展，而位数不变。字扩展将芯片的&lt;strong&gt;地址线、数据线、 读/写线并联&lt;/strong&gt;，由片选信号来区分各个芯片。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/pdXt9xG/image-20221112145333561.png"
loading="lazy"
alt="image-20221112145333561"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/kJqtvnJ/image-20221112145417166.png"
loading="lazy"
alt="image-20221112145417166"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字和位同时扩展&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当构成一个容量较大的存储器时，往往需要在字数方向和位数方向上同时扩展， 这是前两种扩展的组合。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/3hBj4Kz/image-20221112145637369.png"
loading="lazy"
alt="image-20221112145637369"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;10周 例题x2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重点：设计、cache计算&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id="地址分配和片选"&gt;地址分配和片选
&lt;/h4&gt;&lt;p&gt;CPU要实现对存储单元的访问，首先要选择存储芯片，即进行&lt;strong&gt;片选&lt;/strong&gt;；然后再从选中的芯片中依地址码选择出相应的存储单元，以进行数据的存取，这称为&lt;strong&gt;字选&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;片内的字选是由CPU送出的N条低位地址线完成&lt;/strong&gt;的，地址线直接接到所有存储芯片的地址输入端（N由片内存储容量$2^N$决定）， &lt;strong&gt;而片选信号则是通过高位地址得到&lt;/strong&gt;的。
实现片选的方法可分为3种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;线选法(CPU地址信号远高于设计需求，仅需&lt;strong&gt;直连&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;是用除片内寻址外的高位地址线直接（或经反相器）分别接至各个存储芯片的片选端，当某地址线信息为“0”时，就选中与之对应的存储芯片。&lt;/p&gt;
&lt;p&gt;优点：不需要地址译码器，线路简单，选择芯片不需要外加逻辑电路&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;p&gt;仅适用于连接存储芯片较少的场合。&lt;/p&gt;
&lt;p&gt;不能充分利用系统的存储器空间，且把地址空间分成了相互隔离的区域，给编程带来了一定的困难&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全译码法（CPU地址信号等于设计需求）&lt;/p&gt;
&lt;p&gt;全译码法将片内寻址外的&lt;strong&gt;全部高位地址线&lt;/strong&gt;作为地址译码器的输入，把经译码器译码后的输出作为各芯片的片选信号，将它们分别接到存储芯片的片选端，以实现对存储芯片的选择。 全译码法的优点是每片（或组）芯片的地址范围是&lt;strong&gt;唯一确定&lt;/strong&gt;的，而且是连续的， 也便于扩展，不会产生地址重叠的存储区， 但全译码法对译码电路要求较高。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部分译码法&lt;/p&gt;
&lt;p&gt;所谓部分译码即用片内寻址外的&lt;strong&gt;高位地址的一部分&lt;/strong&gt;来译码产生片选信号。 如用4片2K×8的存储芯片组成8K×8存 储器，需要四个片选信号，因此只要用两位地址线来译码产生。&lt;/p&gt;
&lt;p&gt;设地址总线有20位 （A19～A0），则寻址8K×8存储器时，无论 A19 ～A13 取何值，只要A12 =A11 =0，而均选 第一片，只要A12 =0，A11 =1，均选中第 二片，……。也就是说，8K RAM中的&lt;strong&gt;任一个存储单元，都对应有2(20-13) =27 个地址&lt;/strong&gt;，这种一个存储单元出现多个地址的现象称&lt;strong&gt;地址重叠&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;令未用到的高位地址全为0，这样确定的存储器地址称为&lt;strong&gt;基本地址&lt;/strong&gt;，本例中 8K×8存储器的基本地址即00000H～ 01FFFH。&lt;/p&gt;
&lt;p&gt;部分译码法较全译码法简单， 但存在地址重叠区&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="主存与cpu连接"&gt;主存与CPU连接
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;硬连接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主存与CPU的硬连接有三组连线：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;地址总线（AB）&lt;/li&gt;
&lt;li&gt;数据总线（DB）&lt;/li&gt;
&lt;li&gt;控制总线（CB）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/ngMhstf/image-20221112153416156.png"
loading="lazy"
alt="image-20221112153416156"
&gt;&lt;/p&gt;
&lt;p&gt;此时，我们把主存看作一个黑盒子，&lt;strong&gt;存储器地址寄存器（MAR）&lt;strong&gt;和&lt;/strong&gt;存储器数据寄存器（MDR）&lt;strong&gt;是主存和CPU之间的&lt;/strong&gt;接口&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;MAR可以接受来自程序计数器的指令地址或来自运算器的操作数地址，以确定要访问的单元。&lt;/p&gt;
&lt;p&gt;MDR是向主存写入数 据或从主存读出数据的缓冲部件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CPU与主存的硬连接是&lt;strong&gt;两个部件之间联系的物理基础&lt;/strong&gt;，而两个部件之间还有软连接，即&lt;strong&gt;CPU向主存发出的读或写命令&lt;/strong&gt;， 这才是两个部件之间有效工作的关键。&lt;/p&gt;
&lt;p&gt;CPU对主存进行读/写操作时，首先 CPU在地址总线上给出&lt;strong&gt;地址信号&lt;/strong&gt;，然后发出相应的&lt;strong&gt;读写命令&lt;/strong&gt;，并在&lt;strong&gt;数据总线&lt;/strong&gt;上交换信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;读&lt;/p&gt;
&lt;p&gt;从CPU送来的地址所指定的存储单元中取出信息，再送给CPU&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;地址→MAR→AB CPU&lt;/p&gt;
&lt;p&gt;将地址信号送至地址总线&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read&lt;/p&gt;
&lt;p&gt;CPU发读命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wait for MFC&lt;/p&gt;
&lt;p&gt;等待存储器工作完成信号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;((MAR))→DB→MDR&lt;/p&gt;
&lt;p&gt;读出信息经数据总线送至CPU&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写&lt;/p&gt;
&lt;p&gt;写操作是指将要写入的信息存入CPU 所指定的存储单元中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;地址→MAR→AB&lt;/p&gt;
&lt;p&gt;CPU将地址信号送至地址总线&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据→MDR→DB&lt;/p&gt;
&lt;p&gt;CPU将要写入的数据送至数据总线&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write&lt;/p&gt;
&lt;p&gt;CPU发写命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wait for MFC&lt;/p&gt;
&lt;p&gt;等待存储器工作完成信号&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于CPU和主存的速度存在着差距，所以两者之间的速度匹配是很关键的，通常有两种匹配方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步存储器读取&lt;/li&gt;
&lt;li&gt;异步存储器读取&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面给出的读/写基本操作是以异步存储器读取来考虑的，CPU和主存间没有统一的时钟，由存储器工作完成信号 （MFC）通知CPU存储器工作已完成。 对于同步存储器读取，CPU和主存采用统一时钟，因为主存速度较慢，所以CPU与 之配合必须放慢速度。&lt;/p&gt;
&lt;h3 id="高速缓冲存储器"&gt;高速缓冲存储器
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;程序的局部性原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;程序的局部性包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;时间局部性&lt;/p&gt;
&lt;p&gt;如果一个存储单元被访问，则可能该单元会很快被再次访问，这是因为程序存在着循环&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空间局部性&lt;/p&gt;
&lt;p&gt;空间局 部性是指如果一个存储单元被访问，则该单元邻近的单元也可能很快被访问，这是因为程序中大部分指令是顺序存储、顺序执行的，数据一般也是以向量、数组、树 、表等形式簇聚地存储在一起的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;高速缓冲技术就是利用程序的局部性原理，把程序中正在使用的部分存放在一 个高速的容量较小的Cache中，&lt;strong&gt;使CPU的访存操作大多数针对Cache进行&lt;/strong&gt;，从而使程序的执行速度大大提高&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cache和主存都被分成若干个大小相等的块，每块由若干字节组成。由于Cache的容量远小于主存的容量，它保存的信息只是&lt;strong&gt;主存中最活跃的若干块的副本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;读写操作&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;读&lt;/p&gt;
&lt;p&gt;当CPU发出读请求时，如果Cache命中 ，就直接对Cache进行读操作，与主存无关 ；如果Cache不命中，则仍需访问主存，并把该块信息一次从主存调入Cache内。若此时Cache已满，则需根据某种&lt;strong&gt;替换算法&lt;/strong&gt;，用 这个块替换掉Cache中原来的某块信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写&lt;/p&gt;
&lt;p&gt;当CPU发出写请求时，如果Cache命中 ，会遇到如何保持Cache与主存中的&lt;strong&gt;内容一致&lt;/strong&gt;的问题，处理的方法有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写直达法&lt;/li&gt;
&lt;li&gt;写回法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果Cache不命中，就直接把信息写入主存，而与Cache无关&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;命中率&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在一个程序执行期间 ，设$N_c$表示Cache完成存取的总次数，$N_m$表示主存完成存取的总次数，$h$定义为命中率。则有:
$$
h=\frac{N_c}{N_c+N_m}
$$
&lt;strong&gt;效率&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cache –主存系统的效率 $e$：
$$
e=\frac{访问cache时间}{平均访问时间}\times 100%
$$
$e$与Cache命中率有关，设Cache命中率为$h$，访问 Cache 的时间为$t_c$， 访问主存的时间为$t_m$ 则:
$$
e =\frac{t_c}{h\times t_c+(1-h)\times t_m} × 100%
$$
&lt;strong&gt;地址变换&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当程序已经装入到Cache之后，在实际运行过程中，把主存地址变换成Cache地址&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;地址映象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把存放在主存中的程序按照某种规则装入到Cache中，并建立主存地址与Cache地址之间的对应关系&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;全相联映象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主存中的任意一块都可以映象到Cache中的任意一块。如果Cache的块数为Cb，主存的块数为 Mb，映象关系共有：Cb×Mb种,用硬件实现非常复杂&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;块冲突概率比较小&lt;/li&gt;
&lt;li&gt;Cache的利用率高&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要一个相联存储器，其代价很高。&lt;/li&gt;
&lt;li&gt;相联比较所花费的时间将影响Cache的访问速度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;直接映象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主存中一块只能映象到 Cache的一个特定的块中&lt;/p&gt;
&lt;p&gt;b＝B mod Cb，其中： b为Cache的块号， B是主存的块号， Cb是Cache的块数。&lt;/p&gt;
&lt;p&gt;整个Cache地址与主存地址的低位部分完全相同。&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;硬件实现很简单, 不需要相联访问存储器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问速度也比较快, 实际上不做地址变换。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;块的冲突率较高。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提高Cache速度的一种方法： 把区号存储器与Cache合并成一个存储器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;组相联映象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;组相联映像实际上是全相联映像和直接映像的&lt;strong&gt;折衷方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主存和Cache按同样大小划分成块， 还按同样大小划分成组。 从主存的组到Cache的组之间采用直接映象方式。 在两个对应的组内部采用全相联映象方式。&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;块的冲突概率比较低； 块的利用率大幅度提高；&lt;/li&gt;
&lt;li&gt;块失效率明显降低。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现难度和造价要比直接映象方式高&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(地址变换过程自己看，不要求）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选取地址映象方法的主要依据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;地址变换的硬件要容易实现&lt;/li&gt;
&lt;li&gt;地址变换的速度要快&lt;/li&gt;
&lt;li&gt;主存空间利用率要高&lt;/li&gt;
&lt;li&gt;发生块冲突的概率要小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（虚存类似，跳过？）&lt;/p&gt;
&lt;h2 id="chapter-6-cpu"&gt;Chapter 6 CPU
&lt;/h2&gt;&lt;h3 id="功能和组成"&gt;功能和组成
&lt;/h3&gt;&lt;p&gt;计算机的工作过程就是程序的运行过程，也 就是&lt;strong&gt;在控制器的控制下逐条执行程序中各指令的过程&lt;/strong&gt;。在程序运行过程中，计算机的各部件在控制器的控制下有条不紊地工作，在各部件之间流动的指令和数据形成了&lt;strong&gt;指令流&lt;/strong&gt;和&lt;strong&gt;数据流&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;从程序运行的角度来看，&lt;strong&gt;控制器&lt;/strong&gt;的基本功能是&lt;strong&gt;对指令流和数据流在时间与空间上实施正确的控制&lt;/strong&gt;。&lt;/p&gt;
&lt;less important&gt;
&lt;ul&gt;
&lt;li&gt;对指令流的控制
&lt;ul&gt;
&lt;li&gt;指令流出的控制&lt;/li&gt;
&lt;li&gt;指令分析与执行的控制&lt;/li&gt;
&lt;li&gt;指令流向的控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对数据流的控制
&lt;ul&gt;
&lt;li&gt;对数据的流入与流出的控制&lt;/li&gt;
&lt;li&gt;对数据变换、加工等操作的控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;/less important&amp;gt;&lt;/p&gt;
&lt;p&gt;对于冯·诺依曼结构的计算机而言， 数据流是根据指令流的操作而形成的，也就是说数据流是由指令流来驱动的&lt;/p&gt;
&lt;h4 id="主要寄存器"&gt;主要寄存器
&lt;/h4&gt;&lt;p&gt;用来暂时保存在运算和控制过程中的&lt;strong&gt;中间结果、最终结果以及控制、状态信息&lt;/strong&gt;的，又可分为通用寄存器和专用寄存器两种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通用寄存器&lt;/p&gt;
&lt;p&gt;可用来存放原始数据和运算结果，有的还可以作为变址寄存器、计数器、地址指针等。&lt;/p&gt;
&lt;p&gt;一般可以由CPU&lt;strong&gt;直接&lt;/strong&gt;访问&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;专用寄存器&lt;/p&gt;
&lt;p&gt;专门用来完成某一种特殊功能的寄存器。&lt;/p&gt;
&lt;p&gt;CPU中至少要有五个专用的寄存器。它们是：程序计数器（PC）、 指令寄存器（IR）、存储器地址寄存器 （MAR）、存储器数据寄存器（MDR）、 状态标志寄存器（PSWR）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;程序计数器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;程序计数器用来存放&lt;strong&gt;正在&lt;/strong&gt;执行的指令地址或&lt;strong&gt;接着&lt;/strong&gt;要执行的下条指令地址。&lt;/p&gt;
&lt;p&gt;对于顺序执行的情况，PC的内容应不断地增量（加“1”），以控制指令的顺序执行。&lt;/p&gt;
&lt;p&gt;在遇到需要改变程序执行顺序的情况时，将&lt;strong&gt;转移的目标地址送往PC&lt;/strong&gt;，即可实现 、程序的转移。在有些情况下除需要改变PC 的内容外，还需要保留PC过去的内容，以便返回时使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;指令寄存器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;指令寄存器用来存放&lt;strong&gt;从存储器中取出的指令&lt;/strong&gt;。当指令从主存取出暂存于指令寄存器之后，在执行指令的过程中，指令寄存器的内容不允许发生变化，以保证实现指令的全部功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;存储器数据寄存器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;存储器数据寄存器用来暂时存放由主存储器读出的一条指令或一个数据字；反之，当向主存存入一条指令或一个数据字时，也暂时将它们存放在存储器数据寄存器中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;存储器地址寄存器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;存储器地址寄存器用来保存当前CPU 所访问的主存单元的地址。由于主存和 CPU之间存在着操作速度上的差别，所以必须使用地址寄存器来保持地址信息，直到主存的读/写操作完成为止。 当CPU和主存进行信息交换，无论是 CPU向主存存/取数据时，还是CPU从主存 中读出指令时，都要使用存储器地址寄存器和数据寄存器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;状态标志寄存器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;状态标志寄存器用来存放&lt;strong&gt;程序状态字&lt;/strong&gt;的。 程序状态字的各位表征程序和机器运行的状态，是参与控制程序执行的重要依据之一。&lt;/p&gt;
&lt;p&gt;它主要包括两部分内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;状态标志&lt;/strong&gt;，如： 进位标志（C）、结果为零标志（Z）等， 大多数指令的执行将会影响到这些标志位&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制标志&lt;/strong&gt;，如：中断标志、陷阱标志等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;8086的状态标志寄存器共16位，包括九个标志位，其中六个为状态标志，三个为控制标志&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/CtpTNXK/image-20221112170314433.png"
loading="lazy"
alt="image-20221112170314433"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/rmYNtrQ/image-20221112170506055.png"
loading="lazy"
alt="image-20221112170506055"
&gt;&lt;/p&gt;
&lt;h4 id="功能"&gt;功能
&lt;/h4&gt;&lt;p&gt;控制器的主要功能：&lt;/p&gt;
&lt;p&gt;⑴从主存中取出一条指令，并指出下一条指 令在主存中的位置。&lt;/p&gt;
&lt;p&gt;⑵对指令进行译码或测试，产生相应的操作控制信号，以便启动规定的动作。&lt;/p&gt;
&lt;p&gt;⑶指挥并控制CPU、主存和输入/输出设备之间的数据流动方向。&lt;/p&gt;
&lt;p&gt;运算器的主要功能有：&lt;/p&gt;
&lt;p&gt;⑴执行所有的算术运算&lt;/p&gt;
&lt;p&gt;⑵执行所有的逻辑运算，并进行逻辑测试&lt;/p&gt;
&lt;h4 id="主要技术参数"&gt;主要技术参数
&lt;/h4&gt;&lt;p&gt;（不关注，但要注意参数，公式 ）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;字长&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;单位时间内同时处理的二进 制数据的位数。&lt;/p&gt;
&lt;p&gt;CPU按照其处理信息的字长可以分为：8位CPU、16位CPU、32位CPU以及64位CPU等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内部工作频率&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;又称为内频或&lt;strong&gt;主频&lt;/strong&gt;，它是衡量 CPU速度的重要参数。CPU的主频表示在CPU内&lt;strong&gt;数字脉冲信号震荡的速度&lt;/strong&gt;，与CPU实际的运算能 力并没有直接关系。因此主频仅是CPU性能表现的一个方面，而不代表CPU的整体性能。&lt;/p&gt;
&lt;p&gt;内部时钟频率的倒数是&lt;strong&gt;时钟周期&lt;/strong&gt;，这是 CPU中最小的时间元素。每个动作至少需要一个时钟周期&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;外部工作频率&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CPU除了主频之外，还有另一种工作频率，称为外部工作频率，它是由&lt;strong&gt;主板&lt;/strong&gt;为CPU提供的&lt;strong&gt;基准时钟频率&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;早期， CPU 的内频就&lt;strong&gt;等于&lt;/strong&gt;外频。&lt;/p&gt;
&lt;p&gt;例如： 80486DX-33 的内频是33MHz ，它的外频也是33MHz。也就是说，80486DX-33以33MHz的速度在内部进行运算，也同样以33MHz的速度&lt;strong&gt;与外界沟通&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;目前，CPU的内频越来越高，相比之下主存的速度还很缓慢，如果外频设计得跟内频同步， 则主存都将无法跟上CPU的速度。所以现在外频 跟内频不再只是一比一的同步关系，从而出现了 所谓的&lt;strong&gt;内部倍频技术&lt;/strong&gt;，导致了“倍频”的出现。 内频、外频和倍频三者之间的关系是：&lt;/p&gt;
&lt;p&gt;内频=外频×倍频&lt;/p&gt;
&lt;p&gt;理论上倍频是从1.5一直到无限，以0.5为一个间隔单位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;前端总线频率&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前端总线（Front Side Bus），通常用FSB表示，它是&lt;strong&gt;CPU和外界交换数据的最主要通道&lt;/strong&gt;，主要连接主存、显卡等数据吞吐率高的部件，因此前端总线的数据传输能力对计算机整体性能作用 很大。&lt;/p&gt;
&lt;p&gt;在Pentium 4出现之前，前端总线频率与外频是相同的，因此往往直接称前端总线频率为外 频。随着计算机技术的发展，需要前端总线频率高于外频，因此采用了&lt;strong&gt;QDR&lt;/strong&gt;（Quad Date Rate） 技术或者其他类似的技术，使得前端总线频率成为外频的2倍、4倍甚至更高&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;QPI数据传输速率&lt;/strong&gt;（less important）&lt;/p&gt;
&lt;p&gt;取代FSB的&lt;strong&gt;基于包传输的高速点到点连接技术&lt;/strong&gt; QPI（快速通道互联）。 QPI抛弃了FSB易混淆的单位MHz，而使用GT/s 、MT/s，明确的表示总线&lt;strong&gt;实际&lt;/strong&gt;的数据传输速率，而不是时钟频率。T/s即transfers per second，表示每秒数据传输的次数。QPI总线采用的是2:1比率，即&lt;strong&gt;实际的数据传输速率两倍于实际的总线时钟频率&lt;/strong&gt;。 QPI 的时钟频率基于2.4 GHz、3.2 GHz，则QPI的数据传输速率为4.8GT/s、6.4GT/s，如时钟频率2.4GHz 的QPI的数据传输速率是2.4 GHz × 2 = 4.8 GT/s。&lt;/p&gt;
&lt;p&gt;一个基本的QPI数据包是&lt;strong&gt;80bit&lt;/strong&gt;，需要&lt;strong&gt;四次传输&lt;/strong&gt;完成每次整个数据包的传输，每次传输的20位数据中 ，有16位为有效数据，其余4位用于循环冗余校验。 由于QPI是双向的，在发送的同时也可以接收另一端传输来的数据，这样，每个&lt;strong&gt;QPI总线总带宽=每秒传输次数（即QPI速率）×每次传输的有效数据（即 16bit/8=2Byte）×双向&lt;/strong&gt;。所以QPI速率为4.8GT/s的总带宽=4.8 GT/s × 2Byte × 2 = 19.2 GB/s，QPI速率为 6.4GT/s 的 总带宽= 6.4 GT/s × 2 Byte × 2 = 25.6 GB/s。不难发现，目前的QPI比以前最宽最快的FSB，还要快一倍。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;片内Cache的容量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;片内Cache又称CPU Cache，它的容量和工作速率对提高计算机的速度起着关键的作用。CPU Cache可以分为L1 Cache、L2 Cache，部分高端 CPU还具有L3 Cache。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;L1 Cache，位于CPU内核的旁边，是与CPU结合最为紧密的CPU缓存。一般来说，一级缓存可以分为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一级数据缓存（Data Cache，D-Cache）&lt;/li&gt;
&lt;li&gt;一级指令缓存（Instruction Cache，I-Cache）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大多数CPU的一级数据缓存和一级指令缓存具有 相同的容量，例如D-Cache和I-Cache各为64KB， 总容量为128KB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;L2 Cache是影响CPU性能的关键因素之一 ，在CPU核心不变化的情况下，增加L2 Cache的容量能使性能大幅度提高，而同一核心CPU的高低端之分往往也是在L2 Cache上有差异。目前CPU的L2 Cache一般为1MB， 最大可达4MB～8MB。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;L3 Cache是为读取L2 Cache后未命中的数据设计的—种缓存，在拥有L3 Cache的CPU中，只有约5%的数据需要从内存中调用，这进一步提高了CPU的效率。L3 Cache的容量一般从8MB～16MB不等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;工作电压&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CPU正常工作所需的电压&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;地址总线宽度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;决定了&lt;strong&gt;CPU可以访问的最大的物理地址空间&lt;/strong&gt;，简单地说就是CPU到底能够使用多大容量的主存。&lt;/p&gt;
&lt;p&gt;例如，Pentium 有32位地址线，可寻址的最大容量为$2^{32}$＝ 4096MB（4GB），Itantium有44位地址线， 可寻址的最大容量为$2^{44}$＝16TB。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据总线宽度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;决定了CPU与外部Cache、 主存以及输入输出设备之间进行&lt;strong&gt;一次数据传输的信息量&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果数据总线为32位，每次最多可以读写主存中的32位；&lt;/p&gt;
&lt;p&gt;如果数据总线为 64位，每次最多可以读写主存中的64位。&lt;/p&gt;
&lt;p&gt;数据总线和地址总线是互相独立的，数据总线宽度指明了芯片的信息传递能力，而地址总线宽度说明了芯片可以访问多少个主存单元&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;制造工艺&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;线宽是指&lt;strong&gt;芯片内电路与电路之间的距离&lt;/strong&gt;，可以用&lt;strong&gt;线宽&lt;/strong&gt;来描述制造工艺。线宽越小，意味着芯片上包括的晶体管数目越多。&lt;/p&gt;
&lt;p&gt;Pentium Ⅱ的线宽是0.35μm，晶体管数达 到7.5兆个；&lt;/p&gt;
&lt;p&gt;Pentium Ⅲ的线宽是0.25μm， 晶体管数达到9.5兆个；&lt;/p&gt;
&lt;p&gt;Pentium 4的线宽是 0.18μm，晶体管数达到42兆个。&lt;/p&gt;
&lt;p&gt;近年来线宽已由0.15μm、0.13μm、90nm、65nm一 直发展到目前主流的45nm和32nm，而 22nm的制造工艺将是新一代CPU的发展目标。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="控制器的组成和实现"&gt;控制器的组成和实现
&lt;/h3&gt;&lt;p&gt;计算机系统的&lt;strong&gt;指挥中心&lt;/strong&gt;，它把运算器、存储器、输入/输出设备等部件组成一个有机的整体，然后根据指令的要求指挥全机的工作。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/NFdZdXx/image-20221112180224898.png"
loading="lazy"
alt="image-20221112180224898"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;组成&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;指令部件&lt;/p&gt;
&lt;p&gt;完成取指令并分析指令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;程序计数器（PC）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指令寄存器（IR）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指令译码器（ID）&lt;/p&gt;
&lt;p&gt;指令译码器又称&lt;strong&gt;操作码译码器&lt;/strong&gt;或&lt;strong&gt;指令功能分析解释器&lt;/strong&gt;。暂存在指令寄存器中的指令只有在其操作码部分经过译码之后才能识别出这是一条什么样的指令，并产生相应的控制信号提供给 微操作信号发生器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;地址形成部件&lt;/p&gt;
&lt;p&gt;根据指令的不同寻址方式，用来形成操作数的有效地址，在微、小型机中，一般不设专门的地址形成部件，而是利用运算器来进行有效地址的计算。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时序部件&lt;/p&gt;
&lt;p&gt;能产生一定的时序信号，以保证机器的各功能部件有节奏地进行信息传送、加工及信息存储&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;脉冲源&lt;/p&gt;
&lt;p&gt;用来产生具有一定频率和宽度的时钟脉冲信号，为整个机器提供基准信号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启停控制逻辑&lt;/p&gt;
&lt;p&gt;根据计算机的需要，可靠地&lt;strong&gt;开放或封锁&lt;/strong&gt;脉冲，控制时序信号的发生或停止，实现对整个机器的正确启动或停止。启停控制逻辑保证启动时输出的第一个脉冲和停止时输出的最后一 个脉冲都是完整的脉冲。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;节拍信号发生器&lt;/p&gt;
&lt;p&gt;又称脉冲分配器。脉冲源产生的脉冲信号，经过节拍信号发生器后产生出各个机器周期中的节拍信号， 用以控制计算机完成每一步微操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微操作信号发生器&lt;/p&gt;
&lt;p&gt;一条指令的取出和执行可以分解成很多最基本的操作，这种&lt;strong&gt;最基本的不可再分割的操作&lt;/strong&gt;称为微操作。微操作信号发生器也称为控制单元（CU）。不同的机器指令具有不同的微操作序列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中断控制逻辑&lt;/p&gt;
&lt;p&gt;控制中断处理的硬件逻辑&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;硬件实现方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;控制器的输入是&lt;strong&gt;机器指令代码&lt;/strong&gt;，输出是&lt;strong&gt;微操作控制信号&lt;/strong&gt;，因此微操作信号发生器是控制器的&lt;strong&gt;核心&lt;/strong&gt;。根据产生微操作控制信号的方式不同，控制器可分为3种，它们的根本区别在于微操作信号发生器的实现方法不同，而控制器中的其它部分基本上是大同小异的。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/SmPy32C/image-20221112192755100.png"
loading="lazy"
alt="image-20221112192755100"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;组合逻辑型&lt;/p&gt;
&lt;p&gt;称为&lt;strong&gt;常规控制器&lt;/strong&gt;或&lt;strong&gt;硬布线控制器&lt;/strong&gt;，它是采用&lt;strong&gt;组合逻辑&lt;/strong&gt;技术来实现的， 其微操作序列形成部件是由&lt;strong&gt;门电路&lt;/strong&gt;组成的复杂树形网络。 组合逻辑控制器的最大优点是&lt;strong&gt;速度快&lt;/strong&gt;， 但是微操作信号发生器的结构不规整，使得设计、调试、维修较困难，难以实现设计自动化。一旦微操作信号发生器构成之后，要想&lt;strong&gt;增加新的控制功能是不可能&lt;/strong&gt;的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储逻辑型&lt;/p&gt;
&lt;p&gt;这种控制器称为&lt;strong&gt;微程序控制器&lt;/strong&gt;，它是采用&lt;strong&gt;存储逻辑&lt;/strong&gt;来实现的，也就是把微操作信号代码化，使每条机器指令转化成为一段微程序并存入一个专门的存储器（控制存储器） 中，微操作控制信号由微指令产生。 微程序控制器的设计思想和组合逻辑设计思想截然不同。它具有&lt;strong&gt;设计规整、调试、 维修以及更改、扩充指令方便&lt;/strong&gt;的优点，易于实现自动化设计，已成为当前控制器的主流。 但是，由于它增加了一级控制存储器，所以&lt;strong&gt;指令执行速度比组合逻辑控制器慢&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组合逻辑和存储逻辑结合型&lt;/p&gt;
&lt;p&gt;这种控制器称为&lt;strong&gt;PLA控制器&lt;/strong&gt;，它是组合逻辑技术和存储逻辑技术结合的产物， 它克服了两者的缺点，是一种较有前途的方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="时序系统与控制方式"&gt;时序系统与控制方式
&lt;/h3&gt;&lt;h4 id="时序系统"&gt;时序系统
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;机器周期&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;机器周期通常又称&lt;strong&gt;CPU周期&lt;/strong&gt;，通常把一条指令划分为若干个机器周期（取指令，分析指令，执行指令），每个机器周期完成一个基本操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;指令周期&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;取指令、分析指令到执行完该指令所需的全部时间。&lt;/p&gt;
&lt;p&gt;由于各种指令的操作功能不同，有的简单，有的复杂， 因此各种指令的指令周期不尽相同。&lt;/p&gt;
&lt;p&gt;指令周期＝i×机器周期&lt;/p&gt;
&lt;p&gt;通常，每个机器周期都有一个与之对应的&lt;strong&gt;周期状态触发器&lt;/strong&gt;。机器运行在不同的机器周期，其对应的周期状态触发器被置 “1”，显然，在机器运行的任何时刻只能建立一个周期状态，因此，有一个且仅有一个触发器被置“1” 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;节拍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在一个机器周期内，要完成若干个微操作。这些微操作有的可以同时执行，有的需要按先后次序串行执行。因而需要把一个机器周期分为若干个相等的时间段， 每一个时间段对应一个电位信号，称为&lt;strong&gt;节拍电位信号&lt;/strong&gt;。 节拍的宽度取决于CPU完成一次基本操作的时间&lt;/p&gt;
&lt;p&gt;由于不同的机器周期内需要完成的微操作内容和个数是不同的，因此，不同机器周期内所需要的节拍数也不相同。&lt;/p&gt;
&lt;p&gt;节拍的选取一般有以下几种方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;统一节拍法&lt;/p&gt;
&lt;p&gt;以最复杂的机器周期为准定出节拍数， 每一节拍时间的长短也以最繁的微操作作为标准。这种方法采用统一的、具有相等时间间隔和相同数目的节拍，使得所有的机器周期长度都是相等的，因此称为&lt;strong&gt;定长CPU周期&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分散节拍法&lt;/p&gt;
&lt;p&gt;按照机器周期的实际需要安排节拍数， 需要多少节拍，就发出多少节拍，这样可以避免浪费，提高时间利用率。由于各机器周期长度不同，又称为&lt;strong&gt;不定长CPU周期&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;延长节拍法&lt;/p&gt;
&lt;p&gt;在照顾多数机器周期要求的情况下， 选取适当的节拍数，作为&lt;strong&gt;基本节拍&lt;/strong&gt;，如果在某个机器周期内统一的节拍数无法完成该周期的全部微操作，则可以延长节拍。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时钟周期插入 （目前方法）&lt;/p&gt;
&lt;p&gt;在一些微型机中，时序信号中不设置节拍，而直接使用时钟周期信号。一个机器周期中含有若干个时钟周期，时钟周期的数目取决于机器周期内完成微操作的多少及相应功能部件的速度。一个机器周期的基本时钟周期数确定之后，还可以不断插入&lt;strong&gt;等待时钟周期&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;工作脉冲&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在节拍中执行的有些操作需要同步定时脉冲，为此，在一个节拍内常常设置&lt;strong&gt;一个或几个&lt;/strong&gt;工作脉冲，作为各种同步脉冲的来源。工作脉冲的宽度只占节拍电位宽度的1/n，并处于节拍的末尾，只要能保证所有触发器都可靠、稳定地翻转就可以了。 在只设置机器周期和时钟周期的微型机中，一般不再设置工作脉冲，因为时钟周期既可以作为电位信号，其前后沿又可以作为脉冲触发信号&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多级时序系统&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;小型机中常采用&lt;strong&gt;机器周期、节拍、工作脉冲&lt;/strong&gt;三级时序系统。每个机器周期M中包括若干节拍，每个节拍内有一个脉冲。 在机器周期间、节拍电位间、工作脉冲间既不允许有重叠交叉，也不允许有空隙， 应该是一个接一个的准确连接。&lt;/p&gt;
&lt;h4 id="控制方式"&gt;控制方式
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;同步控制方式&lt;/p&gt;
&lt;p&gt;即&lt;strong&gt;固定时序控制方式&lt;/strong&gt;， 各项操作都由统一的时序信号控制，在每个机器周期中产生统一数目的节拍电位和工作脉冲。由于不同的指令，操作时间长短不一致，同步控制方式应以最复杂指令 的操作时间作为统一的时间间隔标准。这种控制方式设计&lt;strong&gt;简单&lt;/strong&gt;，容易实现， 但是对于许多简单指令来说会有较多的空闲时间，造成较大数量的&lt;strong&gt;时间浪费&lt;/strong&gt;，从而影响了指令的执行速度。 在同步控制方式中，各指令所需的时序由控制器统一发出，所有微操作都与时钟同步，所以又称为集中控制方式或中央控制方式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;异步控制方式&lt;/p&gt;
&lt;p&gt;即&lt;strong&gt;可变时序控制方式&lt;/strong&gt;。 各项操作不采用统一的时序信号控制，而根据指令或部件的具体情况决定，需要多少时间，就占用多少时间。 异步控制采用不同时序，没有时间上的浪费，因而提高了机器的效率，但是控制比较&lt;strong&gt;复杂&lt;/strong&gt;由于这种控制方式没有统一的时钟， 而是由各功能部件本身产生各自的时序信 号自我控制，故又称为分散控制方式或局部控制方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;联合控制方式&lt;/p&gt;
&lt;p&gt;同步控制和异步控制相结合。实际上现代计算机中几乎没有完全采用同步或完全采用异步的控制方式，大多数是采用联合控制方式。&lt;/p&gt;
&lt;p&gt;通常的设计思想是：在功能部件内部采用同步方式或以同步方式为主的控制方式，在功能部件之间采用异步方式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="指令执行过程"&gt;指令执行过程
&lt;/h4&gt;&lt;p&gt;一条指令执行过程可以分为三个阶段： 取指令阶段、分析取数阶段和执行阶段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;取指令阶段&lt;/p&gt;
&lt;p&gt;将现行指令从主存中取出来并送至指令寄存器中去。&lt;/p&gt;
&lt;p&gt;具体的操作为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(PC)→MAR&lt;/p&gt;
&lt;p&gt;将程序计数器（PC）中的内容送至存储器地址寄存器（MAR），并送地址总线（AB）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read&lt;/p&gt;
&lt;p&gt;由控制单元（ CU ）经控制总线（CB）向主存发读命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;M(MAR) →MDR&lt;/p&gt;
&lt;p&gt;从主存中取出的指令通过数据总线 （DB）送到存储器数据寄存器（MDR）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(MDR)→IR&lt;/p&gt;
&lt;p&gt;将MDR的内容送至指令寄存器（IR） 中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(PC)＋1→PC&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将PC的内容递增，为取下一条指令 做好准备&lt;/p&gt;
&lt;p&gt;以上这些操作对任何一条指令来说都是必须要执行的操作，所以称为&lt;strong&gt;公共操作&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分析取数阶段&lt;/p&gt;
&lt;p&gt;取出指令后，机器立即进入分析指令阶段，指令译码器ID可识别和区分不同的指令类型及各种获取操作数的方法。由于各条指令功能不同，寻址方式也不同，所以分析取数阶段的操作是各不相同的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行阶段&lt;/p&gt;
&lt;p&gt;执行阶段完成指令规定的各种操作， 形成稳定的运算结果，并将其存储起来&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="指令的微操作序列"&gt;指令的微操作序列
&lt;/h4&gt;&lt;p&gt;控制器在实现一条指令的功能时，总要把每条指令分解成为&lt;strong&gt;一系列时间上先后有序的最基本、最简单的微操作&lt;/strong&gt;，即微操作序列。微操作序列是与CPU的&lt;strong&gt;内部数据通路&lt;/strong&gt;密切相关的，不同的数据通路就有不同的微操作序列&lt;/p&gt;
&lt;h3 id="微程序控制原理"&gt;微程序控制原理
&lt;/h3&gt;&lt;p&gt;微程序设计技术的实质是&lt;strong&gt;将程序设计技术和存储技术相结合&lt;/strong&gt;，即用程序设计的思想方法来组织操作控制逻辑，将微操作控制信号按一定规则进行信息编码（代码化），形成&lt;strong&gt;控制字（微指令）&lt;/strong&gt;，再把这些微指令按时间先后排列起来，存放在一个&lt;strong&gt;只读存储器&lt;/strong&gt;中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;微操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;计算机中&lt;strong&gt;最基本的、不可再分解&lt;/strong&gt;的操作&lt;/p&gt;
&lt;p&gt;一条机器指令可以分解成一个微操作序列&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;微命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;控制计算机各部件&lt;strong&gt;完成某个基本微操作&lt;/strong&gt;的命令。&lt;/p&gt;
&lt;p&gt;微命令与微操作&lt;strong&gt;一一对应&lt;/strong&gt;，微命令是微操作的控制信号，微操作是微命令的操作过程。&lt;/p&gt;
&lt;p&gt;微命令有&lt;strong&gt;兼容性和互斥性&lt;/strong&gt;之分，兼容性微命令是指那些可以同时产生，共同完成某一些微操作的微命令；而互斥性微命令是指在机器中不允许同时出现的微命令。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;微指令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;控制存储器中的一个单元的内容，即&lt;strong&gt;控制字&lt;/strong&gt;，它是若干个微命令的&lt;strong&gt;集合&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一条微指令通常至少包含两大部分信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作控制字段，又称&lt;strong&gt;微操作码字段&lt;/strong&gt;， 用以产生某一步操作所需的各微操作控制信号。&lt;/li&gt;
&lt;li&gt;顺序控制字段，又称&lt;strong&gt;微地址码字段&lt;/strong&gt;， 用以控制产生下一条要执行的微指令地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;微指令有&lt;strong&gt;垂直型和水平型&lt;/strong&gt;之分，垂直型微指令接近于机器指令的格式，每条微指令只能完成一个基本操作。水平型微指令则具有良好的并行性，每条微指令可以完成较多的基本操作&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;微地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;存放控制字的控制存储器的单元地址就称为微地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;微周期&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从控制存储器中读取一条微指令并执行相应的微命令所需的全部时间称为微周期&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;微程序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一系列&lt;strong&gt;微指令的有序集合&lt;/strong&gt;就是微程序&lt;/p&gt;
&lt;p&gt;一条机器指令对应于一段微程序&lt;/p&gt;
&lt;p&gt;微程序和程序是两个不同的概念。微程序是由微指令组成的，它用于描述机器指令，实际上是机器指令的实时解释器，它是由计算机的设计者事先编制好并存放在控制存储器中的。对于程序员来说，计算机系统中微程序一级的结构和功能是&lt;strong&gt;透明&lt;/strong&gt;的。而程序则最终由机器指令组成，它是由软件设计人员事先编制好并存放在主存或辅存中的。&lt;/p&gt;
&lt;p&gt;所以说，微程序控制的计算机涉及到两个层次：一个是机器语言或汇编语言程序员所看到的&lt;strong&gt;传统机器层&lt;/strong&gt;，包括：机器指令、 工作程序、主存储器；另一个是机器设计者看到的&lt;strong&gt;微程序层&lt;/strong&gt;，包括：微指令、微程序和控制存储器&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/rkGtD4D/image-20221113092507970.png"
loading="lazy"
alt="image-20221113092507970"
&gt;&lt;/p&gt;
&lt;h4 id="微指令编码法"&gt;微指令编码法
&lt;/h4&gt;&lt;p&gt;微指令编码法指的就是&lt;strong&gt;操作控制字段的编码方法&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;直接控制法（不译码法）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;操作控制字段中的各位分别可以直接控制计算机，不需要进行译码。操作控制字段的每一个独立的二进制位代表一个微命令，该位为“1”表示这个微命令有效， 为“0”表示这个微命令无效。每个微命令对应并控制数据通路中的一个微操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结构简单，并行性强，操作速度快，&lt;/li&gt;
&lt;li&gt;微指令字太长，若微命令的总数为N个，则微指令字的操作控制字段就要有N位。另外，在N个微命令中，有许多是互斥的，不允许并行操作，将它们安排在一条微指令中是毫无意义的，只会使信息的利用率下降。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;最短编码法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使得微指令字最短。这种方法将所有的微命令统一编码，&lt;strong&gt;每条微指令只定义一个微命令&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;若微命令的总数为N， 操作控制字段的长度为L，则：$L\ge log_2N$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;字段编码法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（&lt;strong&gt;仅要求&lt;/strong&gt;字段直接编码法）&lt;/p&gt;
&lt;p&gt;这种方法将操作控制字段分为若干个小段，每段内采用最短编码法，段与段之间采用直接控制法。这种方法又可进一步分为字段直接编码法和字段间接编码法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;字段直接编码法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;各字段都可以独立地定义本字段的微命 令，而和其他字段无关，因此又称为显式编 码或单重定义编码方法&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/TrJbhGp/image-20221113100036118.png"
loading="lazy"
alt="image-20221113100036118"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;字段间接编码法&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;操作控制字段的分段原则&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把互斥性的微命令分在同一段内， 兼容性的微命令分在不同段内。这样不仅有助于&lt;strong&gt;提高信息的利用率，缩短微指令字长&lt;/strong&gt;，而且有助于&lt;strong&gt;充分利用硬件所具有的并行性&lt;/strong&gt;，加快执行的速度&lt;/li&gt;
&lt;li&gt;与数据通路结构相适应&lt;/li&gt;
&lt;li&gt;每个小段中包含的信息位不能太多， 否则将增加译码线路的复杂性和译码时间&lt;/li&gt;
&lt;li&gt;一般每个小段还要留出一个状态，表示本字段不发出任何微命令。因此当某字段的长度为三位时，最多只能表示七个互斥的微命令，通常用000表示不操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="微程序控制器的组成和工作过程"&gt;微程序控制器的组成和工作过程
&lt;/h4&gt;&lt;p&gt;&lt;img src="https://i.ibb.co/Y3cqdMr/image-20221113102442743.png"
loading="lazy"
alt="image-20221113102442743"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;微地址形成部件&lt;/p&gt;
&lt;p&gt;产生初始微地址和后继微地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微地址寄存器（ $\mu$MAR ）&lt;/p&gt;
&lt;p&gt;接受微地址形成部件送来的微地址， 为在CM中读取微指令作准备。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;控制存储器（CM）&lt;/p&gt;
&lt;p&gt;微程序控制器的&lt;strong&gt;核心&lt;/strong&gt;部件，用来存放微程序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微指令寄存器（$\mu$IR ）&lt;/p&gt;
&lt;p&gt;存放从CM取出的正在执行的微指令&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;微程序控制器的工作过程实际上就是在微程序控制器的控制下，计算机执行机器指令的过程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;执行取指令公操作。&lt;/p&gt;
&lt;p&gt;取指令的公共操作通常由一段取指微程序来完成，这 个取指微程序也可能仅由一条微指令组成。 具体的执行是：在机器开始运行时，自动将取指微程序的入口微地址送$\mu$MAR，并从CM中读出相应的微指令送入$\mu$IR。微指令的操作控制字段产生有关的微命令，用来控制实现取机器指令的公共操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;取指微程序的入口地址一般为CM的0号单元&lt;/strong&gt;， 当取指微程序执行完后，从主存中取出的机器指令就已存入指令寄存器IR中了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由机器指令的操作码字段通过&lt;strong&gt;微地址形成部件&lt;/strong&gt;产生出该机器指令所对应的微程序的入口地址，并送入$\mu$MAR。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从CM中逐条取出对应的微指令并执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行完对应于一条机器指令的一段微程序后又回到取指微程序的入口地址，继续第⑴步，以完成取下条机器指令的公共操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上是一条机器指令的执行过程，如此周而复始，直到整个程序执行完毕为止。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;入口地址形成&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当公用的取指微程序从主存中取出机器指令之后， 由&lt;strong&gt;机器指令的操作码字段指出各段微程序的入口地址（初始微地址）&lt;/strong&gt;。这是一种多分支 （或多路转移）的情况，由机器指令的操作码转换成初始微地址的方式主要有三种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一级功能转换&lt;/p&gt;
&lt;p&gt;如果机器指令操作码字段的位数和位置固定，可以直接使操作码与入口地址码的部分位&lt;strong&gt;相对应&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二级功能转换&lt;/p&gt;
&lt;p&gt;当同类机器指令的操作码字段的位数和位置固定，而不同类机器指令的操作码的位数和位置不固定时，就不能再采用一级功能转换的方法。所谓二级功能转换是指第一次&lt;strong&gt;先按指令类型标志转移&lt;/strong&gt;，以区分出指令属于哪一类，如：是单操作数指令， 还是双操作数指令等。因为每一类机器指令中操作码字段的位数和位置是固定的， 所以第二次即可按操作码区分出具体是哪条指令，以便找出相应微程序的入口微地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过PLA电路实现功能转换&lt;/p&gt;
&lt;p&gt;当机器指令的操作码位数和位置&lt;strong&gt;都不固定&lt;/strong&gt;时，可以采用PLA电路将每条机器指令的操作码翻译成对应的微程序入口地址。这种方法对于变长度、变位置的操作码显得更有效，而且转换速度较快&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;后续地址形成&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;后继微地址的形成方法对微程序编制的灵活性影响很大，它主要有两大基本类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;增量方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种方式和机器指令的控制方式很类似， 它也有顺序执行、转移和转子之分。顺序执行时后继微地址就是现行微地址加上一个增量（通常为1）；转移或转子时，由微指令的顺序控制字段产生转移微地址。因此，在微程序控制器中应当有一个微程序计数器 （ $\mu$PC），为了降低成本，一般情况下都是将微地址寄存器$\mu$MAR改为具有计数功能的寄存器，以代替$\mu$PC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;断定方式&lt;/p&gt;
&lt;p&gt;断定方式的后继微地址可由微程序设计者指定，或者根据微指令所规定的测试结果直接决定后继微地址的全部或部分值。 这是一种直接给定与测试断定相结合的方式，其顺序控制字段一般由两部分组成： 非测试段和测试段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;非测试段，可由设计者指定，一般是微地址的高位部分，用来指定后继微地址在CM中的某个区域内。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试段，根据有关状态的测试结果确定其地址值，一般对应微地址的低位部分。这相当于在指定区域内断定具体的分支。所依据的测试状态可能是指定的开关状态、指令操作码、状态字等。&lt;/p&gt;
&lt;p&gt;测试段如果只有一位，则微地址将产生两个分支，若有两位，则最多可产生四个分支，依此类推，测试段为n位最多可产生$2^n$个分支&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="微程序设计"&gt;微程序设计
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;水平型微指令及水平型微程序设计&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;水平型微指令是指&lt;strong&gt;一次能定义并能并行执行多个微命令的微指令&lt;/strong&gt;。它的并行操作能力强，效率高，灵活性强，执行一条机器指令所需微指令的数目少，执行时间短；但微指令字较长，增加了控存的横向容量，同时微指令和机器指令的差别很大， 设计者只有熟悉了数据通路，才有可能编制出理想的微程序，一般用户不易掌握。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;垂直型微指令和垂直型微程序设计&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;垂直型微指令是指&lt;strong&gt;一次只能执行一个微命令的微指令&lt;/strong&gt;。它的并行操作能力差， 一般只能实现一个微操作，控制一、二个信息传送通路，效率低，执行一条机器指令所需的微指令数目多，执行时间长；但是微指令与机器指令很相似，所以容易掌握和利用，编程比较简单，不必过多地了解数据通路的细节，且微指令字较短。&lt;/p&gt;
&lt;h3 id="指令流水线"&gt;指令流水线
&lt;/h3&gt;&lt;p&gt;（不做计算方面要求，仅考察概念）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;流水线基本原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;流水线技术是一种&lt;strong&gt;显著提高指令执行速度与效率&lt;/strong&gt;的技术。方法是：指令取指完成后，不等该指令执行完毕即可取下一条指令。 如果把一条指令的解释过程进一步细分，例如 ，把分析、执行两个过程分成&lt;strong&gt;取指FI、译码DI、计算操作数地址CO、取操作数FO、执行指令EI和写回寄存器WO&lt;/strong&gt;六个子过程，并用六个子部件分别处理这六个子过程。&lt;/p&gt;
&lt;p&gt;这样只需在上一指令的第一子过程处理完毕进入第二子过程处理时，在第一子部件中就开始对第二条指令的第一子过程进行处理。随着时间推移，这种重叠操作最后可达到六个子部件同时对六条指令的子过程进行操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;影响流水线性能的因素&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在流水线中会出现三种相关，影响流水线的畅通流动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;结构相关&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当多条指令进入流水线后，硬件资源满足不了指令重叠执行的要求时产生。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据相关&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;指令在流水线中重叠执行时，当后继指令需要用到前面指令的执行结果时发生。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;控制相关&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当流水线遇到分支指令和其他改变PC值的指令时引起&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;性能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通常用吞吐率、加速比和效率3项指标来衡量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;吞吐率&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;单位时间内流水线所完成指令或输出结果的数量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;加速比&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;m 段的流水线的速度与等功能的非流水线的速度之比&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;效率&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;指流水线中各功能段的利用率，由于流水线有建立时间和排空时间，因此各功能段的设备不可能一直处于工作状态&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;超标量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过重复设置多个功能部件，并让这些功能部件同时工作起来来提高指令的执行速度在超标量的处理器结构中，整数和浮点数运算 、装入、存储以及条件转移等普通操作指令可以同时启动并独立执行。 超标量流水CPU是指集成了多条流水线结构的 CPU，当流水线满载时，每个时钟周期可以完成一条以上的指令。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;流水线分类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;流水线按功能可分成单功能流水线和多功能流水线两种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单功能流水线只完成一种功能。如浮点加法或乘法流水线。&lt;/li&gt;
&lt;li&gt;多功能流水线则可完成多种功能，它允许在不同时间，甚至同一时间内在流水线内连接不同功能段的子集来实现不同功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;流水线按工作方式可分为静态流水线和动态流水线两种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在静态流水线中，同一时间内它只能以一种功能方式工作。它可以是单功能的，也可以是多功能的。当是多功能流水线时，则从一种功能方式变为另一种功能方式时，必须先排空流水线，然后为另一种功能设置初始条件后方可使用。显然，不希望这种功能的转换频繁的发生，否则将严重影响流水线的处理效率。&lt;/li&gt;
&lt;li&gt;动态流水线则允许在同一时间内将不同的功能段连接成不同的功能子集（前提条件是功能部件的使用不发生冲突），以完成不同的运算功能。 显然，动态流水线必是多功能流水线，而单功能流水线则必是静态的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chapter-7-总线"&gt;Chapter 7 总线
&lt;/h2&gt;&lt;p&gt;总线是一组能为多个部件服务的&lt;strong&gt;公共信息传送线路&lt;/strong&gt;，它能分时地发送与接收各部件的信息。&lt;/p&gt;
&lt;p&gt;总线结构的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大大减少信息传送线的数目&lt;/li&gt;
&lt;li&gt;提高计算机扩充内存及外部设备的&lt;strong&gt;灵活性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="分类"&gt;分类
&lt;/h3&gt;&lt;p&gt;按&lt;strong&gt;功能层次&lt;/strong&gt;分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;片内总线：CPU内部的总线&lt;/li&gt;
&lt;li&gt;系统总线：计算机各部件之间的信息传输线
&lt;ul&gt;
&lt;li&gt;数据总线：双向，与机器字长、存储字长有关&lt;/li&gt;
&lt;li&gt;地址总线：单向，与存储地址、 I/O地址有关&lt;/li&gt;
&lt;li&gt;控制总线：部分出部分入，控制器控制所有部件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通信总线：用于计算机系统之间、计算机系统与其他系统（如控制仪表、移动通信等）之间的通信&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按&lt;strong&gt;数据线的多少&lt;/strong&gt;分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并行总线：含有多条数据线的总线，可以实现一个数据的&lt;strong&gt;多位同时&lt;/strong&gt;传输。&lt;/li&gt;
&lt;li&gt;串行总线：含有一条双向数据线或两条单向数据线的总线，可以实现一个数据的&lt;strong&gt;各位按照一定的速度和顺序&lt;/strong&gt;依次传输。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="结构"&gt;结构
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;单总线结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;单总线结构是将CPU、主存、I/O设备（通过 I/O接口）都挂在&lt;strong&gt;一组总线&lt;/strong&gt;上。&lt;/p&gt;
&lt;p&gt;CPU与主存、CPU与外设之间可以直接进行信息交换，主存与外设、外设与外设之间也可以直接进行信息交换，而不需经过CPU的干预。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/2KHkLPB/image-20221204201645457.png"
loading="lazy"
alt="image-20221204201645457"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;双总线结构&lt;/strong&gt;
这种结构保持了单总线结构的优点，又在CPU和主存之间专门设置了一组存储总线。
优缺点：由于CPU和主存之间需要频繁地交换信息，采用专用的存储总线后，存取速度将大大提高，同时也减轻了系统总线的负担，但是硬件的代价随之有所增加&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/XfH4x4L/image-20221204201724861.png"
loading="lazy"
alt="image-20221204201724861"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三总线结构&lt;/strong&gt;
在双总线系统上增加I/O总线&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/pJFGNJC/image-20221204201809361.png"
loading="lazy"
alt="image-20221204201809361"
&gt;&lt;/p&gt;
&lt;h3 id="性能指标"&gt;性能指标
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;总线宽度：数据总线的根数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;总线带宽：数据传输率&lt;/p&gt;
&lt;p&gt;总线带宽定义为总线的最大数据传输率，即每秒传输的字节数。在同步通信中，总线的带宽与总线时钟密不可分，总线时钟频率的高低决定了总线带宽的大小。
$$
B=W\times\frac{F}{N}
$$
其中，W为数据总线宽度，通常以字节为单位；F为总线的时钟频率；N为完成一次数据传送所用的时钟周期数。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/9Nk8Bs7/image-20221204202328695.png"
loading="lazy"
alt="image-20221204202328695"
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时钟同步/异步：总线上的数据与时钟同步的称为同步总线，与时钟不同步的称为异步总线&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信号线数：地址总线、数据总线和控制总线三种总线数的总和。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="总线仲裁"&gt;总线仲裁
&lt;/h3&gt;&lt;p&gt;由于总线上连接着多个部件，何时由哪个部件发送信息，如何定时，如何防止信息丢失，如何避免多个设备同时发送，如何规定接收部件等一系列问题都需要总线控制器统一管理。
为了保证同一时刻只有一个申请者使用总线，总线控制机构中设置有总线判优和仲裁控制逻辑。
总线判优按其仲裁控制机构的设置可分为&lt;strong&gt;集中式控制&lt;/strong&gt;和&lt;strong&gt;分布式控制&lt;/strong&gt;两种。&lt;/p&gt;
&lt;h4 id="集中式"&gt;集中式
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;链式查询方式&lt;/strong&gt;
链式查询方式的总线控制器使用三根控制线与所有部件和设备相连。
三根控制线是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总线请求（BR）：该线有效，表示至少有一个部件或设备要求使用总线&lt;/li&gt;
&lt;li&gt;总线忙（BS）：该线有效，表示总线正在被某部件或设备使用&lt;/li&gt;
&lt;li&gt;总线批准（BG）：该线有效，表示总线控制器响应总线请求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当一个或多个设备同时发出总线使用请求信号BR时，中央仲裁器发出的总线授权信号BG沿着菊花链串行的从一个设备依次传送到下一个设备，到达离出发点最近的发出总线请求的设备之后就不再往下传。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计数器定时查询方式&lt;/strong&gt;
计数定时查询方式的总线上的每个部件可以通过公共的BR 线发出请求，总线控制器收到请求之后，在BS为“0”的情况下， 让计数器开始计数，定时地查询各个部件以确定是谁发出的请求。
当查询线上的计数值与发出请求的部件号一致时，该部件就使BS线置“1”，获得了总线使用权，并中止计数查询，直至该部件完成数据传送之后，撤消BS信号。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;独立请求方式&lt;/strong&gt;
在独立请求方式中， 每一个共享总线的部件均有一对控制线：总线请求BRi和总线批准BGi。当某个部件请求使用总线时，便发出BRi，总线控制器中有一排队电路，根据一定的优先次序决定首先响应哪个部件的请求BRi，然后给该部件送回批准信号BGi。
独立请求方式的优点是响应时间快，然而这是以增加控制线数和硬件电路为代价的。此方式对优先次序的控制也是相当灵活的，它可以预先固定，也可以通过程序来改变优先次序。&lt;/p&gt;
&lt;h4 id="分布式"&gt;分布式
&lt;/h4&gt;&lt;p&gt;同集中式仲裁相比，分布式仲裁不需要中央仲裁器，而是让各个主设备功能模块都有自己的仲裁号和仲裁电路。
需要使用总线时，各个设备的功能模块将自己唯一的仲裁号发送到共享的总线上，各自的仲裁电路再将从仲裁总线上获得的仲裁号和自己的仲裁号相对比，获胜的仲裁号将保留在仲裁总线上，相应设备的总线请求获得响应。
多个设备提出总线请求时，一般采用优先级或公平策略进行仲裁&lt;/p&gt;
&lt;h2 id="chapter-8-外部设备"&gt;Chapter 8 外部设备
&lt;/h2&gt;&lt;p&gt;除主机以外，而又围绕着主机而设置的各种硬件装置叫做外部设备或外围设备&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入/输出设备
从计算机的角度出发，向计算机输入信息的外部设备称为输入设备；接受计算机输出信息的外部设备称为输出设备。&lt;/li&gt;
&lt;li&gt;辅助存储器
辅助存储器即&lt;strong&gt;外存储器&lt;/strong&gt;，它是指主机以外的存储装置，又称为后援存储器。&lt;/li&gt;
&lt;li&gt;终端设备
终端设备由输入设备、输出设备和终端控制器组成，通常通过通信线路与主机相连。终端设备具有向计算机输入和接收计算机输出的能力，具有与通信线路连接的通信控制能力，有些还具有一定的数据处理能力。&lt;/li&gt;
&lt;li&gt;过程控制设备
模/数、数/模转换设备均是过程控制设备，有关的检测设备也属于过程控制设备。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="磁介质存储器"&gt;磁介质存储器
&lt;/h3&gt;&lt;h4 id="读写过程"&gt;读写过程
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;磁记录介质
在磁介质存储器中，信息是记录在一薄层磁性材料的表面上，这个薄层称为&lt;strong&gt;磁层&lt;/strong&gt;。磁层与所附着的载体被称为记录介质或记录媒体。&lt;/li&gt;
&lt;li&gt;磁头
磁头是磁记录设备的关键部件之一，它是一种&lt;strong&gt;电磁转换元件&lt;/strong&gt;。写磁头实现把电脉冲表示的二进制代码转换成磁记录介质上的磁化状态，即电－磁转换；读磁头实现把磁记录介质上的磁化状态转换成电脉冲，即磁－电转换。在读写过程中，记录介质与磁头之间相对运动，一般是记录介质运动而磁头不动&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;写入过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在写磁头线圈中通以一定方向的写电流，于是在磁头下方的一个局部区域被磁化，形成一个&lt;strong&gt;磁化单元&lt;/strong&gt;或称记录单元。当这部分介质移出磁头作用区后，仍将留下足够强的剩磁。在写磁头中通以正、负两个不同方向的写电流，就会产生&lt;strong&gt;两种不同的剩磁状态&lt;/strong&gt;，正好对应二进制信息的“1”和“0”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;读出过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/02wbd6J/image-20221206143903702.png"
loading="lazy"
alt="image-20221206143903702"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;读出过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;读出时，读出线圈不外加电流。当某一磁化单元运动到读磁头下方时，使得磁头中流过的磁通有很大的变化，于是在读出线圈两端产生&lt;strong&gt;感应电动势&lt;/strong&gt;e。感应电动势e经放大、检波、限幅、整形和选通后，获得符合要求的信号。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/JFjmB8G/image-20221206144108024.png"
loading="lazy"
alt="image-20221206144108024"
&gt;&lt;/p&gt;
&lt;h4 id="技术指标-1"&gt;技术指标
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;记录密度&lt;/strong&gt;
记录密度是指磁介质存储器单位长度或单位面积磁层表面所能存储的二进制信息量。通常以&lt;strong&gt;道密度&lt;/strong&gt;和&lt;strong&gt;位密度&lt;/strong&gt;表示，也可用两者的乘积&lt;strong&gt;面密度&lt;/strong&gt;来表示。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;道密度
道密度又叫&lt;strong&gt;横向密度&lt;/strong&gt;，是指垂直于磁道方向上单位长度中的磁道数目，道密度 的单位是道/英寸（TPI）或道/毫米（TPM）。磁道指的是磁头写入磁场在记录介质表面上形成的磁化轨迹。&lt;/li&gt;
&lt;li&gt;位密度
位密度又叫&lt;strong&gt;纵向密度&lt;/strong&gt;，是指沿磁道方向上单位长度中所能记录的二进制信息的位数，位密度的单位为位/英寸（bpi）或位/毫（bpm）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;存储容量&lt;/strong&gt;
存储容量是指整个磁介质存储器所能存储的二进制信息的&lt;strong&gt;总量&lt;/strong&gt;，一般用位或字节为单位表示，它与存储介质尺寸和记录密度直接相关。磁介质存储器的存储容量有&lt;strong&gt;非格式化容量和格式化容量&lt;/strong&gt;两种指标。非格式化容
量是指磁记录表面上可全部利用的磁化单元数；格式化容量是指用户实际可以使用的存储容量。格式化容量一般约为非格式化容量的60～80％左右。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;平均存取时间&lt;/strong&gt;
当磁头接到读/写命令，从原来的位置移动到指定位置，并完成读/写操作的时间叫存取时间。对于磁盘存储器来说，存取时间主要包括4部分：&lt;/p&gt;
&lt;p&gt;第一部分是指磁头从原先位置移动到目的磁道所需要的时间，称为定位时间或寻道时间；&lt;/p&gt;
&lt;p&gt;第二部分是指在到达目的磁道以后，等待被访问的记录块旋转到磁头下方的等待时间，称为旋转时间或等待时间；&lt;/p&gt;
&lt;p&gt;第三部分是信息的读写操作时间，也称为传输时间；&lt;/p&gt;
&lt;p&gt;最后是磁盘控制器的开销。&lt;/p&gt;
&lt;p&gt;由于寻找不同磁道和等待不同记录块所花的时间不同，所以通常取它们的平均值。传输时间和控制器的开销相对平均寻道时间$T_s$和平均等待时间$T_w$来说要小得多，所以磁盘的平均存取时间Ta约等于
$$
T_a=T_s+T_w=\frac{T_{smax}+T_{smin}}{2}+\frac{T_{wmax}+T_{wmin}}{2}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据传送率&lt;/strong&gt;
磁介质存储器在单位时间内向主机传送数据的位数或字节数，称为数据传送率Dr ，单位为位/秒或字节/秒。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;误码率&lt;/strong&gt;
误码率是衡量磁介质存储器出错概率的参数，它等于读出的出错信息位数和读出总的信息位数之比。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="数字磁记录方式"&gt;数字磁记录方式
&lt;/h4&gt;&lt;p&gt;为了提高磁介质存储器的性能，扩大存储容量，加快存取速度，除了要不断改善磁头和记录介质的电磁性能和机械性能之外，选用高性能的数字磁记录方式对提高记录密度和可靠性也是很重要的。磁记录方式是一种&lt;strong&gt;编码方式&lt;/strong&gt;，即按照某种规律将一连串的二进制数字信息变换成记录介质上相应磁化翻转形式&lt;/p&gt;
&lt;h5 id="直接记录方式"&gt;直接记录方式
&lt;/h5&gt;&lt;p&gt;当记录密度较低时，可以不编码，直接按记录信息的“0”、“1”排序记录。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;归零制（RZ）
记录“1”时，磁头线圈中通以正向脉冲电流；记录“0”时，通以反向脉冲电流。由于脉冲电流均要回到零，故称为归零制。
归零制的两个脉冲之间有一段间隔没有电流，相应的这段磁层&lt;strong&gt;未被磁化&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不归零制（NRZ）&lt;/p&gt;
&lt;p&gt;记录“1”时，磁头线圈以中通正向电流；记录“0”时，通以反向电流。磁头中电流不回到零。如果记录的相邻两位信息相同（即连续录“1”或“0”）时，写电流方向不变；只有当记录的相邻两位信息不相同（即“0”和“1”交替）时，写电流才改变方向，所以又称为异码变化或“见变就翻”的不归零制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不归零－1制（NRZ-1）
这是一种改进的不归零制，记录“1”时，磁头线圈中写电流改变方向，使磁层磁化翻转；而记录“0”时，写电流方向维持不变，保持原来的磁化状态，所以称之为见“1”就翻的不归零制。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/4MM36tY/image-20221206145927157.png"
loading="lazy"
alt="image-20221206145927157"
&gt;&lt;/p&gt;
&lt;p&gt;以上各种记录方式，目前已很少应用，但不归零制是编码方式的基础，无论哪一种编码方式，只要数据序列变换成记录序列之后，均按照NRZ-1制规则记录到磁层上。&lt;/p&gt;
&lt;h5 id="按位编码记录方式"&gt;按位编码记录方式
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;调相制（PE）&lt;/strong&gt;
调相制又称&lt;strong&gt;相位编码&lt;/strong&gt;方式，它采用0°和180°相位的不同分别示“1”或“0”。它的编码规则是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录“1”时，写电流在位周期中间由负变正；&lt;/li&gt;
&lt;li&gt;记录 “0” 时，写电流在位周期中间由正变负。&lt;/li&gt;
&lt;li&gt;当连续出现两个或两个以上 “1” 或 “0” 时，为了维持上述原则，在位周期的边界上也要翻转一次。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种记录方式常用于磁带机中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;调频制（FM）&lt;/strong&gt;
调频制是根据写电流的频率来区分记录“1”或“0”的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录“1”时，写电流在位周期中间和边界各改变一次方向；&lt;/li&gt;
&lt;li&gt;记录“0”时，写电流仅在位周期边界改变一次方向。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，记录“1”的磁化翻转频率为记录“0”时的两倍，故又称&lt;strong&gt;倍频制&lt;/strong&gt;。若以T0表示位周期，则调频制的磁化翻转间距为&lt;strong&gt;0.5T0和T0&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;改进的调频制（MFM）&lt;/strong&gt;
MFM制是在FM制基础上改进的一种记录方式，又称为延迟调制码或密勒码。其编码规则为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录“1”时，写电流在位周期中间改变方向；&lt;/li&gt;
&lt;li&gt;记录独立的一个“0”，写电流不改变方向；&lt;/li&gt;
&lt;li&gt;记录连续的两个“0”，写电流在位周期边界改变方向。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;改进的调频制的磁化翻转间距有三种：T0、1.5T0、2T0 ，对应于三种不同的频率，所以又称为&lt;strong&gt;三频制&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;改进的改进型调频制（$M^2FM$）&lt;/strong&gt;
$M^2FM$制的编码规则为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录“1”时，写电流在位周期中间改变方向；&lt;/li&gt;
&lt;li&gt;记录独立的一个“0”，写电流不改变方向；&lt;/li&gt;
&lt;li&gt;记录连续的两个“0”，写电流在位周期边界处改变方向，产生磁化翻转；&lt;/li&gt;
&lt;li&gt;记录连续两个以上的“0”，写电流在前两个“0”的位周期边界处改变方向，以后每隔两个“0”的位周期边界处，写电流再改变一次方向，产生翻转翻转。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;改进的改进型调频制的磁化翻转间距有四种：&lt;strong&gt;T0、1.5T0、2T0、2.5T0&lt;/strong&gt;，对应于四种不同的频率，所以又称为&lt;strong&gt;四频制&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/m8G1FX0/image-20221206150853521.png"
loading="lazy"
alt="image-20221206150853521"
&gt;&lt;/p&gt;
&lt;h3 id="磁盘存储器"&gt;磁盘存储器
&lt;/h3&gt;&lt;h4 id="基本结构"&gt;基本结构
&lt;/h4&gt;&lt;p&gt;硬盘存储器的硬件包括&lt;strong&gt;硬盘控制器（适配器）、硬盘驱动器以及连接电缆&lt;/strong&gt;。硬盘控制器对硬盘进行管理，并在主机和硬盘之间传送数据。硬盘驱动器内有多个盘片，它们被叠装在主轴上，构成一个盘组，每个盘片的两面都可用作记录面。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/6mh7PB7/image-20221206152104103.png"
loading="lazy"
alt="image-20221206152104103"
&gt;&lt;/p&gt;
&lt;p&gt;硬盘存储器可分为&lt;strong&gt;温彻斯特盘&lt;/strong&gt;和&lt;strong&gt;非温彻斯特盘&lt;/strong&gt;两类。温彻斯特盘的主要特点是磁头、盘片、磁头定位机构、主轴，甚至连读/写驱动电路等都被&lt;strong&gt;密&lt;/strong&gt;封在一个盘盒内，构成一个头－盘组合体，这个组合体不可随意拆卸，它的防尘性能好，可靠性高，对使用环境要求不高。而非温式磁盘的磁头和盘片等不是密封的，因此要求有超净使用环境。&lt;/p&gt;
&lt;p&gt;硬盘存储器还可分为&lt;strong&gt;固定头硬盘&lt;/strong&gt;和&lt;strong&gt;活动头硬盘&lt;/strong&gt;两类。固定头硬盘机中，每个磁道对应一个磁头，省去了磁头找磁道的时间，存取速度快。但由于磁头太多，使磁盘的道密度不可能很高。移动头硬盘机中，每个盘面上只有一个读写头，安装在读写臂上，当需要在不同磁道上读写时，要驱动读写臂沿盘面作径向移动。由于增加了寻道时间，所以其存取时间比固定头硬盘机要长。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;硬盘驱动器&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;磁头&lt;/strong&gt;
接触启停式浮动磁头是指读/写操作时磁头&lt;strong&gt;浮空&lt;/strong&gt;，不与盘面记录区相接触，以免划伤记录区。但在启动前和停止后，磁头将仍与盘面接触。具体的做法是：在盘面记录区与轴心之间有一段空白区，被当作启停区或着陆区。未启动前及停止后，磁头停在启停区，与盘面接触。当盘片旋转并达到额定转速时，气垫浮力使磁头浮起并达到所需的浮动高度，然后将磁头向外移至0号磁道，准备寻道&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;磁头定位系统&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;步进电机定位机构
整个定位机构是开环控制。根据现行磁道号与目的的磁道号之差，求得步进脉冲数，每发一个步进脉冲，脉冲移动一个道距。步进电机定位机构的结构紧凑、控制简单，但定位精度比较低。&lt;/li&gt;
&lt;li&gt;音圈电机定位机构
音圈电机可以直接驱动磁头作直线运动，整个定位系统是一个带有速度和位置反馈的闭环调节自动控制系统，其特点是寻道速度快，定位精度高。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="信息分布"&gt;信息分布
&lt;/h4&gt;&lt;p&gt;在硬盘中信息分布呈如下层次：&lt;strong&gt;记录面、圆柱面、磁道、扇区&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;记录面&lt;/strong&gt;
硬盘驱动器中可有多个盘片（数量为1~20片），每个盘片有两个记录面，&lt;strong&gt;每个记录面对应一个磁头&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;磁道&lt;/strong&gt;
在读/写时，磁头固定不动，盘片高速旋转，磁化区构成一个&lt;strong&gt;闭合圆环&lt;/strong&gt;，称为磁道。在盘面上，一条条磁道形成一组同心圆，最外圈的磁道为0号，往内则磁道号逐步增加。（每个盘片可有500~2500条磁道）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;圆柱面&lt;/strong&gt;
在一个盘组中，各记录面上相同编号（位置）的诸磁道构成一个圆柱面。例如，某驱动器有4片8面，则8个0号磁道构成0号圆柱面，8个1号磁道构成1号圆柱面。硬盘的圆柱面数等于一个记录面上的磁道数，圆柱面号即对应的磁道号。引入圆柱面的概念是为了&lt;strong&gt;提高硬盘的存储速度&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;扇区&lt;/strong&gt;
通常将&lt;strong&gt;一条磁道划分为若干个段&lt;/strong&gt;，每个段称为一个扇区或扇段，每个扇区存放一个定长信息块（如512个字节）。一条磁道划分多少扇区，每个扇区可存放多少字节，一般由操作系统决定。磁道上的扇区编号从1号开始&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;磁盘地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主机向磁盘控制器送出有关寻址信息，磁盘地址一般表示为：
&lt;strong&gt;驱动器号、圆柱面（磁道）号、记录面（磁头）号、扇区号&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id="技术参数"&gt;技术参数
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;硬盘容量&lt;/strong&gt;
硬盘容量当然是越大越好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主轴转速&lt;/strong&gt;
从理论上来说，转速越快，硬盘的速度越快。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;道密度&lt;/strong&gt;
硬盘驱动器在介质上的道密度可达38 000TPI或更高&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;平均存取时间&lt;/strong&gt;
平均存取时间近似等于平均寻道时间和平均等待时间之和。
&lt;strong&gt;缓存&lt;/strong&gt;
缓存存在的目的是为了解决硬盘内部与接口数据之间速度不匹配的问题，它可以提高硬盘的读写速度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据传输率&lt;/strong&gt;
硬盘的数据传输率分为&lt;strong&gt;内部&lt;/strong&gt;数据传输率和&lt;strong&gt;外部&lt;/strong&gt;数据传输率。内部数据传输率主要依赖于硬盘的旋转速度，因硬盘的品牌及型号不同而有着较大的差异。外部数据传输率指的是系统总线与硬盘缓冲区之间的数据传输率，外部数据传输率与硬盘接口类型和缓存大小有关。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非格式化容量＝最大位密度×最内圈 磁道周长×总磁道数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新的磁盘在使用之前需先进行格式化， 格式化实际上就是在磁盘上划分记录区， 写入各种标志信息和地址信息，这些信息占用了磁盘的存储空间，故格式化之后的有效存储容量要小于非格式化容量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;格式化容量＝每道扇区数×扇区容量 ×总磁道数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/x2TrJzb/image-20221206154700439.png"
loading="lazy"
alt="image-20221206154700439"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/7tDWfTR/image-20221206154713482.png"
loading="lazy"
alt="image-20221206154713482"
&gt;&lt;/p&gt;
&lt;h4 id="分区域记录"&gt;分区域记录
&lt;/h4&gt;&lt;p&gt;传统硬盘驱动器的每个磁道上记录的扇区数是相同的，因而存储的信息量也是相同的，这意味着在磁盘上位密度是变化的。因为内圈磁道的周长短，外圈磁道的周长长，所以&lt;strong&gt;内圈磁道的位密度高，外圈磁道的位密度低&lt;/strong&gt;，最内圈磁道的位密度（最大位密度）决定了磁盘驱动器的容量。
又因为每个磁道记录的信息量及转速是相同的，所以它们的数据传送率也是相同的。&lt;/p&gt;
&lt;p&gt;由于外圈磁道比内圈磁道更长一些，但存储的信息量却相同，所以外圈磁道上明显地存在着浪费。
采用分区域记录（等位密度）技术可以增加硬盘驱动器的容量。由于外圈磁道有更长的周长，所以&lt;strong&gt;外层磁道要比内层磁道包含更多的扇区&lt;/strong&gt;，即外圈磁道上保存的信息比内圈磁道多。&lt;/p&gt;
&lt;p&gt;分区域记录的另一个影响是数据传输率随磁头所处的区域而变化。分区域驱动器还是以恒定速度旋转，可是，&lt;strong&gt;由于外层区域每磁道有更多的扇区，所以数据传输速度要更快一些&lt;/strong&gt;。这就是当今驱动器标注最小和最大连续传输速率的原因，因为传输速率取决于磁头读/写的位置。分区域记录技术的使用，大大地提高了硬盘利用率，与采用每磁道固定扇区的硬盘比较，使驱动器增加了20～50％的硬盘容量。实际上，现在所有的IDE和SCSI都采用分区域记录&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/Zh2Srzh/image-20221206155354263.png"
loading="lazy"
alt="image-20221206155354263"
&gt;&lt;/p&gt;
&lt;h2 id="chapter-9-输入输出系统"&gt;Chapter 9 输入输出系统
&lt;/h2&gt;&lt;h3 id="输入输出接口"&gt;输入输出接口
&lt;/h3&gt;&lt;p&gt;主机和外设的连接方式有&lt;strong&gt;辐射型连接、总线型连接&lt;/strong&gt;等。输入/输出接口（I/O接口）是主机和外设之间的交接界面，通过接口可以实现主机和外设之间的信息交换。
主机和外设各自具有自己的工作特点，它们在信息形式和工作速度上具有很大的差异，接口正是为了&lt;strong&gt;解决这些差异&lt;/strong&gt;而设置的。&lt;/p&gt;
&lt;p&gt;主机和外设之间需要交换的信息有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据信息&lt;/strong&gt;
这类信息可以是通过输入设备送到计算机的&lt;strong&gt;输入数据&lt;/strong&gt;，也可以是经过计算机运算处理和加工后，送到输出设备的&lt;strong&gt;结果数据&lt;/strong&gt;。传送可以是并行的，也可以是串行的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;控制信息&lt;/strong&gt;
这是&lt;strong&gt;CPU对外设的控制信息或管理命令&lt;/strong&gt;，如外设的启动和停止控制、 输入或输出操作的指定、工作方式的选择、中断功能的允许和禁止等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;状态信息&lt;/strong&gt;
这类信息用来标志&lt;strong&gt;外设的工作状态&lt;/strong&gt;，比如，输入设备数据准备好标志，输出设备忙闲标志等。CPU在必要时可通过对它的查询来决定下一步的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;联络信息&lt;/strong&gt;
这是主机和外设间工作的&lt;strong&gt;时间配合信息&lt;/strong&gt;，它与主机和外设间的信息交换方式密切相关。通过联络信息可以决定不同工作速度的外设和主机之间交换信息的最佳时刻，以保证整个计算机系统能统一协调地工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;外设识别信息&lt;/strong&gt;
这是&lt;strong&gt;I/O寻址&lt;/strong&gt;的信息，使CPU能从众多的外设中寻找出与自己进行信息交换的唯一外部设备&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="功能-1"&gt;功能
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;实现主机和外设的&lt;strong&gt;通信联络控制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接口中的同步控制电路用来解决主机与外设的时间配合问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进行&lt;strong&gt;地址译码&lt;/strong&gt;和设备选择&lt;/p&gt;
&lt;p&gt;当CPU送来选择外设的地址码后，接口必须对地址进行译码以产生设备选择信息，使主机能和指定外设交换信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现&lt;strong&gt;数据缓冲&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在接口电路中，一般设置有一个或几个数据缓冲寄存器，用于数据的暂存，以避免因速度不一致而丢失数据。在传送过程中，先将数据送入数据缓冲寄存器中，然后再送到输出设备或主机中去。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据&lt;strong&gt;格式的变换&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在输入或输出操作过程中，为了满足主机或外设的各自要求，接口电路中必须具有完成各类数据相互转换的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;传递&lt;strong&gt;控制命令和状态信息&lt;/strong&gt;
当CPU要启动某一外设时，通过接口中的控制命令寄存器向外设发出启动命令；当外设准备就绪时，则有状态信息送回接口中的状态寄存器，为CPU 提供反馈信息，告诉CPU，I/O设备已经具备和CPU交换数据的条件。当外设向CPU提出中断请求和DMA请求时，CPU也有相应的响应信号反馈给外设。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="组成"&gt;组成
&lt;/h4&gt;&lt;p&gt;接口中要分别传送数据信息、控制信息和状态信息，数据信息、控制信息和状态信息都通过数据总线来传送。大多数计算机都把I/O设备的状态信息视为输入数据，而把控制信息看成输出数据，并在接口中分设各自相应的寄存器，赋以不同的端口地址，各种信息分时地使用数据总线传送到各自的寄存器中。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/HLZ4MmP/image-20221206190919174.png"
loading="lazy"
alt="image-20221206190919174"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;端口&lt;/strong&gt;是指接口电路中可以进行读/写的寄存器，若干个端口加上相应的控制逻辑电路组成接口。&lt;/p&gt;
&lt;p&gt;通常，一个接口中包含有&lt;strong&gt;数据端口、控制端口和状态端口&lt;/strong&gt;。存放数据信息的寄存器称为数据端口，存放控制命令的端口称为命令端口，存放状态信息的寄存器称为状态端口。CPU通过输入指令可以从有关端口中读出信息，通过输出指令可以把信息写入有关端口。对状态端口只进行输入操作，将设备状态标志送到CPU 中去；对命令端口只进行输出操作，CPU将向外设发送各种控制命令。因此，在有的接口电路中状态信息和控制信息共用一个寄存器，称之为设备的控制状态寄存器。&lt;/p&gt;
&lt;h4 id="类型"&gt;类型
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;按数据传送方式分类&lt;/strong&gt;
有串行接口和并行接口。这里所说的数据传送方式指的是外设和接口一侧的传送方式，而在主机和接口一侧，数据总是并行传送的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;按主机访问I/O设备的控制方式分类&lt;/strong&gt;
可分为程序查询式接口、中断接口、DMA接口、通道接口等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;按功能选择的灵活性分类&lt;/strong&gt;
有可编程接口和不可编程接口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;按通用性分类&lt;/strong&gt;
有通用接口和专用接口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;按输入/输出的信号分类&lt;/strong&gt;
有数字接口和模拟接口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;按应用来分类&lt;/strong&gt;
①运行辅助接口。
② 用户交互接口。
③ 传感接口。
④ 控制接口。&lt;/p&gt;
&lt;h4 id="外设的识别与端口寻址"&gt;外设的识别与端口寻址
&lt;/h4&gt;&lt;p&gt;外设识别是通过地址总线和接口电路中的&lt;strong&gt;外设识别电路&lt;/strong&gt;来实现的，I/O端口地址就是主机与外设直接通信的地址，CPU可以通过端口发送命令、读取状态和传送数据。
&lt;strong&gt;端口地址编址方式&lt;/strong&gt;
I/O端口编址方式有两种：一种是&lt;strong&gt;I/O映射方式&lt;/strong&gt;，即把I/O端口地址与主存单元地址分别进行独立的编址；另一种是&lt;strong&gt;存储器映射方式&lt;/strong&gt;，即把端口地址与主存单元地址统一编址。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;独立编址&lt;/strong&gt;
主存地址空间和I/O端口地址空间是相对独立的，分别单独编址。比如，在8086中，其主存地址范围是从00000H～FFFFFH连续的1MB，其I/O端口的地址范围从0000H～ FFFFH，它们互相独立，互不影响。CPU访问主存时，由主存读/写控制线控制；访问外设时，由I/O读/写控制线控制，所以在指令系统中必须设置专门的I/O指令。当CPU使用
I/O指令时，其指令的地址字段直接或间接的指示出端口地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;统一编址&lt;/strong&gt;
I/O端口地址和主存单元的地址是统一编址的，把I/O接口中的端口作为主存单元一样进行访问，不设置专门的I/O指令。
每个外设至少有两个寄存器：&lt;strong&gt;控制状态寄存器和数据缓冲寄存器&lt;/strong&gt;，外设寄存器的地址码是连续的。在PDP-11中，把主存的高4KB地址空间留给外设接口寄存器和CPU内部寄存器使用，这4KB存储空间不允许用户再存放其他内容&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="信息传送控制方式"&gt;信息传送控制方式
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;程序查询方式&lt;/strong&gt;
程序查询方式是一种程序直接控制方式，这是主机与外设间进行信息交换的最简单方式，&lt;strong&gt;输入和输出完全是通过CPU执行程序来完成的&lt;/strong&gt;。
这种方式控制简单，但外设和主机不能同时工作，各外设之间也不能同时工作，系统效率很低，因此，仅适用于外设的数目不多，对I/O处理的实时要求不那么高，CPU的操作任务比较单一，并不很忙的情况&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;程序中断方式&lt;/strong&gt;
外设在作好输入/输出准备时，向主机发中断请求，&lt;strong&gt;主机接到请求后就暂时中止原来执行的程序，转去执行中断服务程序对外部请求进行处理&lt;/strong&gt;，在中断处理完毕后返回原来的程序继续执行。
程序中断不仅允许主机和外设同时并行工作，并且允许一台主机管理多台外设。但是完成一次程序中断需要许多辅助操作，可能使CPU应接不暇；对于一些高速外设，可能会造成信息丢失，因此，它主要适用于中、低速外设&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直接存储器存取（DMA）方式&lt;/strong&gt;
DMA方式是在主存储器和外部设备之间开辟&lt;strong&gt;直接的数据通路&lt;/strong&gt;，可以进行基本上不需要CPU介入的主存和外设之间的信息传送，这样不仅能保证CPU的高效率，而且能满足高速外设的需要。
DMA方式只能进行简单的数据传送操作，在数据块传送的起始和结束时还需CPU及中断系统进行预处理和后处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I/O通道控制方式&lt;/strong&gt;
通道是一个具有&lt;strong&gt;特殊功能的处理器&lt;/strong&gt;，它能独立地执行通道程序，产生相应的控制信号，实现对外设的统一管理和外设与主存之间的数据传送。但它不是一个完全独立的处理机，它要在CPU的I/O指令指挥下才能启动、停止或改变工作状态，是从属于CPU的一个专用处理器。
一个通道执行输入/输出过程全部由通道按照通道程序自行处理，不论交换信息多少，&lt;strong&gt;只打扰CPU两次（启动和停止时）&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id="程序查询方式"&gt;程序查询方式
&lt;/h3&gt;&lt;p&gt;由CPU执行一段输入、输出程序来实现主存与外设之间的数据传送方式，叫做程序直接控制方式。根据外设的不同性质，这种传送方式又可分为无&lt;strong&gt;条件传送&lt;/strong&gt;和&lt;strong&gt;程序查询方式&lt;/strong&gt;两种。&lt;/p&gt;
&lt;p&gt;在无条件传送方式中，I/O接口总是准备好接收主机的输出数据，或总是准备好向主机输入的数据，因而CPU无需查询外设的工作状态，而&lt;strong&gt;默认外设始终处于准备就绪状态&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;许多外设的工作状态是很难事先预知的，为了保证数据传送的正确进行，就要求CPU在程序中查询外设的工作状态，如果外设尚未准备就绪，CPU就&lt;strong&gt;等待&lt;/strong&gt;，只有外设已作好准备，CPU才能执行I/O指令，这就是程序查询方式。&lt;/p&gt;
&lt;h4 id="工作流程"&gt;工作流程
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;预置传送参数
在传送数据之前，由CPU执行一段程序，预置传送参数。传送参数包括存取数据的主存缓冲区&lt;strong&gt;首地址&lt;/strong&gt;和传送数据的&lt;strong&gt;个数&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;向I/O接口发命令字
当CPU选中某台外设时，执行输出指令向I/O接口发出命令字，启动外设，为接收数据或发送数据的操作做准备。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从I/O接口取回状态字
CPU执行输入指令，从I/O接口中&lt;strong&gt;取回状态字并进行测试&lt;/strong&gt;，判断数据传送是否可以进行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查询外设标志
CPU不断查询状态标志，如果外设没有准备就绪，CPU就踏步进行等待，一直到这个外设准备就绪，并发出“准备就绪”信号为止。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;传送数据
只有外设准备好，才能实现主机与外设间的一次数据传送。输入时，CPU执行输入指令，从I/O接口的数据缓冲寄存器中接收数据；输出时，CPU执行输出指令，将数据写入I/O接口的数据缓冲寄存器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改传送参数
每进行一次数据传送，需要修改传送参数，其中包括主存缓冲区地址加1，传送个数减1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;判断传送是否结束&lt;/p&gt;
&lt;p&gt;如果传送个数不为0，则转第3步，继续传送，直到传送结束为止。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="程序中断方式"&gt;程序中断方式
&lt;/h3&gt;&lt;h4 id="中断"&gt;中断
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;自愿中断和强迫中断&lt;/strong&gt;
自愿中断又称程序自中断，它不是随机产生的中断，而是在程序中安排的有关指令，这些指令可以使机器进入中断处理的过程，如：指令系统中的软件中断指令等。
强迫中断是随机产生的中断，不是程序中事先安排好的。当这种中断产生后，由中断系统强迫计算机中止现行程序并转入中断服务程序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;程序中断和简单中断&lt;/strong&gt;
程序中断就是我们前面提到的中断，主机在响应中断请求后，通过执行一段中断服务程序来处理更紧迫的任务。
简单中断就是外设与主存间直接进行信息交换的方法，即DMA方式。这种“中断”不去执行中断服务程序，故不破坏现行程序的状态。主机发现有简单中断请求（也就是DMA请求）时，将让出一个或几个存取周期供外设与主存交换信息，然后继续执行程序&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内中断和外中断&lt;/strong&gt;
内中断是指由于CPU内部硬件或软件原因引起的中断。
外中断是指CPU以外的部件引起的中断。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;向量中断和非向量中断&lt;/strong&gt;
向量中断是指那些中断服务程序的入口地址是由&lt;strong&gt;中断事件自己提供&lt;/strong&gt;的中断。中断事件在提出中断请求的同时，通过硬件向主机提供中断服务程序入口地址，即向量地址。&lt;/p&gt;
&lt;p&gt;非向量中断的中断事件不能直接提供中断服务程序的入口地址，而由&lt;strong&gt;CPU 查询&lt;/strong&gt;之后得到。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;单重中断和多重中断&lt;/strong&gt;
单重中断在CPU执行中断服务程序的过程中不能被再打断。
多重中断在执行某个中断服务程序的过程中，CPU 可去响应级别更高的中断请求，又称为中断嵌套。&lt;/p&gt;
&lt;h4 id="中断源"&gt;中断源
&lt;/h4&gt;&lt;p&gt;中断源是指中断的来源，即任何引起计算机中断的事件&lt;/p&gt;
&lt;p&gt;可采用具有存储功能的触发器来记录中断源，称为&lt;strong&gt;中断请求触发器&lt;/strong&gt;。当某一个中断源有中断请求时，其相应的中断请求触发器置成“1”状态，此时，该中断源向CPU发出中断请求信号。&lt;/p&gt;
&lt;p&gt;多个中断请求触发器构成一个&lt;strong&gt;中断请求寄存器&lt;/strong&gt;，其中每一位对应一个中断源，中断请求寄存器的内容称为&lt;strong&gt;中断字或中断码&lt;/strong&gt;，中断字中为“1”的位就表示对应的中断源有中断请求。&lt;/p&gt;
&lt;h4 id="中断请求信号"&gt;中断请求信号
&lt;/h4&gt;&lt;p&gt;(1)独立请求线&lt;/p&gt;
&lt;p&gt;每个中断源单独设置中断请求线，将中断请求信号直接送往CPU，这种方式的特点是CPU在接到中断请求的同时也就知道了中断源是谁，其中断服务程序的入口地址在哪里。
(2) 公共请求线&lt;/p&gt;
&lt;p&gt;多个中断源共有一根公共请求线，这种方式的特点是在负载允许的情况下，中断源的数目可随意扩充，但CPU在接到中断请求后，必须通过&lt;strong&gt;软件或硬件的方法&lt;/strong&gt;来识别中断源，然后再找出中断服务程序的入口地址。
(3) 二维结构
将中断请求线连成二维结构，&lt;strong&gt;同一优先级别的中断源， 采用一根公共的请求线&lt;/strong&gt;，不同请求线上的中断源优先级别不同，这种方式综合了前两种方式的优点，在中断源较多的系统中常采用这种方式。&lt;/p&gt;
&lt;h4 id="中断优先级"&gt;中断优先级
&lt;/h4&gt;&lt;p&gt;当多个中断源同时发出中断请求时，CPU在&lt;strong&gt;任何瞬间只能接受一个&lt;/strong&gt;中断源的请求。通常，把全部中断源按中断的性质和处理的轻重缓急安排优先级，并进行排队。
确定中断优先级的原则是：对那些提出中断请求后需要立刻处理，否则就会造成&lt;strong&gt;严重后果&lt;/strong&gt;的中断源规定最高的优先级；而对那些可以延迟响应和处理的中断源规定较低的优先级。如故障中断一般优先级较高，接着才是I/O设备中断。而在I/O设备中又可以根据各个设备的速度来决定优先级。&lt;/p&gt;
&lt;p&gt;每个中断源均有一个为其服务的中断服务程序，每个中断服务程序都有与之对应的优先级别。另外，CPU正在执行的程序也有优先级。只有当某个中断源的优先级别高于CPU现在的优先级时，才能中止CPU执行现在的程序。&lt;/p&gt;
&lt;h5 id="软件判优法"&gt;软件判优法
&lt;/h5&gt;&lt;p&gt;软件判优法，就是用程序来判别优先级，这是最简单的中断判优方法&lt;/p&gt;
&lt;p&gt;当CPU接到中断请求信号后，就执行查询程序，逐个检测中断请求寄存器的各位状态，检测顺序是按优先级的大小排列的，&lt;strong&gt;最先检测的中断源具有最高的优先级，其次检测的中断源具有次高优先级，如此下去&lt;/strong&gt;，最后检测的中断源具有最低的优先级。&lt;/p&gt;
&lt;p&gt;显然，软件判优是与识别中断源结合在一起的，当查询到中断请求信号的发出者，也就是找到了中断源，程序立即可以转入对应的中断服务程序中去&lt;/p&gt;
&lt;h5 id="硬件判优电路"&gt;硬件判优电路
&lt;/h5&gt;&lt;p&gt;采用硬件实现中断优先级判定可节省CPU时间，而且速度快，但是成本较高。根据中断请求信号的传送方式不同，有不同的优先排队电路，常见的有以下几种方案。&lt;/p&gt;
&lt;p&gt;独立请求线的优先排队电路&lt;/p&gt;
&lt;p&gt;公共请求线的优先排队电路&lt;/p&gt;
&lt;h4 id="中断响应"&gt;中断响应
&lt;/h4&gt;&lt;h5 id="cpu响应中断的条件"&gt;&lt;strong&gt;CPU响应中断的条件&lt;/strong&gt;
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CPU&lt;strong&gt;接收到&lt;/strong&gt;中断请求信号
首先中断源要发出中断请求，同时C PU还要接收到这个中断请求信号。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CPU&lt;strong&gt;允许&lt;/strong&gt;中断
CPU允许中断即开中断。CPU内部有一个中断允许触发器，只有当其被置位时，CPU才可能响应中断源的中断请求（中断开放）。如其被复位，CPU处于不可中断状态，即使中断源有中断请求，CPU也不响应（中断关闭）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一条&lt;strong&gt;指令执行完毕&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般情况下，CPU在一条指令执行完毕，且没有更紧迫的任务时才能响应中断请求。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="中断隐指令"&gt;中断隐指令
&lt;/h5&gt;&lt;p&gt;CPU响应中断之后，&lt;strong&gt;经过某些操作&lt;/strong&gt;，转去执行中断服务程序。 这些操作是由硬件直接实现的，我们把它称为中断隐指令。&lt;/p&gt;
&lt;p&gt;中断隐指令&lt;strong&gt;并不是指令系统中的一条真正的指令&lt;/strong&gt;，它没有操作码，所以中断隐指令是一种不允许、也不可能为用户使用的特
殊指令。&lt;/p&gt;
&lt;p&gt;其所完成的操作主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;保存断点&lt;/p&gt;
&lt;p&gt;将原来程序的断点（即程序计数器PC的内容）保存起来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;暂不允许中断&lt;/p&gt;
&lt;p&gt;为了在用软件保护中断现场（即CPU的主要寄存器状态）时，不被新的中断所打断，从而保证被中断的程序在中断服务程序执行完毕之后能接着正确地执行下去。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引出中断服务程序&lt;/p&gt;
&lt;p&gt;引出中断服务程序的实质就是取出&lt;strong&gt;中断服务程序的入口地址&lt;/strong&gt;送程序计数器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="中断周期"&gt;中断周期
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;将特定地址“0”送至存储器地址寄存器，记作0→MAR；&lt;/li&gt;
&lt;li&gt;将PC的内容（断点）送至MDR，记作(PC)→MDR；&lt;/li&gt;
&lt;li&gt;向主存发写命令，启动存储器做写操作，记作Write；&lt;/li&gt;
&lt;li&gt;将MDR的内容通过数据总线写入到MAR所指示的主存单元（ 0 号）中，记作MDR→M(MAR)；&lt;/li&gt;
&lt;li&gt;向量地址形成部件的输出送至PC，为进入中断服务程序作准备，记作向量地址→PC；&lt;/li&gt;
&lt;li&gt;关中断，将中断允许触发器清0，记作0→EINT。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果断点存入堆栈，只需将上述⑴改为堆栈指针SP→MAR。&lt;/p&gt;
&lt;h5 id="进入中断服务程序"&gt;进入中断服务程序
&lt;/h5&gt;&lt;p&gt;识别中断源在于转入为该中断源专门设置的中断服务程序。
向量中断时，中断源向CPU发出中断请求信号之后，CPU经过一定的判优处理，若决定响应这个中断请求，则向中断源发出中断响应信号。中断源接到中断响应信号后就通过自己的向量地址发生器向CPU发送向量地址。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/68JxVgF/image-20221218161223158.png"
loading="lazy"
alt="image-20221218161223158"
&gt;&lt;/p&gt;
&lt;p&gt;向量地址通常有两种情况：&lt;/p&gt;
&lt;p&gt;(1) 向量地址是中断服务程序的入口地址如果向量地址就是中断服务程序的入口地址，则CPU 不需要再经过处理就可以进入相应的中断服务程序。&lt;/p&gt;
&lt;p&gt;PC←8×NNN 转中断服务程序入口地址
由此可见，中断服务程序的入口地址
依次是00H、08H、10H、……、 38H。&lt;/p&gt;
&lt;p&gt;(2) 向量地址是中断向量表的指针&lt;/p&gt;
&lt;p&gt;如果向量地址是中断向量表的指针，则向量地址指向一个中断向量表，从中断向量表的相应单元中再取出中断服务程序的入口地址，此时中断源给出的向量地址是中断服务程序入口地址的地址。&lt;/p&gt;
&lt;h5 id="中断现场的保护和恢复"&gt;中断现场的保护和恢复
&lt;/h5&gt;&lt;p&gt;中断现场指的是&lt;strong&gt;发生中断时CPU的主要状态&lt;/strong&gt;，其中最重要的是&lt;strong&gt;断点&lt;/strong&gt;，另外还有一些&lt;strong&gt;通用寄存器的状态&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;之所以需要保护和恢复现场的原因是因为CPU要先后执行两个完全不同的程序（现行程序和中断服务程序），必须进行两种程序运行状态的转换。一般来说，在中断隐指令中，CPU硬件将自动保存断点，有些计算机还自动保存程序状态寄存器的内容。但是，在许多应用中，要保证中断返回后原来的程序能正确地继续运行，仅保存这一、二个寄存器的内容是不够的。&lt;/p&gt;
&lt;p&gt;为此，在中断服务程序开始时，应由软件去保存那些硬件没有保存，而在中断服务程序中又可能用到的寄存器（如某些通用寄存器）的内容，在中断返回之前，这些内容还应该被恢复。&lt;/p&gt;
&lt;p&gt;现代计算机一般都先采用硬件方法来自动快速的保护和恢复部分重要的现场，其余寄存器的内容再由软件完成保护和恢复，这种方法的硬件支持是堆栈。&lt;/p&gt;
&lt;h4 id="允许和禁止中断"&gt;&lt;strong&gt;允许和禁止中断&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;允许中断还是禁止中断是用CPU中的中断允许触发器控制的，当中断允许触发器被置“1”，则允许中断，当中断允许触发器被置“0”，则禁止中断。
允许中断即开中断，下列情况时应开中断：
⑴ 在中断服务程序执行完毕，恢复中断现场之后；
⑵ 在多重中断的情况下，保护中断现场之后。&lt;/p&gt;
&lt;p&gt;禁止中断即关中断，下列情况时应关中断：
⑴ 当响应某一级中断请求，不再允许被其他中断请求打断时；
⑵ 在中断服务程序的保护和恢复现场之前。&lt;/p&gt;
&lt;h4 id="中断屏蔽"&gt;中断屏蔽
&lt;/h4&gt;&lt;p&gt;中断源发出中断请求之后，这个中断请求并&lt;strong&gt;不一定能真正送到CPU&lt;/strong&gt;去，在有些情况下，可以用程序方式&lt;strong&gt;有选择地封锁部分中断&lt;/strong&gt;，这就是中断屏蔽&lt;/p&gt;
&lt;p&gt;如果给每个中断源都相应地配备一个&lt;strong&gt;中断屏蔽触发器MASK&lt;/strong&gt;，则每个中断请求信号在送往判优电路之前，还要受到屏蔽触发器的控制。&lt;/p&gt;
&lt;p&gt;当MASK=1，表示对应中断源的请求被屏蔽（封锁其中断源的请求），可见中断请求触发器和中断屏蔽触发器是&lt;strong&gt;成对出现&lt;/strong&gt;的，只有当
INTRi=1（中断源有中断请求），MASKi=0（该级中断未被屏蔽），才允许对应的中断请求送往CPU。&lt;/p&gt;
&lt;p&gt;在中断接口电路中，多个屏蔽触发器组成一个&lt;strong&gt;屏蔽寄存器&lt;/strong&gt;，其内容称为&lt;strong&gt;屏蔽字或屏蔽码&lt;/strong&gt;，由程序来设置。屏蔽字某一位的状态将成为本中断源能否真正发出中断请求信号的必要条件之一。&lt;/p&gt;
&lt;p&gt;这样，就可实现CPU对中断处理的控制，使中断能在系统中合理协调地进行。&lt;/p&gt;
&lt;p&gt;中断屏蔽寄存器的作用：&lt;/p&gt;
&lt;p&gt;用程序设置的方法将屏蔽寄存器中的某一位置“1”，则对应的中断请求&lt;strong&gt;被封锁&lt;/strong&gt;，无法去参加排队判优；若屏蔽寄存器中的某一位置“0”，才允许对应的中断请求送往CPU&lt;/p&gt;
&lt;h5 id="中断升级"&gt;中断升级
&lt;/h5&gt;&lt;p&gt;中断屏蔽字的另一个作用是可以改变中断优先级，&lt;strong&gt;将原级别较低的中断源变成较高的级别&lt;/strong&gt;，我们称之为中断升级。这实际上是一种动态改变优先级的方法。
这里所说的改变优先次序是指改变中断的处理次序。中断处理次序和中断响应次序是两个不同的概念，中断&lt;strong&gt;响应次序&lt;/strong&gt;是由&lt;strong&gt;硬件&lt;/strong&gt;排队电路决定的，无法改变。但是，中断&lt;strong&gt;处理次序&lt;/strong&gt;是可以由&lt;strong&gt;屏蔽码&lt;/strong&gt;来改变的，故把屏蔽码看成软排队器。中断处理次序可以不同于中断响应次序。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/SKGVg8X/image-20221218162712395.png"
loading="lazy"
alt="image-20221218162712395"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;横着看&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第1级中断源的优先级别最高，它禁止本级和更低级的中断请求；第4级中断源的优先级别最低，它仅禁止本级的中断请求，而对其他高级的中断请求全部开放。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/pJdc8Sx/image-20221218162903731.png"
loading="lazy"
alt="image-20221218162903731"
&gt;&lt;/p&gt;
&lt;h4 id="中断全过程"&gt;中断全过程
&lt;/h4&gt;&lt;p&gt;中断全过程是指从中断源发出中断请求开始，CPU响应这个请求，现行程序被中断，转至中断服务程序，直至中断服务程序执行完毕，CPU 再返回原来的程序继续执行的整个过程。
中断全过程分为五个阶段：
&lt;strong&gt;中断请求、中断判优、中断响应、中断处理、中断返回。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其中中断处理就是&lt;strong&gt;执行中断服务程序&lt;/strong&gt;，中断服务程序基本上由三部分组成，&lt;/p&gt;
&lt;p&gt;第一部分为&lt;strong&gt;准备部分&lt;/strong&gt;，其基本功能是保护现场，对于非向量中断方式则需要确定中断源，最后开放中断，允许更高级的中断请求打断低级的中断服务程序。&lt;/p&gt;
&lt;p&gt;第二部分为&lt;strong&gt;处理部分&lt;/strong&gt;，即真正执行为某个中断源服务的中断服务程序。&lt;/p&gt;
&lt;p&gt;第三部分为&lt;strong&gt;结尾部分&lt;/strong&gt;，首先要关中断，以防止在恢复现场过程中被新的中断打断，接着恢复现场，然后开放中断，以便返回原来的程序后可响应其它的中断请求&lt;/p&gt;
&lt;h3 id="dma方式"&gt;DMA方式
&lt;/h3&gt;&lt;h3 id="通道控制方式"&gt;通道控制方式
&lt;/h3&gt;</description></item><item><title>【设计模式】笔记</title><link>https://dyhes.github.io/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="hint"&gt;Hint
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;非功能需求及其含义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;产品为了满足用户的业务需求而必须具备的除功能之外的特性，它与功能需求是互补的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;性能&lt;/li&gt;
&lt;li&gt;可扩展性/伸缩性&lt;/li&gt;
&lt;li&gt;可维护性&lt;/li&gt;
&lt;li&gt;可用性&lt;/li&gt;
&lt;li&gt;安全性&lt;/li&gt;
&lt;li&gt;业务质量(cost, schedule, staff, resources)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;编程的三个层次&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面向过程&lt;/li&gt;
&lt;li&gt;面向对象&lt;/li&gt;
&lt;li&gt;面向事件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;面向对象设计的三大原则（特性）&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;封装&lt;/p&gt;
&lt;p&gt;就是将客观事物抽象为逻辑实体，实体的属性和功能相结合，形成一个有机的整体。并&lt;strong&gt;对实体的属性和功能实现进行访问控制&lt;/strong&gt;，向信任的实体开放，对不信任的实体隐藏。，&lt;strong&gt;通过开放的外部接口即可访问&lt;/strong&gt;，无需知道功能如何实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;继承&lt;/p&gt;
&lt;p&gt;在继承机制下形成有层级的类，使得低层级的类可以延用高层级类的特征和方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多态&lt;/p&gt;
&lt;p&gt;是指一个类的同名方法，在不同情况下的实现细节不同&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="design-pattern"&gt;Design Pattern
&lt;/h2&gt;&lt;h3 id="作用"&gt;作用
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;可重用性&lt;/li&gt;
&lt;li&gt;容易被他人理解&lt;/li&gt;
&lt;li&gt;代码可靠性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="原则"&gt;原则
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;开闭原则（Open Closed Principle，OCP）&lt;/p&gt;
&lt;p&gt;对扩展开放，对修改关闭&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单一职责原则（Single Responsibility Principle, SRP）&lt;/p&gt;
&lt;p&gt;一个类只负责一个功能领域中的相应职责&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;依赖倒转原则（Dependency Inversion Principle，DIP）&lt;/p&gt;
&lt;p&gt;依赖于抽象，不能依赖于具体实现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;里氏代换原则（Liskov Substitution Principle，LSP）&lt;/p&gt;
&lt;p&gt;所有引用基类的地方必须能透明地使用其子类的对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口隔离原则（Interface Segregation Principle，ISP）&lt;/p&gt;
&lt;p&gt;类之间的依赖关系应该建立在最小的接口上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;合成/聚合复用原则（Composite/Aggregate Reuse Principle，CARP）&lt;/p&gt;
&lt;p&gt;尽量使用合成/聚合，而不是通过继承达到复用的目的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最少知识原则（Least Knowledge Principle，LKP）或者迪米特法则（Law of Demeter，LOD）&lt;/p&gt;
&lt;p&gt;一个软件实体应当尽可能少的与其他实体发生相互作用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="创建型模式"&gt;创建型模式
&lt;/h3&gt;&lt;p&gt;关注点是如何创建对象，其核心思想是要&lt;strong&gt;把对象的创建和使用相分离&lt;/strong&gt;，这样使得两者能相对独立地变换&lt;/p&gt;
&lt;h4 id="singleton"&gt;Singleton
&lt;/h4&gt;&lt;p&gt;单例&lt;/p&gt;
&lt;p&gt;提供访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;service&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;Unit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;I am singleton&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;I offer some general service&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="factory"&gt;Factory
&lt;/h4&gt;&lt;p&gt;工厂&lt;/p&gt;
&lt;p&gt;不对外暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。&lt;/p&gt;
&lt;h5 id="simple-factory"&gt;Simple Factory
&lt;/h5&gt;&lt;p&gt;一个Factory返回多个Product子类，新增Product子类时需修改Factory类&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ProductType&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Factory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ProductType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrganismType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ProductType&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;AQUATIC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;TERRESTRIAL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Aquatic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Organism&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Terrestrial&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Organism&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;//水生生物与陆生生物
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;OrganismFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Factory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ProductType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Organism&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productType&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;OrganismType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productType&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;OrganismType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nc"&gt;OrganismType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AQUATIC&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Aquatic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nc"&gt;OrganismType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TERRESTRIAL&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Terrestrial&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;simpleFactoryDemo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;organism&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;OrganismFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;OrganismType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TERRESTRIAL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="factory-method"&gt;Factory Method
&lt;/h5&gt;&lt;p&gt;每个Product子类均有各自对应的Factory&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ProductType&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Factory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ProductType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Organism&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;OrganismFactories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Factory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ProductType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Organism&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Aquatic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Organism&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Terrestrial&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Organism&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrganismType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ProductType&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;AQUATIC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;TERRESTRIAL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;AquaticFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;OrganismFactories&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ProductType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Organism&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productType&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;OrganismType&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nc"&gt;OrganismType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AQUATIC&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;wrong type&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;aquatic&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Aquatic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;TerrestrialFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;OrganismFactories&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ProductType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Organism&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productType&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;OrganismType&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nc"&gt;OrganismType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TERRESTRIAL&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;wrong type&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;terrestrial&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Terrestrial&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrganismType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ProductType&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;AQUATIC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;TERRESTRIAL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;factoryMethodDemo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;aquatic&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;AquaticFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;OrganismType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AQUATIC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;terrestrial&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;AquaticFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;OrganismType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TERRESTRIAL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="abstract-factory"&gt;Abstract Factory
&lt;/h5&gt;&lt;p&gt;抽象工厂&lt;/p&gt;
&lt;p&gt;工厂方法的进一步深化，围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂&lt;/p&gt;
&lt;p&gt;当存在多个Product族时使用，类似于简单工厂与工厂方法的结合，从Product族层面看为工厂方法，从某一Product族中的子Product层面看为简单工厂&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ProductType&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ProductFamilyType&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;AbstractFactory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productFamilyType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ProductFamilyType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;productType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ProductType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Substance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Organic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Substance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Inorganic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Substance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;SubstanceType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ProductType&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SubstanceFamilyType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ProductFamilyType&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;ORGANIC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;INORGANIC&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrganicType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SubstanceType&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;FAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;PROTEIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;CARBOHYDRATE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InorganicType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SubstanceType&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;WATER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;INORGANICSALT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Water&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Inorganic&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InorganicSalt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Inorganic&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Organic&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Protein&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Organic&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Carbohydrate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Organic&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;//有机物与无机物
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;InorganicFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AbstractFactory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productFamilyType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ProductFamilyType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;productType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ProductType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Inorganic&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productFamilyType&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;SubstanceFamilyType&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="nc"&gt;SubstanceFamilyType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INORGANIC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;substance&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productType&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;InorganicType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nc"&gt;InorganicType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WATER&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Water&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nc"&gt;InorganicType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INORGANICSALT&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;InorganicSalt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="si"&gt;$productType&lt;/span&gt;&lt;span class="s2"&gt; of &lt;/span&gt;&lt;span class="si"&gt;$productFamilyType&lt;/span&gt;&lt;span class="s2"&gt; family is produced&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;substance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;OrganicFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AbstractFactory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productFamilyType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ProductFamilyType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;productType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ProductType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Organic&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productFamilyType&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;SubstanceFamilyType&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="nc"&gt;SubstanceFamilyType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ORGANIC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;substance&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productType&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;OrganicType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nc"&gt;OrganicType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FAT&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Fat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nc"&gt;OrganicType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CARBOHYDRATE&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Carbohydrate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nc"&gt;OrganicType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PROTEIN&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Protein&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="si"&gt;$productType&lt;/span&gt;&lt;span class="s2"&gt; of &lt;/span&gt;&lt;span class="si"&gt;$productFamilyType&lt;/span&gt;&lt;span class="s2"&gt; family is produced&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;substance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;abstractFactoryDemo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nc"&gt;OrganicFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;SubstanceFamilyType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ORGANIC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nc"&gt;InorganicType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INORGANICSALT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;wrong productFamilyType or ProductType&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="应该不考"&gt;应该不考
&lt;/h4&gt;&lt;h5 id="builder"&gt;Builder
&lt;/h5&gt;&lt;p&gt;建造者&lt;/p&gt;
&lt;p&gt;建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象，将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。&lt;/p&gt;
&lt;p&gt;适用于：&lt;/p&gt;
&lt;p&gt;1、需要生成的对象具有复杂的内部结构。&lt;/p&gt;
&lt;p&gt;2、需要生成的对象内部属性本身相互依赖。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;vs. Factory Pattern ：建造者模式更加关注与零件装配的顺序。&lt;/p&gt;
&lt;p&gt;vs. Bridge Pattern&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Builder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Intelligence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;wisdom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Courage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;courageous&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Spirit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;intelligence&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Intelligence&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Intelligence&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;courage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Courage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Courage&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Skelecton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;solidity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Muscle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;strength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Flesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;skelecton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Skelecton&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Skelecton&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;muscle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Muscle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Muscle&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Life&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;spirit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Spirit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;flesh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Flesh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LifeBuilder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Builder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="py"&gt;spirit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Spirit&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Spirit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="py"&gt;flesh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Flesh&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flesh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;soul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wisdom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;courageous&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;LifeBuilder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;spirit&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Spirit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Intelligence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wisdom&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Courage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courageous&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;intelligence &lt;/span&gt;&lt;span class="si"&gt;$wisdom&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;courageous &lt;/span&gt;&lt;span class="si"&gt;$courageous&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;a beautiful soul was infused&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solidity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;LifeBuilder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;flesh&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Skelecton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solidity&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Muscle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strength&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;solidity &lt;/span&gt;&lt;span class="si"&gt;$solidity&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;strength &lt;/span&gt;&lt;span class="si"&gt;$strength&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;a strong body is formed&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;Life&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;spirit is infused with flesh&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Life&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spirit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;flesh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="prototype"&gt;Prototype
&lt;/h5&gt;&lt;p&gt;原型&lt;/p&gt;
&lt;p&gt;用于创建重复的对象，利用已有的一个原型对象，通过&lt;strong&gt;复制&lt;/strong&gt;快速地生成和原型对象一样的实例，同时又能保证性能，当直接创建对象的代价比较大时，则可采用这种模式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;Content&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Prototype&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Content&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;Content&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;//仿生人
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Android&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;Content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;new android had been manufactured&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Android&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AndroidPrototype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Android&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Prototype&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;Content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;prototypeDemo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;androidPrototype&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AndroidPrototype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Android&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nAndroid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Android&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;androidPrototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;Android&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="行为型模式"&gt;行为型模式
&lt;/h3&gt;&lt;p&gt;主要涉及算法和对象间的职责分配，描述一组对象应该如何通过使用对象组合协作来完成一个整体任务。&lt;/p&gt;
&lt;h4 id="observer-vs-mvc时序图vs-reactor时序图"&gt;Observer vs. MVC（时序图）vs. Reactor（时序图）
&lt;/h4&gt;&lt;h5 id="observer"&gt;Observer
&lt;/h5&gt;&lt;p&gt;观察者&lt;/p&gt;
&lt;p&gt;当一个对象被修改时，自动通知依赖它的对象&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;vs. Reactor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Observer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observableState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ObservableState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ObservableState&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Observable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="py"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ObservableState&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;observers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Observer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;attachObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;observers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;updateState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ObservableState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;notifyObservers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;observers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forEach&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;it&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoginState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ObservableState&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="py"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ObservableState&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LoginState&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;observers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Observer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Observable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Portrait&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Observer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observableState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ObservableState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observableState&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;LoginState&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;true&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;portrait became light&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;false&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;portrait become dark&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Friends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Observer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observableState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ObservableState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observableState&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;LoginState&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;true&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;user is online&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;false&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;user is offline&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;observerDemo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attachObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Friends&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attachObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Portrait&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notifyObservers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updateState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LoginState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="reactor"&gt;Reactor
&lt;/h5&gt;&lt;p&gt;基于&lt;strong&gt;事件驱动&lt;/strong&gt;的设计模式，拥有一个或多个并发输入源，有一个服务处理器和多个请求处理器，服务处理器会同步的将输入的请求事件以多路复用的方式分发给相应的请求处理器&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Event&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Reactor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;EventHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;EventHandler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClickedEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EnteredEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClickedEventHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;EventHandler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;clicked event is handled&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EnteredEventHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;EventHandler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;entered event is handled&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EventDispatcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;EventHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Reactor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ClickedEvent&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ClickedEventHandler&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;EnteredEvent&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;EnteredEventHandler&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;reactorDemo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;eventDispatcher&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EventDispatcher&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;eventDispatcher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ClickedEvent&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;eventDispatcher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EnteredEvent&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="mvc"&gt;MVC
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;模型（Model）&lt;/strong&gt; 用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法。“ Model ”有对数据直接访问的权力，例如对数据库的访问。“Model”不依赖“View”和“Controller”，也就是说， Model 不关心它会被如何显示或是如何被操作。但是 Model 中数据的变化一般会通过一种刷新机制被公布。为了实现这种机制， View 或事先在此 Model 上注册，从而，View 可以了解在数据 Model 上发生的改变（&lt;a class="link" href="https://zh.m.wikipedia.org/wiki/%e8%a7%82%e5%af%9f%e8%80%85%e6%a8%a1%e5%bc%8f" target="_blank" rel="noopener"
&gt;观察者模式&lt;/a&gt;）或在Controller操控下更新View&lt;/li&gt;
&lt;li&gt;**视图（View）**能够实现数据有目的的显示（理论上，这不是必需的）。在 View 中一般没有程序上的逻辑。为了实现 View 上的刷新功能，View 需要访问它监视的数据模型（Model），因此应该事先在被它监视的数据那里注册。&lt;/li&gt;
&lt;li&gt;**控制器（Controller）**起到不同层面间的组织作用，用于控制应用程序的流程。它处理事件并作出响应。“事件”包括用户的行为和数据 Model 上的改变。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/MVC-Process.svg/200px-MVC-Process.svg.png"
loading="lazy"
alt="img"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;saveToDatabase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;notifyView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;updateModel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;updateGUI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ViewImpl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;updateGUI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;gui is updated&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ControllerImpl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ModelImpl&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ViewImpl&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;updateModel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;controller react to user behavior&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notifyView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ModelImpl&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;model is updated&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;saveToDatabase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;saveToDatabase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;change to model is saved to database&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;notifyView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;notify view&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updateGUI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;MVCDemo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;controller&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ControllerImpl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updateModel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="interpreter"&gt;Interpreter
&lt;/h4&gt;&lt;p&gt;解释器&lt;/p&gt;
&lt;p&gt;给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子&lt;/p&gt;
&lt;p&gt;常被用在 SQL 解析、符号处理引擎&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Expression&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;interpret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AndExpression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;exp1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;exp2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Expression&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;interpret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;exp1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interpret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;exp2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interpret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrExpression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;exp1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;exp2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Expression&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;interpret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;exp1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interpret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;exp2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interpret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NotExpression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Expression&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;interpret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interpret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MetaExpression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Expression&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;interpret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;interpretDemo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;rick&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MetaExpression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;rick&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;morty&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MetaExpression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;morty&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NotExpression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rick&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;interpret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;rick&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AndExpression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;morty&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;interpret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;rick and morty&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AndExpression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;NotExpression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;morty&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;interpret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;rick and morty&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// false,true,f
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="strategy"&gt;Strategy
&lt;/h4&gt;&lt;p&gt;策略&lt;/p&gt;
&lt;p&gt;创建定义一系列的算法的各种策略对象和一个所执行算法随着策略对象改变而改变的 Context 对象，使得算法可以&lt;strong&gt;自由切换&lt;/strong&gt;，且可&lt;strong&gt;独立于它的使用者变化&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;vs. State Pattern&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Strategy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;StrategyChoice&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;StrategyConsumer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="py"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Strategy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;updateStrategy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strategyChoice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StrategyChoice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Enemy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StrategyChoice&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;ATTACK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;MOVE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;DEFENSE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;//三种策略
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DefenseStrategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Strategy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;enemy is attacking, take the defense strategy&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MoveStrategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Strategy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;enemy is defensing, take the move strategy&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AttackStrategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Strategy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;enemy is moving, take the attack strategy&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;//战士根据敌人的动作切换策略
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fighter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="py"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Strategy&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DefenseStrategy&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StrategyContext&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strategyChoice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StrategyChoice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;strategy&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strategyChoice&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;Enemy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nc"&gt;Enemy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ATTACK&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;DefenseStrategy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nc"&gt;Enemy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEFENSE&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;MoveStrategy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nc"&gt;Enemy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MOVE&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;AttackStrategy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;strategyDemo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;fighter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fighter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;fighter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Enemy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEFENSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;fighter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Enemy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MOVE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;fighter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Enemy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ATTACK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="visitor"&gt;Visitor
&lt;/h4&gt;&lt;p&gt;访问者&lt;/p&gt;
&lt;p&gt;为了访问比较复杂的数据结构，不去改变数据结构，而是把对数据的操作抽象出来，在“访问”的过程中以回调形式&lt;strong&gt;在访问者中处理操作逻辑&lt;/strong&gt;。如果要新增一组操作，那么只需要增加一个新的访问者。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Element&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;visitor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Visitor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Unit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;universal element output&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;visitor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Visitor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Unit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;universal visitor output&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Element&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fruits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Element&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Vegetable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Element&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Vegetarian&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Visitor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;I am a vegetarian&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Meat&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;I hate meat&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Fruits&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;I enjoy fruits&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Vegetable&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;I love vegetable&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Carnivore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Visitor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;I am a carnivore&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Meat&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;I love meat&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Fruits&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Fruits is Ok&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Vegetable&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;I hate vegetable&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;meat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Meat&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Meat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Fruits&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fruits&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;vegetable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vegetable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vegetable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;vegetarian&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vegetarian&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vegetarian&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;carnivore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Carnivore&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Carnivore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;meat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;carnivore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;meat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vegetarian&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;carnivore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vegetarian&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;vegetable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;carnivore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;vegetable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vegetarian&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="应该不考-1"&gt;应该不考
&lt;/h4&gt;&lt;h5 id="command"&gt;Command
&lt;/h5&gt;&lt;p&gt;命令模式&lt;/p&gt;
&lt;p&gt;数据驱动&lt;/p&gt;
&lt;p&gt;以&lt;strong&gt;命令&lt;/strong&gt;（Command）的形式包裹请求，并传给&lt;strong&gt;调用对象&lt;/strong&gt;（Invoker）。调用对象寻找可以处理该命令的&lt;strong&gt;合适的对象&lt;/strong&gt;（Receiver）来执行命令。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Command&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Receiver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Receiver&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Invoker&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;addCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;executeCommands&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Gardening&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Command&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cleaning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Command&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cleaner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Receiver&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;The house had been cleaned.&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Gardener&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Receiver&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;The garden had been taken care of.&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Butler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Invoker&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;gardener&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Gardener&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;cleaner&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cleaner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;executeCommands&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Gardening&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gardener&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Cleaning&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cleaner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;commandDemo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;butler&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Butler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;butler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Gardening&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;butler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Cleaning&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;butler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;executeCommands&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="state"&gt;State
&lt;/h5&gt;&lt;p&gt;将各状态对应逻辑分拆到不同的状态类中，以达到&lt;strong&gt;易于拓展新状态&lt;/strong&gt;的目的。&lt;/p&gt;
&lt;p&gt;存在各种状态State的和一个管理状态切换的 Context&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;State&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Context&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="py"&gt;currentState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;currentState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QianJiSan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="py"&gt;currentState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ShieldForm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;ShieldForm&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;defense&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SwordForm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;SwordForm&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;fight&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;stateDemo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;swordForm&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SwordForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;shieldForm&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ShieldForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;qianJiSan&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QianJiSan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;swordForm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;qianJiSan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;qianJiSan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentState&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shieldForm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;qianJiSan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="chain-of-responsibility"&gt;Chain-of-responsibility
&lt;/h5&gt;&lt;p&gt;责任链&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;责任链模式（Chain of Responsibility）是一种处理请求的模式，它让多个处理器都有机会处理该请求，直到其中某个处理成功为止。责任链模式把多个处理器串成链，然后让请求在链上传递&lt;/p&gt;
&lt;p&gt;责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。&lt;/p&gt;
&lt;p&gt;在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Handler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nextHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;authority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Priority&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Priority&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Priority&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Vampire&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Priority&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Baron&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Vicomte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Comte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Marquess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Duke&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Infante&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Priest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;authority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vampire&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nextHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Priest&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Priority&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;priority&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;Vampire&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;authority&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="si"&gt;$priority&lt;/span&gt;&lt;span class="s2"&gt; wad purified&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;request &lt;/span&gt;&lt;span class="si"&gt;${nextHandler?.name?:&amp;#34;god&amp;#34;}&lt;/span&gt;&lt;span class="s2"&gt; to process&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;nextHandler&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;//三种神职人员
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Monk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nextHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Priest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;monk&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;authority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vampire&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Vampire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Vicomte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Priest&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Bishop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nextHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Priest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;bishop&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;authority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vampire&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Vampire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Marquess&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Priest&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;pope&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;authority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vampire&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Vampire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Duke&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nextHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Priest&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Priest&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;chainOfResponsibilityDemo&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;pope&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pope&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;bishop&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Bishop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pope&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;monk&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Monk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bishop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;monk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Vampire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Duke&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;monk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Vampire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Infante&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="iterator"&gt;Iterator
&lt;/h5&gt;&lt;p&gt;迭代器&lt;/p&gt;
&lt;p&gt;提供一种无需对外暴露集合对象的内部表示就能就遍历集合对象元素的方法&lt;/p&gt;
&lt;p&gt;分离了集合对象的遍历行为，把遍历元素责任交给迭代器，而不是集合对象&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Iterator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;hasNext&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Virtue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;virtues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arrayListOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Chastity&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Diligence&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Charity&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Humility&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Patience&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Temperance&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;inner&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;VirTueIterator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="py"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;hasNext&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;virtues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;virtues&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;VirTueIterator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="mediator"&gt;Mediator
&lt;/h5&gt;&lt;p&gt;中介&lt;/p&gt;
&lt;p&gt;用一个中介对象来处理不同类/对象之间的通信，把多方会谈变成双方会谈，以降低多个类之间的通信复杂性。&lt;/p&gt;
&lt;p&gt;中介者使各个类不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Mediator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;communicators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Communicator&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;deliver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Message&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Communicator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;mediator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mediator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Communicator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;receiveMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Communicator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ChatMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ChatRoom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;communicators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Communicator&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mediator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;deliver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ChatMessage&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ChatUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;mediator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ChatRoom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Communicator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Communicator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="si"&gt;$name&lt;/span&gt;&lt;span class="s2"&gt; send a message to &lt;/span&gt;&lt;span class="si"&gt;${(receiver as ChatUser).name}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;mediator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deliver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="memento"&gt;Memento
&lt;/h5&gt;&lt;p&gt;备忘录&lt;/p&gt;
&lt;p&gt;在不破坏封装性的前提下，在某对象之外保存该对象的内部状态，以便在适当的时候恢复对象&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Originator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="py"&gt;states&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;States&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;Memonto&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memonto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Memonto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;States&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Memonto&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;states&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;States&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;States&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;states&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GameStates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;States&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GameArchive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;states&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;States&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Memonto&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="py"&gt;states&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;States&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GameStates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Originator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;Memonto&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;game archive is saved&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;GameArchive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;states&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memonto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Memonto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;states&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;memonto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;states&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;game archive is loaded&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;memontoDemo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;game&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;archi&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;archi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="template-method"&gt;Template-method
&lt;/h5&gt;&lt;p&gt;模板方法&lt;/p&gt;
&lt;p&gt;一个抽象类/接口公开定义了执行它的方法的模板“骨架”。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Template&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;second&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;last&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Human&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;birth&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;second&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;aging&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;last&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;death&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;templateDemo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;human&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Human&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;human&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="结构型模式"&gt;结构型模式
&lt;/h3&gt;&lt;p&gt;不仅仅简单地使用继承，而更多地通过组合与运行期的动态组合来实现更好、更灵活的结构与功能&lt;/p&gt;
&lt;h4 id="adapter"&gt;Adapter
&lt;/h4&gt;&lt;p&gt;适配器&lt;/p&gt;
&lt;p&gt;作为两个不兼容的接口之间的桥梁，将一个类的接口转换成客户希望的另外一个接口以结合了两个独立接口的功能，使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Destination&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Source&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Destination&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Source&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;fun1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Wizard&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Source&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Attack Power&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Warrior&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Destination&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Attack Damage&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WizardWarrior&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Warrior&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;Adapter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="proxy"&gt;Proxy
&lt;/h4&gt;&lt;p&gt;代理&lt;/p&gt;
&lt;p&gt;创建具有某对象的代理对象，以便&lt;strong&gt;代表&lt;/strong&gt;改对象向外界提供功能接口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Original&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Original&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Original&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;override&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Unit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HttpService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Original&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;HTTP Service offered&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EvilHttpService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;original&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HttpService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Proxy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;check&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;HTTP request is censored&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;youAreAGoodPerson&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;youAreAGoodPerson&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;your access is denied!&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;httpService&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EvilHttpService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpService&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;httpService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="decorator"&gt;Decorator
&lt;/h4&gt;&lt;p&gt;装饰器&lt;/p&gt;
&lt;p&gt;作为现有的类的一个&lt;strong&gt;包装&lt;/strong&gt;，向一个现有的对象添加新的功能，同时又不改变其结构，装饰和数据源类&lt;strong&gt;实现同一接口&lt;/strong&gt;， 从而能在客户端代码中&lt;strong&gt;相互替换&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Original&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Unit&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Decorator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Original&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Original&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;before&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Unit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;after&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Unit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;override&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Unit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;after&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Mage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Original&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;I am a mage&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FireMage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;original&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Original&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Decorator&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;after&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;A FireMage to be exact&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Incendio&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IceMage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;original&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Original&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Decorator&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;after&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;A IceMage to be exact&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;freezing charm&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;fireMage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FireMage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mage&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;iceMage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IceMage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mage&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;fireMage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;iceMage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;代理&lt;/strong&gt;模式，注重对对象某一功能的流程把控和辅助。 它可以控制对象做某些事，重心是为了借用对象的功能完成某一流程，而非对象功能如何。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;装饰&lt;/strong&gt;模式，注重对对象功能的扩展，它不关心外界如何调用，只注重对对象功能的加强，&lt;strong&gt;装饰&lt;/strong&gt;后还是对象本身。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="应该不考-2"&gt;应该不考
&lt;/h4&gt;&lt;h5 id="bridge"&gt;Bridge
&lt;/h5&gt;&lt;p&gt;桥接&lt;/p&gt;
&lt;p&gt;又称为柄体(Handle and Body)模式或接口(Interfce)模式&lt;/p&gt;
&lt;p&gt;将抽象接口作为抽象化和实现化之间的桥接结构，把&lt;strong&gt;抽象化与实现化解耦&lt;/strong&gt;，使得实体类的功能独立于接口实现类，使得二者可以&lt;strong&gt;独立变化&lt;/strong&gt;。避免有多种可能会变化的情况下直接继承带来的子类爆炸问题，提高扩展的灵活性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Bridge&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Entity&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;bridge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Bridge&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Mecha&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;bridge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;EnergyCore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Entity&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;bridge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;//不同机甲型号可搭配不同能源核心，使得二者均易于拓展
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MechaI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;EnergyCore&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Mecha&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bridge&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;MechaI&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MechaV&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;EnergyCore&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Mecha&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bridge&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;MechaV&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MechaX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;EnergyCore&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Mecha&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bridge&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;MechaX&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;EnergyCore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Bridge&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SolarEnergyCore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;EnergyCore&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;solar energy is transforming into power&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WindEnergyCore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;EnergyCore&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;wind energy is transforming into power&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;bridgeDemo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;MechaI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WindEnergyCore&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;MechaI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SolarEnergyCore&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;MechaV&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WindEnergyCore&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;MechaV&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SolarEnergyCore&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;MechaX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WindEnergyCore&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;MechaX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SolarEnergyCore&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="composite"&gt;Composite
&lt;/h5&gt;&lt;p&gt;组合&lt;/p&gt;
&lt;p&gt;又称为&lt;strong&gt;部分整体模式&lt;/strong&gt;，依据树形结构来组合对象，创建了一个包含自己对象组的类，把&lt;strong&gt;一组&lt;/strong&gt;相似的对象当作一个单一的对象处理。使得用户对单个对象和组合对象的使用具有&lt;strong&gt;一致性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Composite&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;composites&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Composite&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;HTMLElement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Composite&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;toHTML&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;composites&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forEach&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;it&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;it&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;HTMLElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;toHTML&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;composites&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Composite&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;toHTML&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&amp;lt;html&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toHTML&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&amp;lt;/html&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;composites&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Composite&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;toHTML&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&amp;lt;body&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toHTML&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&amp;lt;/body&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;H1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;composites&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Composite&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;toHTML&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&amp;lt;h1&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;$content&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;/h1&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;P&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;composites&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Composite&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;toHTML&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&amp;lt;p&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;$content&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;/p&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;compositeDemo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;html&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;body&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;composites&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;H1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;header&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;composites&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;a paragraph&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;composites&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;another paragraph&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;composites&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toHTML&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="facade"&gt;Facade
&lt;/h5&gt;&lt;p&gt;外观&lt;/p&gt;
&lt;p&gt;对外隐藏具有诸多子系统的系统的复杂性，只提供一个可以访问系统的接口&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Facade&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;subsystems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Subsystem&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;react&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Subsystem&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;react&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ForeignAffairsMinistry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Subsystem&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;react&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;The Ministry of Foreign Affairs intervened&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NationalDefenseMinistry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Subsystem&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;react&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;The Ministry of Defense conducts military mobilization&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Government&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;subsystems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Subsystem&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Facade&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;foreignAffairsMinistry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ForeignAffairsMinistry&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ForeignAffairsMinistry&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nationalDefenseMinistry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NationalDefenseMinistry&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NationalDefenseMinistry&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;react&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="m"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;foreignAffairsMinistry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;react&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;nationalDefenseMinistry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;react&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="flyweight"&gt;Flyweight
&lt;/h5&gt;&lt;p&gt;通过工厂方法尝试重用现有的同类对象以减少创建对象的数量，以减少内存占用和提高性能，如果未找到匹配的对象，则创建新对象&lt;/p&gt;
&lt;p&gt;在实际应用中，享元模式主要应用于&lt;strong&gt;缓存&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;vs. Singleton&lt;/p&gt;
&lt;p&gt;单例模式是类级别的，一个类&lt;strong&gt;只能有一个&lt;/strong&gt;对象实例；&lt;/p&gt;
&lt;p&gt;享元模式是对象级别的，&lt;strong&gt;可以有多个&lt;/strong&gt;对象实例，并允许多个变量引用同一个对象实例；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;abstract&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;FlyWeight&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;FlyWeightEnum&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;FlyWeightFactory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FlyWeightEnum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;FlyWeight&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getFlyWeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flyWeightEnum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FlyWeightEnum&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;FlyWeight&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FaithOfTheSeven&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FlyWeightEnum&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Father&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Mother&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Warrior&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Maiden&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Crone&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Stranger&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Deity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;priesthood&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FaithOfTheSeven&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;FaithOfTheSeven&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Father&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;FlyWeight&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;answerPrayer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="si"&gt;$priesthood&lt;/span&gt;&lt;span class="s2"&gt; answered the prayer&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Church&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FlyWeightEnum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Deity&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FlyWeightFactory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getFlyWeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flyWeightEnum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FlyWeightEnum&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Deity&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;containsKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flyWeightEnum&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;flyWeightEnum&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Deity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flyWeightEnum&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;FaithOfTheSeven&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="si"&gt;$flyWeightEnum&lt;/span&gt;&lt;span class="s2"&gt; was awakened&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getOrDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flyWeightEnum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Deity&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;pray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flyWeightEnum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FlyWeightEnum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;The believers prayed&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;getFlyWeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flyWeightEnum&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;answerPrayer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="design-pattern-in-power-point"&gt;Design Pattern in Power Point
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;duck 1004 strategy&lt;/li&gt;
&lt;li&gt;coffee 1025 decorator&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="software-architecture"&gt;Software architecture
&lt;/h2&gt;&lt;h3 id="管道过滤器风格"&gt;&lt;strong&gt;管道过滤器风格&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;pipes and filters&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Filter&lt;/p&gt;
&lt;p&gt;Component&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pipe&lt;/p&gt;
&lt;p&gt;Connector&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/M2BQsDm/image-20221126105636724.png"
loading="lazy"
alt="image-20221126105636724"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/gzssXnZ/image-20221126110332719.png"
loading="lazy"
alt="image-20221126110332719"
&gt;&lt;/p&gt;
&lt;h3 id="主程序子程序风格"&gt;&lt;strong&gt;主程序/子程序风格&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Main program and subroutine&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hierarchical decomposition:
Based on definition-use relations
&lt;ul&gt;
&lt;li&gt;Definition-call&lt;/li&gt;
&lt;li&gt;Call-return&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Single thread of control
Supported directly by programming languages&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="面向对象风格"&gt;&lt;strong&gt;面向对象风格&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Object-Oriented Organization&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Each object contains &lt;strong&gt;data and operations&lt;/strong&gt; on these data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data within an object can only be accessed by methods of its inclosing object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object is probably instantiated from a template (Class)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;feature&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Encapsulation&lt;/p&gt;
&lt;p&gt;Restrict access to certain information&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Polymorphism&lt;/p&gt;
&lt;p&gt;Choose the method at run-time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inheritance&lt;/p&gt;
&lt;p&gt;take over (or inherit) attributes and behavior of the pre-existing classes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="分层的风格"&gt;&lt;strong&gt;分层的风格&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Call and return systems&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Main program and subroutine&lt;/li&gt;
&lt;li&gt;OO Systems&lt;/li&gt;
&lt;li&gt;Hierarchical layer&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="基于共享数据的事件风格"&gt;&lt;strong&gt;基于共享数据的事件风格&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Individual components announce event to communicate with others (Publish)&lt;/li&gt;
&lt;li&gt;Other components may register an interest in the kind of events (subscribe). They are invoked when the event appear&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/TRKDBBP/image-20221126112413531.png"
loading="lazy"
alt="image-20221126112413531"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/xf55WM9/image-20221126112433663.png"
loading="lazy"
alt="image-20221126112433663"
&gt;&lt;/p&gt;
&lt;h3 id="powerpoint"&gt;PowerPoint
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;软件体系结构＝（元素，形态，基本理论）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件体系结构层次的设计主要包括以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组成系统的构件&lt;strong&gt;描述&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;构件之间的&lt;strong&gt;交互&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;指导构件交互的&lt;strong&gt;模式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;施加在模式上的&lt;strong&gt;约束&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个软件系统的体系结构定义了组成系统的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;构件（components）&lt;/p&gt;
&lt;p&gt;构件用于&lt;strong&gt;实施计算和保存状态&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;连接件（connectors）&lt;/p&gt;
&lt;p&gt;连接件用于表达构件之间的&lt;strong&gt;关系&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;和它们之间的匹配&lt;/p&gt;
&lt;p&gt;构件和连接件之间的匹 配表示了系统的&lt;strong&gt;拓扑结构&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Components:&lt;/p&gt;
&lt;p&gt;define the locus of &lt;strong&gt;computation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Examples: filters, databases, objects, clients/servers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connectors:&lt;/p&gt;
&lt;p&gt;mediate component &lt;strong&gt;interactions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Examples: procedure call, pipes, event broadcast&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Batch Sequential Systems&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Processing steps are &lt;strong&gt;independent programs&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Each step runs to &lt;strong&gt;completion&lt;/strong&gt; before next step starts&lt;/li&gt;
&lt;li&gt;Data transmitted &lt;strong&gt;as a whole&lt;/strong&gt; between steps&lt;/li&gt;
&lt;li&gt;Typical applications:
&lt;ul&gt;
&lt;li&gt;classical data processing&lt;/li&gt;
&lt;li&gt;program development&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;data flow System&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A data flow system is one in which
&lt;ul&gt;
&lt;li&gt;the &lt;strong&gt;availability of data&lt;/strong&gt; controls the computation&lt;/li&gt;
&lt;li&gt;the structure of the design is dominated by &lt;strong&gt;orderly motion of data&lt;/strong&gt; from process to process&lt;/li&gt;
&lt;li&gt;the pattern of data flow is &lt;strong&gt;explicit&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In a pure data flow system, there is &lt;strong&gt;no other interaction&lt;/strong&gt; between processes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>【软件测试】笔记</title><link>https://dyhes.github.io/p/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="黑盒测试"&gt;黑盒测试
&lt;/h2&gt;&lt;p&gt;黑盒测试是在程序接口进行的测试，它只检查程序功能是否能按照规格说明书的规定正常使用，程序是否能适当地接收输入数据产生正确的输出信息，并且保持外部信息的完整性。&lt;/p&gt;
&lt;h3 id="等价类划分"&gt;等价类划分
&lt;/h3&gt;&lt;p&gt;等价类是输入域的某个子集合，而所有的等价类的并集是整个输入域。在子集合中 ，各个输入数据&lt;strong&gt;对于揭露程序中的错误是等效的&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id="边界值分析"&gt;边界值分析
&lt;/h3&gt;&lt;p&gt;边界值分析是等价类划分的一种变体和改良&lt;/p&gt;
&lt;p&gt;边界值分析利用输入变量的最小值（min）、略大于最小值（ min+）、输入值域内的任意值（nom）、略小于最大值（max- ）和最大值（max）来设计测试用例&lt;/p&gt;
&lt;p&gt;对于一个含有n个变量的程序，保留其中一个变量，让其 余的变量取正常值，被保留的变量依次取min、min+、 nom、max-、max值，对每个变量都重复进行，这样对于 一个n变量的程序，边界值分析测试程序会产生4n+1个测 试用例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;健壮性测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;健壮性测试是边界值分析测试的一种扩展，除了取5个边界值外 ，还需要考虑采用一个略超过最大值（max+）以及略小于最小 值（min-）的取值，检查超过极限值时系统的情况&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最坏情况测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;拒绝边界值分析采用的可靠性理论的单缺陷假设，关心当多个变量取极值时会出现什么情况。 对每个变量，首先进行包含最小值、略高于最小值、正常值、略低于最大值和最大值五元素集合的测试，然后对这些集合进行&lt;strong&gt;笛卡尔积&lt;/strong&gt;计算，以生成测试用例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;健壮最坏情况测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用健壮性测试的七元素集合的笛卡尔积生成测试用例&lt;/p&gt;
&lt;h3 id="错误猜测法"&gt;错误猜测法
&lt;/h3&gt;&lt;p&gt;依据经验猜测错误&lt;/p&gt;
&lt;h3 id="判定表"&gt;判定表
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;条件桩（Condition Stub）：列出了问题的所有条件。通常认为列出的条件的次序无关紧要。&lt;/li&gt;
&lt;li&gt;动作桩（Action Stub）：列出了问题规定可能采取的操作。这些操作的排列顺序没有约束。&lt;/li&gt;
&lt;li&gt;条件项（Condition Entry）：列出针对它所列条件的取值，在所有可能情况下的真假值。&lt;/li&gt;
&lt;li&gt;动作项（Action Entry）：列出在条件项的各种取值情况下应采取的动作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/pfrFBZ5/image-20221203194641964.png"
loading="lazy"
alt="image-20221203194641964"
&gt;&lt;/p&gt;
&lt;p&gt;简化&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/V2YQSRh/image-20221203194657664.png"
loading="lazy"
alt="image-20221203194657664"
&gt;&lt;/p&gt;
&lt;h3 id="因果图法"&gt;因果图法
&lt;/h3&gt;&lt;p&gt;等价类划分方法和边界值分析法都是着重考虑输入条件， 并没有考虑到输入情况的各种组合，也没考虑到各个输入情况之间的相互制约关系；而因果图是一种挑选高效测试用例以检查组合输入条件的系统方法&lt;/p&gt;
&lt;h2 id="白盒测试"&gt;白盒测试
&lt;/h2&gt;&lt;p&gt;白盒测试是知道产品内部工作过程，可通过测试来检测产品内部动作是否按照规格说明书的规定正常进行&lt;/p&gt;
&lt;h3 id="静态白盒测试"&gt;静态白盒测试
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;代码检查&lt;/p&gt;
&lt;p&gt;人工+工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;静态结构分析&lt;/p&gt;
&lt;p&gt;主要由软件工具自动进行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件质量度量&lt;/p&gt;
&lt;p&gt;主要由软件工具自动进行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="动态白盒测试"&gt;动态白盒测试
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;功能确认与接口分析&lt;/li&gt;
&lt;li&gt;性能与效率分析&lt;/li&gt;
&lt;li&gt;内存分析&lt;/li&gt;
&lt;li&gt;代码跟踪&lt;/li&gt;
&lt;li&gt;逻辑覆盖率分析&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>