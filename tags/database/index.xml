<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DataBase on 飞鸿踏雪泥</title><link>https://dyhes.github.io/tags/database/</link><description>Recent content in DataBase on 飞鸿踏雪泥</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 22 Oct 2025 16:27:30 +0800</lastBuildDate><atom:link href="https://dyhes.github.io/tags/database/index.xml" rel="self" type="application/rss+xml"/><item><title>【DataBase】Test</title><link>https://dyhes.github.io/p/databasetest/</link><pubDate>Mon, 01 Sep 2025 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/databasetest/</guid><description>&lt;h2 id="大小写"&gt;大小写
&lt;/h2&gt;&lt;p&gt;MySQL 的大小写敏感性是一个多因素决定的问题，不能简单地用“是”或“否”回答。它具体取决于你指的是&lt;strong&gt;数据库对象名&lt;/strong&gt;（如表名、列名）还是&lt;strong&gt;数据内容本身&lt;/strong&gt;，同时也与&lt;strong&gt;操作系统&lt;/strong&gt;和&lt;strong&gt;数据库配置&lt;/strong&gt;密切相关。&lt;/p&gt;
&lt;p&gt;为了让你能快速把握核心区别，我准备了一个表格：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;对象&lt;/th&gt;
&lt;th&gt;大小写敏感情况&lt;/th&gt;
&lt;th&gt;主要控制因素&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;数据库名&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;依赖于操作系统和 &lt;code&gt;lower_case_table_names&lt;/code&gt;设置&lt;/td&gt;
&lt;td&gt;操作系统、&lt;code&gt;lower_case_table_names&lt;/code&gt;参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;表名&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;依赖于操作系统和 &lt;code&gt;lower_case_table_names&lt;/code&gt;设置&lt;/td&gt;
&lt;td&gt;操作系统、&lt;code&gt;lower_case_table_names&lt;/code&gt;参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;列名&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;不敏感&lt;/strong&gt; (在所有平台上)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;别名&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;不敏感&lt;/strong&gt; (在所有平台上)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;数据内容 (字符串)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;取决于字段的&lt;strong&gt;字符集校对规则&lt;/strong&gt; (Collation)&lt;/td&gt;
&lt;td&gt;字段的字符集校对规则 (Collation)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;🔍 &lt;strong&gt;如何查看和修改设置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你可以通过以下命令查看当前 &lt;code&gt;lower_case_table_names&lt;/code&gt;的配置：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SHOW VARIABLES LIKE &amp;#39;lower_case_table_names&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要修改此参数，需编辑 MySQL 的配置文件（&lt;code&gt;my.cnf&lt;/code&gt;或 &lt;code&gt;my.ini&lt;/code&gt;），在 &lt;code&gt;[mysqld]&lt;/code&gt;节下添加或修改 &lt;code&gt;lower_case_table_names&lt;/code&gt;，然后&lt;strong&gt;重启 MySQL 服务&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;要查看表或字段的字符集和校对规则，可以使用：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SHOW CREATE TABLE your_table_name;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或更详细地查看字段信息：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SHOW FULL COLUMNS FROM your_table_name;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🎯 &lt;strong&gt;如何控制数据内容的大小写敏感性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据内容的大小写敏感性由字段的&lt;strong&gt;校对规则 (Collation)&lt;/strong&gt; 决定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不区分大小写&lt;/strong&gt;的校对规则通常以 &lt;code&gt;_ci&lt;/code&gt;(case insensitive) 结尾，如 &lt;code&gt;utf8mb4_general_ci&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;区分大小写&lt;/strong&gt;的校对规则通常以 &lt;code&gt;_cs&lt;/code&gt;(case sensitive) 或 &lt;code&gt;_bin&lt;/code&gt;(binary) 结尾，如 &lt;code&gt;utf8mb4_bin&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以在&lt;strong&gt;创建或修改表/字段时指定校对规则&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;CREATE TABLE your_table (
your_column VARCHAR(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin
);
-- 或修改现有字段
ALTER TABLE your_table MODIFY your_column VARCHAR(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果不想修改表结构，也可以在 &lt;strong&gt;SQL 查询时临时指定&lt;/strong&gt;，使用 &lt;code&gt;BINARY&lt;/code&gt;关键字或 &lt;code&gt;COLLATE&lt;/code&gt;子句：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM your_table WHERE BINARY your_column = &amp;#39;AbC&amp;#39;;
-- 或
SELECT * FROM your_table WHERE your_column = &amp;#39;AbC&amp;#39; COLLATE utf8mb4_bin;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;💡 &lt;strong&gt;实践建议&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;保持一致性&lt;/strong&gt;：在同一个项目或数据库中，最好保持统一的大小写命名规范。一个广泛采用的实践是&lt;strong&gt;所有数据库名、表名、列名均使用小写字母、数字和下划线的组合&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;谨慎修改 &lt;code&gt;lower_case_table_names&lt;/code&gt;&lt;/strong&gt;：修改此参数&lt;strong&gt;需要重启数据库服务&lt;/strong&gt;，且对已有数据库的影响可能很复杂，尤其是在不同操作系统间迁移时。&lt;strong&gt;最好在初始化数据库实例时就确定此设置&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;明确需求&lt;/strong&gt;：在设计表时，根据业务逻辑考虑字段是否需要区分大小写（例如，验证码通常区分，用户名可能不区分）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;希望这些信息能帮助你更好地理解和控制 MySQL 中的大小写问题。&lt;/p&gt;
&lt;h2 id="date"&gt;date
&lt;/h2&gt;&lt;p&gt;在 SQL 中获取一个日期的下一天，通常需要使用数据库提供的日期函数。虽然具体函数名和语法因数据库系统而异，但思路类似：&lt;strong&gt;指定一个日期/时间点，为其加上一个时间间隔（例如1天）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;由于您没有指定数据库系统，下面用表格汇总几种常见数据库中获取日期下一天的方法：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数据库系统&lt;/th&gt;
&lt;th&gt;核心函数/操作&lt;/th&gt;
&lt;th&gt;示例 (假设要获取'2023-10-01&amp;rsquo;的下一天)&lt;/th&gt;
&lt;th&gt;备注/来源&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;MySQL&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DATE_ADD(date, INTERVAL expr unit)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SELECT DATE_ADD('2023-10-01', INTERVAL 1 DAY) AS next_day;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;也支持 &lt;code&gt;+ INTERVAL&lt;/code&gt;操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date + INTERVAL expr unit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SELECT '2023-10-01' + INTERVAL 1 DAY AS next_day;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;SQL Server&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DATEADD(datepart, number, date)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SELECT DATEADD(DAY, 1, '2023-10-01') AS next_day;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Oracle&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date + NUMBER&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SELECT TO_DATE('2023-10-01', 'YYYY-MM-DD') + 1 AS next_day FROM DUAL;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日期直接加数字（单位为天）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date + INTERVAL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SELECT DATE '2023-10-01' + INTERVAL '1 day' AS next_day;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;或 &lt;code&gt;date + INTEGER&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SELECT DATE '2023-10-01' + 1 AS next_day;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-一些说明和注意事项"&gt;💡 一些说明和注意事项
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;获取当前日期的下一天&lt;/strong&gt;：若想获取&lt;strong&gt;当前日期&lt;/strong&gt;（今天）的下一天（明天），可在上述示例中将固定日期替换为获取当前日期的函数。例如在MySQL中：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT DATE_ADD(CURDATE(), INTERVAL 1 DAY) AS tomorrow;
-- 或
SELECT CURDATE() + INTERVAL 1 DAY AS tomorrow;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在SQL Server中：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT DATEADD(DAY, 1, GETDATE()) AS tomorrow;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;日期格式非常重要&lt;/strong&gt;：数据库期望的日期字符串格式通常是 &lt;code&gt;YYYY-MM-DD&lt;/code&gt;（如 &lt;code&gt;'2023-10-01'&lt;/code&gt;）。使用其他格式可能导致错误或不可预知的结果。如果不确定，请查阅所用数据库的日期字面量表示规范。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;字段操作&lt;/strong&gt;：上述示例同样适用于表字段（列）。只需将函数中的日期字面量替换为字段名即可。例如，更新表中某个日期字段为它的下一天：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- MySQL 中更新某日期字段为下一天
UPDATE your_table
SET your_date_column = DATE_ADD(your_date_column, INTERVAL 1 DAY)
WHERE your_condition;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-一个简单的应用场景"&gt;🧠 一个简单的应用场景
&lt;/h3&gt;&lt;p&gt;假设有一个用户登录表 &lt;code&gt;user_logins&lt;/code&gt;，包含 &lt;code&gt;user_id&lt;/code&gt;和 &lt;code&gt;login_date&lt;/code&gt;字段。如果想找出所有在 &lt;strong&gt;首次登录的第二天&lt;/strong&gt; 也登录了的用户，其查询思路会涉及计算首次登录日期的下一天：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 示例思路 (MySQL环境)
SELECT u1.user_id
FROM user_logins u1
JOIN (
SELECT user_id, MIN(login_date) AS first_login
FROM user_logins
GROUP BY user_id
) u2 ON u1.user_id = u2.user_id
WHERE u1.login_date = u2.first_login + INTERVAL 1 DAY; -- 关键：下一天
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;希望这些信息能帮助你解决问题。&lt;/p&gt;
&lt;p&gt;如果你能告诉我你使用的是哪种数据库（如 MySQL、SQL Server 等），我可以提供更精确的例子。&lt;/p&gt;
&lt;h2 id="嵌套子查询和-join-子查询"&gt;嵌套子查询和 JOIN 子查询
&lt;/h2&gt;&lt;p&gt;你提供的两个SQL查询都是用来查找没有与名为&amp;rsquo;RED&amp;rsquo;的公司达成任何交易的销售人员的名字，但它们在性能上确实有一些差异。下面我用一个表格来汇总它们的核心区别，然后详细解释：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性维度&lt;/th&gt;
&lt;th&gt;查询一（嵌套子查询）&lt;/th&gt;
&lt;th&gt;查询二（JOIN子查询）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;执行逻辑&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;从内向外执行，先取&lt;code&gt;com_id&lt;/code&gt;，再找订单，最后排除销售人员。每一步结果&lt;strong&gt;可被缓存&lt;/strong&gt;（如果优化器判断合适）&lt;/td&gt;
&lt;td&gt;先执行JOIN，生成一个临时的中间结果集（所有与&amp;rsquo;RED&amp;rsquo;公司相关的订单），再排除销售人员。这个中间结果集&lt;strong&gt;通常需要实时计算&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;索引利用效率&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;对&lt;code&gt;company.name&lt;/code&gt;和&lt;code&gt;orders.com_id&lt;/code&gt;的索引依赖性强，&lt;strong&gt;理想情况下能高效利用&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;高度依赖&lt;/strong&gt;&lt;code&gt;orders.com_id&lt;/code&gt;和&lt;code&gt;company.com_id&lt;/code&gt;及&lt;code&gt;company.name&lt;/code&gt;的索引。JOIN条件索引至关重要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;可读性与维护性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;逻辑是分层和清晰的，符合“一步一步”的思维，但嵌套稍显复杂&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;表关联关系更直观&lt;/strong&gt;，一眼就能看出&lt;code&gt;orders&lt;/code&gt;和&lt;code&gt;company&lt;/code&gt;是如何连接的，子查询的目的非常明确&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;潜在性能风险&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;如果&lt;strong&gt;子查询结果集很大&lt;/strong&gt;，&lt;code&gt;NOT IN&lt;/code&gt;的性能会显著下降。MySQL可能无法优化掉重复项，导致效率低下&lt;/td&gt;
&lt;td&gt;如果&lt;strong&gt;JOIN产生的中间结果集非常大&lt;/strong&gt;（比如&amp;rsquo;RED&amp;rsquo;公司订单非常多），那么整个查询的性能会受到较大影响&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;优化器友好度&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;现代MySQL版本（5.6+）会尝试优化这种子查询，例如尝试将其&lt;strong&gt;转换为高效的JOIN&lt;/strong&gt;，但&lt;strong&gt;并非总能成功&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;数据库优化器&lt;strong&gt;更擅长优化JOIN操作&lt;/strong&gt;，可以更好地选择驱动表、连接顺序和连接算法（如Nested Loop, Hash Join, Merge Join）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;建议使用场景&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;数据量适中，或者&lt;code&gt;company&lt;/code&gt;和&lt;code&gt;orders&lt;/code&gt;表相关过滤条件能&lt;strong&gt;有效缩小子查询结果集&lt;/strong&gt;时&lt;/td&gt;
&lt;td&gt;&lt;code&gt;orders&lt;/code&gt;和&lt;code&gt;company&lt;/code&gt;表&lt;strong&gt;关联字段有良好索引&lt;/strong&gt;，并且与&amp;rsquo;RED&amp;rsquo;相关的订单数据量不会过大时&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id="-给你的优化建议"&gt;💡 给你的优化建议
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优先使用索引&lt;/strong&gt;：确保相关字段上都有索引，这是提升性能的基础。对于&lt;code&gt;company&lt;/code&gt;表，&lt;code&gt;name&lt;/code&gt;字段索引很重要。对于&lt;code&gt;orders&lt;/code&gt;表，&lt;code&gt;com_id&lt;/code&gt;和&lt;code&gt;sales_id&lt;/code&gt;的索引也非常关键。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;考虑使用&lt;code&gt;NOT EXISTS&lt;/code&gt;&lt;/strong&gt;：在很多情况下，尤其是处理可能存在&lt;code&gt;NULL&lt;/code&gt;值的情况时，用&lt;code&gt;NOT EXISTS&lt;/code&gt;替代&lt;code&gt;NOT IN&lt;/code&gt;是更安全且&lt;strong&gt;性能往往更好的选择&lt;/strong&gt;。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT name
FROM salesperson s
WHERE NOT EXISTS (
SELECT 1
FROM orders o
JOIN company c ON o.com_id = c.com_id
WHERE c.name = &amp;#39;RED&amp;#39;
AND o.sales_id = s.sales_id
);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;NOT EXISTS&lt;/code&gt;一旦找到匹配的行就会停止扫描，效率更高，并且能正确处理&lt;code&gt;NULL&lt;/code&gt;值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用&lt;code&gt;EXPLAIN&lt;/code&gt;分析&lt;/strong&gt;：这是最直接有效的方法。在你的数据库环境下，&lt;strong&gt;对这两个原始查询以及&lt;code&gt;NOT EXISTS&lt;/code&gt;的版本都运行&lt;code&gt;EXPLAIN&lt;/code&gt;&lt;/strong&gt;，查看执行计划（注意关注是否使用索引、扫描行数、是否出现临时表或文件排序等）。数据库优化器的选择可能因数据分布、表结构和版本而异。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;审视业务逻辑与表设计&lt;/strong&gt;：如果‘RED’公司的订单数据量巨大且频繁查询，可以考虑在&lt;code&gt;orders&lt;/code&gt;表中&lt;strong&gt;冗余存储公司名称&lt;/strong&gt;（反范式设计），这样可以直接过滤，避免&lt;code&gt;JOIN&lt;/code&gt;。但这会增加数据一致性维护的成本，需要权衡。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id="-总结"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;你的第二个查询（使用了JOIN）&lt;strong&gt;理论上更可能获得更好的性能&lt;/strong&gt;，因为它更符合数据库优化器的优化模式，特别是在关联字段有索引并且数据库能够高效处理JOIN操作时。&lt;/p&gt;
&lt;p&gt;但在实际应用中，&lt;strong&gt;性能差异可能会因具体的数据量、索引情况、MySQL版本和配置而异&lt;/strong&gt;。最稳妥的做法是遵循“&lt;strong&gt;索引优先 + &lt;code&gt;EXPLAIN&lt;/code&gt;验证&lt;/strong&gt;”的原则。对于这个需求，也强烈建议你试试&lt;code&gt;NOT EXISTS&lt;/code&gt;的写法，它 often 是一个更好的选择。&lt;/p&gt;
&lt;p&gt;希望这些分析对你有帮助！如果你有具体的表结构和数据量信息，用&lt;code&gt;EXPLAIN&lt;/code&gt;跑一下，看看结果，会让你更了解数据库的实际执行情况。&lt;/p&gt;
&lt;h2 id="select-1"&gt;SELECT 1
&lt;/h2&gt;&lt;p&gt;&amp;ldquo;SELECT 1&amp;rdquo; 在 SQL 中是一个常见且实用的技巧，它的核心在于&lt;strong&gt;快速检查条件是否成立，而非获取实际数据&lt;/strong&gt;。下面我会详细解释它的作用、常见用法以及需要注意的地方。&lt;/p&gt;
&lt;h3 id="-一基本概念与原理"&gt;📊 一、基本概念与原理
&lt;/h3&gt;&lt;p&gt;&amp;ldquo;SELECT 1&amp;rdquo; 的含义是&lt;strong&gt;返回一个常数值（数字1）&lt;/strong&gt;。它并不关心表里具体有什么数据，也不会去读取实际的列值。&lt;/p&gt;
&lt;p&gt;例如，执行 &lt;code&gt;SELECT 1 FROM users;&lt;/code&gt;会为 &lt;code&gt;users&lt;/code&gt;表中的每一行返回一个数字1，结果集的行数与原表相同，但每行只有一个值为1的列。&lt;/p&gt;
&lt;p&gt;你甚至可以省略表名，直接执行 &lt;code&gt;SELECT 1;&lt;/code&gt;（在 MySQL 等数据库中，这实际上是从虚拟表 DUAL 查询），它同样会返回一个1。&lt;/p&gt;
&lt;h3 id="-二主要用途"&gt;🎯 二、主要用途
&lt;/h3&gt;&lt;p&gt;&amp;ldquo;SELECT 1&amp;rdquo; 主要有以下几个常见用途：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;🏷️ 存在性检查（最常用）&lt;/strong&gt;：这是 &lt;code&gt;SELECT 1&lt;/code&gt;最经典的用法，通常与 &lt;code&gt;EXISTS&lt;/code&gt;或 &lt;code&gt;NOT EXISTS&lt;/code&gt;子句配合，用于检查是否存在满足条件的记录。&lt;/p&gt;
&lt;p&gt;例如，想找出没有下过订单的客户：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM Customers
WHERE NOT EXISTS (
SELECT 1 FROM Orders
WHERE Customers.CustomerID = Orders.CustomerID
);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里的 &lt;code&gt;SELECT 1&lt;/code&gt;仅仅是为了满足语法要求，数据库引擎只需判断子查询是否有结果返回，&lt;strong&gt;并不需要读取 Orders 表的任何具体列数据&lt;/strong&gt;，因此效率很高。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;🔧 数据库连接测试&lt;/strong&gt;：在应用程序或脚本中，有时需要验证数据库连接是否有效且通畅。执行一条像 &lt;code&gt;SELECT 1;&lt;/code&gt;这样简单且轻量的语句，如果成功返回结果，就说明连接是正常的。&lt;/p&gt;
&lt;p&gt;Python 伪代码示例：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;try:
cursor.execute(&amp;#34;SELECT 1&amp;#34;)
print(&amp;#34;数据库连接正常!&amp;#34;)
except Error as e:
print(&amp;#34;连接失败:&amp;#34;, e)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;⏱️ 性能压测&lt;/strong&gt;：在对数据库进行性能基准测试或压力测试时，使用 &lt;code&gt;SELECT 1&lt;/code&gt;可以最大限度地减少 SQL 本身带来的 I/O 和计算开销（因为不需要访问真实数据），从而更纯粹地测试数据库服务的&lt;strong&gt;响应速度和并发处理能力&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;例如，在 MySQL 中可以使用：&lt;code&gt;SELECT BENCHMARK(1000000, SELECT 1);&lt;/code&gt;来重复执行多次。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;➡️ 子查询中的占位符&lt;/strong&gt;：在某些子查询中，可能只需要一个语法上的占位符，而不需要实际数据。&lt;code&gt;SELECT 1&lt;/code&gt;此时就是一个简洁的选择。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;UPDATE orders SET status = &amp;#39;processed&amp;#39;
WHERE id IN (
SELECT 1 FROM temp_order_ids WHERE condition = true
);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-三select-1与-select-的对比"&gt;⚖️ 三、&lt;code&gt;SELECT 1&lt;/code&gt;与 &lt;code&gt;SELECT *&lt;/code&gt;的对比
&lt;/h3&gt;&lt;p&gt;理解 &lt;code&gt;SELECT 1&lt;/code&gt;和 &lt;code&gt;SELECT *&lt;/code&gt;的区别，能更好地把握其适用场景。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;对比项&lt;/th&gt;
&lt;th&gt;&lt;code&gt;SELECT 1&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;SELECT *&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;执行效率&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;无需读取列数据，仅验证行是否存在，&lt;strong&gt;更快&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;需要读取所有列数据，&lt;strong&gt;较慢&lt;/strong&gt;（尤其对宽表或大字段表）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;资源消耗&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;低&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;高&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回结果&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;固定常量值 (1)&lt;/td&gt;
&lt;td&gt;表中的所有字段数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;逻辑条件验证、存在性检查&lt;/td&gt;
&lt;td&gt;需要获取实际数据的查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;是否涉及I/O&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;通常更少&lt;/td&gt;
&lt;td&gt;更多&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;简单来说，&lt;strong&gt;当你只关心“有没有”时，用 &lt;code&gt;SELECT 1&lt;/code&gt;；当你关心“是什么”时，才用 &lt;code&gt;SELECT \*&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id="-四其他类似写法与注意事项"&gt;🔍 四、其他类似写法与注意事项
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;SELECT 1&lt;/code&gt;与 &lt;code&gt;SELECT COUNT(1)&lt;/code&gt;/ &lt;code&gt;SELECT SUM(1)&lt;/code&gt;&lt;/strong&gt;：这三者完全不同。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT 1 FROM table&lt;/code&gt;会返回一个列，其行数与表相同，每行都是1。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT COUNT(1) FROM table&lt;/code&gt;或 &lt;code&gt;SELECT SUM(1) FROM table&lt;/code&gt;会&lt;strong&gt;聚合&lt;/strong&gt;计算，返回一个单一数值，即表的&lt;strong&gt;总行数&lt;/strong&gt;（因为对每行的常量1进行计数或求和）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;常量值可以替换&lt;/strong&gt;：&lt;code&gt;SELECT 1&lt;/code&gt;中的 &amp;ldquo;1&amp;rdquo; 并非固定不变，根据习惯或特定需要，也可以使用 &lt;code&gt;SELECT 2&lt;/code&gt;、&lt;code&gt;SELECT 'A'&lt;/code&gt;、&lt;code&gt;SELECT NULL&lt;/code&gt;等，它们在&lt;strong&gt;存在性检查&lt;/strong&gt;中的作用是&lt;strong&gt;等价&lt;/strong&gt;的。 数字1只是最广泛使用的约定。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;并非万能&lt;/strong&gt;：&lt;code&gt;SELECT 1&lt;/code&gt;的轻量优势主要体现在避免了不必要的列数据读取。但如果子查询本身没有合适的索引，或者需要扫描大量数据才能判断存在性，其性能仍然可能成为瓶颈。此时，优化索引和查询条件更为关键。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-总结-1"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;SELECT 1&lt;/code&gt;是 SQL 中一个以&lt;strong&gt;高效&lt;/strong&gt;和&lt;strong&gt;专注&lt;/strong&gt;（于存在性判断）为特点的写法。&lt;strong&gt;它的核心价值在于：用最小的资源开销，来快速回答“是否存在符合条件的记录”这个问题&lt;/strong&gt;。 记住它的最佳搭档是 &lt;code&gt;EXISTS&lt;/code&gt;子句，并在下次进行存在性检查或连接测试时，考虑使用它来代替 &lt;code&gt;SELECT *&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="count-count1-and-countcol"&gt;COUNT(*), COUNT(1) and COUNT(col)
&lt;/h2&gt;&lt;p&gt;理解 &lt;code&gt;COUNT(*)&lt;/code&gt;, &lt;code&gt;COUNT(1)&lt;/code&gt;, 和 &lt;code&gt;COUNT(column)&lt;/code&gt;的区别是 SQL 查询中的常见问题。它们虽然都用于计数，但在语义、对空值的处理以及数据库优化器处理方式上存在差异。下面这个表格汇总了它们的核心区别，方便你快速了解：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;&lt;code&gt;COUNT(*)&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;COUNT(1)&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;COUNT(column)&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;统计对象&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;统计&lt;strong&gt;所有行&lt;/strong&gt;的数量&lt;/td&gt;
&lt;td&gt;统计&lt;strong&gt;所有行&lt;/strong&gt;的数量&lt;/td&gt;
&lt;td&gt;统计指定列中&lt;strong&gt;非 NULL 值&lt;/strong&gt;的数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;是否包含NULL&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ 包含&lt;/td&gt;
&lt;td&gt;✅ 包含&lt;/td&gt;
&lt;td&gt;❌ 不包含&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;底层操作&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;数据库通常会优化，&lt;strong&gt;不读取实际数据列&lt;/strong&gt;，只关心行是否存在&lt;/td&gt;
&lt;td&gt;数据库通常会优化，&lt;strong&gt;不读取实际数据列&lt;/strong&gt;，只关心行是否存在&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;需要读取指定列的值&lt;/strong&gt;并判断是否为NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;性能参考&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;⭐️⭐️⭐️⭐️⭐️ (优化最好)&lt;/td&gt;
&lt;td&gt;⭐️⭐️⭐️⭐️⭐️ (与 &lt;code&gt;COUNT(*)&lt;/code&gt;基本相同)&lt;/td&gt;
&lt;td&gt;⭐️⭐️～⭐️⭐️⭐️ (通常较慢，&lt;strong&gt;强烈依赖于该列是否有索引&lt;/strong&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;语义清晰度&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;⭐️⭐️⭐️⭐️⭐️ (非常明确是统计行数)&lt;/td&gt;
&lt;td&gt;⭐️⭐️⭐️⭐️ (语义上略逊于 &lt;code&gt;COUNT(*)&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;⭐️⭐️⭐️⭐️⭐️ (非常明确是统计某列非空值数量)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;推荐使用场景&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;统计表中的总行数&lt;/strong&gt;（首选）&lt;/td&gt;
&lt;td&gt;效果同 &lt;code&gt;COUNT(*)&lt;/code&gt;，但更推荐使用 &lt;code&gt;COUNT(*)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;统计特定列中非空值的数量&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;💡 &lt;strong&gt;关于性能的补充说明&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;COUNT(*)&lt;/code&gt;和 &lt;code&gt;COUNT(1)&lt;/code&gt;在现代数据库（如 MySQL、PostgreSQL 等）中的&lt;strong&gt;性能几乎没有差异&lt;/strong&gt;。数据库优化器通常会将它们视为相同的操作，选择最小的可用索引（通常是二级索引）来统计行数，避免了全表扫描。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;COUNT(column)&lt;/code&gt;的性能在很大程度上&lt;strong&gt;取决于该列是否有索引&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;如果 &lt;code&gt;column&lt;/code&gt;字段上有索引，数据库可能会利用索引来统计非NULL值的数量，速度会快很多。&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;column&lt;/code&gt;字段上没有索引，数据库就需要进行&lt;strong&gt;全表扫描&lt;/strong&gt;，并逐行检查该列的值是否为NULL，这在表很大时会非常耗时。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;值得注意的是，&lt;strong&gt;即使 &lt;code&gt;column&lt;/code&gt;是主键&lt;/strong&gt;，&lt;code&gt;COUNT(column)&lt;/code&gt;也&lt;strong&gt;可能&lt;/strong&gt;比 &lt;code&gt;COUNT(*)&lt;/code&gt;稍慢。因为 &lt;code&gt;COUNT(*)&lt;/code&gt;数据库可能会选择更小的二级索引来扫描，而 &lt;code&gt;COUNT(column)&lt;/code&gt;（如果column是主键）则会强制扫描主键索引（聚簇索引），而聚簇索引通常包含整个数据行，体积更大。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-举例说明"&gt;📊 举例说明
&lt;/h3&gt;&lt;p&gt;假设有一张 &lt;code&gt;students&lt;/code&gt;表，数据如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;age&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Alice&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Bob&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;执行不同 COUNT 语句的结果是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT COUNT(*) FROM students;&lt;/code&gt;结果为 &lt;strong&gt;4&lt;/strong&gt;（统计所有行）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT COUNT(1) FROM students;&lt;/code&gt;结果为 &lt;strong&gt;4&lt;/strong&gt;（统计所有行）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT COUNT(name) FROM students;&lt;/code&gt;结果为 &lt;strong&gt;2&lt;/strong&gt;（只统计 &lt;code&gt;name&lt;/code&gt;列中非NULL值的行，即 &amp;ldquo;Alice&amp;rdquo; 和 &amp;ldquo;Bob&amp;rdquo;）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT COUNT(age) FROM students;&lt;/code&gt;结果为 &lt;strong&gt;2&lt;/strong&gt;（只统计 &lt;code&gt;age&lt;/code&gt;列中非NULL值的行，即 20 和 22）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-总结与建议"&gt;🚀 总结与建议
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;想统计表的总行数时，用 &lt;code&gt;COUNT(\*)&lt;/code&gt;&lt;/strong&gt;：这是 SQL 标准写法，语义最清晰，而且数据库对其优化得最好，性能最佳。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;想统计某列中非空值的数量时，用 &lt;code&gt;COUNT(column)&lt;/code&gt;&lt;/strong&gt;：这是它的专属用途。如果经常需要对该列进行此类统计，为其建立索引会大大提升查询速度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;COUNT(1)&lt;/code&gt;和 &lt;code&gt;COUNT(\*)&lt;/code&gt;按需选择即可&lt;/strong&gt;：两者在效率和结果上并无实质区别。你可以根据团队习惯或个人偏好选择，但通常更推荐使用语义更明确的 &lt;code&gt;COUNT(*)&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;希望这些解释能帮助你更好地理解它们之间的区别。&lt;/p&gt;
&lt;h2 id="exist--in"&gt;EXIST &amp;amp; IN
&lt;/h2&gt;&lt;p&gt;EXISTS 和 IN 是 SQL 中用于子查询的两种操作符，虽然在某些情况下可以实现相似的查询结果，但它们的底层机制、适用场景和性能特点有显著区别。下面我用一个表格帮你快速梳理它们的核心差异，然后再详细解释。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性维度&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;EXISTS&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;IN&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;执行机制&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;关联子查询&lt;/strong&gt;。遍历外部表，对每一行执行一次子查询，一旦找到匹配就停止。&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;非关联子查询&lt;/strong&gt;。先执行子查询，将结果集缓存到内存，然后遍历外部表，检查值是否在结果集中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;NULL 值处理&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;更安全&lt;/strong&gt;。&lt;code&gt;NOT EXISTS&lt;/code&gt;会按预期工作，不受子查询中的 NULL 值影响。&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;有风险&lt;/strong&gt;。如果子查询返回 NULL，&lt;code&gt;NOT IN&lt;/code&gt;的条件会评估为 &lt;code&gt;UNKNOWN&lt;/code&gt;（相当于 FALSE），可能导致意外结果。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;性能偏好&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;子查询&lt;strong&gt;结果集大&lt;/strong&gt;、是&lt;strong&gt;关联查询&lt;/strong&gt;、且&lt;strong&gt;关联字段有索引&lt;/strong&gt;时，性能通常更好。&lt;/td&gt;
&lt;td&gt;子查询&lt;strong&gt;结果集小&lt;/strong&gt;、且为&lt;strong&gt;非关联查询&lt;/strong&gt;时，性能可能更优。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;检查&lt;strong&gt;存在性&lt;/strong&gt;，常用于动态的、条件性的关联查询。&lt;/td&gt;
&lt;td&gt;检查&lt;strong&gt;值匹配&lt;/strong&gt;，常用于静态的、确定性的值列表或简单子查询。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-使用方法与示例"&gt;💡 使用方法与示例
&lt;/h3&gt;&lt;p&gt;假设有两个表：&lt;code&gt;customers&lt;/code&gt;（客户）和 &lt;code&gt;orders&lt;/code&gt;（订单），我们想找出所有下过订单的客户。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用 IN：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM customers
WHERE id IN (SELECT customer_id FROM orders);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这条语句会先执行 &lt;code&gt;(SELECT customer_id FROM orders)&lt;/code&gt;，得到一个所有客户ID的列表，然后再检查 &lt;code&gt;customers&lt;/code&gt;表中的每个 &lt;code&gt;id&lt;/code&gt;是否在这个列表里。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用 EXISTS：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM customers c
WHERE EXISTS (SELECT 1 FROM orders o WHERE o.customer_id = c.id);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这条语句会遍历 &lt;code&gt;customers&lt;/code&gt;表的每一行，对于每一行（例如 &lt;code&gt;id = 5&lt;/code&gt;），去执行子查询 &lt;code&gt;(SELECT 1 FROM orders o WHERE o.customer_id = 5)&lt;/code&gt;。只要找到一条匹配的订单，就立即返回 TRUE，并保留该客户记录。&lt;/p&gt;
&lt;h3 id="-注意事项"&gt;⚠️ 注意事项
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;警惕 NOT IN 的 NULL 陷阱&lt;/strong&gt;：当子查询可能返回 NULL 值时，&lt;code&gt;NOT IN&lt;/code&gt;的行为可能不符合预期。安全做法是确保子查询排除 NULL，或直接使用 &lt;code&gt;NOT EXISTS&lt;/code&gt;。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 不安全写法
SELECT * FROM table_a WHERE id NOT IN (SELECT some_id FROM table_b);
-- 安全写法（排除NULL）
SELECT * FROM table_a WHERE id NOT IN (SELECT some_id FROM table_b WHERE some_id IS NOT NULL);
-- 推荐写法（使用NOT EXISTS）
SELECT * FROM table_a a
WHERE NOT EXISTS (SELECT 1 FROM table_b b WHERE b.some_id = a.id);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;索引是关键&lt;/strong&gt;：无论是 &lt;code&gt;EXISTS&lt;/code&gt;还是 &lt;code&gt;IN&lt;/code&gt;，良好的索引是高性能的保障。对于 &lt;code&gt;EXISTS&lt;/code&gt;，应确保&lt;strong&gt;子查询的关联条件字段（如 &lt;code&gt;o.customer_id&lt;/code&gt;）有索引&lt;/strong&gt;。对于 &lt;code&gt;IN&lt;/code&gt;，虽然子查询结果集本身无法利用索引，但应确保&lt;strong&gt;外部查询的筛选字段（如 &lt;code&gt;customers.id&lt;/code&gt;）有索引&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;考虑使用 JOIN 改写&lt;/strong&gt;：在很多情况下，尤其是需要获取关联表的数据时，使用 &lt;code&gt;JOIN&lt;/code&gt;（如 &lt;code&gt;INNER JOIN&lt;/code&gt;或 &lt;code&gt;LEFT JOIN&lt;/code&gt;）可能是比 &lt;code&gt;EXISTS&lt;/code&gt;或 &lt;code&gt;IN&lt;/code&gt;更清晰、性能更好的选择。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-如何选择"&gt;🧩 如何选择
&lt;/h3&gt;&lt;p&gt;你可以根据以下情况做决定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优先考虑使用 EXISTS 当&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;子查询&lt;strong&gt;结果集很大&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;子查询是&lt;strong&gt;关联子查询&lt;/strong&gt;（引用了外部查询的列）。&lt;/li&gt;
&lt;li&gt;需要处理 &lt;code&gt;NOT NULL&lt;/code&gt;逻辑时（使用 &lt;code&gt;NOT EXISTS&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可以考虑使用 IN 当&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;子查询&lt;strong&gt;结果集很小且固定&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;子查询是&lt;strong&gt;非关联&lt;/strong&gt;的（可以独立执行）。&lt;/li&gt;
&lt;li&gt;查询逻辑更注重&lt;strong&gt;值列表的匹配&lt;/strong&gt;，且代码&lt;strong&gt;可读性更重要&lt;/strong&gt;时。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望这些信息能帮助你更好地理解 EXISTS 和 IN 的区别。在实际应用中，灵活运用并结合执行计划分析，才能写出最优的查询语句。&lt;/p&gt;
&lt;h2 id="not-exists"&gt;NOT EXISTS
&lt;/h2&gt;&lt;p&gt;你提供的查询语句报错，主要是因为 SQL 中的关键字是 &lt;strong&gt;&lt;code&gt;NOT EXISTS&lt;/code&gt;&lt;/strong&gt; 而不是 &lt;code&gt;NOT EXIST&lt;/code&gt;。同时，我们也需要确保子查询的逻辑正确，才能找到仅在特定时间段销售的产品。&lt;/p&gt;
&lt;h3 id="-报错原因与修正"&gt;🔍 报错原因与修正
&lt;/h3&gt;&lt;p&gt;你的原查询报错主要有两个原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;关键字拼写错误&lt;/strong&gt;：SQL 中用于判断是否&lt;strong&gt;不存在&lt;/strong&gt;的子查询关键字是 &lt;code&gt;NOT EXISTS&lt;/code&gt;，而不是 &lt;code&gt;NOT EXIST&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;逻辑可能不严谨&lt;/strong&gt;：原查询的逻辑是“查找从未在 2019-01-01 之前 &lt;strong&gt;或&lt;/strong&gt; 2019-03-31 之后销售过的产品”。这并不能完全保证产品&lt;strong&gt;一定在&lt;/strong&gt; 2019年第一季度内销售过。它可能根本没有任何销售记录。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了确保产品在2019年第一季度（2019-01-01至2019-03-31）之间有销售，并且在该时间段之外没有销售，更严谨的思路是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;存在性检查&lt;/strong&gt;：确保产品在 &lt;code&gt;2019-01-01&lt;/code&gt;至 &lt;code&gt;2019-03-31&lt;/code&gt;期间有销售记录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排他性检查&lt;/strong&gt;：确保产品在 &lt;code&gt;2019-01-01&lt;/code&gt;之前或 &lt;code&gt;2019-03-31&lt;/code&gt;之后&lt;strong&gt;没有&lt;/strong&gt;任何销售记录。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-修改后的查询语句-使用-not-exists"&gt;✅ 修改后的查询语句 (使用 NOT EXISTS)
&lt;/h3&gt;&lt;p&gt;这里提供两个修改后的方案，方案一更符合你最初的逻辑思路：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT p.product_id, p.product_name
FROM Product p
WHERE
-- 条件1: 该产品在2019年第一季度内至少有一次销售记录
EXISTS (
SELECT 1
FROM Sales s
WHERE s.product_id = p.product_id
AND s.sale_date BETWEEN &amp;#39;2019-01-01&amp;#39; AND &amp;#39;2019-03-31&amp;#39;
)
AND
-- 条件2: 该产品在2019年第一季度之外没有任何销售记录
NOT EXISTS (
SELECT 1
FROM Sales s
WHERE s.product_id = p.product_id
AND s.sale_date NOT BETWEEN &amp;#39;2019-01-01&amp;#39; AND &amp;#39;2019-03-31&amp;#39;
);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;code&gt;BETWEEN '2019-01-01' AND '2019-03-31'&lt;/code&gt;包含了边界日期（即包括2019-01-01和2019-03-31）。请确保这与你的业务需求一致。&lt;/p&gt;
&lt;h3 id="-替代方案-使用-left-join--is-null"&gt;🔄 替代方案 (使用 LEFT JOIN + IS NULL)
&lt;/h3&gt;&lt;p&gt;除了 &lt;code&gt;NOT EXISTS&lt;/code&gt;，使用 &lt;code&gt;LEFT JOIN&lt;/code&gt;结合 &lt;code&gt;IS NULL&lt;/code&gt;来检查也是常见的做法：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT p.product_id, p.product_name
FROM Product p
LEFT JOIN Sales s ON p.product_id = s.product_id
AND s.sale_date NOT BETWEEN &amp;#39;2019-01-01&amp;#39; AND &amp;#39;2019-03-31&amp;#39;
WHERE s.product_id IS NULL;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个查询的逻辑是：找到所有产品，并尝试关联其在2019年第一季度&lt;strong&gt;之外&lt;/strong&gt;的销售记录。如果关联结果为空（&lt;code&gt;IS NULL&lt;/code&gt;），则说明该产品在第一季度之外没有销售。但请注意，这个查询&lt;strong&gt;本身并没有显式确保该产品在第一季度内有销售&lt;/strong&gt;。它只能找出&lt;strong&gt;从未&lt;/strong&gt;在第一季度之外销售过的产品，这可能包括那些根本没有销售记录的产品。因此，如果你要使用 &lt;code&gt;LEFT JOIN&lt;/code&gt;，通常需要与确保存在性的查询结合或额外筛选。&lt;/p&gt;
&lt;h3 id="-性能注意事项"&gt;⚠️ 性能注意事项
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;索引是关键&lt;/strong&gt;：为了这类查询的性能，务必在 &lt;code&gt;Sales&lt;/code&gt;表的 &lt;code&gt;product_id&lt;/code&gt;和 &lt;code&gt;sale_date&lt;/code&gt;上建立索引。一个覆盖 &lt;code&gt;(product_id, sale_date)&lt;/code&gt;的&lt;strong&gt;复合索引&lt;/strong&gt;效果最好。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;理解逻辑差异&lt;/strong&gt;：确保你完全理解每个查询条件的逻辑含义，选择最符合你业务需求的一个。上述修改后的 &lt;code&gt;NOT EXISTS&lt;/code&gt;版本（包含两个条件）通常是最稳妥和逻辑清晰的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望这能帮你解决问题。&lt;/p&gt;
&lt;h2 id="date-运算"&gt;Date 运算
&lt;/h2&gt;&lt;p&gt;MySQL 中的 &lt;code&gt;DATE&lt;/code&gt;类型主要用于存储日期值（不包括时间部分），它支持多种运算，让你能高效地处理和操作日期数据。下面我来为你详细解释一下。&lt;/p&gt;
&lt;h3 id="-mysql-date-类型支持的运算"&gt;📊 MySQL DATE 类型支持的运算
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算类别&lt;/th&gt;
&lt;th&gt;支持的操作符或函数&lt;/th&gt;
&lt;th&gt;简要说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;比较运算&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;(或 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;), &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于比较两个日期的先后次序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;算术运算（加减）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DATE_ADD()&lt;/code&gt;, &lt;code&gt;ADDDATE()&lt;/code&gt;, &lt;code&gt;+ INTERVAL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;给日期增加一个时间间隔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DATE_SUB()&lt;/code&gt;, &lt;code&gt;SUBDATE()&lt;/code&gt;, &lt;code&gt;- INTERVAL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从日期减去一个时间间隔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;差值计算&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DATEDIFF(date1, date2)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;计算两个日期之间相差的天数 (返回 &lt;code&gt;date1 - date2&lt;/code&gt;的天数差)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TIMESTAMPDIFF(unit, start_date, end_date)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;计算两个日期时间的差值，可指定单位（如 DAY、MONTH、YEAR、HOUR、MINUTE 等）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;提取部分日期&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;YEAR(date)&lt;/code&gt;, &lt;code&gt;MONTH(date)&lt;/code&gt;, &lt;code&gt;DAY(date)&lt;/code&gt;(或 &lt;code&gt;DAYOFMONTH(date)&lt;/code&gt;), &lt;code&gt;DAYOFWEEK(date)&lt;/code&gt;, &lt;code&gt;DAYOFYEAR(date)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从日期中提取出年、月、日、星期几、年份中的第几天等部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;QUARTER(date)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回日期所在的季度（1-4）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;WEEK(date)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回日期是一年中的第几周&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LAST_DAY(date)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回日期所在月份的最后一天&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;格式化与转换&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DATE_FORMAT(date, format)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将日期按指定格式转换为字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;STR_TO_DATE(str, format)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将字符串按指定格式解析为日期值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DATE(date)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从 DATETIME 或 TIMESTAMP 表达式中提取日期部分&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-运算时的注意事项"&gt;⚠️ 运算时的注意事项
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;确保日期格式有效&lt;/strong&gt;：进行运算的日期值应是有效日期，否则可能得到 &lt;code&gt;NULL&lt;/code&gt;或错误的结果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;日期边界问题&lt;/strong&gt;：在进行加减运算（尤其是月、年）时，注意结果日期的有效性。例如，&lt;code&gt;DATE_ADD('2023-01-31', INTERVAL 1 MONTH)&lt;/code&gt;会得到 &lt;code&gt;2023-02-28&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时间单位的正确使用&lt;/strong&gt;：在使用 &lt;code&gt;INTERVAL&lt;/code&gt;时，要选择正确的时间单位（如 &lt;code&gt;DAY&lt;/code&gt;, &lt;code&gt;MONTH&lt;/code&gt;, &lt;code&gt;YEAR&lt;/code&gt;, &lt;code&gt;HOUR&lt;/code&gt;, &lt;code&gt;MINUTE&lt;/code&gt;, &lt;code&gt;SECOND&lt;/code&gt;等）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时区的影响&lt;/strong&gt;：如果你的MySQL服务器设置了时区，某些函数（如 &lt;code&gt;CURDATE()&lt;/code&gt;）返回的值可能会受时区影响，但纯 &lt;code&gt;DATE&lt;/code&gt;类型的值本身不包含时区信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NULL 值处理&lt;/strong&gt;：如果运算中的日期参数为 &lt;code&gt;NULL&lt;/code&gt;，结果通常也是 &lt;code&gt;NULL&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-实用示例"&gt;💡 实用示例
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;查询特定日期之后/之前的记录&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM your_table WHERE date_column &amp;gt; &amp;#39;2023-10-01&amp;#39;;
SELECT * FROM your_table WHERE date_column BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE(); -- 最近7天的记录
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;计算两个日期相差的天数/月数&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT DATEDIFF(&amp;#39;2023-10-31&amp;#39;, &amp;#39;2023-10-01&amp;#39;) AS day_diff; -- 返回 30
SELECT TIMESTAMPDIFF(MONTH, &amp;#39;2023-01-15&amp;#39;, &amp;#39;2023-10-20&amp;#39;) AS month_diff; -- 返回 9
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;获取日期的特定部分&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT YEAR(&amp;#39;2023-10-31&amp;#39;), MONTH(&amp;#39;2023-10-31&amp;#39;), DAY(&amp;#39;2023-10-31&amp;#39;); -- 返回 2023, 10, 31
SELECT DAYNAME(&amp;#39;2023-10-31&amp;#39;); -- 返回 &amp;#39;Tuesday&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;日期格式化显示&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT DATE_FORMAT(&amp;#39;2023-10-31&amp;#39;, &amp;#39;%Y年%m月%d日&amp;#39;); -- 返回 &amp;#39;2023年10月31日&amp;#39;
SELECT DATE_FORMAT(&amp;#39;2023-10-31&amp;#39;, &amp;#39;%W, %M %D, %Y&amp;#39;); -- 返回 &amp;#39;Tuesday, October 31st, 2023&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;希望这些信息能帮助你更好地在 MySQL 中处理日期运算。如果你有更具体的应用场景，我很乐意提供进一步的帮助。&lt;/p&gt;
&lt;h2 id="判断年月"&gt;判断年月
&lt;/h2&gt;&lt;p&gt;在MySQL中判断日期是否属于2020年2月，有几种常用方法，它们在使用和性能上略有差异。下面我用一个表格汇总这些方法，方便你快速对比选择：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;代码示例&lt;/th&gt;
&lt;th&gt;优点&lt;/th&gt;
&lt;th&gt;注意事项&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;使用 &lt;code&gt;YEAR()&lt;/code&gt;和 &lt;code&gt;MONTH()&lt;/code&gt;函数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SELECT * FROM table_name WHERE YEAR(date_column) = 2020 AND MONTH(date_column) = 2;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;直观易懂&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;WHERE&lt;/code&gt;条件中对字段使用函数会导致无法使用索引&lt;/strong&gt;，在数据量大时可能影响性能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;使用 &lt;code&gt;DATE_FORMAT()&lt;/code&gt;函数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SELECT * FROM table_name WHERE DATE_FORMAT(date_column, '%Y-%m') = '2020-02';&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;格式化灵活，可适配不同格式要求&lt;/td&gt;
&lt;td&gt;同样&lt;strong&gt;无法使用索引&lt;/strong&gt;，性能与大表上不占优。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;使用 &lt;code&gt;BETWEEN&lt;/code&gt;和日期范围&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SELECT * FROM table_name WHERE date_column BETWEEN '2020-02-01' AND '2020-02-29';&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;能够利用索引&lt;/strong&gt;，查询效率高，适合大数据量&lt;/td&gt;
&lt;td&gt;需准确指定日期范围。若字段包含时间部分，更推荐 &lt;code&gt;&amp;lt; '2020-03-01'&lt;/code&gt;或细粒度到秒级的范围来包含2月所有可能时刻。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;🧠 &lt;strong&gt;选择建议：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果你的数据量不大，或者只是偶尔查询，追求写法简单，&lt;strong&gt;方法1或方法2&lt;/strong&gt;都可以。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你的表数据量非常大，并且对查询性能有要求，&lt;strong&gt;强烈推荐方法3&lt;/strong&gt;（使用 &lt;code&gt;BETWEEN&lt;/code&gt;或范围查询），因为它能有效利用索引。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果日期字段包含时间部分（如 &lt;code&gt;datetime&lt;/code&gt;或 &lt;code&gt;timestamp&lt;/code&gt;类型），为了精确匹配整个2月，可以将结束日期设置为下个月的第一天（ exclulsive ）：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM your_table
WHERE date_column &amp;gt;= &amp;#39;2020-02-01&amp;#39; AND date_column &amp;lt; &amp;#39;2020-03-01&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种方式能确保包含2020年2月所有的日期和时间点。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望这些信息能帮助你更高效地完成查询。&lt;/p&gt;
&lt;h2 id="where-group-by-and-having"&gt;where, group by, and having
&lt;/h2&gt;&lt;p&gt;理解 &lt;code&gt;WHERE&lt;/code&gt;、&lt;code&gt;GROUP BY&lt;/code&gt;和 &lt;code&gt;HAVING&lt;/code&gt;的顺序，对于编写正确的 SQL 查询至关重要。这不仅涉及到语句的&lt;strong&gt;书写顺序&lt;/strong&gt;，更关键的是数据库执行这些语句时的&lt;strong&gt;逻辑顺序&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;下面这个表格汇总了它们的核心区别与执行顺序：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;子句&lt;/th&gt;
&lt;th&gt;主要作用&lt;/th&gt;
&lt;th&gt;执行顺序&lt;/th&gt;
&lt;th&gt;能否使用聚合函数&lt;/th&gt;
&lt;th&gt;操作对象&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;WHERE&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;过滤&lt;strong&gt;原始数据行&lt;/strong&gt;，在分组前筛选记录&lt;/td&gt;
&lt;td&gt;先执行&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;数据库表中的原始行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;GROUP BY&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;将过滤后的数据&lt;strong&gt;按指定字段分组&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;其次执行&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;WHERE 筛选后的结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;HAVING&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;过滤&lt;strong&gt;分组后的数据&lt;/strong&gt;，筛选满足条件的&lt;strong&gt;组&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;最后执行&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;GROUP BY 分组后的组&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-为什么是这个顺序"&gt;💡 为什么是这个顺序？
&lt;/h3&gt;&lt;p&gt;数据库的执行顺序是规定好的，它必须先拿到原始数据（&lt;code&gt;FROM&lt;/code&gt;），然后过滤掉不需要的行（&lt;code&gt;WHERE&lt;/code&gt;），接着才能对剩下的有效数据进行分组（&lt;code&gt;GROUP BY&lt;/code&gt;），最后再检查哪些组符合最终条件（&lt;code&gt;HAVING&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;如果把 &lt;code&gt;HAVING&lt;/code&gt;的筛选条件错误地放在 &lt;code&gt;WHERE&lt;/code&gt;里，由于 &lt;code&gt;WHERE&lt;/code&gt;执行时还没有进行分组计算，数据库无法识别诸如&lt;code&gt;SUM()&lt;/code&gt;, &lt;code&gt;COUNT()&lt;/code&gt;, &lt;code&gt;AVG()&lt;/code&gt;这样的聚合函数，会导致语法错误。&lt;/p&gt;
&lt;h3 id="-如何快速判断用-where-还是-having"&gt;🧠 如何快速判断用 WHERE 还是 HAVING？
&lt;/h3&gt;&lt;p&gt;记住一个原则：&lt;strong&gt;看你过滤的条件是否依赖于分组后的聚合结果&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;条件与单行数据相关&lt;/strong&gt;（例如：&lt;code&gt;age &amp;gt; 18&lt;/code&gt;, &lt;code&gt;name = 'Alice'&lt;/code&gt;），使用 &lt;code&gt;WHERE&lt;/code&gt;。它在分组前快速减少要处理的数据量，效率更高。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;条件与分组聚合结果相关&lt;/strong&gt;（例如：&lt;code&gt;总销量 &amp;gt; 1000&lt;/code&gt;, &lt;code&gt;平均分 &amp;gt; 90&lt;/code&gt;，&lt;code&gt;员工数 &amp;gt;= 5&lt;/code&gt;），使用 &lt;code&gt;HAVING&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-示例说明"&gt;📖 示例说明
&lt;/h3&gt;&lt;p&gt;假设我们有一张 &lt;code&gt;sales&lt;/code&gt;订单表，包含 &lt;code&gt;product&lt;/code&gt;（产品名）、&lt;code&gt;sale_amount&lt;/code&gt;（销售额）等字段。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查询需求：&lt;/strong&gt; 找出总销售额超过 10,000 的产品类别。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分析：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;“总销售额”需要先按产品分组（&lt;code&gt;GROUP BY product&lt;/code&gt;）并用 &lt;code&gt;SUM(sale_amount)&lt;/code&gt;计算。&lt;/li&gt;
&lt;li&gt;“超过 10,000”这个条件是&lt;strong&gt;针对分组后的总和&lt;/strong&gt;，而不是原表中的任何单行数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;正确写法：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT product, SUM(sale_amount) AS total_sales
FROM sales
GROUP BY product
HAVING SUM(sale_amount) &amp;gt; 10000;
-- 或者使用别名: HAVING total_sales &amp;gt; 10000 (某些数据库支持)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个语句的执行逻辑是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;FROM sales&lt;/code&gt;: 取出原始销售表。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GROUP BY product&lt;/code&gt;: 将数据按产品名分组。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HAVING SUM(sale_amount) &amp;gt; 10000&lt;/code&gt;: 筛选出总销售额大于 10000 的组。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT ...&lt;/code&gt;: 最后显示产品和它的总销售额。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;错误写法：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT product, SUM(sale_amount) AS total_sales
FROM sales
WHERE SUM(sale_amount) &amp;gt; 10000 -- 错误！WHERE 中不能使用聚合函数
GROUP BY product;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这条语句在执行时，数据库在 &lt;code&gt;WHERE&lt;/code&gt;阶段就会报错，因为它无法理解 &lt;code&gt;SUM(sale_amount)&lt;/code&gt;的含义。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-总结与提醒"&gt;✅ 总结与提醒
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;牢记执行顺序&lt;/strong&gt;：&lt;code&gt;FROM&lt;/code&gt;-&amp;gt; &lt;code&gt;WHERE&lt;/code&gt;-&amp;gt; &lt;code&gt;GROUP BY&lt;/code&gt;-&amp;gt; &lt;code&gt;HAVING&lt;/code&gt;-&amp;gt; &lt;code&gt;SELECT&lt;/code&gt;-&amp;gt; &lt;code&gt;ORDER BY&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;灵活使用&lt;/strong&gt;：&lt;code&gt;WHERE&lt;/code&gt;和 &lt;code&gt;HAVING&lt;/code&gt;并非互斥，可以在一个查询中同时使用。&lt;code&gt;WHERE&lt;/code&gt;先筛选行，&lt;code&gt;GROUP BY&lt;/code&gt;分组后，&lt;code&gt;HAVING&lt;/code&gt;再筛选组。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 示例：先筛选出2023年的数据，再按产品分组，最后找出年份总销售额超过1万的产品
SELECT product, SUM(sale_amount) AS total_sales
FROM sales
WHERE YEAR(date) = 2023 -- WHERE 先过滤年份
GROUP BY product
HAVING total_sales &amp;gt; 10000; -- HAVING 再过滤分组
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能考虑&lt;/strong&gt;：尽量在 &lt;code&gt;WHERE&lt;/code&gt;阶段过滤掉更多不需要的数据，这样可以减少 &lt;code&gt;GROUP BY&lt;/code&gt;和 &lt;code&gt;HAVING&lt;/code&gt;阶段需要处理的数据量，提升查询效率。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;希望这些解释和示例能帮助你彻底理解 &lt;code&gt;WHERE&lt;/code&gt;、&lt;code&gt;GROUP BY&lt;/code&gt;和 &lt;code&gt;HAVING&lt;/code&gt;的使用顺序和区别。&lt;/p&gt;
&lt;h2 id="cross-join"&gt;cross join
&lt;/h2&gt;&lt;p&gt;Cross Join（交叉连接）是 SQL 中一种非常基础但也非常特殊的表连接操作。了解它能帮助你处理一些特定的数据场景，但也需格外小心使用。下面我来为你详细解释。&lt;/p&gt;
&lt;h3 id="-cross-join-的核心笛卡尔积"&gt;⚙️ Cross Join 的核心：笛卡尔积
&lt;/h3&gt;&lt;p&gt;Cross Join 的核心是生成两个表的 &lt;strong&gt;笛卡尔积 (Cartesian product)&lt;/strong&gt;。这意味着：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无条件连接&lt;/strong&gt;：它不需要任何连接条件（没有 &lt;code&gt;ON&lt;/code&gt;或 &lt;code&gt;USING&lt;/code&gt;子句）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全组合&lt;/strong&gt;：结果集中的每一行都是第一个表中的一行与第二个表中的一行的组合。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据爆炸&lt;/strong&gt;：如果表 A 有 &lt;code&gt;m&lt;/code&gt;行，表 B 有 &lt;code&gt;n&lt;/code&gt;行，Cross Join 的结果将包含 &lt;code&gt;m × n&lt;/code&gt;行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，一个包含 3 种颜色的表和一个包含 4 个尺寸的表进行 Cross Join，将产生 12 行数据（3种颜色 × 4个尺寸的所有可能组合）。&lt;/p&gt;
&lt;h3 id="-语法形式"&gt;📝 语法形式
&lt;/h3&gt;&lt;p&gt;Cross Join 有两种写法，它们在功能上完全等效：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;显式语法&lt;/strong&gt; (推荐，更清晰)&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT *
FROM table1
CROSS JOIN table2;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;隐式语法&lt;/strong&gt; (使用逗号)&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT *
FROM table1, table2;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-结果集预览"&gt;🧐 结果集预览
&lt;/h3&gt;&lt;p&gt;假设有两个小表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;colors&lt;/code&gt;&lt;/strong&gt; 表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;color_id&lt;/th&gt;
&lt;th&gt;color_name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;红色&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;蓝色&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;sizes&lt;/code&gt;&lt;/strong&gt; 表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;size_id&lt;/th&gt;
&lt;th&gt;size_name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行 &lt;code&gt;CROSS JOIN&lt;/code&gt;后：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT colors.color_name, sizes.size_name
FROM colors
CROSS JOIN sizes;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;会得到以下结果：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;color_name&lt;/th&gt;
&lt;th&gt;size_name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;红色&lt;/td&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;红色&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;蓝色&lt;/td&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;蓝色&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-主要应用场景"&gt;💡 主要应用场景
&lt;/h3&gt;&lt;p&gt;虽然需要谨慎使用，但 Cross Join 在一些特定场景下非常有用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;生成所有可能组合&lt;/strong&gt;：这是最典型的用途。例如，为电商平台生成所有产品颜色和尺寸的 SKU 组合，或者生成所有日期和所有产品的组合用于创建完整的销售报告维度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据补全&lt;/strong&gt;：在统计报表中，确保即使某些组合没有实际数据（如某产品在某天无销售），也能在结果中显示为 0 或 NULL，而不是完全缺失。这通常通过 &lt;strong&gt;CROSS JOIN&lt;/strong&gt; 生成完整维度表，再与事实表进行 &lt;strong&gt;LEFT JOIN&lt;/strong&gt; 来实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生成大量测试数据&lt;/strong&gt;：通过将一个小数据表（如万行数据）与另一个小表进行 Cross Join，可以快速生成百万甚至上亿行的测试数据集。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-重要注意事项"&gt;⚠️ 重要注意事项
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;性能风险&lt;/strong&gt;：这是使用 Cross Join &lt;strong&gt;最需要警惕的一点&lt;/strong&gt;。对两个大型表（例如各有十万行）进行 Cross Join 会产生万亿行结果，极易耗尽数据库资源，导致查询性能急剧下降甚至服务崩溃。&lt;strong&gt;因此，绝对避免对大表使用无限制的 Cross Join&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果过滤&lt;/strong&gt;：可以对 Cross Join 的结果使用 &lt;code&gt;WHERE&lt;/code&gt;子句进行过滤。但需要注意的是，如果加了等值条件（如 &lt;code&gt;WHERE table1.id = table2.foreign_id&lt;/code&gt;），它在逻辑上就等同于 &lt;strong&gt;INNER JOIN&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;与 INNER JOIN 的区别&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CROSS JOIN&lt;/strong&gt; 无条件，生成笛卡尔积。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;INNER JOIN&lt;/strong&gt; 必须有连接条件，只返回匹配的行。&lt;/li&gt;
&lt;li&gt;值得注意的是，如果一个 &lt;strong&gt;INNER JOIN&lt;/strong&gt; 没有指定任何连接条件，在某些数据库系统中（如 MySQL），它会产生和 &lt;strong&gt;CROSS JOIN&lt;/strong&gt; 一样的效果。但语法上显式地使用 &lt;strong&gt;CROSS JOIN&lt;/strong&gt; 更能表达意图。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-使用建议"&gt;🚀 使用建议
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;显式使用关键字&lt;/strong&gt;：始终使用 &lt;code&gt;CROSS JOIN&lt;/code&gt;关键字，而不是逗号。这使得代码的意图更清晰，更容易被理解和维护。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;严格控制输入&lt;/strong&gt;：确保参与 Cross Join 的表是&lt;strong&gt;维度表或小型表&lt;/strong&gt;。在查询前，心里要对结果集的行数有一个预估。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;善用 LIMIT&lt;/strong&gt;：在开发和调试时，强烈建议与 &lt;code&gt;LIMIT&lt;/code&gt;子句一起使用，先查看少量样本结果，避免意外返回海量数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑替代方案&lt;/strong&gt;：有时使用应用程序代码循环生成组合可能比在数据库中进行巨大的 Cross Join 更高效、更安全。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总而言之，Cross Join 是一把强大的双刃剑。它在需要系统性地组合所有可能性时非常高效和直接，但一旦用于大型表，破坏力也极大。使用时务必明确其后果。&lt;/p&gt;
&lt;h2 id="between"&gt;between
&lt;/h2&gt;&lt;p&gt;是的，SQL 中的 &lt;code&gt;BETWEEN ... AND ...&lt;/code&gt;操作符&lt;strong&gt;包含边界值&lt;/strong&gt;，即包含等于两端点的情况。&lt;/p&gt;
&lt;p&gt;为了更清晰地展示不同数据类型下 &lt;code&gt;BETWEEN ... AND ...&lt;/code&gt;的行为，请看下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数据类型&lt;/th&gt;
&lt;th&gt;是否包含边界&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;等效写法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;数值类型&lt;/strong&gt; (INT, FLOAT等)&lt;/td&gt;
&lt;td&gt;✅ 包含&lt;/td&gt;
&lt;td&gt;&lt;code&gt;salary BETWEEN 3000 AND 5000&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;salary &amp;gt;= 3000 AND salary &amp;lt;= 5000&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;日期时间类型&lt;/strong&gt; (DATETIME等)&lt;/td&gt;
&lt;td&gt;✅ 包含 (但需注意时间精度)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;order_date BETWEEN '2023-01-01' AND '2023-01-31'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;order_date &amp;gt;= '2023-01-01' AND order_date &amp;lt;= '2023-01-31'&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;文本类型&lt;/strong&gt; (VARCHAR, CHAR等)&lt;/td&gt;
&lt;td&gt;✅ 包含 (按字典序比较)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;name BETWEEN 'Adams' AND 'Carter'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;name &amp;gt;= 'Adams' AND name &amp;lt;= 'Carter'&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;📌 &lt;strong&gt;使用时请注意&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;日期时间的特殊性&lt;/strong&gt;：如果你的字段是 &lt;code&gt;DATETIME&lt;/code&gt;或 &lt;code&gt;TIMESTAMP&lt;/code&gt;类型（包含时分秒），查询 &lt;code&gt;BETWEEN '2023-07-15' AND '2023-07-17'&lt;/code&gt;时，由于数据库会将 &lt;code&gt;'2023-07-17'&lt;/code&gt;隐式转换为 &lt;code&gt;'2023-07-17 00:00:00'&lt;/code&gt;，这意味着&lt;strong&gt;实际上不会包含 7月17日 00:00:00 之后的所有时间点&lt;/strong&gt;（例如17日下午的数据）。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;推荐做法&lt;/strong&gt;：要确保包含一整天，通常会用 &lt;code&gt;BETWEEN '2023-07-15 00:00:00' AND '2023-07-17 23:59:59'&lt;/code&gt;，或者更优雅地使用半开区间：&lt;code&gt;&amp;gt;= '2023-07-15' AND &amp;lt; '2023-07-18'&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;范围的有效性&lt;/strong&gt;：务必确保 &lt;code&gt;value1&lt;/code&gt;小于或等于 &lt;code&gt;value2&lt;/code&gt;。如果 &lt;code&gt;value1&lt;/code&gt;&amp;gt; &lt;code&gt;value2&lt;/code&gt;，查询将返回空结果集。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;🤔 &lt;strong&gt;如果想排除边界怎么办？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你需要&lt;strong&gt;不包含&lt;/strong&gt;边界值的范围查询（开区间），可以使用 &lt;code&gt;&amp;gt;&lt;/code&gt;和 &lt;code&gt;&amp;lt;&lt;/code&gt;运算符来显式定义：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM table_name WHERE column_name &amp;gt; value1 AND column_name &amp;lt; value2;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;总而言之，&lt;code&gt;BETWEEN ... AND ...&lt;/code&gt;在绝大多数数据库系统中默认是包含边界值的（闭区间），但在处理日期时间时需格外留意时间精度问题。&lt;/p&gt;
&lt;h2 id="having"&gt;having
&lt;/h2&gt;&lt;p&gt;是的，你理解得完全正确。在这个SQL查询中，&lt;code&gt;HAVING unit &amp;gt;= 100&lt;/code&gt;里的 &lt;code&gt;unit&lt;/code&gt;正是 &lt;code&gt;SELECT&lt;/code&gt;子句中定义的别名 &lt;code&gt;unit&lt;/code&gt;，也就是 &lt;code&gt;SUM(unit)&lt;/code&gt;这个聚合函数计算后的结果别名。&lt;/p&gt;
&lt;p&gt;为了更清晰地理解它的工作方式以及与 &lt;code&gt;WHERE&lt;/code&gt;的区别，请看下面的对比表格：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;HAVING unit &amp;gt;= 100&lt;/th&gt;
&lt;th&gt;WHERE unit &amp;gt;= 100 (假设unit是原字段)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;过滤对象&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;对&lt;strong&gt;分组后的聚合结果&lt;/strong&gt;进行过滤 (即&lt;code&gt;SUM(unit)&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;对&lt;strong&gt;原始表中的行数据&lt;/strong&gt;进行过滤（在分组和聚合&lt;strong&gt;之前&lt;/strong&gt;）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;执行时机&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在 &lt;code&gt;GROUP BY&lt;/code&gt;&lt;strong&gt;之后&lt;/strong&gt;执行&lt;/td&gt;
&lt;td&gt;在 &lt;code&gt;GROUP BY&lt;/code&gt;&lt;strong&gt;之前&lt;/strong&gt;执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;别名使用&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ &lt;strong&gt;可以&lt;/strong&gt;直接使用&lt;code&gt;SELECT&lt;/code&gt;中定义的别名 (&lt;code&gt;unit&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;❌ &lt;strong&gt;不能&lt;/strong&gt;使用&lt;code&gt;SELECT&lt;/code&gt;中定义的别名，因为&lt;code&gt;WHERE&lt;/code&gt;执行时&lt;code&gt;SELECT&lt;/code&gt;中的别名还未定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;常用操作符&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;常与聚合函数（如&lt;code&gt;SUM&lt;/code&gt;, &lt;code&gt;COUNT&lt;/code&gt;）和分组字段一起使用&lt;/td&gt;
&lt;td&gt;使用普通列的操作符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;筛选出&lt;strong&gt;总销量&amp;gt;=100&lt;/strong&gt;的产品&lt;/td&gt;
&lt;td&gt;筛选出&lt;strong&gt;原始记录中unit字段值&amp;gt;=100&lt;/strong&gt;的行（这通常不是查询本意，因为订单中单个条目的数量可能很小，最终SUM结果未必&amp;gt;=100）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-关于sql的执行顺序"&gt;💡 关于SQL的执行顺序
&lt;/h3&gt;&lt;p&gt;理解SQL的&lt;strong&gt;逻辑执行顺序&lt;/strong&gt;（这与我们书写的顺序不同）能更好地把握&lt;code&gt;HAVING&lt;/code&gt;和&lt;code&gt;WHERE&lt;/code&gt;的区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;FROM&lt;/strong&gt; 和 &lt;strong&gt;JOIN&lt;/strong&gt;: 确定数据来源，连接&lt;code&gt;products&lt;/code&gt;和&lt;code&gt;orders&lt;/code&gt;表。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WHERE&lt;/strong&gt;: 使用 &lt;code&gt;order_date&lt;/code&gt;条件过滤出2020年2月的所有订单&lt;strong&gt;行&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GROUP BY&lt;/strong&gt;: 将过滤后的数据按 &lt;code&gt;product_name&lt;/code&gt;分组。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HAVING&lt;/strong&gt;: 此时聚合函数 &lt;code&gt;SUM(unit)&lt;/code&gt;已经计算完毕，并有了别名 &lt;code&gt;unit&lt;/code&gt;。此条件过滤掉总销量小于100的分组。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SELECT&lt;/strong&gt;: 选择最终要返回的列，这里就包括了 &lt;code&gt;product_name&lt;/code&gt;和 &lt;code&gt;SUM(unit) AS unit&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ORDER BY&lt;/strong&gt;: (如果查询中有的话) 对最终结果进行排序。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;正是因为 &lt;code&gt;HAVING&lt;/code&gt;在逻辑上位于 &lt;code&gt;GROUP BY&lt;/code&gt;之后、&lt;code&gt;SELECT&lt;/code&gt;之前，但SQL标准允许它引用 &lt;code&gt;SELECT&lt;/code&gt;中的别名，使得查询写起来更简洁直观。&lt;/p&gt;
&lt;h3 id="-总结-2"&gt;✅ 总结
&lt;/h3&gt;&lt;p&gt;所以，你的查询目的是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;找出在2020年2月份总销量（&lt;code&gt;unit&lt;/code&gt;）大于等于100的所有产品名称及其总销量。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个查询是正确的，&lt;code&gt;HAVING unit &amp;gt;= 100&lt;/code&gt;正是在判断聚合后的总销量是否满足条件。&lt;/p&gt;
&lt;h2 id="on--where"&gt;on &amp;amp; where
&lt;/h2&gt;&lt;p&gt;在 SQL 中，&lt;code&gt;JOIN ... ON&lt;/code&gt;语句中&lt;strong&gt;可以&lt;/strong&gt;添加额外的过滤条件。这与 &lt;code&gt;WHERE&lt;/code&gt;子句的使用有显著区别，尤其在性能和对结果集的影响上。下面是一个快速的对比总结和详细解释。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;ON 条件&lt;/th&gt;
&lt;th&gt;WHERE 条件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;执行阶段&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;连接过程中应用&lt;/td&gt;
&lt;td&gt;连接完成后应用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;影响范围&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;影响参与连接的数据行，可能减少中间结果集&lt;/td&gt;
&lt;td&gt;过滤最终结果集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;对OUTER JOIN的影响&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;不影响主表记录数，右表不匹配则填充NULL&lt;/td&gt;
&lt;td&gt;会过滤掉所有不满足条件的行（包括主表记录），可能导致OUTER JOIN退化为INNER JOIN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;性能（通常）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;可能更高&lt;/strong&gt;，尤其在连接大表时，提前过滤减少数据量&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;可能较低&lt;/strong&gt;，先进行全连接再过滤，中间结果集可能更庞大&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;提前过滤关联表、在OUTER JOIN中保留主表所有记录时对右表过滤&lt;/td&gt;
&lt;td&gt;对连接后的最终结果集进行筛选&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-详解-on-和-where-的区别"&gt;💡 详解 ON 和 WHERE 的区别
&lt;/h3&gt;&lt;h4 id="1-作用时机与本质不同"&gt;1. 作用时机与本质不同
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ON 子句&lt;/strong&gt;：用于指定表之间的&lt;strong&gt;连接条件&lt;/strong&gt;，决定了数据如何被连接。它还可以包含针对关联表的&lt;strong&gt;过滤条件&lt;/strong&gt;，这些条件在&lt;strong&gt;连接过程中&lt;/strong&gt;生效。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WHERE 子句&lt;/strong&gt;：在连接操作完成后，对生成的&lt;strong&gt;整个结果集&lt;/strong&gt;进行过滤。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="2-对查询结果的影响关键区别"&gt;2. 对查询结果的影响（关键区别）
&lt;/h4&gt;&lt;p&gt;这在 &lt;code&gt;LEFT JOIN&lt;/code&gt;或 &lt;code&gt;RIGHT JOIN&lt;/code&gt;等外连接中差异最为明显。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;条件放在 ON 中&lt;/strong&gt;：无论条件是否满足，&lt;strong&gt;主表&lt;/strong&gt;（&lt;code&gt;LEFT JOIN&lt;/code&gt;的左表或 &lt;code&gt;RIGHT JOIN&lt;/code&gt;的右表）的所有记录都会返回。只是当关联表不满足条件时，其相关字段会以 &lt;code&gt;NULL&lt;/code&gt;值填充。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;条件放在 WHERE 中&lt;/strong&gt;：&lt;code&gt;WHERE&lt;/code&gt;子句会在连接完成后过滤整个结果集。如果条件涉及关联表的字段，那些主表记录存在但关联表字段为 &lt;code&gt;NULL&lt;/code&gt;的行也会被过滤掉。这常常会导致 &lt;code&gt;LEFT JOIN&lt;/code&gt;&lt;strong&gt;意外地退化成类似 &lt;code&gt;INNER JOIN&lt;/code&gt;&lt;/strong&gt; 的效果，丢失主表中未匹配到的记录。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="3-性能差异"&gt;3. 性能差异
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ON 条件&lt;/strong&gt;：数据库优化器通常会尝试在连接操作&lt;strong&gt;之前&lt;/strong&gt;应用 &lt;code&gt;ON&lt;/code&gt;子句中的过滤条件。这能显著&lt;strong&gt;减少参与连接操作的数据量&lt;/strong&gt;，从而降低内存使用和提高查询速度，尤其是在处理大表时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WHERE 条件&lt;/strong&gt;：过滤发生在连接之后，这意味着数据库可能需要先构建一个更大的中间结果集（包含所有连接的数据），然后再进行过滤。如果中间结果集非常庞大，可能会影响性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-如何选择on-还是-where"&gt;🛠️ 如何选择：ON 还是 WHERE？
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;INNER JOIN 时&lt;/strong&gt;：将条件放在 &lt;code&gt;ON&lt;/code&gt;还是 &lt;code&gt;WHERE&lt;/code&gt;中，&lt;strong&gt;最终的结果集通常是相同的&lt;/strong&gt;。但从性能角度考虑，建议将关联表的过滤条件放在 &lt;code&gt;ON&lt;/code&gt;子句中，以便优化器能尽早过滤数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LEFT/RIGHT JOIN 时&lt;/strong&gt;：这是决策的关键。
&lt;ul&gt;
&lt;li&gt;如果你想&lt;strong&gt;保留主表的所有记录&lt;/strong&gt;，同时只筛选关联表中的数据，请将关联表的过滤条件放在 &lt;strong&gt;&lt;code&gt;ON&lt;/code&gt;&lt;/strong&gt; 子句中。&lt;/li&gt;
&lt;li&gt;如果你确实需要&lt;strong&gt;对连接后的最终结果集&lt;/strong&gt;进行过滤（包括可能过滤掉主表的一些记录），则将条件放在 &lt;strong&gt;&lt;code&gt;WHERE&lt;/code&gt;&lt;/strong&gt; 子句中。但要非常小心这可能会改变连接类型的行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最佳实践&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;ON&lt;/code&gt;子句&lt;/strong&gt;：主要用于&lt;strong&gt;指定连接条件&lt;/strong&gt;（如 &lt;code&gt;table1.id = table2.foreign_id&lt;/code&gt;）和&lt;strong&gt;提前过滤关联表&lt;/strong&gt;的数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;WHERE&lt;/code&gt;子句&lt;/strong&gt;：主要用于&lt;strong&gt;过滤最终你需要的整体结果集&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;对于复杂查询，使用 &lt;code&gt;EXPLAIN&lt;/code&gt;命令来查看数据库的执行计划，这是判断性能差异最可靠的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-总结-3"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;在 &lt;code&gt;JOIN ... ON&lt;/code&gt;中添加条件不仅是允许的，有时还是优化查询性能和保护数据完整性的重要手段。&lt;/p&gt;
&lt;p&gt;牢记两者的核心区别：&lt;strong&gt;&lt;code&gt;ON&lt;/code&gt;影响连接过程，&lt;code&gt;WHERE&lt;/code&gt;影响最终结果&lt;/strong&gt;。特别是在使用 &lt;code&gt;LEFT JOIN&lt;/code&gt;时，谨慎考虑条件放置的位置，以免得到非预期的结果。&lt;/p&gt;
&lt;h2 id="group_concat"&gt;GROUP_CONCAT
&lt;/h2&gt;&lt;p&gt;GROUP_CONCAT 是 MySQL 中一个非常实用的&lt;strong&gt;聚合函数&lt;/strong&gt;，它能够将分组（GROUP BY）后的多行数据&lt;strong&gt;拼接成一个字符串&lt;/strong&gt;，默认用逗号分隔，使得数据展示更加紧凑和直观。下面我来为你详细解释它的用法和注意事项。&lt;/p&gt;
&lt;h3 id="-核心语法"&gt;📌 核心语法
&lt;/h3&gt;&lt;pre tabindex="0"&gt;&lt;code&gt;GROUP_CONCAT([DISTINCT] 要拼接的字段或表达式
[ORDER BY 排序字段 ASC/DESC]
[SEPARATOR &amp;#39;自定义分隔符&amp;#39;])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结合 &lt;code&gt;GROUP BY&lt;/code&gt;使用的完整查询结构通常是：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT 分组字段, GROUP_CONCAT(...) AS 别名
FROM 表名
GROUP BY 分组字段;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="-参数解读"&gt;🛠️ 参数解读
&lt;/h3&gt;&lt;p&gt;通过下表你可以快速了解每个参数的作用：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;作用说明&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;示例场景&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;DISTINCT&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;可选，对拼接的内容进行去重，避免重复值干扰结果&lt;/td&gt;
&lt;td&gt;合并同一用户的不同订单号（去除重复订单号）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;要拼接的字段/表达式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;必填，指定需要合并的列，也能通过CONCAT等函数构造复杂的拼接内容&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GROUP_CONCAT(CONCAT(姓名, '-', 年龄))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ORDER BY&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;可选，控制拼接前组内数据的排序顺序，让结果按特定规律排列&lt;/td&gt;
&lt;td&gt;按操作时间倒序拼接操作日志&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;SEPARATOR&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;可选，自定义分隔符。默认使用逗号（,）分隔，可定义为空格、分号、换行等&lt;/td&gt;
&lt;td&gt;使用分号分隔：&lt;code&gt;SEPARATOR '; '&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-基础用法示例"&gt;💻 基础用法示例
&lt;/h3&gt;&lt;p&gt;假设有一个订单表 &lt;code&gt;orders&lt;/code&gt;，数据如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;order_id&lt;/th&gt;
&lt;th&gt;product&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Apple&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Orange&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Banana&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Apple&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;最简拼接（默认逗号分隔）&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT order_id, GROUP_CONCAT(product) AS products
FROM orders
GROUP BY order_id;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;结果&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;order_id&lt;/th&gt;
&lt;th&gt;products&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Apple,Orange&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Banana&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Apple&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用自定义分隔符&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT order_id, GROUP_CONCAT(product SEPARATOR &amp;#39;, &amp;#39;) AS products
FROM orders
GROUP BY order_id;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;结果&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;order_id&lt;/th&gt;
&lt;th&gt;products&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Apple, Orange&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Banana&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Apple&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;排序后拼接&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT order_id, GROUP_CONCAT(product ORDER BY product ASC) AS products
FROM orders
GROUP BY order_id;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;结果&lt;/strong&gt;：（按产品名升序排列）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;order_id&lt;/th&gt;
&lt;th&gt;products&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Apple,Orange&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Banana&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Apple&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;去重拼接 (DISTINCT)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设 &lt;code&gt;order_id=1&lt;/code&gt;有重复的 &lt;code&gt;Apple&lt;/code&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;order_id&lt;/th&gt;
&lt;th&gt;product&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Apple&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Apple&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Orange&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Banana&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Apple&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT order_id, GROUP_CONCAT(DISTINCT product) AS products
FROM orders
GROUP BY order_id;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;结果&lt;/strong&gt;：（&lt;code&gt;Apple&lt;/code&gt;只出现一次）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;order_id&lt;/th&gt;
&lt;th&gt;products&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Apple,Orange&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Banana&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Apple&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-进阶应用场景"&gt;⚡ 进阶应用场景
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;拼接复杂表达式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果有一张 &lt;code&gt;user_orders&lt;/code&gt;表，包含 &lt;code&gt;user_id&lt;/code&gt;, &lt;code&gt;order_no&lt;/code&gt;, &lt;code&gt;order_date&lt;/code&gt;字段，希望合并成 &lt;code&gt;订单号 (日期)&lt;/code&gt;的格式，可以这样做：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT user_id,
GROUP_CONCAT(CONCAT(order_no, &amp;#39; (&amp;#39;, order_date, &amp;#39;)&amp;#39;)
ORDER BY order_date DESC
SEPARATOR &amp;#39;; &amp;#39;) AS order_info
FROM user_orders
GROUP BY user_id;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这可以清晰展示用户的历史订单，按时间倒序排列，用分号分隔。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;处理 NULL 值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;tasks&lt;/code&gt;表中的 &lt;code&gt;task_note&lt;/code&gt;字段可能为 &lt;code&gt;NULL&lt;/code&gt;，拼接时希望替换为 &lt;code&gt;[无备注]&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT user_id,
GROUP_CONCAT(COALESCE(task_note, &amp;#39;[无备注]&amp;#39;)
SEPARATOR &amp;#39; | &amp;#39;) AS all_notes
FROM tasks
GROUP BY user_id;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;COALESCE&lt;/code&gt;函数会返回其参数中第一个非 &lt;code&gt;NULL&lt;/code&gt;的值，这避免了 &lt;code&gt;NULL&lt;/code&gt;导致拼接内容缺失。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-重要注意事项-1"&gt;⚠️ 重要注意事项
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;长度限制 (group_concat_max_len)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MySQL 默认限制 &lt;code&gt;GROUP_CONCAT&lt;/code&gt;函数返回的结果字符串&lt;strong&gt;最大长度为 1024 字节&lt;/strong&gt;。如果拼接的内容超过这个长度，结果会被&lt;strong&gt;截断&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;你可以通过以下命令&lt;strong&gt;查看&lt;/strong&gt;当前设置：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SHOW VARIABLES LIKE &amp;#39;group_concat_max_len&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以通过以下方式&lt;strong&gt;修改&lt;/strong&gt;限制（&lt;strong&gt;需注意权限&lt;/strong&gt;）：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 仅在当前会话中生效
SET SESSION group_concat_max_len = 102400;
-- 全局设置（需要SUPER权限，重启后可能失效）
SET GLOBAL group_concat_max_len = 102400;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要永久生效，通常需要修改 MySQL 的配置文件（如 &lt;code&gt;my.cnf&lt;/code&gt;或 &lt;code&gt;my.ini&lt;/code&gt;），在 &lt;code&gt;[mysqld]&lt;/code&gt;段添加 &lt;code&gt;group_concat_max_len = 102400&lt;/code&gt;，然后重启服务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;NULL 值的处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GROUP_CONCAT&lt;/code&gt;函数会&lt;strong&gt;自动忽略&lt;/strong&gt;组内的 &lt;code&gt;NULL&lt;/code&gt;值。如果整个组的值都是 &lt;code&gt;NULL&lt;/code&gt;，那么 &lt;code&gt;GROUP_CONCAT&lt;/code&gt;的结果是 &lt;code&gt;NULL&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能影响&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在处理&lt;strong&gt;超大量数据&lt;/strong&gt;时，&lt;code&gt;GROUP_CONCAT&lt;/code&gt;操作会在内存中进行，可能会消耗较多的内存和 CPU，从而拖慢查询速度。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优化建议&lt;/strong&gt;：尽量用 &lt;code&gt;WHERE&lt;/code&gt;子句缩小查询范围；避免嵌套过于复杂的表达式；评估是否真的需要将所有数据合并展示。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-与其他数据库的对比"&gt;🔄 与其他数据库的对比
&lt;/h3&gt;&lt;p&gt;了解不同数据库中类似的函数有助于跨数据库迁移或编写兼容性代码：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;数据库&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;函数名&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;MySQL&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GROUP_CONCAT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;默认逗号分隔，可配置性强&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;STRING_AGG&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;无默认分隔符，需显式指定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;SQL Server&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;STRING_AGG&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;语法与 PostgreSQL 类似&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Oracle&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LISTAGG&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;功能类似，但语法和细节有差异&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-总结-4"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;GROUP_CONCAT&lt;/code&gt;是一个强大且灵活的工具，特别适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据汇总报告&lt;/strong&gt;：如列出每个部门的所有员工姓名。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生成标签或分类列表&lt;/strong&gt;：将多行标签数据合并为一个字符串。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构建动态SQL查询&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简化一对多关系的展示&lt;/strong&gt;：将子表信息浓缩后与主表关联展示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用时，请务必留意&lt;strong&gt;长度限制&lt;/strong&gt;和&lt;strong&gt;潜在的性能影响&lt;/strong&gt;，并根据实际需求灵活运用去重、排序和自定义分隔符等选项。&lt;/p&gt;
&lt;p&gt;希望这些详细的解释和示例能帮助你更好地理解和使用 &lt;code&gt;GROUP_CONCAT&lt;/code&gt;函数。&lt;/p&gt;
&lt;h2 id="regexp_like"&gt;REGEXP_LIKE
&lt;/h2&gt;&lt;p&gt;REGEXP_LIKE 是 SQL 中一个功能强大的字符串匹配函数，它使用正则表达式来检查一个字符串是否匹配指定的模式。与简单的 &lt;code&gt;LIKE&lt;/code&gt;操作符相比，它能实现更复杂、更灵活的模式匹配。&lt;/p&gt;
&lt;p&gt;下面详细介绍这个函数。&lt;/p&gt;
&lt;h3 id="-函数语法和参数"&gt;📊 函数语法和参数
&lt;/h3&gt;&lt;p&gt;REGEXP_LIKE 函数的基本语法如下：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;REGEXP_LIKE(source_string, pattern [, match_parameter])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其参数说明如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数名&lt;/th&gt;
&lt;th&gt;是否必选&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;source_string&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;要搜索的原始字符串或列名。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;pattern&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;用来匹配的正则表达式模式。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;match_parameter&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;用于改变匹配行为的字符串，可包含一个或多个以下字符： - &lt;strong&gt;&amp;lsquo;i&amp;rsquo;&lt;/strong&gt;: 大小写不敏感匹配 - &lt;strong&gt;&amp;lsquo;c&amp;rsquo;&lt;/strong&gt;: 大小写敏感匹配 - &lt;strong&gt;&amp;rsquo;n&amp;rsquo;&lt;/strong&gt;: 允许通配符 &lt;strong&gt;&lt;code&gt;.&lt;/code&gt;&lt;/strong&gt; 匹配换行符 - &lt;strong&gt;&amp;rsquo;m&amp;rsquo;&lt;/strong&gt;: 将字符串视为多行，影响 &lt;strong&gt;&lt;code&gt;^&lt;/code&gt;&lt;/strong&gt; 和 &lt;strong&gt;&lt;code&gt;$&lt;/code&gt;&lt;/strong&gt; 的匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如果省略 &lt;code&gt;match_parameter&lt;/code&gt;，匹配行为可能会受数据库会话的默认设置（如 &lt;code&gt;NLS_SORT&lt;/code&gt;）影响，但通常默认为大小写敏感 &lt;strong&gt;&lt;code&gt;'.'&lt;/code&gt;&lt;/strong&gt; 不匹配换行符，并将字符串视为单行 。&lt;/p&gt;
&lt;p&gt;该函数返回一个布尔值（&lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; 或 &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;），因此通常用在 &lt;strong&gt;&lt;code&gt;WHERE&lt;/code&gt;&lt;/strong&gt; 子句或 &lt;strong&gt;&lt;code&gt;CASE WHEN&lt;/code&gt;&lt;/strong&gt; 表达式中作为条件判断 。&lt;/p&gt;
&lt;h3 id="-常用的正则表达式元字符"&gt;🔍 常用的正则表达式元字符
&lt;/h3&gt;&lt;p&gt;正则表达式的强大之处在于其元字符，以下是一些最常见的：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;元字符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;.&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配除换行符外的任意单个字符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'a.c'&lt;/code&gt;匹配 &amp;ldquo;abc&amp;rdquo;, &amp;ldquo;aXc&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;*&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配前面的元素零次或多次&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'ab*c'&lt;/code&gt;匹配 &amp;ldquo;ac&amp;rdquo;, &amp;ldquo;abc&amp;rdquo;, &amp;ldquo;abbc&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配前面的元素一次或多次&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'ab+c'&lt;/code&gt;匹配 &amp;ldquo;abc&amp;rdquo;, &amp;ldquo;abbc&amp;rdquo; (不匹配 &amp;ldquo;ac&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配前面的元素零次或一次&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'ab?c'&lt;/code&gt;匹配 &amp;ldquo;ac&amp;rdquo; 或 &amp;ldquo;abc&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配字符串的开始位置&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'^abc'&lt;/code&gt;匹配以 &amp;ldquo;abc&amp;rdquo; 开头的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;$&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配字符串的结束位置&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'xyz$'&lt;/code&gt;匹配以 &amp;ldquo;xyz&amp;rdquo; 结尾的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;[]&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配方括号内的任意一个字符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'[aeiou]'&lt;/code&gt;匹配任意元音字母&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;[^]&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配不在方括号内的任意一个字符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'[^0-9]'&lt;/code&gt;匹配任意非数字字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;**`&lt;/td&gt;
&lt;td&gt;`**&lt;/td&gt;
&lt;td&gt;逻辑&amp;quot;或&amp;quot;，匹配左边或右边的模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;定义一个子表达式组，可用于分组或捕获&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'(abc)+'&lt;/code&gt;匹配 &amp;ldquo;abc&amp;rdquo;, &amp;ldquo;abcabc&amp;rdquo; 等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;{m,n}&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配前面的元素至少 m 次，至多 n 次&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'a{2,3}'&lt;/code&gt;匹配 &amp;ldquo;aa&amp;rdquo; 或 &amp;ldquo;aaa&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\d&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配一个数字字符，等价于 &lt;code&gt;[0-9]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\d+'&lt;/code&gt;匹配连续数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\w&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配字母、数字或下划线，等价于 &lt;code&gt;[A-Za-z0-9_]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\w+'&lt;/code&gt;匹配一个单词&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-基本用法示例"&gt;📖 基本用法示例
&lt;/h3&gt;&lt;p&gt;假设我们有一个名为 &lt;code&gt;employees&lt;/code&gt;的表，其中包含一个 &lt;code&gt;email&lt;/code&gt;列。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;查找以 &amp;ldquo;.com&amp;rdquo; 结尾的邮箱地址&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM employees
WHERE REGEXP_LIKE(email, &amp;#39;\.com$&amp;#39;, &amp;#39;i&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\.&lt;/code&gt;匹配实际的点号（&lt;code&gt;.&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt;表示字符串结尾&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'i'&lt;/code&gt;使匹配不区分大小写，所以 &amp;ldquo;.COM&amp;rdquo; 或 &amp;ldquo;.Com&amp;rdquo; 也会被匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;查找名字以 &amp;ldquo;J&amp;rdquo; 开头，后跟任意字符的员工&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM employees
WHERE REGEXP_LIKE(name, &amp;#39;^J.*&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;^J&lt;/code&gt;表示以 &amp;ldquo;J&amp;rdquo; 开头&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.*&lt;/code&gt;表示匹配任意数量（包括零个）的任意字符&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-高级用法和场景"&gt;⚡ 高级用法和场景
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多条件匹配（OR）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;查找包含 &amp;ldquo;error&amp;rdquo; 或 &amp;ldquo;warning&amp;rdquo; 的日志消息 ：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM system_log
WHERE REGEXP_LIKE(log_message, &amp;#39;error|warning&amp;#39;, &amp;#39;i&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;|&lt;/code&gt;操作符起到了逻辑&amp;quot;或&amp;quot;的作用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;验证数据格式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;验证邮箱格式是否符合常见规则 ：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT email FROM users
WHERE REGEXP_LIKE(email, &amp;#39;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个模式可以检查字符串是否基本符合电子邮件地址的格式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;过滤敏感词&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在内容管理中，过滤掉包含特定敏感词的记录 ：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM user_posts
WHERE NOT REGEXP_LIKE(post_content, &amp;#39;敏感词1|敏感词2|敏感词3&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结合 &lt;code&gt;NOT&lt;/code&gt;操作符，可以排除包含这些词的记录。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-注意事项-1"&gt;⚠️ 注意事项
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;版本兼容性&lt;/strong&gt;：&lt;code&gt;REGEXP_LIKE&lt;/code&gt;函数在 &lt;strong&gt;MySQL 8.0&lt;/strong&gt; 及更高版本中才被正式引入和支持 。在旧版本 MySQL 或某些数据库（如 SQLite）中可能不可用。对于低版本 MySQL，通常使用 &lt;code&gt;REGEXP&lt;/code&gt;或 &lt;code&gt;RLIKE&lt;/code&gt;操作符来实现类似功能，例如 &lt;code&gt;WHERE email REGEXP '\\.com$'&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能考量&lt;/strong&gt;：正则表达式匹配通常比简单的 &lt;code&gt;LIKE&lt;/code&gt;操作&lt;strong&gt;更耗费资源&lt;/strong&gt;，尤其是在处理大量数据时。应避免在表上进行全扫描的正则匹配，尽量结合其他条件缩小查询范围。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转义特殊字符&lt;/strong&gt;：正则表达式中的元字符（如 &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;$&lt;/code&gt;等）具有特殊含义。如果你需要匹配这些字符本身，必须在它们前面加上反斜杠 &lt;code&gt;\&lt;/code&gt; 进行转义（例如&lt;code&gt;.&lt;/code&gt; 来匹配一个实际的点号）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;匹配参数冲突&lt;/strong&gt;：如果 &lt;code&gt;match_parameter&lt;/code&gt;中指定的值有冲突（例如同时指定 &lt;code&gt;'i'&lt;/code&gt;和 &lt;code&gt;'c'&lt;/code&gt;），数据库通常会使用&lt;strong&gt;最后指定的一个值&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-总结-5"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;REGEXP_LIKE&lt;/code&gt;是一个极其强大的工具，它将正则表达式的灵活性引入了 SQL 查询中。无论是进行复杂的模式匹配、数据验证还是数据过滤，它都能提供比传统 &lt;code&gt;LIKE&lt;/code&gt;操作更精确和强大的能力。&lt;/p&gt;
&lt;p&gt;掌握它的关键在于熟悉正则表达式语法，并根据具体的数据库环境合理使用，同时注意其对性能的潜在影响。&lt;/p&gt;
&lt;h2 id="regexp"&gt;REGEXP
&lt;/h2&gt;&lt;p&gt;MySQL 中的 &lt;code&gt;REGEXP&lt;/code&gt;运算符允许你使用正则表达式进行复杂的字符串模式匹配，功能比标准的 &lt;code&gt;LIKE&lt;/code&gt;操作符更强大和灵活。下面我来为你详细介绍它的主要用法、规则和注意事项。&lt;/p&gt;
&lt;h3 id="-一regexp-基本语法与核心功能"&gt;📊 一、REGEXP 基本语法与核心功能
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;REGEXP&lt;/code&gt;的基本语法结构如下：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM table_name WHERE column_name REGEXP &amp;#39;pattern&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中 &lt;code&gt;pattern&lt;/code&gt;是你要匹配的正则表达式模式。如果字符串与模式匹配，返回 1 (true)；否则返回 0 (false)。若任一参数为 &lt;code&gt;NULL&lt;/code&gt;，则返回 &lt;code&gt;NULL&lt;/code&gt;。&lt;code&gt;REGEXP&lt;/code&gt;默认&lt;strong&gt;不区分大小写&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;MySQL 还支持 &lt;code&gt;RLIKE&lt;/code&gt;操作符，它是 &lt;code&gt;REGEXP&lt;/code&gt;的同义词，功能完全相同。否定操作则使用 &lt;code&gt;NOT REGEXP&lt;/code&gt;，用于检查字符串与模式是否不匹配。&lt;/p&gt;
&lt;h3 id="-二正则表达式元字符详解"&gt;🔍 二、正则表达式元字符详解
&lt;/h3&gt;&lt;p&gt;理解正则表达式元字符是有效使用 &lt;code&gt;REGEXP&lt;/code&gt;的关键。下表汇总了常用的元字符及其含义：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;元字符&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;含义&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;示例描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配字符串的开始位置&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'^abc'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配以 &amp;ldquo;abc&amp;rdquo; 开头的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;$&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配字符串的结束位置&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'xyz$'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配以 &amp;ldquo;xyz&amp;rdquo; 结尾的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配除 &amp;ldquo;\n&amp;rdquo; 外的任何单个字符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'a.c'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配如 &amp;ldquo;abc&amp;rdquo;、&amp;ldquo;axc&amp;rdquo; 的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;*&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配前一个字符零次或多次&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'zo*'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配 &amp;ldquo;z&amp;rdquo;、&amp;ldquo;zoo&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配前一个字符一次或多次&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'zo+'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配 &amp;ldquo;zo&amp;rdquo;、&amp;ldquo;zoo&amp;rdquo;，但不匹配 &amp;ldquo;z&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配前一个字符零次或一次&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'a?x'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配 &amp;ldquo;x&amp;rdquo;、&amp;ldquo;ax&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;|&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;表示&amp;quot;或&amp;quot;操作，匹配竖线两侧的任一模式&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lsquo;a|b&amp;rsquo;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配包含 &amp;ldquo;a&amp;rdquo; 或 &amp;ldquo;b&amp;rdquo; 的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;[abc]&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配方括号内的任意单个字符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'[abc]'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配 &amp;ldquo;a&amp;rdquo;、&amp;ldquo;b&amp;rdquo; 或 &amp;ldquo;c&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;[^abc]&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配&lt;strong&gt;未&lt;/strong&gt;包含在方括号内的任意字符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'[^abc]'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配不是 &amp;ldquo;a&amp;rdquo;、&amp;ldquo;b&amp;rdquo;、&amp;ldquo;c&amp;rdquo; 的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;[a-z]&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配指定范围内的任意单个字符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'[0-9]'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配任意数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;{n}&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配确定的 n 次&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'o{2}'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配连续两个 &amp;ldquo;o&amp;rdquo;，如 &amp;ldquo;food&amp;rdquo; 中的 &amp;ldquo;oo&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;{n,m}&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配至少 n 次，至多 m 次&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'o{2,4}'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配 &amp;ldquo;oo&amp;rdquo;、&amp;ldquo;ooo&amp;rdquo;、&amp;ldquo;oooo&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;此外，还有一些常用的转义序列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\d&lt;/code&gt;: 匹配任意数字，等同于 &lt;code&gt;[0-9]&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\D&lt;/code&gt;: 匹配任意非数字。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\s&lt;/code&gt;: 匹配任意空白字符。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-三实用示例"&gt;🛠 三、实用示例
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;匹配特定开头或结尾&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 查找名字以 &amp;#39;A&amp;#39; 到 &amp;#39;M&amp;#39; 开头的用户
SELECT * FROM users WHERE name REGEXP &amp;#39;^[A-M]&amp;#39;;
-- 查找以 &amp;#39;ing&amp;#39; 结尾的单词
SELECT * FROM words WHERE word REGEXP &amp;#39;ing$&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;匹配包含特定字符或数字&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 查找包含数字的订单号
SELECT * FROM orders WHERE order_number REGEXP &amp;#39;[0-9]&amp;#39;;
-- 查找产品类别中包含 &amp;#39;electronics&amp;#39; 或 &amp;#39;furniture&amp;#39; 的产品
SELECT * FROM products WHERE category REGEXP &amp;#39;electronics|furniture&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据验证与提取&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 验证邮箱格式 (简化示例)
SELECT email FROM users WHERE email REGEXP &amp;#39;^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$&amp;#39;;
-- 匹配特定域名下的邮箱
SELECT * FROM employees WHERE email REGEXP &amp;#39;@example\\.com$&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;匹配汉字&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在UTF8MB4字符集中，可以使用以下方式匹配包含汉字的字段：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT buildnum FROM ya_evaluating_price WHERE buildnum REGEXP &amp;#39;[\\x{4e00}-\\x{9fa5}]&amp;#39;;
-- 或者利用字符长度差异判断（前提是字段字符集为UTF8MB4）
SELECT buildnum FROM ya_evaluating_price WHERE CHAR_LENGTH(buildnum) &amp;lt; LENGTH(buildnum);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据清洗&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 使用 REGEXP_REPLACE 替换多余空格（单个或多个空格替换为一个空格）
UPDATE products SET product_name = REGEXP_REPLACE(product_name, &amp;#39;[[:space:]]+&amp;#39;, &amp;#39; &amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-四性能注意事项与最佳实践"&gt;⚠️ 四、性能注意事项与最佳实践
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能影响&lt;/strong&gt;：&lt;code&gt;REGEXP&lt;/code&gt;操作通常&lt;strong&gt;会进行全表扫描&lt;/strong&gt;，尤其是在大型数据集上使用复杂的正则表达式时，可能对&lt;strong&gt;性能产生显著影响&lt;/strong&gt;。它基于 Henry Spencer 正则表达式库实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优化建议&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;避免过度使用&lt;/strong&gt;：在应用层或ETL过程中进行预处理，或考虑使用生成列（Generated Columns）来存储正则匹配结果并建立索引。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;精确锚定&lt;/strong&gt;：尽量使用 &lt;code&gt;^&lt;/code&gt;和 &lt;code&gt;$&lt;/code&gt;明确匹配开始和结束位置，缩小搜索范围。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试表达式&lt;/strong&gt;：编写复杂的正则表达式时，建议先在正则表达式测试工具中验证，然后再在SQL中使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;区分大小写匹配&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;默认情况下，&lt;code&gt;REGEXP&lt;/code&gt;匹配不区分大小写。如果需要区分大小写，可以使用 &lt;code&gt;BINARY&lt;/code&gt;关键字：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM users WHERE BINARY name REGEXP &amp;#39;^[A-M]&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-总结-6"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;MySQL 的 &lt;code&gt;REGEXP&lt;/code&gt;运算符是一个非常强大的工具，适用于进行复杂的字符串模式匹配、数据验证和清洗任务。掌握其元字符和语法能极大提升处理文本数据的灵活性。但务必注意其在大数据集上可能带来的性能开销，并遵循最佳实践以确保查询效率。&lt;/p&gt;
&lt;p&gt;希望这些信息能帮助你更好地理解和使用 MySQL 中的正则表达式功能。&lt;/p&gt;
&lt;h2 id="like"&gt;LIKE
&lt;/h2&gt;&lt;p&gt;MySQL 中的 &lt;code&gt;LIKE&lt;/code&gt;操作符是进行字符串模糊匹配的利器，它允许你使用通配符来查找符合特定模式的数据。下面我将为你详细介绍它的用法、技巧以及需要注意的地方。&lt;/p&gt;
&lt;h3 id="-一like-基础通配符与语法"&gt;📊 &lt;strong&gt;一、LIKE 基础：通配符与语法&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;LIKE&lt;/code&gt;的核心在于两个通配符，它们赋予了 &lt;code&gt;LIKE&lt;/code&gt;灵活匹配的能力：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;通配符&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;匹配示例（假设）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;%&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配&lt;strong&gt;任意数量&lt;/strong&gt;（零个或多个）的任意字符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIKE 'app%'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&amp;ldquo;apple&amp;rdquo;, &amp;ldquo;application&amp;rdquo;, &amp;ldquo;app&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;_&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;匹配&lt;strong&gt;单个&lt;/strong&gt;任意字符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIKE '_pple'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&amp;ldquo;apple&amp;rdquo; (但 &amp;ldquo;pineapple&amp;rdquo; 不行)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;基本语法结构：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT 列名1, 列名2, ...
FROM 表名
WHERE 列名 LIKE &amp;#39;模式&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="-二like-的常见用法与示例"&gt;🔍 &lt;strong&gt;二、LIKE 的常见用法与示例&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;通过组合通配符，你可以实现多种匹配方式：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;匹配类型&lt;/th&gt;
&lt;th&gt;语法示例&lt;/th&gt;
&lt;th&gt;描述说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;前缀匹配&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIKE 'abc%'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配以 &amp;ldquo;abc&amp;rdquo; &lt;strong&gt;开头&lt;/strong&gt;的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;后缀匹配&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIKE '%abc'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配以 &amp;ldquo;abc&amp;rdquo; &lt;strong&gt;结尾&lt;/strong&gt;的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;中间匹配&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIKE '%abc%'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配&lt;strong&gt;包含&lt;/strong&gt; &amp;ldquo;abc&amp;rdquo; 的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;精确长度&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIKE 'a_c'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配以 &amp;ldquo;a&amp;rdquo; 开头、&amp;ldquo;c&amp;rdquo; 结尾的&lt;strong&gt;三字符&lt;/strong&gt;字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;组合匹配&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIKE 'a%b%c'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配以 &amp;ldquo;a&amp;rdquo; 开头，中间某处有 &amp;ldquo;b&amp;rdquo;，并以 &amp;ldquo;c&amp;rdquo; 结尾的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;否定匹配&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;NOT LIKE ...&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查找&lt;strong&gt;不匹配&lt;/strong&gt;指定模式的行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;一些实用示例：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;查找姓“张”的学生：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM students WHERE name LIKE &amp;#39;张%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;查找所有Gmail邮箱的用户：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM users WHERE email LIKE &amp;#39;%@gmail.com&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;查找产品描述中包含“折扣”的商品：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM products WHERE description LIKE &amp;#39;%折扣%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;查找名字第二个字是“明”的学生（如“李明”）&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM students WHERE name LIKE &amp;#39;_明%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;排除所有以“test”开头的测试用户：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM users WHERE username NOT LIKE &amp;#39;test%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-三重要注意事项"&gt;⚠️ &lt;strong&gt;三、重要注意事项&lt;/strong&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;默认大小写不敏感&lt;/strong&gt;：在大多数情况下，&lt;code&gt;LIKE&lt;/code&gt;匹配是&lt;strong&gt;不区分大小写&lt;/strong&gt;的（例如 &amp;lsquo;a&amp;rsquo; 和 &amp;lsquo;A&amp;rsquo; 被视为相同）。这一行为取决于数据库的字符集和排序规则（Collation）设置。如需区分大小写，可使用 &lt;code&gt;BINARY&lt;/code&gt;关键字：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM table_name WHERE BINARY column_name LIKE &amp;#39;%a%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;转义特殊字符&lt;/strong&gt;：如果你需要匹配通配符本身（例如查找包含下划线 &lt;code&gt;_&lt;/code&gt;或百分号 &lt;code&gt;%&lt;/code&gt;的数据），需要使用 &lt;code&gt;ESCAPE&lt;/code&gt;关键字定义转义字符。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 查找包含下划线 &amp;#34;_&amp;#34; 的文件名
SELECT * FROM files WHERE filename LIKE &amp;#39;%\_%&amp;#39; ESCAPE &amp;#39;\&amp;#39;;
-- 查找包含百分号 &amp;#34;%&amp;#34; 的文本
SELECT * FROM documents WHERE content LIKE &amp;#39;%\%%&amp;#39; ESCAPE &amp;#39;\&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;NULL 值处理&lt;/strong&gt;：如果被匹配的列存在 &lt;code&gt;NULL&lt;/code&gt;值，&lt;code&gt;LIKE&lt;/code&gt;操作符无法匹配到它们。例如，&lt;code&gt;NULL LIKE '%pattern%'&lt;/code&gt;的结果是 &lt;code&gt;NULL&lt;/code&gt;，而不是 &lt;code&gt;TRUE&lt;/code&gt;或 &lt;code&gt;FALSE&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-四性能优化与替代方案"&gt;⚡ &lt;strong&gt;四、性能优化与替代方案&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;LIKE&lt;/code&gt;虽然方便，但在大数据集上使用不当可能导致性能问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能陷阱&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;LIKE '%pattern%'&lt;/code&gt;&lt;/strong&gt;（前导通配符）和 &lt;strong&gt;&lt;code&gt;LIKE '%pattern'&lt;/code&gt;&lt;/strong&gt;（后缀匹配）通常会导致&lt;strong&gt;全表扫描&lt;/strong&gt;，因为数据库无法有效利用索引，在百万级数据上可能非常缓慢。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;LIKE 'pattern%'&lt;/code&gt;&lt;/strong&gt;（前缀匹配）如果该列上有&lt;strong&gt;索引&lt;/strong&gt;，则通常&lt;strong&gt;可以使用索引&lt;/strong&gt;，查询速度较快。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优化策略&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优先使用前缀匹配&lt;/strong&gt;：尽可能设计查询为 &lt;code&gt;LIKE 'pattern%'&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;考虑全文索引&lt;/strong&gt;：如果你的 MySQL 版本支持（通常 5.6 及以上），并且需要进行大量文本搜索，可以为列创建全文索引（FULLTEXT INDEX），使用 &lt;code&gt;MATCH ... AGAINST&lt;/code&gt;进行搜索，性能远超 &lt;code&gt;LIKE&lt;/code&gt;。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 创建全文索引
ALTER TABLE products ADD FULLTEXT INDEX idx_name(name);
-- 使用全文搜索
SELECT * FROM products WHERE MATCH(name) AGAINST(&amp;#39;apple&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;外部搜索引擎&lt;/strong&gt;：对于超大规模的文本搜索需求（如商品搜索、日志分析），考虑使用 &lt;strong&gt;Elasticsearch&lt;/strong&gt; 或 &lt;strong&gt;Solr&lt;/strong&gt; 等专业的全文搜索引擎，它们为此类场景提供了最优的性能和功能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;其他替代函数&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于简单的包含判断，&lt;code&gt;LOCATE('substr', str)&lt;/code&gt;或 &lt;code&gt;INSTR(str, 'substr')&lt;/code&gt;函数也可以实现类似 &lt;code&gt;LIKE '%substr%'&lt;/code&gt;的效果，但性能特征相似。&lt;/li&gt;
&lt;li&gt;对于更复杂的模式匹配，可以考虑使用 &lt;code&gt;REGEXP&lt;/code&gt;或 &lt;code&gt;RLIKE&lt;/code&gt;运算符（正则表达式），但同样要注意其性能开销通常较大。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-总结-7"&gt;💎 &lt;strong&gt;总结&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;LIKE&lt;/code&gt;是 MySQL 中进行模糊查询的强大工具，它的通配符提供了灵活性。使用时，要&lt;strong&gt;特别注意通配符的位置对性能的巨大影响&lt;/strong&gt;，并善用索引和全文搜索来优化。&lt;/p&gt;
&lt;p&gt;希望这些信息能帮助你更好地理解和使用 MySQL 中的 &lt;code&gt;LIKE&lt;/code&gt;操作符！&lt;/p&gt;
&lt;h2 id="contains"&gt;&lt;strong&gt;&lt;code&gt;CONTAINS&lt;/code&gt;&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;经过详细确认，&lt;strong&gt;MySQL 中并不存在名为 &lt;code&gt;CONTAINS&lt;/code&gt;的内置函数&lt;/strong&gt;。这是一个常见的误解，通常源于对其他数据库系统（如 SQL Server）功能的混淆。&lt;/p&gt;
&lt;p&gt;虽然不能直接使用 &lt;code&gt;CONTAINS&lt;/code&gt;，但你可以通过以下两种主要方式在 MySQL 中实现判断字符串是否包含子串的需求。&lt;/p&gt;
&lt;h3 id="-替代方案一使用-like进行模糊匹配"&gt;📌 替代方案一：使用 &lt;code&gt;LIKE&lt;/code&gt;进行模糊匹配
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;LIKE&lt;/code&gt;操作符配合通配符 &lt;code&gt;%&lt;/code&gt;是最简单直接的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;百分号 &lt;code&gt;%&lt;/code&gt;&lt;/strong&gt;：匹配任意数量（包括零个）的任意字符。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;下划线 &lt;code&gt;_&lt;/code&gt;&lt;/strong&gt;：匹配单个任意字符。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;用法示例&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM products WHERE product_name LIKE &amp;#39;%apple%&amp;#39;; -- 查找产品名中包含&amp;#34;apple&amp;#34;的记录
SELECT * FROM students WHERE name LIKE &amp;#39;%Tom%&amp;#39;; -- 查找名字中包含&amp;#34;Tom&amp;#34;的学生
SELECT * FROM table_name WHERE column_name LIKE &amp;#39;abc%&amp;#39;; -- 查找以&amp;#34;abc&amp;#34;开头的记录
SELECT * FROM table_name WHERE column_name LIKE &amp;#39;_b_&amp;#39;; -- 查找第二个字母是&amp;#39;b&amp;#39;的三字母单词
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意事项&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LIKE&lt;/code&gt;默认是&lt;strong&gt;大小写不敏感&lt;/strong&gt;的，但这也取决于你使用的数据库字符集和排序规则（Collation）设置。为确保完全的大小写不敏感，可在查询前使用 &lt;code&gt;LOWER()&lt;/code&gt;或 &lt;code&gt;UPPER()&lt;/code&gt;函数转换。&lt;/li&gt;
&lt;li&gt;以 &lt;code&gt;%&lt;/code&gt;开头的模糊查询（如 &lt;code&gt;%keyword&lt;/code&gt;）&lt;strong&gt;无法有效利用索引&lt;/strong&gt;，在大型表上可能导致全表扫描，性能较差。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-替代方案二使用全文索引进行高效搜索"&gt;📌 替代方案二：使用全文索引进行高效搜索
&lt;/h3&gt;&lt;p&gt;对于需要进行大量文本搜索的场景，MySQL 提供了&lt;strong&gt;全文索引（FULLTEXT Index）&lt;/strong&gt;，它能提供更高效、更强大的搜索能力，包括词干分析等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 创建全文索引&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;CREATE TABLE articles (
id INT AUTO_INCREMENT PRIMARY KEY,
title VARCHAR(255),
body TEXT,
FULLTEXT(title, body) -- 在title和body列上创建全文索引
) ENGINE=InnoDB;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;2. 使用 &lt;code&gt;MATCH() ... AGAINST()&lt;/code&gt;查询&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM articles
WHERE MATCH(title, body) AGAINST(&amp;#39;MySQL&amp;#39; IN NATURAL LANGUAGE MODE); -- 使用自然语言模式搜索
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="-方案对比与选择"&gt;📊 方案对比与选择
&lt;/h3&gt;&lt;p&gt;下表列出了两种主要方法的特点，帮助你根据实际情况选择：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;&lt;code&gt;LIKE&lt;/code&gt;操作符&lt;/th&gt;
&lt;th&gt;全文索引 (&lt;code&gt;MATCH&lt;/code&gt;&amp;hellip; &lt;code&gt;AGAINST&lt;/code&gt;)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;简单的模糊匹配，数据量较小&lt;/td&gt;
&lt;td&gt;大量文本搜索，需要高效和专业搜索功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;性能&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;前缀模糊查询(&lt;code&gt;abc%&lt;/code&gt;)可利用索引；左模糊(&lt;code&gt;%abc&lt;/code&gt;)和全模糊(&lt;code&gt;%abc%&lt;/code&gt;)性能差，可能导致全表扫描&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;专门为文本搜索优化&lt;/strong&gt;，性能远高于 &lt;code&gt;LIKE&lt;/code&gt;（尤其在大型表上）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;功能&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;基础模式匹配&lt;/td&gt;
&lt;td&gt;支持自然语言搜索、布尔搜索等多种模式，能按相关性排序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;索引要求&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;普通索引对前缀模糊查询有效&lt;/td&gt;
&lt;td&gt;必须创建&lt;strong&gt;FULLTEXT 索引&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-其他相关函数"&gt;💡 其他相关函数
&lt;/h3&gt;&lt;p&gt;除了 &lt;code&gt;LIKE&lt;/code&gt;，你还可以使用以下函数进行更精确的定位：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;LOCATE(substr, str)&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;POSITION(substr IN str)&lt;/code&gt;&lt;/strong&gt;：返回子串 &lt;code&gt;substr&lt;/code&gt;在字符串 &lt;code&gt;str&lt;/code&gt;中&lt;strong&gt;第一次出现的位置&lt;/strong&gt;（从1开始计数），如果未找到则返回0。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM your_table WHERE LOCATE(&amp;#39;substring&amp;#39;, column_name) &amp;gt; 0;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;INSTR(str, substr)&lt;/code&gt;&lt;/strong&gt;：功能与 &lt;code&gt;LOCATE&lt;/code&gt;类似，但&lt;strong&gt;参数顺序相反&lt;/strong&gt;。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM your_table WHERE INSTR(column_name, &amp;#39;substring&amp;#39;) &amp;gt; 0;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-重要提醒"&gt;⚠️ 重要提醒
&lt;/h3&gt;&lt;p&gt;网络上有些文章（如）可能会提到 MySQL 存在 &lt;code&gt;CONTAINS&lt;/code&gt;函数，但这是&lt;strong&gt;不准确的信息&lt;/strong&gt;。MySQL 官方文档中并未定义该函数，很可能是混淆了 SQL Server 等其他数据库系统的功能。请始终以 MySQL 官方文档为准。&lt;/p&gt;
&lt;p&gt;希望这些信息能帮助你顺利地在 MySQL 中实现字符串包含查询！&lt;/p&gt;
&lt;h2 id="instr"&gt;INSTR
&lt;/h2&gt;&lt;p&gt;INSTR 函数是 SQL 中一个常用的字符串函数，用于查找子字符串在目标字符串中首次出现的位置。下面我会详细介绍它的语法、返回值和应用。&lt;/p&gt;
&lt;h3 id="-一instr-函数语法"&gt;📌 一、INSTR 函数语法
&lt;/h3&gt;&lt;p&gt;INSTR 函数的基本语法如下：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;INSTR(str, substr)
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;str&lt;/strong&gt;：要搜索的&lt;strong&gt;主字符串&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;substr&lt;/strong&gt;：要查找的&lt;strong&gt;子字符串&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在一些数据库系统（如 Oracle 和 Hive）中，它还支持更多可选参数，提供了更灵活的查找方式：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;INSTR(str, substr, [start_position], [nth_appearance])
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start_position&lt;/strong&gt;：&lt;strong&gt;可选&lt;/strong&gt;。指定开始搜索的位置。默认为 1（即从第一个字符开始）。如果为&lt;strong&gt;负数&lt;/strong&gt;，则表示从字符串的&lt;strong&gt;末尾开始向前搜索&lt;/strong&gt;（但返回的位置序号仍从字符串开头算起）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nth_appearance&lt;/strong&gt;：&lt;strong&gt;可选&lt;/strong&gt;。指定要查找子字符串第几次出现的位置。默认为 1（即第一次出现）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-二返回值规则"&gt;🔢 二、返回值规则
&lt;/h3&gt;&lt;p&gt;INSTR 函数的返回值遵循以下规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回子字符串在目标字符串中&lt;strong&gt;首次出现&lt;/strong&gt;的&lt;strong&gt;起始位置&lt;/strong&gt;。&lt;strong&gt;位置计数从 1 开始&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;如果未找到子字符串，则返回 &lt;strong&gt;0&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;如果任一参数为 &lt;code&gt;NULL&lt;/code&gt;，在某些数据库系统中（如 Hive），结果可能为 &lt;code&gt;NULL&lt;/code&gt;，因此使用时最好用 &lt;code&gt;NVL()&lt;/code&gt;等函数处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-三instr-函数示例"&gt;🛠️ 三、INSTR 函数示例
&lt;/h3&gt;&lt;p&gt;以下是一些使用 INSTR 函数的示例，帮助你理解其用法：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;示例代码&lt;/th&gt;
&lt;th&gt;返回值&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SELECT INSTR('Hello, World!', 'World');&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&amp;lsquo;World&amp;rsquo; 从第 7 个字符开始出现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SELECT INSTR('Hello, World!', 'Python');&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;未找到 &amp;lsquo;Python&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SELECT INSTR('Hello, World!', 'o', 5);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;从第 5 位开始查找，第一个 &amp;lsquo;o&amp;rsquo; 在第 8 位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SELECT INSTR('Apple,Apple', 'p', 1, 2);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;查找第 2 次出现 &amp;lsquo;p&amp;rsquo; 的位置（在第二个 &amp;lsquo;Apple&amp;rsquo; 中）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-四instr-函数的应用场景"&gt;💡 四、INSTR 函数的应用场景
&lt;/h3&gt;&lt;p&gt;INSTR 函数在实际应用中非常灵活，以下是一些常见的用途：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据过滤与查询&lt;/strong&gt;：用于筛选包含特定子字符串的记录，替代或补充 &lt;code&gt;LIKE&lt;/code&gt;操作符。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 查找邮箱地址中包含 &amp;#39;@example.com&amp;#39; 的所有用户
SELECT * FROM users WHERE INSTR(email, &amp;#39;@example.com&amp;#39;) &amp;gt; 0;
-- 等效于
SELECT * FROM users WHERE email LIKE &amp;#39;%@example.com%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据清洗与转换&lt;/strong&gt;：在数据清洗中，可用于定位特定字符，进而进行字符串的截取或替换。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 截取网址中的域名部分（假设域名在第一个 &amp;#39;.&amp;#39; 之后）
SELECT SUBSTRING(url, INSTR(url, &amp;#39;.&amp;#39;) + 1) AS domain FROM websites;
-- 替换邮箱域名（例如将 &amp;#39;@gmail.com&amp;#39; 替换为 &amp;#39;@yahoo.com&amp;#39;）
UPDATE users
SET email = CONCAT(SUBSTRING(email, 1, INSTR(email, &amp;#39;@&amp;#39;) - 1), &amp;#39;@yahoo.com&amp;#39;)
WHERE INSTR(email, &amp;#39;@gmail.com&amp;#39;) &amp;gt; 0;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;条件判断与分类&lt;/strong&gt;：可根据子字符串出现的位置或是否存在来进行条件判断和分类。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 对评论进行风险等级分类
SELECT comment_id,
CASE
WHEN INSTR(comment, &amp;#39;诈骗&amp;#39;) &amp;gt; 0 THEN &amp;#39;高危&amp;#39;
WHEN INSTR(comment, &amp;#39;转账&amp;#39;) &amp;gt; 5 THEN &amp;#39;中危&amp;#39; -- 例如在较后位置出现
ELSE &amp;#39;正常&amp;#39;
END AS risk_level
FROM customer_comments;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能优化&lt;/strong&gt;：在&lt;strong&gt;海量数据&lt;/strong&gt;查询中，&lt;code&gt;INSTR&lt;/code&gt;函数通常比 &lt;code&gt;LIKE '%keyword%'&lt;/code&gt;具有&lt;strong&gt;更好的性能&lt;/strong&gt;，尤其是在需要进行模式匹配时。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-五注意事项"&gt;⚠️ 五、注意事项
&lt;/h3&gt;&lt;p&gt;使用 INSTR 函数时，需要注意以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;大小写敏感性&lt;/strong&gt;：&lt;strong&gt;INSTR 函数默认是大小写敏感的&lt;/strong&gt;。例如，&lt;code&gt;INSTR('Apple', 'a')&lt;/code&gt;返回 0。如需不区分大小写，可先用 &lt;code&gt;LOWER()&lt;/code&gt;或 &lt;code&gt;UPPER()&lt;/code&gt;函数转换：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT INSTR(LOWER(&amp;#39;Apple&amp;#39;), LOWER(&amp;#39;a&amp;#39;)); -- 返回 1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;起始位置参数&lt;/strong&gt;：&lt;code&gt;start_position&lt;/code&gt;必须大于 0。如果为负数，在某些数据库系统中表示从字符串末尾倒数（如 Oracle），但行为可能因系统而异，使用时需查阅相应文档。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;处理 NULL 值&lt;/strong&gt;：如果传入的字符串参数为 &lt;code&gt;NULL&lt;/code&gt;，INSTR 函数通常会返回 &lt;code&gt;NULL&lt;/code&gt;。为确保代码健壮性，建议用 &lt;code&gt;COALESCE()&lt;/code&gt;或 &lt;code&gt;NVL()&lt;/code&gt;等函数处理可能的 &lt;code&gt;NULL&lt;/code&gt;值。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT INSTR(COALESCE(column_name, &amp;#39;&amp;#39;), &amp;#39;search&amp;#39;); -- 防止 column_name 为 NULL
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;字符集问题&lt;/strong&gt;：处理&lt;strong&gt;中文字符&lt;/strong&gt;或其他多字节字符时，确保数据库字符集设置正确，以免出现意外结果。在某些情况下，先使用 &lt;code&gt;LENGTH()&lt;/code&gt;函数检查字符串长度有助于调试。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-六instr-与其他字符串查找函数的比较"&gt;📊 六、INSTR 与其他字符串查找函数的比较
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数名&lt;/th&gt;
&lt;th&gt;语法&lt;/th&gt;
&lt;th&gt;主要功能&lt;/th&gt;
&lt;th&gt;区别与特点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;INSTR&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;INSTR(str, substr)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回子串的&lt;strong&gt;起始位置&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;通用性强，可指定起始位置和出现次数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;LOCATE&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LOCATE(substr, str)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回子串的起始位置&lt;/td&gt;
&lt;td&gt;参数顺序不同，功能与 INSTR 类似&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;POSITION&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;POSITION(substr IN str)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回子串的起始位置&lt;/td&gt;
&lt;td&gt;SQL 标准函数，语法不同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CHARINDEX&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;CHARINDEX(substr, str)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回子串的起始位置&lt;/td&gt;
&lt;td&gt;SQL Server 中的函数，MySQL 中需用 INSTR&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;希望这些信息能帮助你更好地理解和使用 INSTR 函数。&lt;/p&gt;
&lt;h2 id="字符串大小写"&gt;字符串大小写
&lt;/h2&gt;&lt;p&gt;在 MySQL 中处理字符串大小写转换，主要通过内置函数实现。以下是核心方法和一些实用提示：&lt;/p&gt;
&lt;h3 id="-一核心函数直接转换"&gt;📌 一、核心函数：直接转换
&lt;/h3&gt;&lt;p&gt;MySQL 提供了两个直接用于字符串大小写转换的函数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;UPPER(str)&lt;/code&gt;或 &lt;code&gt;UCASE(str)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将字符串 &lt;code&gt;str&lt;/code&gt;中的所有字母字符转换为&lt;strong&gt;大写&lt;/strong&gt;。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT UPPER(&amp;#39;Hello World!123&amp;#39;); -- 输出 &amp;#39;HELLO WORLD!123&amp;#39;
SELECT UCASE(&amp;#39;mysql&amp;#39;); -- 输出 &amp;#39;MYSQL&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;LOWER(str)&lt;/code&gt;或 &lt;code&gt;LCASE(str)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将字符串 &lt;code&gt;str&lt;/code&gt;中的所有字母字符转换为&lt;strong&gt;小写&lt;/strong&gt;。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT LOWER(&amp;#39;Hello World!123&amp;#39;); -- 输出 &amp;#39;hello world!123&amp;#39;
SELECT LCASE(&amp;#39;MySQL&amp;#39;); -- 输出 &amp;#39;mysql&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-二重要特性"&gt;⚠️ 二、重要特性
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;仅影响字母字符&lt;/strong&gt;：数字、空格、标点符号或汉字等&lt;strong&gt;非字母字符不会受影响&lt;/strong&gt;。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT UPPER(&amp;#39;张三Zhang&amp;#39;); -- 输出 &amp;#39;张三ZHANG&amp;#39;
SELECT LOWER(&amp;#39;东京TOKYO&amp;#39;); -- 输出 &amp;#39;东京tokyo&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;处理 NULL 值&lt;/strong&gt;：如果输入字符串为 &lt;code&gt;NULL&lt;/code&gt;，这两个函数也会返回 &lt;code&gt;NULL&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;支持多语言&lt;/strong&gt;：对于带重音的字母（如 &lt;code&gt;'Éclair'&lt;/code&gt;转为 &lt;code&gt;'éclair'&lt;/code&gt;）或德语变元音（如 &lt;code&gt;'ÄÖÜ'&lt;/code&gt;转为 &lt;code&gt;'äöü'&lt;/code&gt;），通常也能正确转换，具体效果取决于数据库的字符集和排序规则设置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-三常见应用场景"&gt;🔧 三、常见应用场景
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据标准化与清洗&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在导入或清洗数据时，确保字符串格式统一。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 将用户名的所有输入统一为小写存储
UPDATE users SET username = LOWER(username);
-- 或将产品名称统一为大写
UPDATE products SET product_name = UPPER(product_name);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;查询时忽略大小写比较&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在进行字符串比较时，利用函数来忽略大小写差异。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM users WHERE LOWER(username) = LOWER(&amp;#39;JohnDoe&amp;#39;);
SELECT * FROM products WHERE UPPER(product_name) = UPPER(&amp;#39;galaxy s24&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：在表数据量大时，对列使用函数可能导致索引失效，全表扫描从而降低查询速度。如果经常需要进行此类查询，可考虑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用函数索引&lt;/strong&gt;（MySQL 8.0+ 支持）：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;CREATE INDEX idx_username_lower ON users(LOWER(username));
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;预处理数据&lt;/strong&gt;：新增一个存储转换后值的列（如 `username_lower``），并对该列建立普通索引。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;生成特定格式的输出&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用于生成报告、URL Slug或标准化代码。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 生成小写的URL路径
SELECT CONCAT(&amp;#39;/product/&amp;#39;, LOWER(REPLACE(product_name, &amp;#39; &amp;#39;, &amp;#39;-&amp;#39;)) FROM products;
-- 输出示例：&amp;#39;/product/galaxy-s24-ultra&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-四性能与最佳实践"&gt;⚡ 四、性能与最佳实践
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;谨慎在 WHERE 子句中的列上使用函数&lt;/strong&gt;：如前述，这可能&lt;strong&gt;导致无法使用现有索引&lt;/strong&gt;，影响查询性能。对于高频查询，建议优先考虑使用函数索引或预处理列。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;字符集的影响&lt;/strong&gt;：函数的行为可能会受到数据库和表字符集（&lt;code&gt;character_set_server&lt;/code&gt;）及排序规则（Collation）的影响。确保你的字符集设置能正确支持需要处理的语言。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;并非所有“大小写”问题都靠函数解决&lt;/strong&gt;：表名、字段名等标识符的大小写敏感性通常由系统变量 &lt;code&gt;lower_case_table_names&lt;/code&gt;控制，而非 &lt;code&gt;UPPER()&lt;/code&gt;或 &lt;code&gt;LOWER()&lt;/code&gt;函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-五其他相关方法"&gt;💡 五、其他相关方法
&lt;/h3&gt;&lt;p&gt;除了直接使用函数，还可以通过以下方式间接控制或影响大小写：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设置排序规则（Collation）&lt;/strong&gt;：在创建表或列时指定&lt;em&gt;不区分大小写&lt;/em&gt;（&lt;code&gt;ci&lt;/code&gt;, case-insensitive）的排序规则，例如 &lt;code&gt;utf8mb4_general_ci&lt;/code&gt;。这样在比较和排序时会忽略大小写，但&lt;strong&gt;不会改变存储的原始值&lt;/strong&gt;。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;CREATE TABLE my_table (
content VARCHAR(100) COLLATE utf8mb4_general_ci
);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用 &lt;code&gt;BINARY&lt;/code&gt;关键字&lt;/strong&gt;：让原本不区分大小写的字符串比较变得&lt;strong&gt;区分大小写&lt;/strong&gt;。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM users WHERE BINARY username = &amp;#39;JohnDoe&amp;#39;; -- 将精确匹配大小写
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;掌握 &lt;code&gt;UPPER()&lt;/code&gt;和 &lt;code&gt;LOWER()&lt;/code&gt;函数，能有效帮你处理MySQL中的字符串大小写问题。根据具体场景选择合适的方法，并留意其对性能的潜在影响，就能更好地进行数据操作和查询。&lt;/p&gt;
&lt;p&gt;希望这些信息对你有帮助！如果你在处理特定数据类型或遇到更复杂的情况，可以提供更多细节。&lt;/p&gt;
&lt;h2 id="字符大小写"&gt;字符大小写
&lt;/h2&gt;&lt;p&gt;在 MySQL 中直接改变字符串中&lt;strong&gt;单个字符&lt;/strong&gt;的大小写，不像在编程语言中那样直接操作。通常需要借助字符串函数组合来实现。下面为你介绍几种方法。&lt;/p&gt;
&lt;h3 id="-核心方法使用字符串函数组合"&gt;🛠️ 核心方法：使用字符串函数组合
&lt;/h3&gt;&lt;p&gt;MySQL 没有直接改变字符串中单个字符大小写的函数，但可以通过以下思路实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;提取&lt;/strong&gt;目标字符。&lt;/li&gt;
&lt;li&gt;对提取的字符进行&lt;strong&gt;大小写转换&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;将转换后的字符&lt;strong&gt;放回&lt;/strong&gt;原字符串的对应位置。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这通常会用到 &lt;code&gt;SUBSTRING&lt;/code&gt;（或 &lt;code&gt;SUBSTR&lt;/code&gt;）、&lt;code&gt;CONCAT&lt;/code&gt;（或 &lt;code&gt;CONCAT_WS&lt;/code&gt;），以及 &lt;code&gt;UPPER&lt;/code&gt;或 &lt;code&gt;LOWER&lt;/code&gt;函数。&lt;/p&gt;
&lt;h4 id="转换指定位置的字符"&gt;转换指定位置的字符
&lt;/h4&gt;&lt;p&gt;假设你想将字符串 &lt;code&gt;'hello'&lt;/code&gt;中的第 1 个字符 &lt;code&gt;'h'&lt;/code&gt;转换为大写 &lt;code&gt;'H'&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT CONCAT(
UPPER(SUBSTRING(&amp;#39;hello&amp;#39;, 1, 1)), -- 提取第1个字符并转为大写
SUBSTRING(&amp;#39;hello&amp;#39;, 2) -- 提取从第2个字符开始的所有字符
) AS transformed_string;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;输出&lt;/strong&gt;: &lt;code&gt;'Hello'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;同理，若想将第 4 个字符 &lt;code&gt;'l'&lt;/code&gt;转换为大写 &lt;code&gt;'L'&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT CONCAT(
SUBSTRING(&amp;#39;hello&amp;#39;, 1, 3), -- 提取前3个字符
UPPER(SUBSTRING(&amp;#39;hello&amp;#39;, 4, 1)), -- 提取第4个字符并转为大写
SUBSTRING(&amp;#39;hello&amp;#39;, 5) -- 提取从第5个字符开始的所有字符（如果有的话）
) AS transformed_string;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;输出&lt;/strong&gt;: &lt;code&gt;'helLo'&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="转换特定字符如首字母"&gt;转换特定字符（如首字母）
&lt;/h4&gt;&lt;p&gt;一个常见的需求是将字符串的首字母大写。这里提供一个稍显复杂但更通用的方法，它能够处理单个单词：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT CONCAT(
UPPER(SUBSTRING(&amp;#39;hello&amp;#39;, 1, 1)), -- 将第一个字母大写
LOWER(SUBSTRING(&amp;#39;hello&amp;#39;, 2)) -- 将剩余的字母转为小写（确保其余字母为小写）
) AS capitalized_string;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;输出&lt;/strong&gt;: &lt;code&gt;'Hello'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请注意&lt;/strong&gt;：这个方法假设字符串是一个连续的单词。对于包含空格的句子或更复杂的字符串，逻辑会复杂得多，通常需要借助存储过程或应用程序代码来处理。&lt;/p&gt;
&lt;h3 id="-重要提醒-1"&gt;⚠️ 重要提醒
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;字符索引&lt;/strong&gt;：MySQL 中字符串的位置通常从 &lt;strong&gt;1&lt;/strong&gt; 开始，而不是 0。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复杂性&lt;/strong&gt;：上述方法在 SQL 中实现会显得有些繁琐，尤其是需要动态定位和更改多个特定字符时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实用建议&lt;/strong&gt;：如果业务逻辑中频繁需要进行复杂的字符级别操作，更高效、更灵活的做法是&lt;strong&gt;在应用程序层面&lt;/strong&gt;（如使用 Python、Java、PHP 等）处理字符串，然后将处理好的结果存入数据库或直接使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;字符集影响&lt;/strong&gt;：大小写转换行为可能会受数据库和表所使用的&lt;strong&gt;字符集（Character Set）&lt;/strong&gt; 和&lt;strong&gt;排序规则（Collation）&lt;/strong&gt; 的影响。例如，某些语言或特殊字符的大小写转换规则可能比较特殊。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-总结-8"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;虽然在 MySQL 中直接操作单个字符的大小写需要绕点弯路，但通过 &lt;code&gt;SUBSTRING&lt;/code&gt;、&lt;code&gt;UPPER&lt;/code&gt;/&lt;code&gt;LOWER&lt;/code&gt;和 &lt;code&gt;CONCAT&lt;/code&gt;函数的组合，你完全可以实现需求。 关键是先&lt;strong&gt;提取&lt;/strong&gt;目标字符，&lt;strong&gt;转换&lt;/strong&gt;它，然后再&lt;strong&gt;拼接&lt;/strong&gt;回去。&lt;/p&gt;
&lt;p&gt;对于简单的、特别是位置固定的字符转换，可以直接用 SQL 处理。但对于更复杂或频繁的操作，建议在应用程序中处理。&lt;/p&gt;
&lt;p&gt;希望这些信息能帮助你解决问题。如果还有疑问，欢迎继续询问。&lt;/p&gt;
&lt;h2 id="行转列"&gt;行转列
&lt;/h2&gt;&lt;p&gt;了解 MySQL 中的列转行（Unpivot）操作能让你更灵活地处理和分析数据。由于 MySQL 并未像其他一些数据库（如 SQL Server）那样直接提供 &lt;code&gt;UNPIVOT&lt;/code&gt;操作符，因此我们通常需要通过其他方式来实现类似功能。下面我将为你详细介绍几种常见的方法、它们的适用场景以及一些注意事项。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;核心思路&lt;/th&gt;
&lt;th&gt;适用场景&lt;/th&gt;
&lt;th&gt;优点&lt;/th&gt;
&lt;th&gt;缺点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;UNION ALL&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;多个SELECT语句分别查询每个目标列，然后合并结果集&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;列数量固定且较少&lt;/strong&gt;的场景，实现简单直观&lt;/td&gt;
&lt;td&gt;语法简单，易于理解和编写&lt;/td&gt;
&lt;td&gt;列多时代码冗长；数据量大时可能&lt;strong&gt;性能低下&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;动态SQL&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;通过查询系统表获取列名，&lt;strong&gt;动态拼接&lt;/strong&gt;出UNION ALL语句&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;列数量不固定&lt;/strong&gt;或&lt;strong&gt;列名经常变化&lt;/strong&gt;的场景，需要自动化处理&lt;/td&gt;
&lt;td&gt;灵活性强，无需手动编写所有列&lt;/td&gt;
&lt;td&gt;实现复杂，通常需要&lt;strong&gt;存储过程&lt;/strong&gt;，有SQL注入风险&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CROSS JOIN + CASE (MySQL 8.0+)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;通过虚拟派生表定义映射关系，避免硬编码列名&lt;/td&gt;
&lt;td&gt;MySQL 8.0及以上版本，希望&lt;strong&gt;避免硬编码&lt;/strong&gt;列名&lt;/td&gt;
&lt;td&gt;代码相对紧凑，逻辑清晰&lt;/td&gt;
&lt;td&gt;需要MySQL 8.0+支持；理解起来稍复杂&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-详细方法与示例"&gt;🔧 详细方法与示例
&lt;/h3&gt;&lt;h4 id="1-使用-union-all最常用兼容性好"&gt;1. 使用 UNION ALL（最常用，兼容性好）
&lt;/h4&gt;&lt;p&gt;这是最直接的方法，为每个需要转换为行的列编写一个独立的 &lt;code&gt;SELECT&lt;/code&gt;语句，然后用 &lt;code&gt;UNION ALL&lt;/code&gt;合并所有结果。&lt;/p&gt;
&lt;p&gt;假设有一个 &lt;code&gt;sales_data&lt;/code&gt;表，存储了产品在各个季度的销售额：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;CREATE TABLE sales_data (
product VARCHAR(50),
Q1 INT,
Q2 INT,
Q3 INT,
Q4 INT
);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;目标是将其转换为 &lt;code&gt;(产品, 季度, 销售额)&lt;/code&gt;的长格式：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT product, &amp;#39;Q1&amp;#39; AS quarter, Q1 AS sales FROM sales_data
UNION ALL
SELECT product, &amp;#39;Q2&amp;#39;, Q2 FROM sales_data
UNION ALL
SELECT product, &amp;#39;Q3&amp;#39;, Q3 FROM sales_data
UNION ALL
SELECT product, &amp;#39;Q4&amp;#39;, Q4 FROM sales_data
ORDER BY product, quarter; -- ORDER BY 对整个结果集排序
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意事项&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;字段一致性&lt;/strong&gt;：所有 &lt;code&gt;SELECT&lt;/code&gt;语句的&lt;strong&gt;字段数量和类型必须相同&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能问题&lt;/strong&gt;：&lt;code&gt;UNION ALL&lt;/code&gt;会&lt;strong&gt;多次扫描原表&lt;/strong&gt;，当原表数据量很大时，性能可能成为瓶颈。可以考虑在相关列上创建索引或使用临时表优化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;过滤 NULL 值&lt;/strong&gt;：如果某些列可能存在 &lt;code&gt;NULL&lt;/code&gt;值，并且你希望排除这些记录，可以在每个 &lt;code&gt;SELECT&lt;/code&gt;语句中添加 &lt;code&gt;WHERE&lt;/code&gt;条件，例如 &lt;code&gt;WHERE Q1 IS NOT NULL&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="2-使用动态sql应对列名不固定或列很多的情况"&gt;2. 使用动态SQL（应对列名不固定或列很多的情况）
&lt;/h4&gt;&lt;p&gt;当需要转换的列不固定或数量非常多时，手动编写 &lt;code&gt;UNION ALL&lt;/code&gt;会很繁琐。这时可以通过查询 &lt;code&gt;INFORMATION_SCHEMA.COLUMNS&lt;/code&gt;系统表来动态生成SQL语句。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SET @sql = NULL;
-- 动态构造UNION ALL查询
SELECT GROUP_CONCAT(
CONCAT(
&amp;#39;SELECT product, \&amp;#39;&amp;#39;,
COLUMN_NAME,
&amp;#39;\&amp;#39; AS quarter, &amp;#39;,
COLUMN_NAME,
&amp;#39; AS sales FROM sales_data&amp;#39;
-- 可以添加 WHERE COLUMN_NAME IS NOT NULL 来过滤空值
)
SEPARATOR &amp;#39; UNION ALL &amp;#39;
) INTO @sql
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = &amp;#39;sales_data&amp;#39;
AND TABLE_SCHEMA = &amp;#39;your_database_name&amp;#39; -- 替换为你的数据库名
AND COLUMN_NAME IN (&amp;#39;Q1&amp;#39;, &amp;#39;Q2&amp;#39;, &amp;#39;Q3&amp;#39;, &amp;#39;Q4&amp;#39;); -- 指定要转换的列名
-- 准备并执行动态SQL
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意事项&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt;：动态SQL需注意防范SQL注入风险，确保列名来源可靠。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复杂性&lt;/strong&gt;：这种方法通常需要在存储过程或脚本中完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="3-使用-cross-join--case-mysql-80"&gt;3. 使用 CROSS JOIN + CASE (MySQL 8.0+)
&lt;/h4&gt;&lt;p&gt;MySQL 8.0 支持 &lt;code&gt;VALUES&lt;/code&gt;语句，可以结合 &lt;code&gt;CROSS JOIN&lt;/code&gt;和 &lt;code&gt;CASE&lt;/code&gt;来实现。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT
s.product,
v.quarter,
CASE v.quarter
WHEN &amp;#39;Q1&amp;#39; THEN s.Q1
WHEN &amp;#39;Q2&amp;#39; THEN s.Q2
WHEN &amp;#39;Q3&amp;#39; THEN s.Q3
WHEN &amp;#39;Q4&amp;#39; THEN s.Q4
END AS sales
FROM sales_data s
CROSS JOIN (
SELECT &amp;#39;Q1&amp;#39; AS quarter UNION ALL
SELECT &amp;#39;Q2&amp;#39; UNION ALL
SELECT &amp;#39;Q3&amp;#39; UNION ALL
SELECT &amp;#39;Q4&amp;#39;
) v;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种方法通过一个虚拟的派生表 &lt;code&gt;v&lt;/code&gt;来定义所有要转换的季度值，然后通过 &lt;code&gt;CASE&lt;/code&gt;语句根据 &lt;code&gt;quarter&lt;/code&gt;的值选择对应的列。&lt;/p&gt;
&lt;h3 id="-应用场景与优化建议"&gt;📊 应用场景与优化建议
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;常见应用场景&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据透视与分析&lt;/strong&gt;：将宽表转换为长格式，便于进行时间序列分析（如季度销售额变化）、制作图表或导入其他分析工具（如 Pandas）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;标准化数据&lt;/strong&gt;：减少冗余列，使数据结构更规范，易于理解和维护。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;日志处理&lt;/strong&gt;：将日志数据中的多个字段转换为键值对形式，便于查询和分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能优化建议&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;索引优化&lt;/strong&gt;：确保原表上用于连接、过滤或排序的字段有合适的索引。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分页处理&lt;/strong&gt;：如果结果集非常大，可以考虑使用 &lt;code&gt;LIMIT&lt;/code&gt;和 &lt;code&gt;OFFSET&lt;/code&gt;进行分页查询。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用临时表&lt;/strong&gt;：先将列转行的结果存入临时表，再对临时表进行后续查询操作，避免重复计算。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免重复&lt;/strong&gt;：&lt;code&gt;UNION ALL&lt;/code&gt;会保留所有结果，包括可能重复的行。如果你确定需要去重，可以使用 &lt;code&gt;UNION&lt;/code&gt;（但请注意性能开销）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-注意事项-2"&gt;⚠️ 注意事项
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;数据类型一致性&lt;/strong&gt;：确保所有要合并的列在 &lt;code&gt;UNION ALL&lt;/code&gt;时数据类型是兼容的，防止隐式转换导致错误或性能问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NULL值处理&lt;/strong&gt;：明确是否需要保留或过滤掉原列中的 &lt;code&gt;NULL&lt;/code&gt;值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排序规则&lt;/strong&gt;：使用 &lt;code&gt;ORDER BY&lt;/code&gt;对最终结果进行排序时，注意它是作用于整个联合结果集的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-总结-9"&gt;💡 总结
&lt;/h3&gt;&lt;p&gt;在 MySQL 中实现列转行，&lt;strong&gt;&lt;code&gt;UNION ALL&lt;/code&gt;是最常用且兼容性最好的方法&lt;/strong&gt;，适合列数较少且固定的场景。当列数不固定或非常多时，可以考虑使用&lt;strong&gt;动态SQL&lt;/strong&gt;来自动生成查询。对于 MySQL 8.0+ 的用户，&lt;strong&gt;&lt;code&gt;CROSS JOIN&lt;/code&gt;+ &lt;code&gt;VALUES&lt;/code&gt;+ &lt;code&gt;CASE&lt;/code&gt;&lt;/strong&gt; 提供了另一种避免硬编码的思路。&lt;/p&gt;
&lt;p&gt;选择哪种方法取决于你的具体需求、数据量、MySQL 版本以及对性能和灵活性的要求。希望这些信息能帮助你更好地在 MySQL 中进行列转行操作！&lt;/p&gt;
&lt;h2 id="列转行"&gt;列转行
&lt;/h2&gt;&lt;p&gt;了解 MySQL 中的行转列（Pivot）操作，能让你更灵活地展示和分析数据。下面我将为你详细解释其概念、方法、场景及注意事项。&lt;/p&gt;
&lt;p&gt;行转列是将同一实体（如用户、时间等）在不同行中的多个属性值转换为同一行的多列数据。例如，将学生的各科成绩从多行合并为一行，每科对应一列。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;适用场景&lt;/th&gt;
&lt;th&gt;优点&lt;/th&gt;
&lt;th&gt;缺点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;CASE WHEN&lt;/code&gt;+ 聚合函数&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;列名已知且固定，需兼容各种数据库&lt;/td&gt;
&lt;td&gt;通用性强，所有SQL数据库都支持，灵活可控&lt;/td&gt;
&lt;td&gt;列固定不够灵活，代码相对冗长&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;GROUP_CONCAT&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;需将多行数据合并为一个字符串（如逗号分隔列表）&lt;/td&gt;
&lt;td&gt;简洁，避免多列扩展&lt;/td&gt;
&lt;td&gt;结果是一个字符串，后续处理可能需要解析&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;PIVOT&lt;/code&gt;&lt;/strong&gt; (MySQL 8.0+)&lt;/td&gt;
&lt;td&gt;MySQL 8.0及以上版本，追求代码简洁&lt;/td&gt;
&lt;td&gt;语法简洁直观，可读性高&lt;/td&gt;
&lt;td&gt;兼容性较差，列名必须预先静态定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;动态SQL&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;转换的列不固定或经常变化&lt;/td&gt;
&lt;td&gt;灵活适应数据变化，无需硬编码列名&lt;/td&gt;
&lt;td&gt;实现复杂，需编写存储过程或程序代码，有SQL注入风险&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-行转列的实现方法"&gt;🔧 行转列的实现方法
&lt;/h3&gt;&lt;h4 id="1-使用-case-when-聚合函数最通用"&gt;1. 使用 &lt;code&gt;CASE WHEN&lt;/code&gt;+ 聚合函数（最通用）
&lt;/h4&gt;&lt;p&gt;这是最基础和常用的方式，通过条件判断将不同行的数值分配到对应的列中，再结合 &lt;code&gt;SUM&lt;/code&gt;、&lt;code&gt;MAX&lt;/code&gt;等聚合函数完成汇总。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT
userid,
SUM(CASE WHEN subject = &amp;#39;语文&amp;#39; THEN score ELSE 0 END) AS 语文,
SUM(CASE WHEN subject = &amp;#39;数学&amp;#39; THEN score ELSE 0 END) AS 数学,
SUM(CASE WHEN subject = &amp;#39;英语&amp;#39; THEN score ELSE 0 END) AS 英语
FROM tb_score
GROUP BY userid;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;原理&lt;/strong&gt;：对每个用户的分组内，根据科目匹配分数并累加，未匹配到的科目填充为0。&lt;code&gt;CASE WHEN&lt;/code&gt;可以用 &lt;code&gt;IF()&lt;/code&gt;函数替代，效果相同但语法更简洁。&lt;/p&gt;
&lt;h4 id="2-使用-group_concat函数"&gt;2. 使用 &lt;code&gt;GROUP_CONCAT&lt;/code&gt;函数
&lt;/h4&gt;&lt;p&gt;当需要将多行数据合并成一个字符串时，&lt;code&gt;GROUP_CONCAT&lt;/code&gt;是个很好的选择。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT
student_id,
GROUP_CONCAT(CONCAT(subject, &amp;#39;:&amp;#39;, score) ORDER BY subject SEPARATOR &amp;#39;; &amp;#39;) AS score_details
FROM scores
GROUP BY student_id;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这将把每个学生的所有科目和成绩合并成一个字符串，例如：&amp;ldquo;数学:95; 语文:89; 英语:92&amp;rdquo;。&lt;/p&gt;
&lt;h4 id="3-使用-pivot函数-mysql-80及以上版本"&gt;3. 使用 &lt;code&gt;PIVOT&lt;/code&gt;函数 (MySQL 8.0及以上版本)
&lt;/h4&gt;&lt;p&gt;MySQL 8.0 及以上版本支持 &lt;code&gt;PIVOT&lt;/code&gt;函数，可以更方便地实现行转列。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT *
FROM (
SELECT student_id, subject, score
FROM scores
) AS source_table
PIVOT (
SUM(score)
FOR subject IN (&amp;#39;数学&amp;#39;, &amp;#39;语文&amp;#39;, &amp;#39;英语&amp;#39;)
) AS pivot_table;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id="4-使用动态sql应对列名不固定"&gt;4. 使用动态SQL（应对列名不固定）
&lt;/h4&gt;&lt;p&gt;当需要转换的列不固定或数量非常多时，可以通过查询 &lt;code&gt;INFORMATION_SCHEMA.COLUMNS&lt;/code&gt;或业务表来动态获取列名，并拼接SQL语句。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SET @sql = NULL;
SELECT GROUP_CONCAT(DISTINCT
CONCAT(&amp;#39;SUM(IF(subject = &amp;#39;&amp;#39;&amp;#39;, subject, &amp;#39;&amp;#39;&amp;#39;, score, 0)) AS `&amp;#39;, subject, &amp;#39;`&amp;#39;)
) INTO @sql
FROM scores; -- 假设subject来自scores表
SET @sql = CONCAT(&amp;#39;SELECT student_id, &amp;#39;, @sql, &amp;#39; FROM scores GROUP BY student_id&amp;#39;);
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：动态SQL灵活性高但复杂度较大，且需防范SQL注入风险。&lt;/p&gt;
&lt;h3 id="-应用场景与示例"&gt;📊 应用场景与示例
&lt;/h3&gt;&lt;p&gt;行转列操作常用于以下场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据透视分析&lt;/strong&gt;：生成交叉表以便多维度统计。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简化查询结果&lt;/strong&gt;：减少行数，使数据更紧凑易读。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;报表展示优化&lt;/strong&gt;：适配前端表格组件的数据格式要求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;销售报表&lt;/strong&gt;：将不同产品的销售数据转换为列，便于比较。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户行为分析&lt;/strong&gt;：将用户的多种行为数据转换为列，便于统计和分析。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;库存管理&lt;/strong&gt;：将不同仓库的库存数据转换为列，便于管理和监控。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;典型示例&lt;/strong&gt;：学生成绩表行转列&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;原始数据 (行格式)&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;student_id&lt;/th&gt;
&lt;th&gt;subject&lt;/th&gt;
&lt;th&gt;score&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;数学&lt;/td&gt;
&lt;td&gt;85&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;语文&lt;/td&gt;
&lt;td&gt;90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;英语&lt;/td&gt;
&lt;td&gt;78&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;数学&lt;/td&gt;
&lt;td&gt;92&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;语文&lt;/td&gt;
&lt;td&gt;85&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;英语&lt;/td&gt;
&lt;td&gt;88&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;目标数据 (列格式)&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;student_id&lt;/th&gt;
&lt;th&gt;数学&lt;/th&gt;
&lt;th&gt;语文&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;85&lt;/td&gt;
&lt;td&gt;90&lt;/td&gt;
&lt;td&gt;78&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;92&lt;/td&gt;
&lt;td&gt;85&lt;/td&gt;
&lt;td&gt;88&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实现SQL&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT
student_id,
MAX(CASE WHEN subject = &amp;#39;数学&amp;#39; THEN score END) AS 数学,
MAX(CASE WHEN subject = &amp;#39;语文&amp;#39; THEN score END) AS 语文,
MAX(CASE WHEN subject = &amp;#39;英语&amp;#39; THEN score END) AS 英语
FROM scores
GROUP BY student_id;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-注意事项与优化策略"&gt;⚠️ 注意事项与优化策略
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;确保分组字段唯一性&lt;/strong&gt;：&lt;code&gt;GROUP BY&lt;/code&gt;的子句应确保分组的唯一性，避免数据混淆。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理NULL值&lt;/strong&gt;：使用 &lt;code&gt;COALESCE()&lt;/code&gt;函数或条件判断中的 &lt;code&gt;ELSE&lt;/code&gt;子句为缺失值提供默认值（如0），保持数值类型一致。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能优化&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;索引优化&lt;/strong&gt;：为经常用于 &lt;code&gt;GROUP BY&lt;/code&gt;的列和 &lt;code&gt;WHERE&lt;/code&gt;子句中的列创建索引。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;减少数据量&lt;/strong&gt;：使用 &lt;code&gt;WHERE&lt;/code&gt;条件过滤不需要的数据，减少转换操作的数据量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;code&gt;SELECT \*&lt;/code&gt;&lt;/strong&gt;：只选择必要的列。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用&lt;code&gt;EXPLAIN&lt;/code&gt;分析&lt;/strong&gt;：分析查询执行计划，找到性能瓶颈。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态SQL的安全性&lt;/strong&gt;：使用动态SQL时，务必验证输入参数的安全性，防范SQL注入风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;GROUP_CONCAT&lt;/code&gt;长度限制&lt;/strong&gt;：&lt;code&gt;GROUP_CONCAT&lt;/code&gt;函数有默认长度限制（1024字节），可通过设置 &lt;code&gt;group_concat_max_len&lt;/code&gt;参数调整。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-总结-10"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;行转列是数据处理中的重要操作，其核心在于&lt;strong&gt;灵活运用SQL的条件表达式、聚合函数及集合操作符&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;选择哪种方法取决于你的具体需求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;通用且稳定&lt;/strong&gt;：选择 &lt;strong&gt;&lt;code&gt;CASE WHEN&lt;/code&gt;+ 聚合函数&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;合并为字符串&lt;/strong&gt;：选择 &lt;strong&gt;&lt;code&gt;GROUP_CONCAT&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MySQL 8.0+且列固定&lt;/strong&gt;：可以尝试 &lt;strong&gt;&lt;code&gt;PIVOT&lt;/code&gt;&lt;/strong&gt; 语法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;列名不固定&lt;/strong&gt;：使用&lt;strong&gt;动态SQL&lt;/strong&gt;（但要注意复杂度和安全风险）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望这些信息能帮助你更好地理解和应用MySQL中的行转列操作！&lt;/p&gt;
&lt;h2 id="union--union-all"&gt;UNION &amp;amp; UNION ALL
&lt;/h2&gt;&lt;p&gt;了解 &lt;code&gt;UNION&lt;/code&gt;和 &lt;code&gt;UNION ALL&lt;/code&gt;的区别对于编写高效的 SQL 查询很重要。它们虽然都用于合并结果集，但在处理重复数据、性能以及使用场景上有所不同。下面这个表格汇总了它们的核心区别：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;&lt;code&gt;UNION ALL&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;UNION&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;去重行为&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;❌ &lt;strong&gt;保留所有行&lt;/strong&gt;，包括重复记录&lt;/td&gt;
&lt;td&gt;✅ &lt;strong&gt;自动去除重复行&lt;/strong&gt;，只保留唯一记录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;性能表现&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;⚡ &lt;strong&gt;更快&lt;/strong&gt;，因无需去重操作&lt;/td&gt;
&lt;td&gt;🐢 &lt;strong&gt;相对较慢&lt;/strong&gt;，需额外排序和比较以去重&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;结果集大小&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;等于所有查询结果行数的&lt;strong&gt;总和&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;可能小于所有查询结果行数的总和（因去重）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;语法要求&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;所有 &lt;code&gt;SELECT&lt;/code&gt;语句的&lt;strong&gt;列数必须相同&lt;/strong&gt;，且对应列的数据类型兼容&lt;/td&gt;
&lt;td&gt;与 &lt;code&gt;UNION ALL&lt;/code&gt;相同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;排序操作&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;通常不进行隐式排序&lt;/td&gt;
&lt;td&gt;为完成去重，通常会在内部进行排序&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-如何选择-1"&gt;🧠 如何选择？
&lt;/h3&gt;&lt;p&gt;选择的关键在于&lt;strong&gt;是否需要去重&lt;/strong&gt;以及&lt;strong&gt;对性能的考量&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;需要去除重复行&lt;/strong&gt;时，使用 &lt;code&gt;UNION&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不需要去重&lt;/strong&gt;，或&lt;strong&gt;明确知道结果集无重复&lt;/strong&gt;且&lt;strong&gt;追求查询速度&lt;/strong&gt;时，使用 &lt;code&gt;UNION ALL&lt;/code&gt;。在数据量大的情况下，性能提升尤为明显。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-注意事项-3"&gt;📝 注意事项
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;列名与数据类型&lt;/strong&gt;：合并时，多个 &lt;code&gt;SELECT&lt;/code&gt;语句的列数必须相同，对应列的数据类型应兼容（如 INT 和 DECIMAL），但列名可以不同，最终结果集的列名通常取自第一个 &lt;code&gt;SELECT&lt;/code&gt;语句。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排序子句 (&lt;code&gt;ORDER BY&lt;/code&gt;)&lt;/strong&gt;：如果需要对合并后的最终结果排序，只能在&lt;strong&gt;最后一个 &lt;code&gt;SELECT&lt;/code&gt;语句后&lt;/strong&gt;使用一个 &lt;code&gt;ORDER BY&lt;/code&gt;子句。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理 NULL 值&lt;/strong&gt;：两者通常都将 NULL 值视为相同的值进行去重或保留。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-总结-11"&gt;💡 总结
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;UNION&lt;/code&gt;和 &lt;code&gt;UNION ALL&lt;/code&gt;是 SQL 查询中合并结果集的强大工具。&lt;strong&gt;&lt;code&gt;UNION ALL&lt;/code&gt;简单高效，保留所有；&lt;code&gt;UNION&lt;/code&gt;去重求精，确保唯一&lt;/strong&gt;。根据你的具体需求谨慎选择，可以有效提升查询效率。&lt;/p&gt;
&lt;p&gt;希望这些信息能帮助你更好地理解和使用 &lt;code&gt;UNION&lt;/code&gt;与 &lt;code&gt;UNION ALL&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="全外连接"&gt;全外连接
&lt;/h2&gt;&lt;p&gt;MySQL 本身并不直接支持 &lt;code&gt;FULL OUTER JOIN&lt;/code&gt;（全外连接）语法。不过别担心，我们可以通过组合 &lt;code&gt;LEFT JOIN&lt;/code&gt;、&lt;code&gt;RIGHT JOIN&lt;/code&gt;和 &lt;code&gt;UNION&lt;/code&gt;来达到相同的效果。&lt;/p&gt;
&lt;p&gt;下面我为你介绍具体的方法、区别以及如何选择。&lt;/p&gt;
&lt;h3 id="-实现全外连接的两种方法"&gt;🔧 实现全外连接的两种方法
&lt;/h3&gt;&lt;p&gt;全外连接的核心目的是返回两个表中所有的记录，即使它们在另一个表中没有匹配的行。没有匹配的部分会用 &lt;code&gt;NULL&lt;/code&gt;填充。&lt;/p&gt;
&lt;h4 id="方法一使用-union自动去重"&gt;方法一：使用 &lt;code&gt;UNION&lt;/code&gt;(自动去重)
&lt;/h4&gt;&lt;p&gt;这是最标准和常用的方式，使用 &lt;code&gt;UNION&lt;/code&gt;操作符合并左外连接和右外连接的结果集，并自动去除重复的行。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT *
FROM table1
LEFT JOIN table2 ON table1.id = table2.id
UNION
SELECT *
FROM table1
RIGHT JOIN table2 ON table1.id = table2.id;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id="方法二使用-union-all不去重性能更优"&gt;方法二：使用 &lt;code&gt;UNION ALL&lt;/code&gt;(不去重，性能更优)
&lt;/h4&gt;&lt;p&gt;如果你确信左右连接的结果集没有重复行（或者不关心重复行），可以使用 &lt;code&gt;UNION ALL&lt;/code&gt;来提升查询性能，因为它省去了去重的步骤。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT *
FROM table1
LEFT JOIN table2 ON table1.id = table2.id
UNION ALL
SELECT *
FROM table1
RIGHT JOIN table2 ON table1.id = table2.id
WHERE table1.id IS NULL; -- 此条件用于筛选出仅存在于右表的记录
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：方法二中第二个查询的 &lt;code&gt;WHERE table1.id IS NULL&lt;/code&gt;条件至关重要，它用于筛选出&lt;strong&gt;仅存在于 &lt;code&gt;table2&lt;/code&gt;（右表）&lt;/strong&gt; 而&lt;strong&gt;不在 &lt;code&gt;table1&lt;/code&gt;（左表）&lt;/strong&gt; 中的记录，避免了与左连接结果重复。&lt;/p&gt;
&lt;p&gt;为了帮你更好地根据需求选择，这个表格汇总了两种方法的核心区别：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;使用 &lt;code&gt;UNION&lt;/code&gt;(方法一)&lt;/th&gt;
&lt;th&gt;使用 &lt;code&gt;UNION ALL&lt;/code&gt;(方法二)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;去重行为&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ 自动去除所有重复行&lt;/td&gt;
&lt;td&gt;❌ 保留所有行，包括可能重复的行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;性能&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;⚠️ 相对较慢 (需执行去重操作)&lt;/td&gt;
&lt;td&gt;⚡ &lt;strong&gt;更快&lt;/strong&gt; (无需去重)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;结果准确性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;⭐️⭐️⭐️⭐️⭐️ (标准做法，确保无误)&lt;/td&gt;
&lt;td&gt;⭐️⭐️⭐️⭐️ (需确保写法正确，否则易重复)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;推荐场景&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;通用场景，或不确定是否有重复时&lt;/td&gt;
&lt;td&gt;确信两结果集&lt;strong&gt;无重复行&lt;/strong&gt;，或明确需要保留所有行且追求性能时&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-全外连接结果示意"&gt;📊 全外连接结果示意
&lt;/h3&gt;&lt;p&gt;假设我们有两个表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;employees&lt;/code&gt;(员工表)&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;emp_id&lt;/th&gt;
&lt;th&gt;emp_name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;张三&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;李四&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;王五&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;departments&lt;/code&gt;(部门表)&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;dept_id&lt;/th&gt;
&lt;th&gt;dept_name&lt;/th&gt;
&lt;th&gt;emp_id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;td&gt;研发部&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;102&lt;/td&gt;
&lt;td&gt;市场部&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;103&lt;/td&gt;
&lt;td&gt;财务部&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行全外连接查询后，结果集将包含所有员工和所有部门的信息：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;emp_id&lt;/th&gt;
&lt;th&gt;emp_name&lt;/th&gt;
&lt;th&gt;dept_id&lt;/th&gt;
&lt;th&gt;dept_name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;张三&lt;/td&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;td&gt;研发部&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;李四&lt;/td&gt;
&lt;td&gt;102&lt;/td&gt;
&lt;td&gt;市场部&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;王五&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;103&lt;/td&gt;
&lt;td&gt;财务部&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-注意事项与优化建议"&gt;⚠️ 注意事项与优化建议
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能优化&lt;/strong&gt;：全外连接，尤其是通过联合（UNION）实现时，可能处理大量数据。为确保效率，&lt;strong&gt;务必为连接条件中使用的字段（如 &lt;code&gt;table1.id&lt;/code&gt;和 &lt;code&gt;table2.id&lt;/code&gt;）创建索引&lt;/strong&gt;。对于极大表，还可考虑使用分区表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;处理 NULL 值&lt;/strong&gt;：结果集中出现的 &lt;code&gt;NULL&lt;/code&gt;是正常现象，表示缺少匹配。如果应用层需要，可以使用 &lt;code&gt;COALESCE()&lt;/code&gt;或 &lt;code&gt;IFNULL()&lt;/code&gt;函数为这些 &lt;code&gt;NULL&lt;/code&gt;值提供默认值或友好显示。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT
COALESCE(table1.id, table2.id) AS id,
COALESCE(table1.name, &amp;#39;未知&amp;#39;) AS name,
...
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据类型与列数&lt;/strong&gt;：使用 &lt;code&gt;UNION&lt;/code&gt;或 &lt;code&gt;UNION ALL&lt;/code&gt;时，&lt;strong&gt;所有 &lt;code&gt;SELECT&lt;/code&gt;语句的列数必须相同，且对应列的数据类型必须兼容&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分析查询计划&lt;/strong&gt;：对于复杂的查询，使用 &lt;code&gt;EXPLAIN&lt;/code&gt;命令分析执行计划，有助于了解性能瓶颈并进行针对性优化。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-总结-12"&gt;💡 总结
&lt;/h3&gt;&lt;p&gt;虽然在 MySQL 中实现全外连接需要绕一点路，但通过 &lt;code&gt;LEFT JOIN&lt;/code&gt;、&lt;code&gt;RIGHT JOIN&lt;/code&gt;配合 &lt;code&gt;UNION&lt;/code&gt;或 &lt;code&gt;UNION ALL&lt;/code&gt;，完全可以满足需求。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于&lt;strong&gt;通用需求&lt;/strong&gt;，直接使用 &lt;strong&gt;&lt;code&gt;UNION&lt;/code&gt;&lt;/strong&gt; 方法。&lt;/li&gt;
&lt;li&gt;当你&lt;strong&gt;非常确定结果没有重复&lt;/strong&gt;且&lt;strong&gt;追求极致性能&lt;/strong&gt;时，可以考虑 &lt;strong&gt;&lt;code&gt;UNION ALL&lt;/code&gt;&lt;/strong&gt; 方法，但务必注意语法的正确性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望这些信息能帮助你顺利地在 MySQL 中完成全外连接操作。&lt;/p&gt;
&lt;h2 id="原因"&gt;原因
&lt;/h2&gt;&lt;p&gt;MySQL 选择不支持 &lt;code&gt;FULL OUTER JOIN&lt;/code&gt;（全外连接）语法，是其基于设计哲学、性能考量和使用场景等方面做出的权衡。&lt;/p&gt;
&lt;h3 id="-实现全外连接的替代方案"&gt;🛠️ 实现全外连接的替代方案
&lt;/h3&gt;&lt;p&gt;虽然 MySQL 不直接支持 &lt;code&gt;FULL OUTER JOIN&lt;/code&gt;，但你仍然可以通过其他方式实现相同的效果。通常使用 &lt;code&gt;LEFT JOIN&lt;/code&gt;和 &lt;code&gt;RIGHT JOIN&lt;/code&gt;的组合，并通过 &lt;code&gt;UNION&lt;/code&gt;来合并结果集，模拟全外连接。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT *
FROM table1
LEFT JOIN table2 ON table1.id = table2.id
UNION
SELECT *
FROM table1
RIGHT JOIN table2 ON table1.id = table2.id;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;code&gt;UNION&lt;/code&gt;操作符默认会去除重复的行。如果你确信左右连接的结果集没有重复行，或者不需要去重，可以使用 &lt;code&gt;UNION ALL&lt;/code&gt;来提升性能。&lt;/p&gt;
&lt;h3 id="-全外连接的作用"&gt;💡 全外连接的作用
&lt;/h3&gt;&lt;p&gt;全外连接的目的是返回两个表中所有的记录，无论它们在另一个表中是否有匹配的行。当某一行在另一个表中没有匹配时，相应字段会填充为 &lt;code&gt;NULL&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id="-mysql-不支持全外连接的可能原因"&gt;🤔 MySQL 不支持全外连接的可能原因
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;设计哲学与使用频率&lt;/strong&gt;：MySQL 的设计更侧重于性能、简单和稳定。&lt;code&gt;FULL OUTER JOIN&lt;/code&gt;的使用场景相对&lt;strong&gt;小众&lt;/strong&gt;，并非所有应用都会用到。MySQL 团队可能认为，通过现有的 &lt;code&gt;UNION&lt;/code&gt;和 &lt;code&gt;LEFT JOIN&lt;/code&gt;/&lt;code&gt;RIGHT JOIN&lt;/code&gt;组合已经能够满足需求，无需增加语法复杂度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能考量&lt;/strong&gt;：&lt;code&gt;FULL OUTER JOIN&lt;/code&gt;的实现可能涉及对两个表的大量数据的复杂操作，&lt;strong&gt;性能开销较大&lt;/strong&gt;。在 MySQL 更注重 OLTP（联机事务处理）场景的早期，这种可能影响核心事务性能的特性优先级不高。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;语义清晰度&lt;/strong&gt;：使用 &lt;code&gt;UNION&lt;/code&gt;和 &lt;code&gt;LEFT JOIN&lt;/code&gt;/&lt;code&gt;RIGHT JOIN&lt;/code&gt;的组合来模拟全外连接，虽然语句稍长，但&lt;strong&gt;逻辑非常清晰&lt;/strong&gt;，明确了操作步骤。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;历史与兼容性&lt;/strong&gt;：MySQL 的发展有其历史路径。一旦某种设计被广泛接受，后续更改可能会考虑对现有系统和用户习惯的兼容性。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-使用替代方案时需注意"&gt;⚠️ 使用替代方案时需注意
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能&lt;/strong&gt;：&lt;code&gt;UNION&lt;/code&gt;会执行去重操作，如果数据量很大，可能会&lt;strong&gt;影响查询效率&lt;/strong&gt;。确保在连接条件使用的字段上创建索引。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;值处理&lt;/strong&gt;：结果集中可能会出现 &lt;code&gt;NULL&lt;/code&gt;值，这是正常的。如果应用层需要，可以使用 &lt;code&gt;COALESCE()&lt;/code&gt;或 &lt;code&gt;IFNULL()&lt;/code&gt;函数为这些 &lt;code&gt;NULL&lt;/code&gt;值提供默认值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据一致性&lt;/strong&gt;：确保所有 &lt;code&gt;SELECT&lt;/code&gt;语句的&lt;strong&gt;列数相同&lt;/strong&gt;，且&lt;strong&gt;对应列的数据类型兼容&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-总结-13"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;MySQL 不支持 &lt;code&gt;FULL OUTER JOIN&lt;/code&gt;，主要是基于其&lt;strong&gt;设计哲学&lt;/strong&gt;（简单、高效）、对&lt;strong&gt;使用频率&lt;/strong&gt;的考量以及&lt;strong&gt;性能权衡&lt;/strong&gt;的结果。&lt;/p&gt;
&lt;p&gt;不过，通过 &lt;code&gt;LEFT JOIN&lt;/code&gt;、&lt;code&gt;RIGHT JOIN&lt;/code&gt;结合 &lt;code&gt;UNION&lt;/code&gt;的方案，你完全可以在 MySQL 中实现全外连接的功能。只需注意在性能关键的业务中，确保相关的连接字段上有索引，并理解 &lt;code&gt;UNION&lt;/code&gt;会去重即可。&lt;/p&gt;
&lt;p&gt;希望这些信息能帮助你理解 MySQL 的设计选择，并顺利实现全外连接的需求。&lt;/p&gt;
&lt;h2 id="having-1"&gt;having
&lt;/h2&gt;&lt;p&gt;你在使用 &lt;code&gt;HAVING&lt;/code&gt;子句时遇到的 &lt;code&gt;Unknown column 'library_books.total_copies' in 'having clause'&lt;/code&gt;错误，是 MySQL 中一个常见的误区。我们来分析一下原因并提供解决方法。&lt;/p&gt;
&lt;h3 id="-错误原因"&gt;🔍 错误原因
&lt;/h3&gt;&lt;p&gt;核心原因在于你对 &lt;strong&gt;&lt;code&gt;HAVING&lt;/code&gt;子句能引用什么字段&lt;/strong&gt;的理解有误。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;HAVING&lt;/code&gt;子句的限制&lt;/strong&gt;：&lt;code&gt;HAVING&lt;/code&gt;子句用于对 &lt;code&gt;GROUP BY&lt;/code&gt;分组后的结果集进行过滤。它&lt;strong&gt;只能直接引用&lt;/strong&gt;以下两种内容：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;GROUP BY&lt;/code&gt;子句中列出的列&lt;/strong&gt;。在你的查询中，只有 &lt;code&gt;library_books.book_id&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;聚合函数&lt;/strong&gt;（如 &lt;code&gt;COUNT()&lt;/code&gt;, &lt;code&gt;SUM()&lt;/code&gt;, &lt;code&gt;MAX()&lt;/code&gt;, &lt;code&gt;MIN()&lt;/code&gt;等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;你的查询问题&lt;/strong&gt;：你的 &lt;code&gt;HAVING&lt;/code&gt;子句试图直接引用 &lt;code&gt;library_books.total_copies&lt;/code&gt;，但这个字段&lt;strong&gt;既没有出现在 &lt;code&gt;GROUP BY&lt;/code&gt;子句中，也没有被用于聚合函数&lt;/strong&gt;。对于 MySQL 来说，在分组后的结果集里，它不知道该如何处理这个未参与分组的列，因此会报告“未知列”的错误。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-解决方法"&gt;🛠️ 解决方法
&lt;/h3&gt;&lt;p&gt;根据你的需求，这里有两种可能的修改方案：&lt;/p&gt;
&lt;h4 id="方案一将-total_copies加入-group-by子句"&gt;方案一：将 &lt;code&gt;total_copies&lt;/code&gt;加入 &lt;code&gt;GROUP BY&lt;/code&gt;子句
&lt;/h4&gt;&lt;p&gt;如果 &lt;code&gt;total_copies&lt;/code&gt;的值对于相同的 &lt;code&gt;book_id&lt;/code&gt;是相同的（这通常是合理的，因为同一本书的总副本数通常是固定的），你可以将它添加到 &lt;code&gt;GROUP BY&lt;/code&gt;子句中。这样，它就可以在 &lt;code&gt;HAVING&lt;/code&gt;子句中引用了。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT
library_books.book_id,
title,
author,
genre,
publication_year,
COUNT(*) AS current_borrowers
FROM
library_books
JOIN
borrowing_records ON library_books.book_id = borrowing_records.book_id
AND borrowing_records.return_date IS NULL
GROUP BY
library_books.book_id,
title,
author,
genre,
publication_year,
library_books.total_copies -- 将 total_copies 添加到 GROUP BY 中
HAVING
library_books.total_copies = library_books.total_copies -- 现在可以引用了
ORDER BY
current_borrowers DESC,
title;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id="方案二在-having子句中使用聚合函数"&gt;方案二：在 &lt;code&gt;HAVING&lt;/code&gt;子句中使用聚合函数
&lt;/h4&gt;&lt;p&gt;如果你需要对 &lt;code&gt;total_copies&lt;/code&gt;进行某种聚合判断（虽然从你的条件看似乎只是相等判断，可能无需聚合），可以使用 &lt;code&gt;MAX&lt;/code&gt;或 &lt;code&gt;MIN&lt;/code&gt;（因为同一本书的 &lt;code&gt;total_copies&lt;/code&gt;应该相同，所以 &lt;code&gt;MAX(total_copies)&lt;/code&gt;就是它的值）。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT
library_books.book_id,
title,
author,
genre,
publication_year,
COUNT(*) AS current_borrowers
FROM
library_books
JOIN
borrowing_records ON library_books.book_id = borrowing_records.book_id
AND borrowing_records.return_date IS NULL
GROUP BY
library_books.book_id
HAVING
MAX(library_books.total_copies) = MAX(library_books.total_copies) -- 使用聚合函数
ORDER BY
current_borrowers DESC,
title;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="-关于你的-having-条件"&gt;💡 关于你的 HAVING 条件
&lt;/h3&gt;&lt;p&gt;你当前的 &lt;code&gt;HAVING&lt;/code&gt;条件是 &lt;code&gt;library_books.total_copies = library_books.total_copies&lt;/code&gt;。这个条件&lt;strong&gt;永远为真&lt;/strong&gt;，不会起到任何过滤作用。如果你只是想测试语法，这样做没问题。但如果你有实际的过滤需求，比如想找出当前借阅数等于总副本数的书（表示所有副本都已借出），你应该这样写：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;HAVING
COUNT(*) = MAX(library_books.total_copies)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="-总结与提醒-1"&gt;📌 总结与提醒
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;牢记规则&lt;/strong&gt;：&lt;code&gt;HAVING&lt;/code&gt;子句中只能使用 &lt;code&gt;GROUP BY&lt;/code&gt;后的列或聚合函数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优先使用 WHERE&lt;/strong&gt;：尽可能在 &lt;code&gt;WHERE&lt;/code&gt;子句中过滤掉不需要的行，这可以提高查询性能，因为它在分组前就减少了需要处理的数据量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;检查条件逻辑&lt;/strong&gt;：确保你的 &lt;code&gt;HAVING&lt;/code&gt;条件确实能表达你想要的过滤意图。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望这些解释能帮你解决问题并更好地理解 &lt;code&gt;HAVING&lt;/code&gt;子句的使用。&lt;/p&gt;
&lt;h2 id="count--condition"&gt;Count() &amp;amp; condition
&lt;/h2&gt;&lt;p&gt;MySQL 的 &lt;code&gt;COUNT()&lt;/code&gt;函数本身不直接接受条件作为参数，但你可以通过一些技巧来实现按条件计数。下面是几种常见的方法：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;语法示例&lt;/th&gt;
&lt;th&gt;适用场景&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;COUNT() + CASE WHEN&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SELECT COUNT(CASE WHEN condition THEN 1 END) FROM table_name;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;推荐&lt;/strong&gt;。灵活，可同时处理多个条件，可读性好。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;COUNT() + IF()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SELECT COUNT(IF(condition, 1, NULL)) FROM table_name;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与 &lt;code&gt;CASE WHEN&lt;/code&gt;类似，但可能更简洁。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;SUM() + CASE WHEN&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SELECT SUM(CASE WHEN condition THEN 1 ELSE 0 END) FROM table_name;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;效果与 &lt;code&gt;COUNT&lt;/code&gt;相同，但使用 &lt;code&gt;SUM&lt;/code&gt;进行累加。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;WHERE 子句&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SELECT COUNT(*) FROM table_name WHERE condition;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;简单直接&lt;/strong&gt;。仅需统计&lt;strong&gt;单一条件&lt;/strong&gt;时使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-详细说明与示例"&gt;💡 详细说明与示例
&lt;/h3&gt;&lt;h4 id="1-使用-countcase-when-推荐"&gt;1. 使用 &lt;code&gt;COUNT(CASE WHEN ...)&lt;/code&gt;(&lt;strong&gt;推荐&lt;/strong&gt;)
&lt;/h4&gt;&lt;p&gt;这是最通用和清晰的方法。&lt;code&gt;CASE&lt;/code&gt;语句用于对每一行进行条件判断：满足条件时返回 &lt;code&gt;1&lt;/code&gt;，否则返回 &lt;code&gt;NULL&lt;/code&gt;。&lt;code&gt;COUNT&lt;/code&gt;函数会忽略 &lt;code&gt;NULL&lt;/code&gt;，从而只对满足条件的行进行计数。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 统计所有年龄大于18岁的用户数量
SELECT COUNT(CASE WHEN age &amp;gt; 18 THEN 1 END) AS adult_count FROM users;
-- 在一个查询中同时统计多个条件
SELECT
COUNT(CASE WHEN age &amp;gt; 18 THEN 1 END) AS adult_count,
COUNT(CASE WHEN gender = &amp;#39;F&amp;#39; THEN 1 END) AS female_count
FROM users;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id="2-使用-countif"&gt;2. 使用 &lt;code&gt;COUNT(IF(...))&lt;/code&gt;
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;IF&lt;/code&gt;函数是 &lt;code&gt;CASE WHEN&lt;/code&gt;的简写形式，逻辑完全相同：条件为真返回 &lt;code&gt;1&lt;/code&gt;，为假返回 &lt;code&gt;NULL&lt;/code&gt;（&lt;code&gt;COUNT&lt;/code&gt;会忽略）。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 统计状态为 &amp;#39;active&amp;#39; 的用户数量
SELECT COUNT(IF(status = &amp;#39;active&amp;#39;, 1, NULL)) AS active_users FROM users;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id="3-使用-sumcase-when-"&gt;3. 使用 &lt;code&gt;SUM(CASE WHEN ...)&lt;/code&gt;
&lt;/h4&gt;&lt;p&gt;其逻辑是：满足条件时返回 &lt;code&gt;1&lt;/code&gt;，否则返回 &lt;code&gt;0&lt;/code&gt;，然后使用 &lt;code&gt;SUM&lt;/code&gt;函数将所有 &lt;code&gt;1&lt;/code&gt;加总，得到的结果与 &lt;code&gt;COUNT&lt;/code&gt;相同。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 使用SUM实现条件计数
SELECT SUM(CASE WHEN score &amp;gt;= 60 THEN 1 ELSE 0 END) AS pass_count FROM exams;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id="4-使用-where子句"&gt;4. 使用 &lt;code&gt;WHERE&lt;/code&gt;子句
&lt;/h4&gt;&lt;p&gt;如果只是简单地统计整个表中满足&lt;strong&gt;某一个条件&lt;/strong&gt;的行数，直接在 &lt;code&gt;WHERE&lt;/code&gt;子句中过滤，然后使用 &lt;code&gt;COUNT(*)&lt;/code&gt;是最简单明了的方式。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 统计所有年龄大于18岁的用户数量
SELECT COUNT(*) FROM users WHERE age &amp;gt; 18;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="-注意要点"&gt;⚠️ 注意要点
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;COUNT(column)&lt;/code&gt;与 &lt;code&gt;COUNT(\*)&lt;/code&gt;的区别&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;COUNT(column)&lt;/code&gt;统计的是该列&lt;strong&gt;非 NULL 值&lt;/strong&gt;的数量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;COUNT(*)&lt;/code&gt;统计的是表中的&lt;strong&gt;总行数&lt;/strong&gt;，不管列值是否为 NULL。&lt;/p&gt;
&lt;p&gt;在条件计数中，我们通常利用 &lt;code&gt;COUNT&lt;/code&gt;会忽略 &lt;code&gt;NULL&lt;/code&gt;的特性，让不满足条件的行返回 &lt;code&gt;NULL&lt;/code&gt;从而实现过滤。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能考量&lt;/strong&gt;：在大多数情况下，&lt;code&gt;COUNT(CASE WHEN...)&lt;/code&gt;和 &lt;code&gt;COUNT(IF(...))&lt;/code&gt;的性能是相似的。但如果要针对单一条件计数，使用 &lt;code&gt;WHERE&lt;/code&gt;子句通常是最快的，因为它能在计数前就过滤掉大量不需要的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-总结-14"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;虽然 &lt;code&gt;COUNT()&lt;/code&gt;函数不能直接传入条件参数，但你可以通过 &lt;code&gt;CASE WHEN&lt;/code&gt;或 &lt;code&gt;IF&lt;/code&gt;表达式 inside the &lt;code&gt;COUNT()&lt;/code&gt;来实现条件计数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于&lt;strong&gt;简单单一&lt;/strong&gt;的条件计数，直接使用 &lt;code&gt;WHERE&lt;/code&gt;子句 + &lt;code&gt;COUNT(*)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;对于需要在&lt;strong&gt;一个查询中统计多个不同条件&lt;/strong&gt;的情况，&lt;strong&gt;&lt;code&gt;COUNT(CASE WHEN ... END)&lt;/code&gt;&lt;/strong&gt; 是最灵活、可读性最好的选择。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望这些信息能帮助你更好地在 MySQL 中实现条件计数。&lt;/p&gt;
&lt;h2 id="offset"&gt;OFFSET
&lt;/h2&gt;&lt;p&gt;MySQL 中的 &lt;code&gt;OFFSET&lt;/code&gt;关键字主要用于&lt;strong&gt;控制查询结果集的起始返回位置&lt;/strong&gt;，它通常与 &lt;code&gt;LIMIT&lt;/code&gt;子句搭档，是实现分页查询的核心工具。下面我将为你详细解释它的用法、注意事项以及如何优化其性能。&lt;/p&gt;
&lt;h3 id="-一offset-和-limit-基础"&gt;📌 一、OFFSET 和 LIMIT 基础
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;OFFSET&lt;/code&gt;和 &lt;code&gt;LIMIT&lt;/code&gt;子句通常一起使用，其基本语法如下：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT column1, column2, ...
FROM table_name
LIMIT number_of_rows OFFSET start_position;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;LIMIT&lt;/code&gt;&lt;/strong&gt;：指定&lt;strong&gt;要返回的最大记录行数&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;OFFSET&lt;/code&gt;&lt;/strong&gt;：指定&lt;strong&gt;要跳过的行数&lt;/strong&gt;，即从结果集的第几行开始返回数据。&lt;strong&gt;&lt;code&gt;OFFSET&lt;/code&gt;是从 0 开始计数的&lt;/strong&gt;，这意味着 &lt;code&gt;OFFSET 0&lt;/code&gt;表示从第一行开始。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MySQL 也支持一种简写形式：&lt;code&gt;LIMIT offset, row_count&lt;/code&gt;，其等价于 &lt;code&gt;LIMIT row_count OFFSET offset&lt;/code&gt;。例如，&lt;code&gt;LIMIT 10, 5&lt;/code&gt;表示跳过前10条记录，返回接下来的5条记录。&lt;/p&gt;
&lt;h3 id="-二offset-在分页查询中的应用"&gt;📊 二、OFFSET 在分页查询中的应用
&lt;/h3&gt;&lt;p&gt;分页查询是 &lt;code&gt;OFFSET&lt;/code&gt;最经典的应用场景。其核心思路是根据当前页码和每页显示的记录数来计算 &lt;code&gt;OFFSET&lt;/code&gt;的值。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;页码 (pageIndex)&lt;/th&gt;
&lt;th&gt;每页记录数 (pageSize)&lt;/th&gt;
&lt;th&gt;OFFSET 计算公式 (pageSize * (pageIndex - 1))&lt;/th&gt;
&lt;th&gt;LIMIT (pageSize)&lt;/th&gt;
&lt;th&gt;实际含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;10 * (1-1) = &lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;从第1条开始，取10条记录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;10 * (2-1) = &lt;strong&gt;10&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;从第11条开始，取10条记录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;10 * (3-1) = &lt;strong&gt;20&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;从第21条开始，取10条记录&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例如，要查询 &lt;code&gt;users&lt;/code&gt;表中第3页的数据（假设每页10条记录）：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM users LIMIT 10 OFFSET 20;
-- 或者使用简写形式
SELECT * FROM users LIMIT 20, 10;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这条语句会跳过前20条记录，返回从第21条记录开始的10条记录。&lt;/p&gt;
&lt;h3 id="-三注意事项与常见问题"&gt;⚠️ 三、注意事项与常见问题
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;性能问题&lt;/strong&gt;：这是使用 &lt;code&gt;OFFSET&lt;/code&gt;时最需要警惕的一点。&lt;strong&gt;当 &lt;code&gt;OFFSET&lt;/code&gt;值非常大时，查询性能会显著下降&lt;/strong&gt;。因为数据库需要先扫描并跳过 &lt;code&gt;OFFSET&lt;/code&gt;指定的行数，然后才能返回所需的记录。对于海量数据的分页，这可能成为一个瓶颈。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据一致性&lt;/strong&gt;：在高并发环境下，如果数据源在分页查询过程中发生了变化（如新增或删除了记录），使用 &lt;code&gt;OFFSET&lt;/code&gt;可能会导致&lt;strong&gt;数据重复或丢失&lt;/strong&gt;（例如某一记录同时出现在两页中）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;与 &lt;code&gt;ORDER BY&lt;/code&gt;搭配使用&lt;/strong&gt;：&lt;strong&gt;强烈建议&lt;/strong&gt;在使用 &lt;code&gt;LIMIT&lt;/code&gt;和 &lt;code&gt;OFFSET&lt;/code&gt;时，一定要使用 &lt;code&gt;ORDER BY&lt;/code&gt;子句来确保结果的顺序是确定且可预期的。否则，每次查询返回的顺序可能不一致，导致分页混乱。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;超出记录数&lt;/strong&gt;：如果 &lt;code&gt;OFFSET&lt;/code&gt;的值超出了查询的记录总数，MySQL 不会报错，而是会返回一个空的结果集。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-四性能优化策略"&gt;🚀 四、性能优化策略
&lt;/h3&gt;&lt;p&gt;针对 &lt;code&gt;OFFSET&lt;/code&gt;在大数据量下的性能瓶颈，可以考虑以下优化方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用索引优化查询&lt;/strong&gt;：确保 &lt;code&gt;ORDER BY&lt;/code&gt;和 &lt;code&gt;WHERE&lt;/code&gt;子句中使用的字段上有合适的索引，这可以大大提高分页查询的速度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;键集分页（Keyset Pagination）&lt;/strong&gt;：也称为“游标分页”，这是一种更高效的分页方法。它不依赖于 &lt;code&gt;OFFSET&lt;/code&gt;，而是利用上一页最后一条记录的某个唯一且有序的字段（如自增主键 &lt;code&gt;id&lt;/code&gt;、时间戳）作为查询条件。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 传统 OFFSET 分页（性能较差）
SELECT * FROM orders ORDER BY id LIMIT 10 OFFSET 10000; -- 需要跳过前10000行
-- 键集分页（性能更好）
SELECT * FROM orders
WHERE id &amp;gt; (SELECT id FROM orders ORDER BY id LIMIT 1 OFFSET 10000) -- 子查询快速定位到起始id
ORDER BY id
LIMIT 10;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种方法的原理是，通过一个子查询先快速定位到起始点的 &lt;code&gt;id&lt;/code&gt;，然后通过 &lt;code&gt;WHERE id &amp;gt; last_seen_id&lt;/code&gt;来筛选数据，避免了扫描和跳过大量无关的行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-五其他应用场景示例"&gt;💡 五、其他应用场景示例
&lt;/h3&gt;&lt;p&gt;除了分页，&lt;code&gt;OFFSET&lt;/code&gt;还有一些巧妙的用法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;获取第N高的记录&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 查询员工表中第二高的薪水
SELECT DISTINCT salary FROM employees
ORDER BY salary DESC
LIMIT 1 OFFSET 1;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;随机抽样&lt;/strong&gt;（配合 &lt;code&gt;ORDER BY RAND()&lt;/code&gt;，注意性能）：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 随机抽取5条记录
SELECT * FROM products ORDER BY RAND() LIMIT 5;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-总结-15"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;OFFSET&lt;/code&gt;是 MySQL 中实现分页查询的一个简单直接的工具，但在处理大量数据时需要特别注意其性能开销。&lt;strong&gt;对于大多数中小型数据量的分页需求，&lt;code&gt;OFFSET&lt;/code&gt;完全能够胜任&lt;/strong&gt;。然而，一旦遇到深度分页（即 &lt;code&gt;OFFSET&lt;/code&gt;值非常大）导致性能下降时，&lt;strong&gt;键集分页（基于游标的分页）是首选的优化方案&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;记住，&lt;strong&gt;总是使用 &lt;code&gt;ORDER BY&lt;/code&gt;来保证分页顺序的确定性&lt;/strong&gt;，并根据实际的数据量和并发情况，选择最适合的分页策略。&lt;/p&gt;
&lt;p&gt;希望这些信息能帮助你更好地理解和使用 MySQL 中的 &lt;code&gt;OFFSET&lt;/code&gt;！&lt;/p&gt;
&lt;h2 id="窗口函数"&gt;窗口函数
&lt;/h2&gt;&lt;p&gt;MySQL 中的窗口函数是一种非常强大的数据分析工具，它允许你在不改变查询结果集行数的情况下，对一组相关的行（称为“窗口”）执行计算，并为每一行返回一个基于其所在窗口的计算结果。这与传统的 &lt;code&gt;GROUP BY&lt;/code&gt;聚合不同，窗口函数会&lt;strong&gt;保留所有原始行&lt;/strong&gt;的细节，同时还能提供聚合或排序后的结果。&lt;/p&gt;
&lt;p&gt;下面是一个对比表格，帮助你快速理解窗口函数与普通聚合函数的区别：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;窗口函数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;普通聚合函数 + GROUP BY&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;结果集行数&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;保持与原表相同&lt;/td&gt;
&lt;td&gt;合并为分组后的行数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;计算方式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;基于定义的“窗口”计算，为每行返回结果&lt;/td&gt;
&lt;td&gt;基于分组计算，每组返回一个结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;功能范围&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;排名、累计值、移动平均、前后行比较等&lt;/td&gt;
&lt;td&gt;统计总数、平均值、最大值、最小值等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;语法关键词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;OVER()&lt;/code&gt;子句&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GROUP BY&lt;/code&gt;子句&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id="-窗口函数核心语法"&gt;🔍 窗口函数核心语法
&lt;/h3&gt;&lt;p&gt;窗口函数的基本语法结构如下：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;窗口函数&amp;gt;(&amp;lt;参数&amp;gt;) OVER (
[PARTITION BY &amp;lt;分区字段&amp;gt;]
[ORDER BY &amp;lt;排序字段&amp;gt;]
[ROWS/RANGE &amp;lt;窗口框架&amp;gt;]
)
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;窗口函数&amp;gt;(&amp;lt;参数&amp;gt;)&lt;/code&gt;&lt;/strong&gt;：指定要使用的窗口函数，例如 &lt;code&gt;ROW_NUMBER()&lt;/code&gt;, &lt;code&gt;SUM(salary)&lt;/code&gt;, &lt;code&gt;LAG(column)&lt;/code&gt;等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;OVER()&lt;/code&gt;&lt;/strong&gt;：这是窗口函数的标志性关键字，所有窗口函数都必须使用此子句来定义窗口的范围和行为。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;PARTITION BY&lt;/code&gt;&lt;/strong&gt;：可选。用于将数据行划分为不同的分区（类似于 &lt;code&gt;GROUP BY&lt;/code&gt;的分组，但不会合并行），窗口函数会在&lt;strong&gt;每个分区内独立执行&lt;/strong&gt;计算。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;ORDER BY&lt;/code&gt;&lt;/strong&gt;：可选。用于指定分区内数据的&lt;strong&gt;排序顺序&lt;/strong&gt;，这会影响序号分配、累计计算和滑动窗口的范围。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;窗口框架（&lt;code&gt;ROWS/RANGE&lt;/code&gt;）&lt;/strong&gt;：可选。用于定义计算窗口函数时考虑的行的&lt;strong&gt;精确范围&lt;/strong&gt;，例如“从当前行之前的2行到当前行”。这是窗口函数强大和灵活的关键所在。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;窗口框架常用选项示例&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW&lt;/code&gt;：从分区&lt;strong&gt;第一行到当前行&lt;/strong&gt;（默认窗口范围，常用于累计计算）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ROWS BETWEEN 2 PRECEDING AND CURRENT ROW&lt;/code&gt;：从&lt;strong&gt;当前行及前2行&lt;/strong&gt;（共3行，常用于移动平均）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING&lt;/code&gt;：从&lt;strong&gt;前一行到后一行&lt;/strong&gt;（共3行，滑动窗口）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RANGE BETWEEN INTERVAL 1 DAY PRECEDING AND CURRENT ROW&lt;/code&gt;：基于列值（如日期）的逻辑范围，包含与当前行值相差在1天内的所有行。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="-常用窗口函数分类与示例"&gt;📊 常用窗口函数分类与示例
&lt;/h3&gt;&lt;p&gt;窗口函数大致可以分为以下几类：&lt;/p&gt;
&lt;h4 id="1-排序函数"&gt;1. 排序函数
&lt;/h4&gt;&lt;p&gt;为每一行分配一个序号或排名。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;ROW_NUMBER()&lt;/code&gt;&lt;/strong&gt;：为每一行分配一个&lt;strong&gt;唯一的连续序号&lt;/strong&gt;（即使值相同，序号也不同），例如 &lt;code&gt;1, 2, 3, 4,...&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;RANK()&lt;/code&gt;&lt;/strong&gt;：为每一行分配排名，&lt;strong&gt;相同值获得相同排名，并且会跳过后续的排名序号&lt;/strong&gt;，例如 &lt;code&gt;1, 2, 2, 4,...&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;DENSE_RANK()&lt;/code&gt;&lt;/strong&gt;：为每一行分配排名，相同值获得相同排名，但&lt;strong&gt;后续排名序号是连续的&lt;/strong&gt;，不会跳过，例如 &lt;code&gt;1, 2, 2, 3,...&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 示例：计算员工在部门内的薪资排名
SELECT
department,
name,
salary,
ROW_NUMBER() OVER (PARTITION BY department ORDER BY salary DESC) AS row_num,
RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS rank_num,
DENSE_RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS dense_rank
FROM employees;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id="2-聚合函数用作窗口函数"&gt;2. 聚合函数（用作窗口函数）
&lt;/h4&gt;&lt;p&gt;常见的聚合函数（如 &lt;code&gt;SUM&lt;/code&gt;, &lt;code&gt;AVG&lt;/code&gt;, &lt;code&gt;MAX&lt;/code&gt;, &lt;code&gt;MIN&lt;/code&gt;, &lt;code&gt;COUNT&lt;/code&gt;）与 &lt;code&gt;OVER()&lt;/code&gt;子句结合后，就变成了窗口函数，可以在保留所有行的同时进行聚合计算。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 示例：计算每位员工薪资在部门内的占比和累计薪资
SELECT
department,
name,
salary,
SUM(salary) OVER (PARTITION BY department) AS dept_total_salary, -- 部门总薪资
salary / SUM(salary) OVER (PARTITION BY department) * 100 AS salary_percentage, -- 薪资占比
SUM(salary) OVER (PARTITION BY department ORDER BY salary DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_salary -- 部门内累计薪资
FROM employees;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id="3-分布函数"&gt;3. 分布函数
&lt;/h4&gt;&lt;p&gt;用于计算值在窗口内的相对位置或分布。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;PERCENT_RANK()&lt;/code&gt;&lt;/strong&gt;：计算行的&lt;strong&gt;百分比排名&lt;/strong&gt;，范围是[0, 1]。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;CUME_DIST()&lt;/code&gt;&lt;/strong&gt;：计算行的&lt;strong&gt;累积分布&lt;/strong&gt;，即值小于或等于当前行值的行数占总行数的比例，范围是(0, 1]。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="4-偏移函数"&gt;4. 偏移函数
&lt;/h4&gt;&lt;p&gt;访问当前行之前或之后的行中的数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;LAG(column, n)&lt;/code&gt;&lt;/strong&gt;：返回当前行&lt;strong&gt;之前第n行&lt;/strong&gt;的值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;LEAD(column, n)&lt;/code&gt;&lt;/strong&gt;：返回当前行&lt;strong&gt;之后第n行&lt;/strong&gt;的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 示例：计算销售额的环比增长
SELECT
month,
sales_amount,
LAG(sales_amount, 1) OVER (ORDER BY month) AS prev_month_sales, -- 上月销售额
(sales_amount - LAG(sales_amount, 1) OVER (ORDER BY month)) / LAG(sales_amount, 1) OVER (ORDER BY month) * 100 AS growth_rate -- 环比增长率
FROM sales_data;
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h3 id="-窗口函数的应用场景"&gt;🎯 窗口函数的应用场景
&lt;/h3&gt;&lt;p&gt;窗口函数在许多场景下都非常有用，以下是一些典型的应用案例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;排名与分组Top-N&lt;/strong&gt;：如获取每个部门薪资最高的员工、商品销量排名等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;累计计算&lt;/strong&gt;：如计算截至当月的累计销售额、年度累计预算消耗等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;移动平均与滑动窗口计算&lt;/strong&gt;：如计算股票7日均线、最近3个月的平均销售额等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;同比/环比分析&lt;/strong&gt;：利用 &lt;code&gt;LAG&lt;/code&gt;/&lt;code&gt;LEAD&lt;/code&gt;函数计算与上月或去年同期的变化率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据差异对比&lt;/strong&gt;：如计算每个员工薪资与部门平均薪资的差值。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id="-性能优化与注意事项"&gt;⚠️ 性能优化与注意事项
&lt;/h3&gt;&lt;p&gt;虽然窗口功能强大，但在使用时也需要注意以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;索引是关键&lt;/strong&gt;：为 &lt;code&gt;PARTITION BY&lt;/code&gt;和 &lt;code&gt;ORDER BY&lt;/code&gt;子句中使用的字段建立索引，可以显著提升窗口函数的性能。一个覆盖 &lt;code&gt;(PARTITION BY列, ORDER BY列)&lt;/code&gt;的复合索引通常效果最好。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;过滤优先&lt;/strong&gt;：尽量在子查询或 &lt;code&gt;WHERE&lt;/code&gt;子句中提前过滤数据，减少进入窗口计算的数据量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;谨慎使用范围框架&lt;/strong&gt;：&lt;code&gt;RANGE&lt;/code&gt;框架基于逻辑范围，在处理重复值或范围查询时可能比 &lt;code&gt;ROWS&lt;/code&gt;（基于物理行）更耗资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免过度使用&lt;/strong&gt;：单个查询中不宜使用过多的窗口函数（通常建议少于5个），复杂的窗口帧定义也会增加计算开销。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id="-总结-16"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;MySQL 的窗口函数通过 &lt;code&gt;OVER()&lt;/code&gt;子句提供了强大的数据分析能力，允许你在保留原始行细节的同时，执行复杂的排名、聚合和跨行计算。掌握 &lt;code&gt;PARTITION BY&lt;/code&gt;、&lt;code&gt;ORDER BY&lt;/code&gt;和窗口框架（&lt;code&gt;ROWS/RANGE&lt;/code&gt;）的用法，是灵活运用窗口函数的关键。&lt;/p&gt;
&lt;p&gt;希望以上介绍能帮助你理解和运用 MySQL 窗口函数。如有更多问题，欢迎继续询问！&lt;/p&gt;
&lt;h2 id="partition-by"&gt;PARTITION BY
&lt;/h2&gt;&lt;p&gt;了解 &lt;code&gt;PARTITION BY&lt;/code&gt;（用于窗口函数）和 &lt;code&gt;GROUP BY&lt;/code&gt;的核心区别，能帮助你更好地进行数据分析和汇总。它们虽然都涉及“分组”，但目的和结果截然不同。&lt;/p&gt;
&lt;p&gt;为了让你能快速把握核心区别，我准备了一个对比表格：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;GROUP BY&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;PARTITION BY&lt;/strong&gt; (窗口函数)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;核心目的&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;聚合数据&lt;/strong&gt;，生成汇总结果&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;分区计算&lt;/strong&gt;，保留所有原始行并添加计算结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;结果集行数&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;减少&lt;/strong&gt;（每组返回一行）&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;不变&lt;/strong&gt;（与原表行数相同）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;常用函数&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;聚合函数（&lt;code&gt;SUM&lt;/code&gt;, &lt;code&gt;COUNT&lt;/code&gt;, &lt;code&gt;AVG&lt;/code&gt;, &lt;code&gt;MAX&lt;/code&gt;, &lt;code&gt;MIN&lt;/code&gt;）&lt;/td&gt;
&lt;td&gt;窗口函数（&lt;code&gt;RANK&lt;/code&gt;, &lt;code&gt;ROW_NUMBER&lt;/code&gt;, &lt;code&gt;SUM() OVER&lt;/code&gt;, &lt;code&gt;LAG&lt;/code&gt;, &lt;code&gt;LEAD&lt;/code&gt;）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;语法位置&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SELECT&lt;/code&gt;语句中的独立子句&lt;/td&gt;
&lt;td&gt;位于窗口函数的 &lt;code&gt;OVER()&lt;/code&gt;子句内&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;统计汇总（如部门总人数、平均工资）&lt;/td&gt;
&lt;td&gt;排名分析、累计计算、同比环比、移动平均&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id="-工作原理与输出结果"&gt;🔍 工作原理与输出结果
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;GROUP BY&lt;/code&gt;&lt;/strong&gt; 会将指定列中值相同的行&lt;strong&gt;归并为一行&lt;/strong&gt;。你只能查询分组列和聚合函数的结果，原始行的细节会丢失。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 计算每个部门的平均工资（结果行数等于部门数量）
SELECT department, AVG(salary) AS avg_salary
FROM employees
GROUP BY department;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;输出&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;department&lt;/th&gt;
&lt;th&gt;avg_salary&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;财务部&lt;/td&gt;
&lt;td&gt;1500.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;人事部&lt;/td&gt;
&lt;td&gt;5500.00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;PARTITION BY&lt;/code&gt;&lt;/strong&gt; 会将数据按指定列划分为逻辑分区，但&lt;strong&gt;不会减少行数&lt;/strong&gt;。窗口函数会在每个分区内独立计算，结果作为新列添加到每一行旁边，原始数据得以保留。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 计算每个员工工资及其所在部门的平均工资（结果行数等于员工数）
SELECT emp_id, department, salary,
AVG(salary) OVER (PARTITION BY department) AS dept_avg_salary
FROM employees;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;输出&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;emp_id&lt;/th&gt;
&lt;th&gt;department&lt;/th&gt;
&lt;th&gt;salary&lt;/th&gt;
&lt;th&gt;dept_avg_salary&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;财务部&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;1500.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;财务部&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;1500.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;人事部&lt;/td&gt;
&lt;td&gt;5500&lt;/td&gt;
&lt;td&gt;5500.00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="-典型应用场景"&gt;🎯 典型应用场景
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;排名分析 (使用 &lt;code&gt;PARTITION BY&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;查询每个部门内的员工工资排名。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT name, department, salary,
RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS dept_rank
FROM employees;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;累计计算 (使用 &lt;code&gt;PARTITION BY&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;计算每个部门内，按工资升序的累计工资。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT dept_id, emp_id, salary,
SUM(salary) OVER (PARTITION BY dept_id ORDER BY salary) AS cumulative_salary
FROM employees;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;汇总统计 (使用 &lt;code&gt;GROUP BY&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;统计每个部门的员工数量和平均工资。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT dept_id, COUNT(emp_id) AS employee_count, AVG(salary) AS avg_salary
FROM employees
GROUP BY dept_id;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id="-注意事项与常见误区"&gt;⚠️ 注意事项与常见误区
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;语法错误&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;GROUP BY&lt;/code&gt;查询中，&lt;code&gt;SELECT&lt;/code&gt;后的非聚合列必须出现在 &lt;code&gt;GROUP BY&lt;/code&gt;子句中，否则会报错。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;窗口函数（包含 &lt;code&gt;PARTITION BY&lt;/code&gt;）&lt;strong&gt;不能&lt;/strong&gt;直接在 &lt;code&gt;WHERE&lt;/code&gt;子句中用于筛选。必须先在外层套用子查询。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 错误：直接筛选排名
SELECT *, RANK() OVER (PARTITION BY dept ORDER BY salary DESC) AS rnk
FROM employees
WHERE rnk &amp;lt;= 3; -- 报错，WHERE执行时rnk列还不存在
-- 正确：使用子查询
SELECT *
FROM (
SELECT *, RANK() OVER (PARTITION BY dept ORDER BY salary DESC) AS rnk
FROM employees
) AS ranked
WHERE rnk &amp;lt;= 3;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能差异&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GROUP BY&lt;/code&gt;通常需要对数据进行排序和分组，可能会生成临时表，开销较大。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PARTITION BY&lt;/code&gt;通常只需扫描数据并划分窗口，&lt;strong&gt;性能通常优于&lt;/strong&gt;复杂的、多层嵌套的 &lt;code&gt;GROUP BY&lt;/code&gt;查询（例如，需要多次自连接或子查询才能实现相同分析目的时）。为分区字段和排序字段创建复合索引可以进一步提升性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="-如何选择-2"&gt;💡 如何选择？
&lt;/h3&gt;&lt;p&gt;根据你的目标做出选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要&lt;strong&gt;汇总统计&lt;/strong&gt;（如总计、平均值、计数），且不需要查看原始明细时 → 使用 &lt;strong&gt;&lt;code&gt;GROUP BY&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;需要&lt;strong&gt;在保留所有原始行细节的同时&lt;/strong&gt;，进行分组内的排名、计算累计值、访问前后行数据或添加分组汇总值作为新列 → 使用 &lt;strong&gt;&lt;code&gt;PARTITION BY&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望这些解释和示例能帮助你清晰理解两者区别，并在实际查询中做出最佳选择！&lt;/p&gt;
&lt;h2 id="count"&gt;count
&lt;/h2&gt;&lt;p&gt;你提供的SQL查询报错，主要是因为&lt;strong&gt;错误地在聚合函数&lt;code&gt;COUNT()&lt;/code&gt;中直接嵌套了完整的&lt;code&gt;SELECT&lt;/code&gt;子查询&lt;/strong&gt;。&lt;code&gt;COUNT()&lt;/code&gt;函数应该作用于列名、表达式或子查询返回的列，而不是整个&lt;code&gt;SELECT ... FROM ...&lt;/code&gt;语句。&lt;/p&gt;
&lt;h3 id="-错误分析与修正"&gt;🔍 错误分析与修正
&lt;/h3&gt;&lt;p&gt;你的原查询：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;select round(
count( -- 错误：COUNT()内不能直接接SELECT子查询
select f.player_id, f.first_login
from (...)
)
/ count( -- 错误：COUNT()内不能直接接SELECT子查询
select distinct player_id
)
, 2
) fraction;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;错误原因&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;COUNT()&lt;/code&gt;函数接受的是列名、表达式或**（但你的写法是直接放入了一个完整的&lt;code&gt;SELECT&lt;/code&gt;子查询）。&lt;/li&gt;
&lt;li&gt;子查询 &lt;code&gt;(select distinct player_id)&lt;/code&gt;缺少 &lt;code&gt;FROM&lt;/code&gt;子句，语法不完整。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-修改后的查询"&gt;✅ 修改后的查询
&lt;/h3&gt;&lt;p&gt;你的目标是计算&lt;strong&gt;在首次登录后第二天再次登录的玩家比例&lt;/strong&gt;。这是一个经典的分式计算，分子是&lt;strong&gt;在首次登录后第二天也登录的玩家数量&lt;/strong&gt;，分母是&lt;strong&gt;所有玩家数量&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这是修正后的写法，使用了&lt;strong&gt;子查询&lt;/strong&gt;来分别计算分子和分母：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT ROUND(
( -- 分子：计算在首次登录后第二天也登录的玩家数量
SELECT COUNT(DISTINCT a1.player_id)
FROM Activity a1
JOIN (
-- 先找到每个玩家的首次登录日期
SELECT player_id, MIN(event_date) AS first_login
FROM Activity
GROUP BY player_id
) AS first_logins ON a1.player_id = first_logins.player_id
WHERE DATEDIFF(a1.event_date, first_logins.first_login) = 1
)
/ -- 除以
( -- 分母：计算所有玩家的数量
SELECT COUNT(DISTINCT player_id)
FROM Activity
)
, 2) AS fraction;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;分子子查询&lt;/strong&gt;：通过将&lt;code&gt;Activity&lt;/code&gt;表与每个玩家的首次登录日期（由子查询&lt;code&gt;first_logins&lt;/code&gt;计算）进行连接，然后筛选出与首次登录日期相差1天的记录（&lt;code&gt;DATEDIFF(...) = 1&lt;/code&gt;），最后统计满足条件的&lt;strong&gt;去重玩家数&lt;/strong&gt;（&lt;code&gt;COUNT(DISTINCT ...)&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分母子查询&lt;/strong&gt;：简单统计&lt;code&gt;Activity&lt;/code&gt;表中所有&lt;strong&gt;去重的玩家数量&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;除法与四舍五入&lt;/strong&gt;：将分子除以分母，并使用&lt;code&gt;ROUND(..., 2)&lt;/code&gt;将结果保留两位小数。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-其他实现思路使用sumcase"&gt;💡 其他实现思路（使用SUM+CASE）
&lt;/h3&gt;&lt;p&gt;你也可以使用&lt;code&gt;SUM&lt;/code&gt;配合&lt;code&gt;CASE&lt;/code&gt;语句来计算分子，逻辑是：&lt;strong&gt;如果某个玩家在首次登录的第二天有登录记录，则计数1，否则计数0，然后对所有玩家的这个标志求和&lt;/strong&gt;。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT ROUND(
SUM( -- 对每个玩家的登录标志进行求和
CASE WHEN DATEDIFF(a.event_date, first_logins.first_login) = 1 THEN 1 ELSE 0 END
)
/ COUNT(DISTINCT first_logins.player_id) -- 除以总玩家数
, 2) AS fraction
FROM Activity a
JOIN (
SELECT player_id, MIN(event_date) AS first_login
FROM Activity
GROUP BY player_id
) AS first_logins ON a.player_id = first_logins.player_id;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="-重要提醒-2"&gt;⚠️ 重要提醒
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能注意&lt;/strong&gt;：如果你的&lt;code&gt;Activity&lt;/code&gt;表数据量非常大，上述查询可能会比较耗时。确保在&lt;code&gt;player_id&lt;/code&gt;和&lt;code&gt;event_date&lt;/code&gt;字段上建立索引可以显著提升性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分母为0&lt;/strong&gt;：如果分母（总玩家数）为0，除法操作会导致错误。在实际应用中，你可能需要考虑使用&lt;code&gt;NULLIF&lt;/code&gt;函数来处理这种情况，例如：&lt;code&gt;... / NULLIF((SELECT COUNT(...)), 0) ...&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望这些解释能帮你理解错误原因并成功解决问题。&lt;/p&gt;
&lt;h2 id="交集"&gt;交集
&lt;/h2&gt;&lt;p&gt;MySQL 本身并不直接支持 &lt;code&gt;INTERSECT&lt;/code&gt;操作符来求两个子查询的交集。不过，你可以通过其他方法来实现相同的效果。下面我会为你介绍两种最常用的方法。&lt;/p&gt;
&lt;h3 id="-常用方法介绍"&gt;📌 常用方法介绍
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;使用 &lt;code&gt;INNER JOIN&lt;/code&gt;&lt;/strong&gt;：这是最直接和常见的方法。如果两个子查询有可以关联的字段，你可以将它们进行内连接，只返回那些在两个结果集中都存在的记录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用 &lt;code&gt;EXISTS&lt;/code&gt;或 &lt;code&gt;IN&lt;/code&gt;子查询&lt;/strong&gt;：这种方法适用于判断一个子查询的结果是否存在于另一个子查询中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-示例说明-1"&gt;📊 示例说明
&lt;/h3&gt;&lt;p&gt;假设我们有两个简单的子查询，它们都返回一个包含 &lt;code&gt;id&lt;/code&gt;字段的结果集：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;子查询 A (&lt;code&gt;subquery_a&lt;/code&gt;)&lt;/strong&gt;:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT id FROM table_a WHERE condition_a;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;子查询 B (&lt;code&gt;subquery_b&lt;/code&gt;)&lt;/strong&gt;:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT id FROM table_b WHERE condition_b;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="方法一使用-inner-join连接子查询"&gt;方法一：使用 &lt;code&gt;INNER JOIN&lt;/code&gt;连接子查询
&lt;/h4&gt;&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT a.id
FROM (
SELECT id FROM table_a WHERE condition_a
) AS a
INNER JOIN (
SELECT id FROM table_b WHERE condition_b
) AS b ON a.id = b.id;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：使用 &lt;code&gt;INNER JOIN&lt;/code&gt;时，务必确保连接条件（如 &lt;code&gt;a.id = b.id&lt;/code&gt;）中的字段在两个子查询中都存在且含义一致。&lt;/p&gt;
&lt;h4 id="方法二使用-exists子查询"&gt;方法二：使用 &lt;code&gt;EXISTS&lt;/code&gt;子查询
&lt;/h4&gt;&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT id
FROM table_a a
WHERE condition_a
AND EXISTS (
SELECT 1
FROM table_b b
WHERE condition_b
AND a.id = b.id
);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你也可以使用 &lt;code&gt;IN&lt;/code&gt;子句：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT id
FROM table_a
WHERE condition_a
AND id IN (
SELECT id
FROM table_b
WHERE condition_b
);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;EXISTS&lt;/code&gt;和 &lt;code&gt;IN&lt;/code&gt;在这个场景下效果类似，但 &lt;code&gt;EXISTS&lt;/code&gt;在处理 NULL 值或大数据集时可能更有优势。&lt;/p&gt;
&lt;h3 id="-注意事项-4"&gt;⚠️ 注意事项
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能优化&lt;/strong&gt;：当子查询的结果集很大时，交集操作的性能可能会成为瓶颈。确保&lt;strong&gt;用于连接或判断的字段（如 &lt;code&gt;id&lt;/code&gt;）上有索引&lt;/strong&gt;可以显著提升查询速度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据一致性&lt;/strong&gt;：确保两个子查询中用于比较的字段数据类型兼容，并且含义一致，否则可能无法得到预期的交集结果，或出现比较错误。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NULL 值处理&lt;/strong&gt;：在使用 &lt;code&gt;IN&lt;/code&gt;进行判断时，需要注意 &lt;code&gt;NULL&lt;/code&gt;值的行为。如果子查询可能返回 &lt;code&gt;NULL&lt;/code&gt;，&lt;code&gt;IN&lt;/code&gt;的条件可能不会按预期工作。此时，&lt;code&gt;EXISTS&lt;/code&gt;通常是更安全的选择。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-如何选择方法"&gt;💡 如何选择方法？
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;当两个子查询结果集都&lt;strong&gt;比较大&lt;/strong&gt;，并且你&lt;strong&gt;需要基于多个字段进行关联&lt;/strong&gt;时，&lt;code&gt;INNER JOIN&lt;/code&gt;方法通常更合适。&lt;/li&gt;
&lt;li&gt;如果子查询B的结果集&lt;strong&gt;很小&lt;/strong&gt;，或者你只想根据&lt;strong&gt;单个字段的存在性&lt;/strong&gt;进行判断，那么 &lt;code&gt;EXISTS&lt;/code&gt;或 &lt;code&gt;IN&lt;/code&gt;子查询可能更简洁直观。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望这些信息能帮助你成功在 MySQL 中求出两个子查询的交集。&lt;/p&gt;
&lt;h2 id="case-when"&gt;CASE WHEN
&lt;/h2&gt;&lt;p&gt;了解 SQL 中的 &lt;code&gt;CASE&lt;/code&gt;表达式能让你写查询时更灵活。它主要有两种形式：简单 &lt;code&gt;CASE&lt;/code&gt;表达式和搜索 &lt;code&gt;CASE&lt;/code&gt;表达式。下面这个表格汇总了它们的核心区别，帮你快速把握要点。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;简单 CASE 表达式&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;搜索 CASE 表达式&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;语法结构&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;CASE&lt;/code&gt;后紧跟一个表达式或列名&lt;/td&gt;
&lt;td&gt;&lt;code&gt;CASE&lt;/code&gt;后直接跟 &lt;code&gt;WHEN&lt;/code&gt;，无需初始表达式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;比较方式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;仅能进行&lt;strong&gt;等值比较&lt;/strong&gt; (&lt;code&gt;=&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;可进行&lt;strong&gt;任意条件判断&lt;/strong&gt; (如 &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;LIKE&lt;/code&gt;, &lt;code&gt;BETWEEN&lt;/code&gt;, &lt;code&gt;IS NULL&lt;/code&gt;等)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;灵活性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;较低，仅针对单一表达式的值进行匹配&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;极高&lt;/strong&gt;，可组合多个字段、使用函数进行复杂判断&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;枚举值转换、简单的值映射&lt;/td&gt;
&lt;td&gt;范围判断、多条件组合、复杂业务逻辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;处理 NULL&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;无法&lt;/strong&gt;直接匹配 &lt;code&gt;NULL&lt;/code&gt;值（&lt;code&gt;WHEN NULL&lt;/code&gt;无效）&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;可以&lt;/strong&gt;处理 &lt;code&gt;NULL&lt;/code&gt;值（&lt;code&gt;WHEN column IS NULL&lt;/code&gt;）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;性能参考&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;初始表达式仅计算一次，&lt;strong&gt;可能略快&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;每个条件都需计算，但在复杂条件下通常更优&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id="-语法详解"&gt;🧩 语法详解
&lt;/h3&gt;&lt;h4 id="1-简单-case-表达式"&gt;1. 简单 CASE 表达式
&lt;/h4&gt;&lt;p&gt;简单 &lt;code&gt;CASE&lt;/code&gt;表达式将一个表达式或列名与一系列值进行&lt;strong&gt;等值比较&lt;/strong&gt;。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;CASE expression_to_compare
WHEN value1 THEN result1
WHEN value2 THEN result2
...
[ELSE default_result]
END
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;执行逻辑&lt;/strong&gt;：计算 &lt;code&gt;expression_to_compare&lt;/code&gt;的值，然后&lt;strong&gt;按顺序&lt;/strong&gt;与每个 &lt;code&gt;WHEN&lt;/code&gt;子句中的 &lt;code&gt;value&lt;/code&gt;进行等值比较。返回第一个匹配的 &lt;code&gt;THEN&lt;/code&gt;后的结果。如果没有匹配项且没有 &lt;code&gt;ELSE&lt;/code&gt;子句，则返回 &lt;code&gt;NULL&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="2-搜索-case-表达式"&gt;2. 搜索 CASE 表达式
&lt;/h4&gt;&lt;p&gt;搜索 &lt;code&gt;CASE&lt;/code&gt;表达式允许每个 &lt;code&gt;WHEN&lt;/code&gt;子句使用&lt;strong&gt;独立的布尔条件&lt;/strong&gt;进行判断。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;CASE
WHEN condition1 THEN result1
WHEN condition2 THEN result2
...
[ELSE default_result]
END
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;执行逻辑&lt;/strong&gt;：&lt;strong&gt;按顺序&lt;/strong&gt;评估每个 &lt;code&gt;WHEN&lt;/code&gt;子句的 &lt;code&gt;condition&lt;/code&gt;。返回第一个为真（TRUE）的条件对应的 &lt;code&gt;THEN&lt;/code&gt;结果。如果没有条件为真且没有 &lt;code&gt;ELSE&lt;/code&gt;子句，则返回 &lt;code&gt;NULL&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="-适用场景与示例"&gt;🎯 适用场景与示例
&lt;/h3&gt;&lt;h4 id="简单-case-表达式"&gt;简单 CASE 表达式
&lt;/h4&gt;&lt;p&gt;适用于&lt;strong&gt;等值转换&lt;/strong&gt;，例如将编码映射为可读文本：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 将性别编码转换为中文描述
SELECT
name,
CASE gender_code
WHEN &amp;#39;M&amp;#39; THEN &amp;#39;男&amp;#39;
WHEN &amp;#39;F&amp;#39; THEN &amp;#39;女&amp;#39;
ELSE &amp;#39;其他&amp;#39;
END AS gender_text
FROM users;
-- 根据部门ID调整产品价格
UPDATE products
SET price = CASE category_id
WHEN 1 THEN price * 1.1 -- 电子产品提价10%
WHEN 2 THEN price * 0.9 -- 图书降价10%
ELSE price
END;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id="搜索-case-表达式"&gt;搜索 CASE 表达式
&lt;/h4&gt;&lt;p&gt;适用于&lt;strong&gt;范围判断、复杂条件组合&lt;/strong&gt;及&lt;strong&gt;条件聚合&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 根据分数划分等级
SELECT
name,
score,
CASE
WHEN score &amp;gt;= 90 THEN &amp;#39;优秀&amp;#39;
WHEN score &amp;gt;= 80 THEN &amp;#39;良好&amp;#39;
WHEN score &amp;gt;= 60 THEN &amp;#39;及格&amp;#39;
ELSE &amp;#39;不及格&amp;#39;
END AS grade
FROM exam_results;
-- 条件聚合：统计不同状态的订单数量
SELECT
COUNT(*) AS total_orders,
SUM(CASE WHEN status = &amp;#39;paid&amp;#39; THEN 1 ELSE 0 END) AS paid_orders,
SUM(CASE WHEN amount &amp;gt; 1000 THEN 1 ELSE 0 END) AS high_value_orders
FROM orders;
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h3 id="-重要注意事项-2"&gt;⚠️ 重要注意事项
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;条件顺序&lt;/strong&gt;：&lt;code&gt;CASE&lt;/code&gt;表达式按顺序判断条件。&lt;strong&gt;一旦某个条件被满足，后续条件将不再评估&lt;/strong&gt;。因此，应将更具体或更可能满足的条件放在前面。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ELSE 子句&lt;/strong&gt;：&lt;code&gt;ELSE&lt;/code&gt;子句是&lt;strong&gt;可选的&lt;/strong&gt;，但强烈建议总是包含它。如果不指定 &lt;code&gt;ELSE&lt;/code&gt;且所有条件都不满足，表达式将返回 &lt;code&gt;NULL&lt;/code&gt;，这可能导致意外结果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;返回值类型一致&lt;/strong&gt;：确保所有 &lt;code&gt;THEN&lt;/code&gt;子句和 &lt;code&gt;ELSE&lt;/code&gt;子句返回的值的&lt;strong&gt;数据类型兼容或统一&lt;/strong&gt;，否则可能出错。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能考量&lt;/strong&gt;：虽然简单 &lt;code&gt;CASE&lt;/code&gt;可能在某些情况下稍快，但搜索 &lt;code&gt;CASE&lt;/code&gt;因其灵活性而更常用。对于复杂计算，可考虑使用派生表或公共表表达式（CTE）来避免重复计算。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结尾的 END&lt;/strong&gt;：千万不要忘记以 &lt;code&gt;END&lt;/code&gt;关键字结束 &lt;code&gt;CASE&lt;/code&gt;表达式，否则会导致语法错误。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id="-总结-17"&gt;💡 总结
&lt;/h3&gt;&lt;p&gt;简单来说，&lt;strong&gt;简单 &lt;code&gt;CASE&lt;/code&gt;表达式用于“是什么”的等值判断，而搜索 &lt;code&gt;CASE&lt;/code&gt;表达式用于“满足什么条件”的复杂评估&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在实际开发中，&lt;strong&gt;搜索型 &lt;code&gt;CASE&lt;/code&gt;表达式因其强大的灵活性和功能性而被更广泛地使用&lt;/strong&gt;。当你需要处理任何非等值比较、逻辑运算或复杂条件时，搜索 &lt;code&gt;CASE&lt;/code&gt;表达式都是你的首选工具。&lt;/p&gt;
&lt;h2 id="coalesce"&gt;coalesce
&lt;/h2&gt;&lt;p&gt;COALESCE 是 SQL 中一个非常实用的函数，主要用于处理数据中的 NULL 值。它能&lt;strong&gt;返回其参数列表中的第一个非 NULL 值&lt;/strong&gt;。如果所有参数均为 NULL，它将返回 NULL。&lt;/p&gt;
&lt;p&gt;下面通过一个表格来快速了解 &lt;code&gt;COALESCE&lt;/code&gt;与其他类似函数的区别：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性对比&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;COALESCE&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;ISNULL&lt;/strong&gt; (SQL Server) / &lt;strong&gt;NVL&lt;/strong&gt; (Oracle) / &lt;strong&gt;IFNULL&lt;/strong&gt; (MySQL)&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;CASE WHEN&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;参数数量&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;支持多个参数&lt;/td&gt;
&lt;td&gt;仅支持两个参数&lt;/td&gt;
&lt;td&gt;支持任意条件逻辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;标准性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;ANSI SQL 标准&lt;/strong&gt;，跨数据库兼容性好&lt;/td&gt;
&lt;td&gt;数据库特定函数&lt;/td&gt;
&lt;td&gt;ANSI SQL 标准&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;典型应用场景&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;从多个可能为空的字段中选择第一个有效值；为NULL提供兜底的默认值&lt;/td&gt;
&lt;td&gt;替换单个字段的NULL值&lt;/td&gt;
&lt;td&gt;实现复杂的条件分支判断&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;COALESCE(phone, backup_phone, '无联系方式')&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ISNULL(phone, '无联系方式')&lt;/code&gt;(SQL Server)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;CASE WHEN phone IS NOT NULL THEN phone ELSE '无联系方式' END&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id="-工作原理与语法"&gt;🔧 工作原理与语法
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;基本语法&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;COALESCE(value1, value2, ..., valueN)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;执行逻辑&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;COALESCE 函数会&lt;strong&gt;从左到右依次检查每个参数&lt;/strong&gt;的值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一旦遇到&lt;strong&gt;第一个非 NULL 值&lt;/strong&gt;，就立即返回该值（短路评估）。&lt;/li&gt;
&lt;li&gt;如果所有参数都是 NULL，则函数返回 NULL。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有参数应该是相同或兼容的数据类型。&lt;/p&gt;
&lt;h3 id="-主要应用场景-1"&gt;🎯 主要应用场景
&lt;/h3&gt;&lt;p&gt;COALESCE 函数在数据处理中非常灵活，以下是几个常见的应用场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;提供默认值（处理单字段NULL值）&lt;/strong&gt;：当某个字段可能为 NULL 时，可以使用 COALESCE 为其提供一个默认值，避免在查询结果或计算中出现 NULL。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 将 NULL 的奖金(bonus)显示为 0
SELECT name, COALESCE(bonus, 0) AS bonus_amount FROM employees;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多字段优先级选择&lt;/strong&gt;：从多个可能为 NULL 的字段中，按优先级选择第一个非 NULL 的值。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 优先使用手机号(phone)，若无则用家庭电话(home_phone)，最后用工作电话(work_phone)
SELECT name, COALESCE(phone, home_phone, work_phone, &amp;#39;无有效联系方式&amp;#39;) AS contact_info
FROM contacts;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;确保计算安全&lt;/strong&gt;：在数学运算或特定函数中，如果操作数可能为 NULL，可以使用 COALESCE 提供一个安全值，防止整个表达式结果为 NULL。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 确保折扣(discount)不为NULL，避免整个表达式为NULL
SELECT product_name, price * COALESCE(discount, 1) AS final_price
FROM products;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据清洗和转换&lt;/strong&gt;：在数据清洗过程中，将 NULL 值转换为有意义的默认值或统一格式。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 将NULL名称转换为&amp;#39;Unknown&amp;#39;
SELECT COALESCE(name, &amp;#39;Unknown&amp;#39;) AS cleaned_name FROM customers;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-注意事项与性能优化"&gt;⚠️ 注意事项与性能优化
&lt;/h3&gt;&lt;p&gt;使用 COALESCE 时，有几个地方需要注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;参数顺序&lt;/strong&gt;：参数的顺序很重要。&lt;strong&gt;将最可能为非 NULL 或最希望返回的值放在列表左侧&lt;/strong&gt;，这样可以利用短路评估机制，减少不必要的计算。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据类型兼容性&lt;/strong&gt;：所有参数的数据类型应该兼容或可以隐式转换，否则可能导致错误。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;与 CASE 表达式的等价性&lt;/strong&gt;：COALESCE(expr1, expr2) 在逻辑上等价于 &lt;code&gt;CASE WHEN expr1 IS NOT NULL THEN expr1 ELSE expr2 END&lt;/code&gt;。对于多参数，也等同于一系列 CASE WHEN 判断。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;谨慎使用子查询&lt;/strong&gt;：在某些数据库（如 SQL Server）中，如果 COALESCE 的参数包含子查询，该子查询可能会被多次评估（执行），这可能导致性能问题或在特定隔离级别下产生非预期结果。对此，可以考虑使用 ISNULL（如果适用）或将子查询移至派生表（子查询）中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-总结-18"&gt;💡 总结
&lt;/h3&gt;&lt;p&gt;COALESCE 是 SQL 中处理 NULL 值的&lt;strong&gt;首选工具之一&lt;/strong&gt;，因为它符合 ANSI 标准且支持多个参数，非常灵活。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;核心价值&lt;/strong&gt;在于其能够提供&lt;strong&gt;简洁、清晰的语法&lt;/strong&gt;来处理可能出现的 NULL 值，从而&lt;strong&gt;增强查询结果的可靠性和可读性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当你需要在多个可能为空的列中选择一个有效值，或者想为 NULL 提供一个安全的fallback值时，记得考虑使用 COALESCE 函数。&lt;/p&gt;
&lt;h2 id="group-by-expr"&gt;Group by Expr
&lt;/h2&gt;&lt;p&gt;MySQL 中的 &lt;code&gt;GROUP BY&lt;/code&gt;子句确实可以基于表达式进行分组，这为数据分组提供了更大的灵活性。下面是一个汇总了常用表达式类型的表格，方便你快速了解：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式类别&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;适用场景&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;函数表达式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;使用 MySQL 内置函数处理列值后分组&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GROUP BY YEAR(order_date)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;按年、月、周等时间维度分组；处理字符串后进行分组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;算术表达式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;对数值列进行加减乘除等算术运算后分组&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GROUP BY (quantity * price)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;按计算后的金额、得分、比率等分组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CASE 表达式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;根据条件逻辑将数据分到不同的自定义组别&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GROUP BY CASE WHEN score &amp;gt;= 90 THEN '优' WHEN score &amp;gt;= 60 THEN '及格' ELSE '不及格' END&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将数据按自定义区间或条件分组，如成绩等级、客户分段、金额区间等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;字符串拼接表达式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;将多个字段或字段与常量拼接后分组&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GROUP BY CONCAT(first_name, ' ', last_name)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;生成全名、组合编码等作为分组依据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;日期时间表达式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;对日期时间字段进行格式化或提取特定部分后分组&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GROUP BY DATE_FORMAT(order_date, '%Y-%m')&lt;/code&gt; &lt;code&gt;GROUP BY HOUR(login_time)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;按年月分组查看数据；按小时分组分析访问模式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-重要注意事项-3"&gt;⚠️ 重要注意事项
&lt;/h3&gt;&lt;p&gt;使用表达式分组时，有几点需要特别注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SELECT 子句的一致性&lt;/strong&gt;：在 &lt;code&gt;SELECT&lt;/code&gt;子句中&lt;strong&gt;出现的非聚合列或表达式，必须与 &lt;code&gt;GROUP BY&lt;/code&gt;子句中的表达式保持一致&lt;/strong&gt;（除非是聚合函数的参数）。这是 MySQL 中 &lt;code&gt;ONLY_FULL_GROUP_BY&lt;/code&gt;SQL 模式（MySQL 8.0 后默认启用）的要求。例如：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 正确的写法：SELECT 中的表达式与 GROUP BY 中的一致
SELECT YEAR(order_date) AS order_year, COUNT(*)
FROM orders
GROUP BY YEAR(order_date);
-- ❌ 错误的写法：SELECT 中使用了别名，GROUP BY 中使用了原始表达式
-- SELECT YEAR(order_date) AS order_year, COUNT(*)
-- FROM orders
-- GROUP BY order_year; （在严格模式下，某些 MySQL 版本可能不允许这样使用别名）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;虽然 MySQL 在某些情况下允许在 &lt;code&gt;GROUP BY&lt;/code&gt;中使用 &lt;code&gt;SELECT&lt;/code&gt;中定义的别名（如 &lt;code&gt;GROUP BY order_year&lt;/code&gt;），但为了更好的兼容性和避免潜在错误，&lt;strong&gt;更推荐在 &lt;code&gt;GROUP BY&lt;/code&gt;中直接使用与 SELECT 中相同的表达式&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;NULL 值处理&lt;/strong&gt;：如果表达式的计算结果为 &lt;code&gt;NULL&lt;/code&gt;，那么这些行会被归入同一个分组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能考量&lt;/strong&gt;：对列使用函数或复杂表达式进行计算后再分组，&lt;strong&gt;有时会阻止 MySQL 使用索引&lt;/strong&gt;，可能会影响查询性能，尤其是在处理大数据集时。如果某类分组操作非常频繁，可以考虑&lt;strong&gt;生成一个额外的计算列（Generated Column）&lt;/strong&gt; 来存储表达式结果并为该列建立索引，以优化查询速度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-核心要点"&gt;💡 核心要点
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可以传递表达式&lt;/strong&gt;：&lt;code&gt;GROUP BY&lt;/code&gt;子句不仅能基于列名进行分组，还&lt;strong&gt;完全可以基于表达式进行分组&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;表达式需保持一致&lt;/strong&gt;：确保 &lt;code&gt;GROUP BY&lt;/code&gt;子句中使用的表达式与 &lt;code&gt;SELECT&lt;/code&gt;列表中相应的表达式完全一致（除非是聚合函数的参数），这是 MySQL 中 &lt;code&gt;ONLY_FULL_GROUP_BY&lt;/code&gt;模式的要求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;别名使用需谨慎&lt;/strong&gt;：虽然在 MySQL 中有时可以在 &lt;code&gt;GROUP BY&lt;/code&gt;中使用 &lt;code&gt;SELECT&lt;/code&gt;列表中定义的别名，但为了代码的清晰性和跨数据库兼容性，更推荐在 &lt;code&gt;GROUP BY&lt;/code&gt;中直接重复该表达式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;理解 NULL 分组&lt;/strong&gt;：所有表达式计算结果为 &lt;code&gt;NULL&lt;/code&gt;的行会被分到同一组。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望这些信息能帮助你更好地在 MySQL 中使用表达式进行分组。&lt;/p&gt;
&lt;h2 id="年月"&gt;年月
&lt;/h2&gt;&lt;p&gt;在 MySQL 中同时提取日期字段的年份和月份，有多种方法可以实现。下面是一个快速对比表格，帮助你根据需求选择合适的方法：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;示例代码&lt;/th&gt;
&lt;th&gt;返回值说明&lt;/th&gt;
&lt;th&gt;适用场景&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;YEAR() + MONTH()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SELECT YEAR(date_col), MONTH(date_col);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;分开返回&lt;strong&gt;数字&lt;/strong&gt;形式的年份和月份&lt;/td&gt;
&lt;td&gt;需要分别对年份和月份进行数字计算或比较时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;DATE_FORMAT()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SELECT DATE_FORMAT(date_col, '%Y-%m');&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;strong&gt;字符串&lt;/strong&gt;形式的年月（如 &amp;ldquo;2025-09&amp;rdquo;）&lt;/td&gt;
&lt;td&gt;需要直接获得格式化的年月字符串用于显示或作为分类标签时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;EXTRACT()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SELECT EXTRACT(YEAR_MONTH FROM date_col);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;strong&gt;数字&lt;/strong&gt;形式的年月（如 202509）&lt;/td&gt;
&lt;td&gt;需要紧凑的数字格式进行存储或特定计算时&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;下面是这些方法的详细说明和一些实用建议。&lt;/p&gt;
&lt;h3 id="-详细方法说明"&gt;📌 详细方法说明
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用 &lt;code&gt;YEAR()&lt;/code&gt;和 &lt;code&gt;MONTH()&lt;/code&gt;函数组合&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是最直接的方法。&lt;code&gt;YEAR()&lt;/code&gt;函数返回日期中的年份（4位数），&lt;code&gt;MONTH()&lt;/code&gt;函数返回月份的数字（1-12）。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 基本用法
SELECT YEAR(your_date_column) AS order_year,
MONTH(your_date_column) AS order_month
FROM your_table;
-- 示例结果：
-- | order_year | order_month |
-- |------------|-------------|
-- | 2023 | 1 |
-- | 2023 | 2 |
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果需要将年份和月份组合成一个字符串（如 &amp;ldquo;2023-01&amp;rdquo;），可以使用 &lt;code&gt;CONCAT()&lt;/code&gt;函数：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT CONCAT(YEAR(your_date_column), &amp;#39;-&amp;#39;, LPAD(MONTH(your_date_column), 2, &amp;#39;0&amp;#39;)) AS year_month
FROM your_table;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里的 &lt;code&gt;LPAD(MONTH(...), 2, '0')&lt;/code&gt;是为了确保月份总是两位数（例如将 &amp;lsquo;1&amp;rsquo; 显示为 &amp;lsquo;01&amp;rsquo;）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用 &lt;code&gt;DATE_FORMAT()&lt;/code&gt;函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DATE_FORMAT()&lt;/code&gt;函数非常强大，可以直接将日期格式化为任何你想要的字符串形式。要获取 &amp;ldquo;YYYY-MM&amp;rdquo; 格式，只需指定格式字符串 &lt;code&gt;'%Y-%m'&lt;/code&gt;。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT DATE_FORMAT(your_date_column, &amp;#39;%Y-%m&amp;#39;) AS year_month
FROM your_table;
-- 示例结果：
-- | year_month |
-- |------------|
-- | 2023-01 |
-- | 2023-02 |
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你还可以使用其他格式符，例如 &lt;code&gt;%Y年%m月&lt;/code&gt;会得到 &amp;ldquo;2023年01月&amp;rdquo;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用 &lt;code&gt;EXTRACT()&lt;/code&gt;函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;EXTRACT()&lt;/code&gt;函数用于从日期中提取指定的部分。使用 &lt;code&gt;YEAR_MONTH&lt;/code&gt;单元可以一次性提取出组合的年月。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT EXTRACT(YEAR_MONTH FROM your_date_column) AS year_month
FROM your_table;
-- 示例结果：
-- | year_month |
-- |------------|
-- | 202301 |
-- | 202302 |
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这将返回一个数字类型的值，如 202301 代表 2023年1月。如果需要在月份部分保持两位数（如 202301 而不是 20231），请确保源日期字段是 &lt;code&gt;DATE&lt;/code&gt;、&lt;code&gt;DATETIME&lt;/code&gt;或 &lt;code&gt;TIMESTAMP&lt;/code&gt;类型。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-实用场景和建议"&gt;💡 实用场景和建议
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;按年月分组统计&lt;/strong&gt;：在生成报告时，经常需要按年月分组汇总数据（如每月销售额）。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 使用DATE_FORMAT
SELECT DATE_FORMAT(order_date, &amp;#39;%Y-%m&amp;#39;) AS month,
COUNT(*) AS order_count,
SUM(amount) AS total_amount
FROM orders
GROUP BY DATE_FORMAT(order_date, &amp;#39;%Y-%m&amp;#39;);
-- 使用YEAR和MONTH
SELECT YEAR(order_date) AS year,
MONTH(order_date) AS month,
COUNT(*) AS order_count,
SUM(amount) AS total_amount
FROM orders
GROUP BY YEAR(order_date), MONTH(order_date);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能注意&lt;/strong&gt;：在 &lt;code&gt;WHERE&lt;/code&gt;子句或 &lt;code&gt;GROUP BY&lt;/code&gt;子句中对列使用函数（如 &lt;code&gt;YEAR(column)&lt;/code&gt;、&lt;code&gt;DATE_FORMAT(column, ...)&lt;/code&gt;）&lt;strong&gt;可能会导致数据库无法使用索引&lt;/strong&gt;，从而影响查询性能。对于大量数据的过滤，考虑使用范围查询：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 而不是: WHERE YEAR(order_date) = 2023 AND MONTH(order_date) = 1
-- 可以尝试:
WHERE order_date &amp;gt;= &amp;#39;2023-01-01&amp;#39; AND order_date &amp;lt; &amp;#39;2023-02-01&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;处理时间部分&lt;/strong&gt;：如果你的字段是 &lt;code&gt;DATETIME&lt;/code&gt;或 &lt;code&gt;TIMESTAMP&lt;/code&gt;类型（如 &amp;lsquo;2023-10-05 14:30:00&amp;rsquo;），上述函数仍然有效，它们会&lt;strong&gt;自动忽略时间部分&lt;/strong&gt;，只提取日期部分的年份和月份。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望这些信息能帮助你灵活地在 MySQL 中获取日期字段的年份和月份。如果你有更多问题，欢迎提出！&lt;/p&gt;
&lt;h2 id="with"&gt;WITH
&lt;/h2&gt;&lt;p&gt;MySQL 中的 &lt;code&gt;WITH&lt;/code&gt; 子句，也称为公用表表达式（Common Table Expression，CTE），是一个非常有用的工具，尤其用于简化复杂查询、提高代码可读性和维护性。下面我将详细介绍其语法、应用场景及注意事项。&lt;/p&gt;
&lt;h3 id="-一基本概念"&gt;📌 一、基本概念
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;WITH&lt;/code&gt; 子句允许你在一个查询中定义一个临时的、命名的结果集，这个结果集可以被紧随其后的主查询（如 &lt;code&gt;SELECT&lt;/code&gt;、&lt;code&gt;INSERT&lt;/code&gt;、&lt;code&gt;UPDATE&lt;/code&gt;、&lt;code&gt;DELETE&lt;/code&gt; 甚至 &lt;code&gt;CREATE VIEW&lt;/code&gt;）引用。这个临时结果集仅在当前查询执行期间存在，查询结束后自动消失，无需手动清理。&lt;/p&gt;
&lt;h3 id="-二语法结构"&gt;📍 二、语法结构
&lt;/h3&gt;&lt;h4 id="1-基本语法非递归-cte"&gt;1. 基本语法（非递归 CTE）
&lt;/h4&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;WITH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cte_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;column2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...)]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;-- 定义CTE的查询（一个SELECT语句）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- 主查询，使用上面定义的CTE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cte_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;• &lt;code&gt;cte_name&lt;/code&gt; 是你为这个临时结果集指定的名称。&lt;/p&gt;
&lt;p&gt;• &lt;code&gt;(column1, column2, ...)&lt;/code&gt; 是可选的列名列表。如果省略，列名将从 &lt;code&gt;SELECT&lt;/code&gt; 语句中推断。&lt;/p&gt;
&lt;p&gt;• 定义多个 CTE 时，用逗号分隔：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```sql
WITH
cte1 AS (SELECT ...),
cte2 AS (SELECT ... FROM cte1 ...) -- cte2 可以引用cte1
SELECT ... FROM cte2 ...;
```
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="2-递归语法递归-cte"&gt;2. 递归语法（递归 CTE）
&lt;/h4&gt;&lt;p&gt;递归 CTE 用于处理层次结构或树形数据（如组织架构、评论线程、文件目录）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;WITH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;RECURSIVE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cte_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;-- 初始查询（锚成员）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;table_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;UNION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ALL&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;-- 递归查询（递归成员），引用CTE自身
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;table_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;JOIN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cte_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cte_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;• &lt;code&gt;RECURSIVE&lt;/code&gt; 关键字是必须的。&lt;/p&gt;
&lt;p&gt;• 递归 CTE 必须包含两部分，由 &lt;code&gt;UNION ALL&lt;/code&gt; 连接：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;◦ 锚成员（Anchor Member）：初始查询，提供递归的起点。
◦ 递归成员（Recursive Member）：通过联接 CTE 自身进行递归，直到不再返回行为止。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="-三主要应用场景"&gt;🎯 三、主要应用场景
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;WITH&lt;/code&gt; 子句的应用场景非常广泛，主要包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;简化复杂查询和分解逻辑：将复杂的多步骤查询分解成多个逻辑清晰的 CTE，使代码更易读和维护。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- 计算每个部门的平均工资，并找出高于部门平均工资的员工
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;WITH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dept_avg_salary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;department_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AVG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;avg_salary&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;employees&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;GROUP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;department_id&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;avg_salary&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;employees&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;JOIN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dept_avg_salary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;department_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;department_id&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;salary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;avg_salary&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免重复子查询：当同一个子查询需要在主查询中多次使用时，CTE 可以避免重复编写和计算。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- 而非重复写两次相同的子查询
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;WITH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;high_salary_employees&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;employee_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;salary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;employees&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;salary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;high_salary_employees&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;UNION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ALL&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AVG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;high_salary_employees&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;递归查询层次结构数据：这是递归 CTE 的经典用法，例如查询一个员工的所有下属，或一个分类的所有子分类。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- 查询部门层级结构
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;WITH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;RECURSIVE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dept_hierarchy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;-- 锚成员：选择根部门（例如ID为1的部门）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;parent_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;level&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;departments&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;UNION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ALL&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;-- 递归成员：查找当前层级部门的下级部门
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;level&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;departments&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;INNER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;JOIN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dept_hierarchy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dept_hierarchy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据清洗和转换管道：可以定义多个 CTE，逐步对数据进行清洗、转换和丰富，最后在主查询中输出最终结果。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;WITH&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;source_table&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...),&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;enriched_data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;calculated_column&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;enriched_data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-四优点与注意事项"&gt;⚠️ 四、优点与注意事项
&lt;/h3&gt;&lt;h4 id="优点"&gt;优点
&lt;/h4&gt;&lt;p&gt;• 提高可读性和可维护性：将复杂查询分解成命名的逻辑块，类似编程中的变量定义，使 SQL 结构清晰易懂。&lt;/p&gt;
&lt;p&gt;• 代码重用：避免在查询中重复编写相同的子查询。&lt;/p&gt;
&lt;p&gt;• 支持递归查询：提供了处理层次结构数据的优雅解决方案。&lt;/p&gt;
&lt;h4 id="注意事项与限制"&gt;注意事项与限制
&lt;/h4&gt;&lt;p&gt;• 版本兼容性：MySQL 8.0 及以上版本才完整支持 CTE 和递归 CTE。MySQL 5.7 及更早版本无法使用。&lt;/p&gt;
&lt;p&gt;• 作用域：CTE 仅在紧随其后的单个 SQL 语句中有效。不能在后续的其他独立查询中使用。&lt;/p&gt;
&lt;p&gt;• 递归深度与性能：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;◦ 递归 CTE 可能有默认的最大递归深度限制（如 MySQL 默认 1000），可通过 `SET @@cte_max_recursion_depth = new_value;` 调整。
◦ 递归查询如果没有正确的终止条件可能导致无限循环。务必确保递归部分能最终结束。
◦ 对于复杂或大数据量的 CTE，要注意查询性能，确保基表上有合适的索引。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;• 与临时表的区别：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;| 特性 | CTE | 临时表 |
| :--- | :--- | :--- |
| 生命周期 | 仅当前语句有效 | 会话结束前有效 |
| 物理存储 | 不物理存储，通常为逻辑存在 | 可能存储在内存或磁盘 |
| 索引 | 不能创建索引 | 可以创建索引 |
| 可见性 | 仅定义它的查询可见 | 同一会话的后续查询可见 |
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="-总结-19"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;MySQL 的 &lt;code&gt;WITH&lt;/code&gt; 子句（CTE）是一个强大且实用的工具，它能显著提升复杂查询的可读性、可维护性，并提供了递归查询的官方解决方案。&lt;/p&gt;
&lt;p&gt;核心价值在于其能够将复杂的查询逻辑分解为更小、更易管理的命名模块，让你能像搭积木一样构建SQL查询，从而写出更清晰、更易于调试的代码。&lt;/p&gt;
&lt;p&gt;当你需要编写包含多层嵌套子查询的复杂SQL，或者需要处理树状、层次化的数据关系时，不妨考虑使用 &lt;code&gt;WITH&lt;/code&gt; 子句来优化你的查询。&lt;/p&gt;
&lt;h2 id="最大值行"&gt;最大值行
&lt;/h2&gt;&lt;p&gt;在 MySQL 中要获取每个分组里某个字段最大值对应的整行记录（包括其他字段），这是一个非常经典的需求。下面我用一个表格总结几种主要的方法，帮你快速了解它们的区别和适用场景：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;核心思路&lt;/th&gt;
&lt;th&gt;优点&lt;/th&gt;
&lt;th&gt;注意事项&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;JOIN + 子查询&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;先子查询找出分组最大值，再与原表连接获取完整行&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;通用性强&lt;/strong&gt;，逻辑清晰，易于理解和编写&lt;/td&gt;
&lt;td&gt;如果最大值对应多条记录，会&lt;strong&gt;返回所有记录&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;相关子查询&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在WHERE条件中使用子查询，直接匹配分组内最大值&lt;/td&gt;
&lt;td&gt;写法相对简洁&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;性能可能较差&lt;/strong&gt;，特别是数据量大时，因为每条记录都可能执行一次子查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;NOT EXISTS&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;查找不存在比当前记录值更大的记录，该记录即为最大值所在行&lt;/td&gt;
&lt;td&gt;逻辑巧妙，适合理解NOT EXISTS用法&lt;/td&gt;
&lt;td&gt;同样可能存在性能问题，需要确保相关字段有索引优化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;窗口函数 (ROW_NUMBER)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;使用 &lt;code&gt;ROW_NUMBER()&lt;/code&gt;等窗口函数为分组内记录排序，再筛选排名第一的记录&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;MySQL 8.0+支持&lt;/strong&gt;，&lt;strong&gt;现代且高效&lt;/strong&gt;，可灵活处理“Top N”问题&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;仅适用于MySQL 8.0及以上版本&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;🧠 最常用和推荐的方法是 &lt;strong&gt;JOIN + 子查询&lt;/strong&gt;，其思路是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;找出分组最大值&lt;/strong&gt;：使用子查询和 &lt;code&gt;GROUP BY&lt;/code&gt;计算出每个分组的最大值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接回原表&lt;/strong&gt;：将原表与第1步的结果连接，匹配分组字段和最大值字段，从而得到最大值对应的完整记录。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT
t1.*
FROM
your_table t1
JOIN (
SELECT
group_column,
MAX(value_column) AS max_value
FROM
your_table
GROUP BY
group_column
) t2
ON
t1.group_column = t2.group_column
AND t1.value_column = t2.max_value;
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;📖 &lt;strong&gt;更多方法详解&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用相关子查询&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过在外层查询的WHERE条件中嵌套一个与当前行关联的子查询来匹配最大值。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT *
FROM your_table t1
WHERE t1.value_column = (
SELECT MAX(t2.value_column)
FROM your_table t2
WHERE t2.group_column = t1.group_column
);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用 NOT EXISTS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过检查不存在比当前行值更大的记录来确定最大值记录。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT *
FROM your_table t1
WHERE NOT EXISTS (
SELECT 1
FROM your_table t2
WHERE
t2.group_column = t1.group_column
AND t2.value_column &amp;gt; t1.value_column
);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用窗口函数（MySQL 8.0+）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果使用的是 MySQL 8.0 或更高版本，窗口函数提供了更现代和高效的解决方案，尤其适用于获取“前N条”记录。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT *
FROM (
SELECT
*,
ROW_NUMBER() OVER (PARTITION BY group_column ORDER BY value_column DESC) AS rn
FROM your_table
) ranked
WHERE rn = 1;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;⚡ &lt;strong&gt;重要注意事项&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;处理重复最大值&lt;/strong&gt;：如果分组内存在多条记录具有相同的最大值，&lt;strong&gt;上述方法（除窗口函数）会返回所有这些记录&lt;/strong&gt;。如果你只想要一条记录，可以考虑使用 &lt;code&gt;MIN()&lt;/code&gt;或 &lt;code&gt;MAX()&lt;/code&gt;对其他字段进行额外控制，或者使用 &lt;code&gt;ROW_NUMBER()&lt;/code&gt;窗口函数并指定额外的排序条件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能优化&lt;/strong&gt;：确保&lt;strong&gt;连接条件（&lt;code&gt;group_column&lt;/code&gt;）和用于查找最大值的字段（&lt;code&gt;value_column&lt;/code&gt;）上有索引&lt;/strong&gt;，这可以显著提升大数据量下的查询性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;理解 ONLY_FULL_GROUP_BY&lt;/strong&gt;：在 MySQL 中，如果 &lt;code&gt;sql_mode&lt;/code&gt;包含了 &lt;code&gt;ONLY_FULL_GROUP_BY&lt;/code&gt;，直接在选择列表中使用非聚合列而未在 &lt;code&gt;GROUP BY&lt;/code&gt;子句中指定会导致错误。本文介绍的方法都是为了规避这个限制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选择合适的方法&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;对于&lt;strong&gt;大多数情况&lt;/strong&gt;，&lt;strong&gt;&lt;code&gt;JOIN + 子查询&lt;/code&gt;&lt;/strong&gt; 是一个平衡了可读性和性能的好选择。&lt;/li&gt;
&lt;li&gt;如果使用的是 &lt;strong&gt;MySQL 8.0+&lt;/strong&gt;，&lt;strong&gt;窗口函数&lt;/strong&gt;通常是最优解，语法更现代且灵活。&lt;/li&gt;
&lt;li&gt;对于&lt;strong&gt;小型数据集&lt;/strong&gt;，相关子查询或 &lt;code&gt;NOT EXISTS&lt;/code&gt;可能写起来更简单，但要留意性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望这些信息能帮助你解决问题。&lt;/p&gt;
&lt;h2 id="row_number--rank"&gt;ROW_NUMBER &amp;amp; RANK
&lt;/h2&gt;&lt;p&gt;ROW_NUMBER 和 RANK 都是 SQL 中常用的窗口函数，用于给数据分配序号，但它们的核心区别在于&lt;strong&gt;如何处理相同排序值的情况&lt;/strong&gt;。下面这个表格能让你快速抓住核心差异：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;ROW_NUMBER&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;RANK&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;处理方式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;绝对排名&lt;/strong&gt;，像“直男”，铁面无私，严格按行排序&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;跳跃排名&lt;/strong&gt;，讲“公平”，允许并列，并跳过后续名次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;排名特点&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;唯一且连续&lt;/strong&gt;的序号 (如 1, 2, 3, 4)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;允许并列&lt;/strong&gt;，&lt;strong&gt;后续序号跳跃&lt;/strong&gt; (如 1, 1, &lt;strong&gt;3&lt;/strong&gt;, 4)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;是否有并列&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;❌ 不存在并列，即使值相同也强制分配不同序号&lt;/td&gt;
&lt;td&gt;✅ 存在并列，相同值共享同一排名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;是否跳号&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;❌ 不跳号，序号连续递增&lt;/td&gt;
&lt;td&gt;✅ &lt;strong&gt;跳号&lt;/strong&gt;，并列的记录数会影响后续排名&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;📊 &lt;strong&gt;语法与示例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;两者的基础语法类似，都需要在 &lt;code&gt;OVER&lt;/code&gt;子句中指定 &lt;code&gt;ORDER BY&lt;/code&gt;来进行排序，并可选择用 &lt;code&gt;PARTITION BY&lt;/code&gt;进行分组：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;ROW_NUMBER() OVER ([PARTITION BY ...] ORDER BY ...)
RANK() OVER ([PARTITION BY ...] ORDER BY ...)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;假设有一张员工表 &lt;code&gt;employees&lt;/code&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;EmployeeID&lt;/th&gt;
&lt;th&gt;Department&lt;/th&gt;
&lt;th&gt;Salary&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;HR&lt;/td&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;HR&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;7000&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;HR&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;7000&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;8000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;9000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;使用 ROW_NUMBER&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT
EmployeeID, Department, Salary,
ROW_NUMBER() OVER (PARTITION BY Department ORDER BY Salary DESC) AS RowNum
FROM employees;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;结果&lt;/strong&gt;：HR部门中两个7000的员工被赋予了不同的连续序号。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;EmployeeID&lt;/th&gt;
&lt;th&gt;Department&lt;/th&gt;
&lt;th&gt;Salary&lt;/th&gt;
&lt;th&gt;RowNum&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;HR&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;7000&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;HR&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;7000&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;HR&lt;/td&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;9000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;8000&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;使用 RANK&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT
EmployeeID, Department, Salary,
RANK() OVER (PARTITION BY Department ORDER BY Salary DESC) AS RankNum
FROM employees;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;结果&lt;/strong&gt;：HR部门中两个7000的员工并列第一，导致下一个排名直接跳到第三。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;EmployeeID&lt;/th&gt;
&lt;th&gt;Department&lt;/th&gt;
&lt;th&gt;Salary&lt;/th&gt;
&lt;th&gt;RankNum&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;HR&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;7000&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;HR&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;7000&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;HR&lt;/td&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;9000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;8000&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;🎯 &lt;strong&gt;如何选择？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据你的目标来决定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;strong&gt;&lt;code&gt;ROW_NUMBER()&lt;/code&gt;&lt;/strong&gt; 当：
&lt;ul&gt;
&lt;li&gt;你需要&lt;strong&gt;绝对唯一、连续的序号&lt;/strong&gt;，例如进行分页查询。&lt;/li&gt;
&lt;li&gt;你需要&lt;strong&gt;删除重复数据&lt;/strong&gt;，只保留每组中的一条记录（例如，按特定排序保留每组第一条）。&lt;/li&gt;
&lt;li&gt;你&lt;strong&gt;不关心排序值是否相同&lt;/strong&gt;，只要求一个严格的顺序。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 &lt;strong&gt;&lt;code&gt;RANK()&lt;/code&gt;&lt;/strong&gt; 当：
&lt;ul&gt;
&lt;li&gt;你需要&lt;strong&gt;处理并列排名&lt;/strong&gt;，并且希望后续排名反映跳跃（如成绩排名：并列第一后，下一个是第三名）。&lt;/li&gt;
&lt;li&gt;你希望看到数据在组内的&lt;strong&gt;真实排名位置&lt;/strong&gt;，即使名次不连续。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;💡 &lt;strong&gt;提示&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;还有一个叫 &lt;strong&gt;&lt;code&gt;DENSE_RANK()&lt;/code&gt;&lt;/strong&gt; 的函数，它处理并列时，后续排名是&lt;strong&gt;连续&lt;/strong&gt;的（例如：1, 1, 2, 3）。这在需要连续名次的场景（如奖项评定）中很常用。&lt;/li&gt;
&lt;li&gt;选择排序字段 (&lt;code&gt;ORDER BY&lt;/code&gt;) 至关重要，它直接决定了排名的依据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PARTITION BY&lt;/code&gt;是可选的，但它能让你在指定的分组内进行排名，非常实用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望这些解释能帮助你清楚地理解它们之间的区别！&lt;/p&gt;
&lt;h2 id="week"&gt;week
&lt;/h2&gt;&lt;p&gt;MySQL 中的 &lt;code&gt;WEEK()&lt;/code&gt;函数用于获取指定日期在一年中的周数。这个函数的核心在于其可选的 &lt;code&gt;mode&lt;/code&gt;参数，该参数决定了周的计算规则，例如一周从哪一天开始，以及如何界定每年的第一周。下面我将为你详细解释。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;模式 (Mode)&lt;/th&gt;
&lt;th&gt;一周的第一天&lt;/th&gt;
&lt;th&gt;返回值范围&lt;/th&gt;
&lt;th&gt;第一周计算规则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;周日&lt;/td&gt;
&lt;td&gt;0 - 53&lt;/td&gt;
&lt;td&gt;包含本年第一天（1月1日）的周，且该周包含一个星期日&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;周一&lt;/td&gt;
&lt;td&gt;0 - 53&lt;/td&gt;
&lt;td&gt;包含 &amp;gt;=4 天在本年的周&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;周日&lt;/td&gt;
&lt;td&gt;1 - 53&lt;/td&gt;
&lt;td&gt;包含本年第一天（1月1日）的周，且该周包含一个星期日&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;周一&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1 - 53&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;包含 &amp;gt;=4 天在本年的周 (符合 ISO 8601 国际标准)&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;周日&lt;/td&gt;
&lt;td&gt;0 - 53&lt;/td&gt;
&lt;td&gt;包含 &amp;gt;=4 天在本年的周&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;周一&lt;/td&gt;
&lt;td&gt;0 - 53&lt;/td&gt;
&lt;td&gt;包含本年第一天（1月1日）的周，且该周包含一个星期一&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;周日&lt;/td&gt;
&lt;td&gt;1 - 53&lt;/td&gt;
&lt;td&gt;包含 &amp;gt;=4 天在本年的周&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;周一&lt;/td&gt;
&lt;td&gt;1 - 53&lt;/td&gt;
&lt;td&gt;包含本年第一天（1月1日）的周，且该周包含一个星期一&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-语法和参数"&gt;🧠 语法和参数
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;WEEK()&lt;/code&gt;函数的基本语法如下：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;WEEK(date[, mode])
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;date&lt;/code&gt;&lt;/strong&gt;：必需的参数。要提取周数的日期或日期时间值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/strong&gt;：可选的参数。它决定了周的计算规则。如果省略，MySQL 会使用系统变量 &lt;code&gt;default_week_format&lt;/code&gt;的值（通常默认为 0）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-第一周的计算规则"&gt;📅 第一周的计算规则
&lt;/h3&gt;&lt;p&gt;“第一周”的界定主要有两种方式，这也是不同 &lt;code&gt;mode&lt;/code&gt;值产生差异的核心原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;包含本年第一天的周&lt;/strong&gt;：只要一周中包含1月1日，就被视为第一周。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;包含4天或更多天在本年的周&lt;/strong&gt;：一年中的第一周必须是包含了至少4天属于本年的周（根据一周起始日的不同，可能是从上周开始）。&lt;strong&gt;模式3 (mode=3) 遵循此规则，并且符合 ISO 8601 国际标准&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-国际标准mode-3"&gt;🌍 国际标准：Mode 3
&lt;/h3&gt;&lt;p&gt;对于国际业务或需要符合通用标准的场景，&lt;strong&gt;强烈推荐使用 &lt;code&gt;mode=3&lt;/code&gt;&lt;/strong&gt;。它符合 ISO 8601 标准，规定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每周从&lt;strong&gt;星期一开始&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;每年的第一周是包含&lt;strong&gt;当年至少4天&lt;/strong&gt;的那一周（通常也等同于包含当年第一个星期四的那周）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-相关函数"&gt;🔢 相关函数
&lt;/h3&gt;&lt;p&gt;除了 &lt;code&gt;WEEK()&lt;/code&gt;，MySQL 还提供了其他一些相关的周函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;YEARWEEK(date[, mode])&lt;/code&gt;&lt;/strong&gt;：返回一个组合值，包含年份和周数（格式为 &lt;code&gt;YYYYWW&lt;/code&gt;），这对于按年和周唯一标识一段时间非常有用。需要注意的是，&lt;code&gt;YEARWEEK&lt;/code&gt;函数的模式行为与 &lt;code&gt;WEEK&lt;/code&gt;略有不同，它&lt;strong&gt;没有 0 周&lt;/strong&gt;，跨年周会被归入上一年。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;WEEKOFYEAR(date)&lt;/code&gt;&lt;/strong&gt;：此函数等价于 &lt;code&gt;WEEK(date, 3)&lt;/code&gt;，即使用 ISO 8601 标准计算周数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-注意事项-5"&gt;⚠️ 注意事项
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;跨年周的处理&lt;/strong&gt;：一年的最后几天可能会被算入下一年的第一周（例如 &lt;code&gt;WEEK('2022-12-31', 3)&lt;/code&gt;可能返回 2023 年的第一周）。同样，一年的头几天也可能仍属于上一年的最后一周。使用 &lt;code&gt;YEARWEEK()&lt;/code&gt;函数可以更清晰地处理这类跨年情况。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;指定 &lt;code&gt;mode&lt;/code&gt;参数&lt;/strong&gt;：由于 &lt;code&gt;mode&lt;/code&gt;参数显著影响结果，&lt;strong&gt;在生产环境或需要明确规则的查询中，务必显式指定 &lt;code&gt;mode&lt;/code&gt;值&lt;/strong&gt;，而不是依赖默认设置，以避免意外行为。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;报表一致性&lt;/strong&gt;：在生成跨周报表或按周分组统计时，确保所有查询都使用相同的 &lt;code&gt;mode&lt;/code&gt;值，以保证数据的一致性。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-代码示例"&gt;💡 代码示例
&lt;/h3&gt;&lt;pre tabindex="0"&gt;&lt;code&gt;-- 获取当前日期按ISO周标准的周数（推荐）
SELECT WEEK(CURDATE(), 3) AS current_iso_week;
-- 获取特定日期在不同模式下的周数
SELECT
WEEK(&amp;#39;2023-01-01&amp;#39;, 0) AS mode0, -- 可能返回0或1
WEEK(&amp;#39;2023-01-01&amp;#39;, 3) AS mode3; -- 返回符合ISO标准的周数
-- 结合YEARWEEK使用，获取年和周的唯一标识
SELECT YEARWEEK(&amp;#39;2023-12-31&amp;#39;, 3) AS year_week; -- 可能返回 202352
-- 按ISO周进行分组统计
SELECT
YEARWEEK(sale_date, 3) AS sale_week,
COUNT(*) AS total_sales
FROM sales
GROUP BY sale_week;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;希望这些信息能帮助你全面了解 MySQL 的 &lt;code&gt;WEEK&lt;/code&gt;函数！&lt;/p&gt;
&lt;h2 id="min-is-null"&gt;min is null
&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;patient_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;first_infection&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;covid_tests&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Positive&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;group&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;patient_id&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;min(test_date) 是否可能为null？是否需要添加 &amp;ldquo;having count(*) &amp;gt; 0&amp;rdquo; 来排除 null 值？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你在使用 &lt;code&gt;MIN()&lt;/code&gt;函数时考虑 &lt;code&gt;NULL&lt;/code&gt;值的情况，这是一个很好的习惯。根据你的代码片段和问题，我来为你分析一下。&lt;/p&gt;
&lt;h3 id="-核心结论"&gt;🧠 核心结论
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;MIN(test_date)&lt;/code&gt;可能为 &lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;：是的，如果某个 &lt;code&gt;patient_id&lt;/code&gt;在 &lt;code&gt;covid_tests&lt;/code&gt;表中&lt;strong&gt;没有任何一条&lt;/strong&gt; &lt;code&gt;result = 'Positive'&lt;/code&gt;的记录，那么该患者的分组中 &lt;code&gt;test_date&lt;/code&gt;字段就没有任何非 &lt;code&gt;NULL&lt;/code&gt;值可供计算，&lt;code&gt;MIN(test_date)&lt;/code&gt;就会返回 &lt;code&gt;NULL&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不需要添加 &lt;code&gt;HAVING count(\*) &amp;gt; 0&lt;/code&gt;&lt;/strong&gt;：&lt;strong&gt;不需要&lt;/strong&gt;。因为你的查询中已经使用了 &lt;code&gt;WHERE result = 'Positive'&lt;/code&gt;条件。这意味着 &lt;code&gt;GROUP BY patient_id&lt;/code&gt;创建的每个分组都&lt;strong&gt;至少包含一条记录&lt;/strong&gt;（否则它不会被分组）。因此，&lt;code&gt;COUNT(*)&lt;/code&gt;对于每个组总是大于 0 的，添加 &lt;code&gt;HAVING count(*) &amp;gt; 0&lt;/code&gt;是&lt;strong&gt;冗余的&lt;/strong&gt;，不会改变结果。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面这个表格汇总了不同情况下 &lt;code&gt;MIN()&lt;/code&gt;的行为以及你的查询如何处理：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;场景&lt;/th&gt;
&lt;th&gt;&lt;code&gt;MIN(test_date)&lt;/code&gt;结果&lt;/th&gt;
&lt;th&gt;你的查询如何处理 (带 &lt;code&gt;WHERE result='Positive'&lt;/code&gt;)&lt;/th&gt;
&lt;th&gt;是否需要 &lt;code&gt;HAVING count(*) &amp;gt; 0&lt;/code&gt;？&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;某 &lt;code&gt;patient_id&lt;/code&gt;&lt;strong&gt;有&lt;/strong&gt; &lt;code&gt;result = 'Positive'&lt;/code&gt;的记录&lt;/td&gt;
&lt;td&gt;最早的阳性检测日期&lt;/td&gt;
&lt;td&gt;正常返回该患者及其最早阳性日期&lt;/td&gt;
&lt;td&gt;❌ 不需要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;某 &lt;code&gt;patient_id&lt;/code&gt;&lt;strong&gt;没有&lt;/strong&gt; &lt;code&gt;result = 'Positive'&lt;/code&gt;的记录&lt;/td&gt;
&lt;td&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;该患者不会出现在结果集里&lt;/strong&gt; (因为被 &lt;code&gt;WHERE&lt;/code&gt;子句过滤了)&lt;/td&gt;
&lt;td&gt;❌ 不需要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;某 &lt;code&gt;patient_id&lt;/code&gt;有记录但 &lt;code&gt;test_date&lt;/code&gt;字段&lt;strong&gt;全部为 &lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正常返回该患者，且 &lt;code&gt;first_infection&lt;/code&gt;字段为 &lt;code&gt;NULL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;❌ 不需要&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-深入分析与建议"&gt;💡 深入分析与建议
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;WHERE&lt;/code&gt;与 &lt;code&gt;HAVING&lt;/code&gt;的区别&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WHERE result = 'Positive'&lt;/code&gt;在分组&lt;strong&gt;前&lt;/strong&gt;进行过滤，它决定了哪些记录有资格进入分组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;HAVING count(*) &amp;gt; 0&lt;/code&gt;在分组&lt;strong&gt;后&lt;/strong&gt;进行过滤，它检查已经形成的分组是否符合条件。&lt;/p&gt;
&lt;p&gt;在你的查询中，&lt;code&gt;WHERE&lt;/code&gt;子句已经确保了只有至少有一条阳性记录的患者才会被分组，所以 &lt;code&gt;HAVING&lt;/code&gt;子句在这里是多余的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;如果需要处理所有患者&lt;/strong&gt;：如果你的意图是列出&lt;strong&gt;所有患者&lt;/strong&gt;，即使他们没有阳性记录（此时 &lt;code&gt;first_infection&lt;/code&gt;为 &lt;code&gt;NULL&lt;/code&gt;），那么你需要使用 &lt;code&gt;LEFT JOIN&lt;/code&gt;或改变查询策略，但这已经不是当前查询的目标了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;其他注意事项&lt;/strong&gt;：虽然你的查询不需要 &lt;code&gt;HAVING count(*) &amp;gt; 0&lt;/code&gt;，但在其他场景中，如果你需要筛选出&lt;strong&gt;分组后记录数量满足特定条件&lt;/strong&gt;的分组（例如，找出感染次数大于1次的患者），&lt;code&gt;HAVING count(*) &amp;gt; 1&lt;/code&gt;就会变得非常有用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-总结-20"&gt;✅ 总结
&lt;/h3&gt;&lt;p&gt;对于你的这个特定查询：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;MIN(test_date)&lt;/code&gt;有可能为 &lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;，但这只会发生在某个分组内的所有 &lt;code&gt;test_date&lt;/code&gt;值都为 &lt;code&gt;NULL&lt;/code&gt;的情况下（虽然你的 &lt;code&gt;WHERE&lt;/code&gt;条件已经隐式确保了每个分组至少有一条记录）。&lt;/li&gt;
&lt;li&gt;由于使用了 &lt;code&gt;WHERE result = 'Positive'&lt;/code&gt;条件，&lt;strong&gt;不需要添加&lt;/strong&gt; &lt;code&gt;HAVING count(*) &amp;gt; 0&lt;/code&gt;，因为它不会改变查询结果，是多余的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，你当前的 SQL 写法是正确的，无需添加 &lt;code&gt;HAVING&lt;/code&gt;子句。&lt;/p&gt;
&lt;h2 id="lag"&gt;Lag
&lt;/h2&gt;&lt;p&gt;在 MySQL 中，计算当前行与上一行数据的差值，&lt;strong&gt;&lt;code&gt;LAG()&lt;/code&gt;窗口函数&lt;/strong&gt;是你的核心工具。它专门用于获取当前行之前某一行的值，从而轻松实现差值计算。&lt;/p&gt;
&lt;p&gt;下面这个表格汇总了相关的窗口函数，帮你快速了解它们的区别：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;th&gt;基本语法示例 (以 &lt;code&gt;amount&lt;/code&gt;列为例)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;LAG()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;获取当前行之前的行的值&lt;/strong&gt;，非常适合计算“当前行 - 前一行”的差值&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LAG(amount) OVER (ORDER BY date)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;LEAD()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;获取当前行之后的行的值，适合计算“后一行 - 当前行”的差值&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LEAD(amount) OVER (ORDER BY date)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-详解-lag函数"&gt;🔍 详解 &lt;code&gt;LAG()&lt;/code&gt;函数
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;LAG()&lt;/code&gt;函数的基本语法如下：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;LAG(expression [, offset [, default_value]]) OVER (
[PARTITION BY partition_expression]
ORDER BY sort_expression [ASC | DESC]
)
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;expression&lt;/code&gt;&lt;/strong&gt;：要获取值的列或表达式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;offset&lt;/code&gt;&lt;/strong&gt;（可选）：指定向前偏移的行数，默认为 1（即前一行）。例如，&lt;code&gt;offset&lt;/code&gt;为 2 则获取前两行的值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;default_value&lt;/code&gt;&lt;/strong&gt;（可选）：当没有前一行（如第一行）时返回的默认值。如果省略，则返回 &lt;code&gt;NULL&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;PARTITION BY&lt;/code&gt;&lt;/strong&gt;（可选）：用于分区的列。函数会在&lt;strong&gt;每个分区内独立计算&lt;/strong&gt;。例如，按产品类型分区，则每个产品类型内部会单独计算差值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;ORDER BY&lt;/code&gt;&lt;/strong&gt;：&lt;strong&gt;必须&lt;/strong&gt;。指定行的排序顺序，这决定了“前一行”是哪一行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-如何使用-lag计算差值"&gt;🧮 如何使用 &lt;code&gt;LAG()&lt;/code&gt;计算差值
&lt;/h3&gt;&lt;p&gt;计算差值的通用模式是：&lt;code&gt;当前行的值 - LAG(当前行的值) ...&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;假设你有一个 &lt;code&gt;sales&lt;/code&gt;表，包含 &lt;code&gt;sale_date&lt;/code&gt;(销售日期) 和 &lt;code&gt;amount&lt;/code&gt;(销售额) 字段：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT
sale_date,
amount,
amount - LAG(amount) OVER (ORDER BY sale_date) AS difference -- 计算差值
FROM sales;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;查询结果示例&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;sale_date&lt;/th&gt;
&lt;th&gt;amount&lt;/th&gt;
&lt;th&gt;difference&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2023-01-01&lt;/td&gt;
&lt;td&gt;100.00&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2023-01-02&lt;/td&gt;
&lt;td&gt;150.00&lt;/td&gt;
&lt;td&gt;50.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2023-01-03&lt;/td&gt;
&lt;td&gt;200.00&lt;/td&gt;
&lt;td&gt;50.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2023-01-04&lt;/td&gt;
&lt;td&gt;170.00&lt;/td&gt;
&lt;td&gt;-30.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2023-01-05&lt;/td&gt;
&lt;td&gt;300.00&lt;/td&gt;
&lt;td&gt;130.00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-高级用法示例"&gt;📊 高级用法示例
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;处理 &lt;code&gt;NULL&lt;/code&gt;值&lt;/strong&gt;：可以使用 &lt;code&gt;default_value&lt;/code&gt;参数或 &lt;code&gt;COALESCE&lt;/code&gt;函数为没有前一行数据的行（如第一行）提供默认值。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT
sale_date,
amount,
amount - LAG(amount, 1, 0) OVER (ORDER BY sale_date) AS difference -- 没有前一行则用0计算
FROM sales;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT
sale_date,
amount,
COALESCE(amount - LAG(amount) OVER (ORDER BY sale_date), 0) AS difference -- 将NULL替换为0
FROM sales;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;按分区计算差值&lt;/strong&gt;：使用 &lt;code&gt;PARTITION BY&lt;/code&gt;可以在不同的组内分别计算差值。例如，按 &lt;code&gt;product_id&lt;/code&gt;分区，计算每个产品自身的销售额变化：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT
product_id,
sale_date,
amount,
amount - LAG(amount) OVER (PARTITION BY product_id ORDER BY sale_date) AS diff_within_product
FROM sales;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;计算时间间隔&lt;/strong&gt;：结合 &lt;code&gt;DATEDIFF()&lt;/code&gt;等日期函数，可以计算日期之间的差值。例如，计算两次销售之间的天数间隔：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT
sale_date,
amount,
DATEDIFF(sale_date, LAG(sale_date) OVER (ORDER BY sale_date)) AS days_since_last_sale
FROM sales;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-重要注意事项-4"&gt;⚠️ 重要注意事项
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MySQL 版本要求&lt;/strong&gt;：&lt;code&gt;LAG()&lt;/code&gt;和 &lt;code&gt;LEAD()&lt;/code&gt;等窗口函数需要 &lt;strong&gt;MySQL 8.0 或更高版本&lt;/strong&gt;。如果你使用的是旧版本，可能需要通过变量或自连接等复杂方式实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能&lt;/strong&gt;：对大型数据集使用窗口函数时，&lt;strong&gt;确保 &lt;code&gt;ORDER BY&lt;/code&gt;和 &lt;code&gt;PARTITION BY&lt;/code&gt;中使用的列上有适当的索引&lt;/strong&gt;，以提高查询性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;理解 &lt;code&gt;ORDER BY&lt;/code&gt;&lt;/strong&gt;：&lt;code&gt;OVER()&lt;/code&gt;子句中的 &lt;code&gt;ORDER BY&lt;/code&gt;至关重要，它决定了行的顺序，从而直接影响 &lt;code&gt;LAG()&lt;/code&gt;获取的是哪一行的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望这些信息能帮助你顺利使用窗口函数计算差值！&lt;/p&gt;
&lt;h2 id="相关子查询"&gt;相关子查询
&lt;/h2&gt;&lt;p&gt;。MySQL 中相同的子查询&lt;strong&gt;是否会被重复执行，取决于子查询的类型和具体场景&lt;/strong&gt;。理解这一点对编写高效的 SQL 语句很重要。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;子查询类型&lt;/th&gt;
&lt;th&gt;是否会重复执行&lt;/th&gt;
&lt;th&gt;原因与机制&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;非相关子查询&lt;/strong&gt; (不依赖外部查询)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;通常不会&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;MySQL 查询优化器会尝试将其&lt;strong&gt;执行一次并将结果缓存&lt;/strong&gt;起来，供外部查询重复使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;相关子查询&lt;/strong&gt; (依赖外部查询的列)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;会&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;子查询&lt;strong&gt;依赖于外部查询的每一行&lt;/strong&gt;，因此会为外部查询结果集中的每一行都执行一次。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;💡 &lt;strong&gt;如何判断？用 &lt;code&gt;EXPLAIN&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要确切知道你的子查询是如何被执行的，最有效的方法是使用 &lt;code&gt;EXPLAIN&lt;/code&gt;命令查看查询的执行计划。分析执行计划可以帮助你了解优化器选择的访问方法（如是否使用了索引、是否有临时表、是否进行了全表扫描等），从而判断是否存在性能瓶颈。&lt;/p&gt;
&lt;h3 id="-优化子查询性能的策略"&gt;🔧 优化子查询性能的策略
&lt;/h3&gt;&lt;p&gt;如果发现子查询导致性能问题，可以考虑以下优化策略：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;将子查询改写为 &lt;code&gt;JOIN&lt;/code&gt;&lt;/strong&gt;：这是最常用且有效的优化手段。&lt;code&gt;JOIN&lt;/code&gt;操作通常能被数据库更好地优化，尤其是当关联字段上有索引时。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 原始查询：可能为相关子查询，效率低
SELECT * FROM orders o
WHERE o.customer_id IN (SELECT c.customer_id FROM customers c WHERE c.country = o.country);
-- 优化为JOIN：
SELECT DISTINCT o.* FROM orders o
JOIN customers c ON o.customer_id = c.customer_id AND c.country = o.country;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用 &lt;code&gt;EXISTS&lt;/code&gt;代替 &lt;code&gt;IN&lt;/code&gt;&lt;/strong&gt;：对于相关子查询，特别是使用 &lt;code&gt;IN&lt;/code&gt;的场景，&lt;code&gt;EXISTS&lt;/code&gt;往往更高效，因为它一旦找到匹配项就会停止扫描。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 使用 EXISTS
SELECT * FROM orders o
WHERE EXISTS (SELECT 1 FROM customers c WHERE c.customer_id = o.customer_id AND c.country = o.country);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;确保合适的索引&lt;/strong&gt;：为子查询中&lt;strong&gt;用于连接（&lt;code&gt;WHERE&lt;/code&gt;条件或 &lt;code&gt;JOIN&lt;/code&gt;条件）的字段创建索引&lt;/strong&gt;至关重要，这能极大提升 both 子查询本身和 &lt;code&gt;JOIN&lt;/code&gt;操作的性能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用临时表或派生表（MySQL 5.7及以下）&lt;/strong&gt;：对于复杂或重复使用的非相关子查询，可以将其结果存入临时表或作为派生表，避免重复计算。MySQL 8.0+ 可以考虑使用 CTE (Common Table Expressions)。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-- 使用派生表
SELECT *
FROM orders o,
(SELECT customer_id FROM customers WHERE country = &amp;#39;USA&amp;#39;) AS usa_customers
WHERE o.customer_id = usa_customers.customer_id;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-总结-21"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;MySQL 是否会重复执行相同的子查询，&lt;strong&gt;关键在于子查询是否依赖于外部查询（是否是相关子查询）&lt;/strong&gt;。对于非相关子查询，优化器会尽力缓存；而对于相关子查询，则无法避免多次执行。&lt;/p&gt;
&lt;p&gt;优化子查询性能的首要方法是&lt;strong&gt;尝试将其改写为 &lt;code&gt;JOIN&lt;/code&gt;&lt;/strong&gt;，并结合 &lt;code&gt;EXPLAIN&lt;/code&gt;命令分析执行计划，以及&lt;strong&gt;为相关字段创建合适的索引&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id="with--不相关子查询"&gt;WITH &amp;amp; 不相关子查询
&lt;/h2&gt;&lt;p&gt;MySQL 如何处理 SQL 语句中多个相同的&lt;strong&gt;不相关子查询&lt;/strong&gt;（即不依赖外部查询值的子查询），以及使用 &lt;code&gt;WITH&lt;/code&gt;(CTE) 对其行为的影响，确实是一个关乎性能的重要问题。&lt;/p&gt;
&lt;p&gt;简单来说：&lt;strong&gt;现代 MySQL 优化器会尽力避免重复执行相同的非相关子查询，但使用 CTE 通常能提供更明确和可靠的控制。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面这个表格汇总了核心对比，帮你快速了解它们的主要区别：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;直接使用多个相同的不相关子查询&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;使用 &lt;code&gt;WITH&lt;/code&gt;(CTE) 定义并引用&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;执行次数 (理想情况)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;一次&lt;/strong&gt; (优化器尝试缓存结果)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;一次&lt;/strong&gt; (CTE 结果集被物化或优化)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;执行次数 (风险情况)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;可能多次&lt;/strong&gt; (复杂查询中优化器可能无法优化)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;一次&lt;/strong&gt; (CTE 的定义明确，确保了重用性)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;可读性和维护性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;较低，SQL 语句冗长且重复&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;更高&lt;/strong&gt;，查询结构清晰，逻辑分离&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;可重用性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;差，每个子查询需单独编写&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;好&lt;/strong&gt;，定义一次，可在主查询中&lt;strong&gt;多次引用&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;递归查询&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;支持&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id="-不相关子查询的执行"&gt;🔍 不相关子查询的执行
&lt;/h3&gt;&lt;p&gt;对于不相关子查询（子查询可以独立运行，不依赖于外部查询的值），MySQL 查询优化器会尝试识别出这些相同的子查询，并&lt;strong&gt;尽可能只执行一次，然后将结果缓存起来供所有需要的地方使用&lt;/strong&gt;。这是一种优化手段，旨在避免不必要的重复计算。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例如：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT * FROM products
WHERE category_id IN (SELECT id FROM categories WHERE type = &amp;#39;Electronics&amp;#39;) -- 子查询1
AND price &amp;gt; (SELECT AVG(price) FROM products WHERE category_id IN (SELECT id FROM categories WHERE type = &amp;#39;Electronics&amp;#39;)); -- 子查询2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这个查询中，两个 &lt;code&gt;(SELECT id FROM categories WHERE type = 'Electronics')&lt;/code&gt;是相同的&lt;strong&gt;不相关子查询&lt;/strong&gt;。MySQL 优化器很可能只执行它一次，然后缓存结果集 &lt;code&gt;(100, 101)&lt;/code&gt;，并在两个需要的地方（子查询1和子查询2中）重复使用这个缓存的结果。&lt;/p&gt;
&lt;h3 id="-使用-cte-的影响"&gt;⚙️ 使用 CTE 的影响
&lt;/h3&gt;&lt;p&gt;使用 &lt;code&gt;WITH&lt;/code&gt;关键字定义 CTE (公共表表达式) 会改变编写和优化的方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;显式定义与引用&lt;/strong&gt;：CTE 允许你&lt;strong&gt;显式地&lt;/strong&gt;定义一个临时结果集，然后在主查询中像使用普通表一样&lt;strong&gt;多次引用它&lt;/strong&gt;。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;WITH ElectronicCategories AS (
SELECT id FROM categories WHERE type = &amp;#39;Electronics&amp;#39; -- CTE定义，执行一次
)
SELECT * FROM products
WHERE category_id IN (SELECT id FROM ElectronicCategories) -- 引用CTE
AND price &amp;gt; (SELECT AVG(price) FROM products WHERE category_id IN (SELECT id FROM ElectronicCategories)); -- 再次引用CTE
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;执行优化&lt;/strong&gt;：数据库引擎通常会&lt;strong&gt;将 CTE 的结果看作一个临时数据集&lt;/strong&gt;。虽然 CTE 不一定总是被“物化”（物理存储在临时表中），但优化器会意识到 &lt;code&gt;ElectronicCategories&lt;/code&gt;只需要计算一次，然后在后续引用中重用该结果。这&lt;strong&gt;从语义上保证了相同逻辑只执行一次&lt;/strong&gt;，避免了优化器无法识别重复子查询的风险。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可读性提升&lt;/strong&gt;：CTE 能将复杂的查询逻辑分解成清晰的步骤，大大提高了 SQL 语句的可读性和可维护性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-决策建议"&gt;💡 决策建议
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;追求可读性和可靠性时，使用 CTE&lt;/strong&gt;：尤其是在复杂的查询中，有多个地方需要引用相同的逻辑时。CTE 能确保逻辑只定义一次，并能明确地多次引用，让 SQL 更易读、更易维护，也更能保证性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简单场景，直接写子查询亦可&lt;/strong&gt;：如果查询非常简单，优化器大概率能正确优化，直接写子查询也可以。但使用 CTE 通常是一个更稳妥的好习惯。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;总是检查执行计划&lt;/strong&gt;：对于复杂的、性能关键的查询，最可靠的方法是使用 &lt;code&gt;EXPLAIN&lt;/code&gt;命令分析执行计划。这会告诉你优化器最终决定如何执行查询，包括是否创建了临时表、是否进行了重复计算等，从而帮你做出最终判断。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望这些信息能帮助你更好地编写高效的 SQL 查询！&lt;/p&gt;
&lt;h2 id="with-recursive"&gt;WITH RECURSIVE
&lt;/h2&gt;&lt;p&gt;在 MySQL 中，使用 &lt;code&gt;WITH RECURSIVE&lt;/code&gt;进行递归向上聚合是处理树形或层级结构数据（如组织架构、产品分类、论坛评论嵌套）的强大工具。它允许你从某个叶节点或分支节点开始，向上遍历其所有祖先节点，并在遍历过程中进行聚合计算（如汇总成本、计算路径、标记层级等）。&lt;/p&gt;
&lt;h3 id="-递归向上聚合核心步骤"&gt;📊 递归向上聚合核心步骤
&lt;/h3&gt;&lt;p&gt;一个典型的递归向上聚合查询包含两个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;锚点成员 (Anchor Member)&lt;/strong&gt;：这是递归的起点，用于选择初始节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;递归成员 (Recursive Member)&lt;/strong&gt;：通过连接 CTE 自身和原表，不断向上查找父节点，并在此过程中进行聚合计算。递归成员会反复执行，直到找不到更多的父节点（即到达根节点）为止。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-语法结构"&gt;🧩 语法结构
&lt;/h3&gt;&lt;pre tabindex="0"&gt;&lt;code&gt;WITH RECURSIVE cte_name AS (
-- 锚点成员：选择起始节点，并初始化聚合值
SELECT
id,
parent_id,
some_value,
initial_value AS aggregated_value, -- 初始化聚合值（如自身值、路径、层级）
1 AS level -- 或其他标记
FROM your_table
WHERE condition_to_select_starting_node -- 例如 id = ?
UNION ALL
-- 递归成员：向上查找父节点，并累加或计算聚合值
SELECT
t.id,
t.parent_id,
t.some_value,
ct.aggregated_value OPERATOR t.some_value, -- 向上聚合计算（如相加、拼接路径）
ct.level + 1 -- 层级递增
FROM your_table t
INNER JOIN cte_name ct ON t.id = ct.parent_id -- 关键：通过 parent_id 向上连接
-- WHERE ct.parent_id IS NOT NULL -- 可选的显式终止条件
)
SELECT * FROM cte_name; -- 最终查询递归CTE的结果
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="-示例说明-2"&gt;📌 示例说明
&lt;/h3&gt;&lt;p&gt;假设有一个 &lt;code&gt;employees&lt;/code&gt;表，结构如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;manager_id&lt;/th&gt;
&lt;th&gt;salary&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Alice&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;100000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Bob&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;80000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Charlie&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;60000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;David&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;40000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;1. 向上遍历路径（非聚合，但重要基础）&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;WITH RECURSIVE employee_chain AS (
-- 锚点：从David（id=4）开始
SELECT
id,
name,
manager_id,
CAST(name AS CHAR(200)) AS path -- 初始化路径
FROM employees
WHERE id = 4
UNION ALL
-- 递归：不断向上查找经理，并将名字添加到路径中
SELECT
e.id,
e.name,
e.manager_id,
CONCAT(e.name, &amp;#39; -&amp;gt; &amp;#39;, ec.path) -- 向上构建路径
FROM employees e
INNER JOIN employee_chain ec ON e.id = ec.manager_id
)
SELECT * FROM employee_chain;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;查询结果&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;manager_id&lt;/th&gt;
&lt;th&gt;path&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;David&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;David&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Charlie&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Charlie -&amp;gt; David&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Bob&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Bob -&amp;gt; Charlie -&amp;gt; David&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Alice&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;Alice -&amp;gt; Bob -&amp;gt; Charlie -&amp;gt; David&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;2. 向上聚合薪资（递归向上聚合）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;若要计算从某个员工开始，其向上整个管理链的总薪资（包括自己及其所有经理的薪资）：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;WITH RECURSIVE salary_rollup AS (
-- 锚点：从员工David（id=4）开始，其薪资作为初始聚合值
SELECT
id,
name,
manager_id,
salary,
salary AS total_salary -- 初始化总薪资（自身薪资）
FROM employees
WHERE id = 4
UNION ALL
-- 递归：向上查找经理，并将经理的薪资累加到总薪资中
SELECT
e.id,
e.name,
e.manager_id,
e.salary,
sr.total_salary + e.salary AS total_salary -- 累加经理薪资
FROM employees e
INNER JOIN salary_rollup sr ON e.id = sr.manager_id
)
SELECT * FROM salary_rollup;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;查询结果&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;manager_id&lt;/th&gt;
&lt;th&gt;salary&lt;/th&gt;
&lt;th&gt;total_salary&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;David&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;40000&lt;/td&gt;
&lt;td&gt;40000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Charlie&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;60000&lt;/td&gt;
&lt;td&gt;100000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Bob&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;80000&lt;/td&gt;
&lt;td&gt;180000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Alice&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;100000&lt;/td&gt;
&lt;td&gt;280000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-注意事项-6"&gt;⚠️ 注意事项
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;终止条件&lt;/strong&gt;：递归成员必须有一个隐式或显式的终止条件，否则会无限循环。通常，当 &lt;code&gt;cte_name.parent_id&lt;/code&gt;为 &lt;code&gt;NULL&lt;/code&gt;（找不到父节点）时，递归会自动终止。你也可以在递归成员中使用 &lt;code&gt;WHERE ct.parent_id IS NOT NULL&lt;/code&gt;来显式确保。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能&lt;/strong&gt;：递归查询可能会产生大量中间结果。确保在 &lt;strong&gt;&lt;code&gt;parent_id&lt;/code&gt;&lt;/strong&gt; 和 &lt;strong&gt;&lt;code&gt;id&lt;/code&gt;&lt;/strong&gt; 字段上建立索引，可以显著提升连接性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MySQL版本&lt;/strong&gt;：&lt;code&gt;WITH RECURSIVE&lt;/code&gt;需要 &lt;strong&gt;MySQL 8.0 或更高版本&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;循环依赖&lt;/strong&gt;：确保数据中没有循环引用（例如 A 的父节点是 B，B 的父节点又是 A），否则递归将无法终止。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;聚合逻辑&lt;/strong&gt;：根据你的需求设计聚合逻辑。除了求和 (&lt;code&gt;SUM&lt;/code&gt;)，你还可以进行字符串拼接 (&lt;code&gt;CONCAT&lt;/code&gt;)、计数、取最大值/最小值等操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用 MATERIALIZED 提示&lt;/strong&gt;：在某些复杂的递归查询中，你可以使用 &lt;code&gt;MATERIALIZED&lt;/code&gt;提示来强制数据库将CTE的结果物化（临时存储），这可能会影响性能（可能更好也可能更差），需根据实际情况测试。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-总结-22"&gt;💡 总结
&lt;/h3&gt;&lt;p&gt;使用 &lt;code&gt;WITH RECURSIVE&lt;/code&gt;进行递归向上聚合的核心在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;锚点成员&lt;/strong&gt;定义起始点和聚合初始值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;递归成员&lt;/strong&gt;通过 &lt;code&gt;INNER JOIN ... ON t.id = ct.parent_id&lt;/code&gt;不断向上遍历，并在此过程中进行聚合计算（如累加、拼接等）。&lt;/li&gt;
&lt;li&gt;递归会在找不到父节点时自动终止。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;掌握此方法，你可以轻松应对各种需要自底向上进行数据汇总和分析的场景。&lt;/p&gt;
&lt;h2 id="禁止聚合"&gt;禁止聚合
&lt;/h2&gt;&lt;p&gt;MySQL 的递归公用表表达式（Recursive CTE）在&lt;strong&gt;递归部分&lt;/strong&gt;确实禁止使用聚合函数（如 &lt;code&gt;SUM()&lt;/code&gt;、&lt;code&gt;COUNT()&lt;/code&gt;）和窗口函数（如 &lt;code&gt;ROW_NUMBER()&lt;/code&gt;、&lt;code&gt;RANK()&lt;/code&gt;）。这个错误提示明确指出了这一点。下面我将为您解释原因和解决方案。&lt;/p&gt;
&lt;h3 id="-错误原因与限制"&gt;⚠️ 错误原因与限制
&lt;/h3&gt;&lt;p&gt;在 MySQL 的递归 CTE 中，&lt;strong&gt;递归查询块&lt;/strong&gt;（即 &lt;code&gt;UNION ALL&lt;/code&gt;之后的部分）有严格的语法限制。根据 MySQL 的设计和 SQL 标准，递归部分不能包含以下结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;聚合函数&lt;/strong&gt;：如 &lt;code&gt;SUM()&lt;/code&gt;, &lt;code&gt;COUNT()&lt;/code&gt;, &lt;code&gt;AVG()&lt;/code&gt;, &lt;code&gt;MAX()&lt;/code&gt;, &lt;code&gt;MIN()&lt;/code&gt;等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;窗口函数&lt;/strong&gt;：如 &lt;code&gt;ROW_NUMBER()&lt;/code&gt;, &lt;code&gt;RANK()&lt;/code&gt;, &lt;code&gt;DENSE_RANK()&lt;/code&gt;, &lt;code&gt;LAG()&lt;/code&gt;, &lt;code&gt;LEAD()&lt;/code&gt;等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GROUP BY 子句&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ORDER BY 子句&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DISTINCT 关键字&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;原因在于&lt;/strong&gt;：递归 CTE 的工作原理是逐步迭代，每次迭代都基于前一次的结果集生成新的行。聚合和窗口函数通常需要对&lt;strong&gt;整个数据集&lt;/strong&gt;或&lt;strong&gt;一个明确的分区&lt;/strong&gt;进行操作，这与递归逐步生成数据的本质相冲突，可能导致无法预测的行为或性能问题。&lt;/p&gt;
&lt;h3 id="-解决方案"&gt;🔧 解决方案
&lt;/h3&gt;&lt;p&gt;虽然不能在递归部分直接使用这些函数，但您可以通过调整查询结构来达成目标。以下是两种常见的解决思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;将聚合操作移至外部查询&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是最常用的方法。在递归CTE中只专注于生成所需的所有行（例如，生成完整的层级关系），然后在最外层的&lt;code&gt;SELECT&lt;/code&gt;语句中对这些结果进行聚合或窗口计算。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;WITH RECURSIVE employee_hierarchy AS (
-- 非递归部分：找到初始员工（例如CEO）
SELECT
id,
name,
manager_id,
1 AS level -- 初始层级
FROM employees
WHERE manager_id IS NULL -- 假设顶层经理的manager_id为NULL
UNION ALL
-- 递归部分：仅连接表，生成层级关系，不进行聚合
SELECT
e.id,
e.name,
e.manager_id,
eh.level + 1 -- 层级递增
FROM employees e
INNER JOIN employee_hierarchy eh ON e.manager_id = eh.id
-- 此处不能有聚合或窗口函数
)
-- 在外层查询中进行聚合
SELECT
manager_id,
COUNT(*) AS direct_reports_count, -- 计算每个经理的直接下属数量
AVG(level) AS avg_level_in_hierarchy -- 计算平均层级（示例）
FROM employee_hierarchy
GROUP BY manager_id;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用多个CTE分步处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于更复杂的逻辑，可以先用一个递归CTE生成基础数据，再通过另一个（非递归）CTE或子查询进行聚合。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;WITH RECURSIVE base_data AS (
-- 递归CTE仅负责生成需要的行集
SELECT id, name, manager_id
FROM employees
WHERE ... -- 你的初始条件
UNION ALL
SELECT e.id, e.name, e.manager_id
FROM employees e
JOIN base_data b ON e.manager_id = b.id
),
aggregated_data AS (
-- 在非递归CTE或外部查询中进行聚合
SELECT
manager_id,
COUNT(*) AS team_size,
SUM(salary) AS total_salary -- 假设有salary字段
FROM base_data
GROUP BY manager_id
)
SELECT * FROM aggregated_data;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-重要注意事项-5"&gt;💡 重要注意事项
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;递归终止条件&lt;/strong&gt;：务必在递归部分包含有效的终止条件（例如 &lt;code&gt;WHERE level &amp;lt; 100&lt;/code&gt;），或通过设置 &lt;code&gt;cte_max_recursion_depth&lt;/code&gt;系统变量来防止无限递归和性能问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能考量&lt;/strong&gt;：递归CTE可能产生大量中间数据。确保在连接条件使用的字段（如 &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;manager_id&lt;/code&gt;）上有合适的索引，以提升查询性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据循环引用&lt;/strong&gt;：确保数据中没有循环引用（例如A的上级是B，B的上级又是A），否则递归可能无法终止。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-总结-23"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;遇到 “Recursive Common Table Expression can contain neither aggregation nor window functions” 错误时，核心解决思路是：&lt;strong&gt;在递归部分仅进行简单的数据生成和连接操作，将所有复杂的聚合、排序、分组等计算移到最外层的查询或使用额外的非递归CTE来完成。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过将递归逻辑与聚合逻辑分离，你既可以遵守MySQL的语法限制，又能实现复杂的数据查询需求。&lt;/p&gt;
&lt;h2 id="多个-partition-by"&gt;多个 partition by
&lt;/h2&gt;&lt;p&gt;MySQL 的窗口函数中，使用 &lt;code&gt;PARTITION BY&lt;/code&gt;后跟多个键（列）是一种强大的功能，它允许你根据多个维度来划分数据窗口，进行精细化的分组计算。下面我来为你详细解释它的行为、技巧和注意事项。&lt;/p&gt;
&lt;h3 id="-多键分区核心行为"&gt;📊 多键分区核心行为
&lt;/h3&gt;&lt;p&gt;当你使用 &lt;code&gt;PARTITION BY col1, col2, ...&lt;/code&gt;时，其核心行为是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;联合键分组&lt;/strong&gt;：窗口函数不会单独按 &lt;code&gt;col1&lt;/code&gt;或 &lt;code&gt;col2&lt;/code&gt;分区，而是将 &lt;code&gt;(col1, col2)&lt;/code&gt;的&lt;strong&gt;组合值&lt;/strong&gt;作为一个整体分区键。只有所有指定列的值都相同的行才会被分到同一个窗口内。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分区内独立计算&lt;/strong&gt;：计算（如 &lt;code&gt;SUM()&lt;/code&gt;, &lt;code&gt;ROW_NUMBER()&lt;/code&gt;, &lt;code&gt;AVG()&lt;/code&gt;等）会在&lt;strong&gt;每个这样的组合分区内独立进行&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保留原始行&lt;/strong&gt;：与 &lt;code&gt;GROUP BY&lt;/code&gt;会折叠行不同，&lt;code&gt;PARTITION BY&lt;/code&gt;会保留所有原始数据行，并在此基础上为每一行添加一个基于其所在分区计算得出的新列。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设有一个销售表 &lt;code&gt;sales_data(region, product_category, sales)&lt;/code&gt;。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SELECT
region,
product_category,
sales,
SUM(sales) OVER (PARTITION BY region, product_category) AS regional_category_sales
FROM sales_data;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这个查询中，&lt;code&gt;SUM(sales)&lt;/code&gt;不会计算所有销售总额，也不会单独按 &lt;code&gt;region&lt;/code&gt;或 &lt;code&gt;product_category&lt;/code&gt;计算，而是会为每一个 &lt;code&gt;(region, product_category)&lt;/code&gt;组合（如 &lt;code&gt;('North', 'Electronics')&lt;/code&gt;）计算其销售总额，并将这个结果附加到该组合下的每一行上。&lt;/p&gt;
&lt;h3 id="-执行顺序与语法"&gt;⚙️ 执行顺序与语法
&lt;/h3&gt;&lt;p&gt;在窗口函数的 &lt;code&gt;OVER()&lt;/code&gt;子句中，多个分区键的语法非常直接：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;窗口函数&amp;gt;() OVER (
[PARTITION BY 键1, 键2, ...]
[ORDER BY 排序列1, ...]
[窗口框架子句]
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其逻辑执行顺序可以理解为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;数据分区&lt;/strong&gt;：根据 &lt;code&gt;PARTITION BY&lt;/code&gt;后列出的所有键进行分区。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分区内排序&lt;/strong&gt;：如果指定了 &lt;code&gt;ORDER BY&lt;/code&gt;，则在每个分区内按规则排序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;窗口框架划定&lt;/strong&gt;：如果指定了 &lt;code&gt;ROWS&lt;/code&gt;或 &lt;code&gt;RANGE&lt;/code&gt;，进一步确定计算范围。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分区内计算&lt;/strong&gt;：在前三步确定的窗口范围内执行指定的窗口函数。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-应用场景"&gt;🎯 应用场景
&lt;/h3&gt;&lt;p&gt;多键分区非常适合需要&lt;strong&gt;同时基于多个维度进行分组分析&lt;/strong&gt;的场景，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多层次聚合分析&lt;/strong&gt;：如计算每个地区下每个产品类别的销售额、每个班级内每门科目的平均分等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复合排名&lt;/strong&gt;：如计算每个部门内按不同职称级别的薪资排名 &lt;code&gt;(PARTITION BY dept, title ORDER BY salary DESC)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;精细化对比&lt;/strong&gt;：如计算每个客户在不同产品上的消费与其对应产品平均消费的偏差。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-注意事项与性能优化-1"&gt;⚠️ 注意事项与性能优化
&lt;/h3&gt;&lt;p&gt;使用多键分区时，有一些重要的考量点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分区键顺序&lt;/strong&gt;：&lt;code&gt;PARTITION BY key1, key2&lt;/code&gt;和 &lt;code&gt;PARTITION BY key2, key1&lt;/code&gt;产生的结果集是&lt;strong&gt;相同&lt;/strong&gt;的，因为分区依据都是所有键的组合值。不过，在极少数情况下，如果键中包含 &lt;code&gt;NULL&lt;/code&gt;值，不同数据库对 &lt;code&gt;NULL&lt;/code&gt;值的处理方式可能略有差异。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能影响&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;分区键越多，理论上划分的分区就越多、越细。这可能会&lt;strong&gt;增加计算开销&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;为经常一起用于分区的列创建&lt;strong&gt;复合索引&lt;/strong&gt; (&lt;code&gt;CREATE INDEX idx_region_category ON sales_data(region, product_category)&lt;/code&gt;) 可以显著提升查询性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基数考量&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;优先选择&lt;strong&gt;基数较低&lt;/strong&gt;（不同值较少）的列作为分区键，如地区、产品类型等。&lt;/li&gt;
&lt;li&gt;避免使用&lt;strong&gt;基数非常高&lt;/strong&gt;（几乎每条记录都不同）的列作为分区键，例如用户ID、订单ID。这可能会导致分区数量过多（几乎每一行都是一个分区），使窗口函数退化为类似逐行计算的情况，效率低下。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NULL 值处理&lt;/strong&gt;：需要注意分区键中可能存在 &lt;code&gt;NULL&lt;/code&gt;值。在分区时，所有 &lt;code&gt;NULL&lt;/code&gt;值会被视为相同的值归入同一个分区。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-总结-24"&gt;💡 总结
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;PARTITION BY&lt;/code&gt;后跟多个键是一种强大的功能，它通过&lt;strong&gt;将多个列的组合值作为分区依据&lt;/strong&gt;，让你能够在更精细的维度上执行窗口计算，同时保留原始数据的全部细节。&lt;/p&gt;
&lt;p&gt;掌握这一特性，能帮助你轻松应对各种复杂的多维度数据分析需求，从简单的多层聚合到复杂的复合排名和跨行对比，都能优雅地实现。只需注意分区键的选择和性能优化，就能高效地发挥其威力。&lt;/p&gt;</description></item><item><title>【Database】Indexes</title><link>https://dyhes.github.io/p/databaseindexes/</link><pubDate>Mon, 18 Nov 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/databaseindexes/</guid><description>&lt;p&gt;数据库索引是数据库管理系统中用于提高查询效率的数据结构。它们允许数据库系统快速找到表中的数据，而无需扫描整个表。&lt;/p&gt;
&lt;p&gt;正确使用索引可以极大地提高数据库的性能，但也需要根据具体的查询模式和数据访问模式来设计和维护索引。不当的索引可能会导致性能下降，因此需要仔细规划和定期评估索引的有效性。&lt;/p&gt;
&lt;p&gt;索引通常是&lt;strong&gt;数据库表之外&lt;/strong&gt;的辅助数据结构。它们存储在数据库的存储介质上，与实际的数据表&lt;strong&gt;分开&lt;/strong&gt;，但与表中的数据相关联。&lt;/p&gt;
&lt;p&gt;索引使用特定的数据结构（如&lt;strong&gt;B树、B+树、哈希表&lt;/strong&gt;等）来组织数据，这些结构支持高效的查找、插入和删除操作。&lt;/p&gt;
&lt;p&gt;当表中的数据发生变化（如插入、更新或删除）时，相应的索引也需要更新，以保持索引的准确性和有效性，因此&lt;strong&gt;经常修改的列不适合作为索引&lt;/strong&gt;，经常修改的表需要结合业务权衡索引带来的查询性能提升与更新代价。&lt;/p&gt;
&lt;p&gt;索引通常只存储&lt;strong&gt;用于快速定位数据的键值和指向实际数据的指针或行标识符&lt;/strong&gt;，而不存储完整的数据行。&lt;/p&gt;
&lt;p&gt;索引可以显著提高排序操作的性能。当你在一个列上创建索引时，数据库会根据该列的值构建一个有序的数据结构（通常是B树）。这使得数据库在执行排序操作时可以利用索引的有序性，从而大大提高排序的效率。&lt;/p&gt;
&lt;h2 id="example"&gt;Example
&lt;/h2&gt;&lt;h5 id=""&gt;
&lt;/h5&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;字段名称&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;数据类型&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;约束&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BIGINT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PRIMARY KEY&lt;/code&gt;, &lt;code&gt;AUTO_INCREMENT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;空间用户信息的唯一标识符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;user_id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BIGINT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;FOREIGN KEY&lt;/code&gt;, &lt;code&gt;NOT NULL&lt;/code&gt;,&lt;code&gt;PRIMARY KEY&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;关联的用户的唯一标识符，关联到 &lt;code&gt;users&lt;/code&gt; 表。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;createdAt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TIMESTAMP&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;NOT NULL&lt;/code&gt;, &lt;code&gt;AUDIT-CREATED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;记录用户加入空间的时间。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;content&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TEXT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;NOT NULL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;通知。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在OceanBase中对于这样一张表以user_id为分区键进行Range分区，再在 user_id列上建立本地索引，便于按照用户查询通知可行吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;QWEN:&lt;/p&gt;
&lt;p&gt;在OceanBase中，你可以使用分区表来优化大规模数据的管理和查询性能。根据你提供的表结构和需求，我们可以考虑以下设计方案：&lt;/p&gt;
&lt;h3 id="表结构"&gt;表结构
&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;notifications&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;BIGINT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;PRIMARY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;BIGINT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NOT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;createdAt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TIMESTAMP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NOT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;TEXT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NOT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FOREIGN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;REFERENCES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;PARTITION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RANGE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PARTITION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;VALUES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LESS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;THAN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PARTITION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;VALUES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LESS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;THAN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PARTITION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;VALUES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LESS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;THAN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;-- 添加更多分区，根据实际数据范围进行调整
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PARTITION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;VALUES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LESS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;THAN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;MAXVALUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="分区键和本地索引"&gt;分区键和本地索引
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分区键&lt;/strong&gt;：你选择 &lt;code&gt;user_id&lt;/code&gt; 作为分区键，这是一个合理的选择，因为 &lt;code&gt;user_id&lt;/code&gt; 是一个常用的查询条件，而且每个用户的通知数据通常会被集中在一起，有利于分区的局部性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;本地索引&lt;/strong&gt;：在 &lt;code&gt;user_id&lt;/code&gt; 列上建立本地索引，可以进一步优化查询性能，特别是当查询条件中包含 &lt;code&gt;user_id&lt;/code&gt; 时。本地索引是针对每个分区单独创建的索引，可以减少跨分区的查询开销。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="创建本地索引"&gt;创建本地索引
&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LOCAL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;INDEX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;idx_user_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;notifications&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="优点"&gt;优点
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;查询性能&lt;/strong&gt;：通过分区和本地索引，可以显著提高按 &lt;code&gt;user_id&lt;/code&gt; 查询通知的性能。数据库可以直接定位到相应的分区，并使用本地索引快速查找数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;写入性能&lt;/strong&gt;：分区可以分散写操作的压力，减少单个分区的热点问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;维护成本&lt;/strong&gt;：分区和本地索引的维护成本相对较低，特别是在数据量较大时，分区可以有效管理数据的分布和访问。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="示例查询"&gt;示例查询
&lt;/h3&gt;&lt;p&gt;假设你需要查询某个用户的最近10条通知：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;notifications&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12345&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;createdAt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;LIMIT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个查询中，数据库会首先定位到包含 &lt;code&gt;user_id = 12345&lt;/code&gt; 的分区，然后使用本地索引快速查找并排序数据。&lt;/p&gt;
&lt;h3 id="注意事项"&gt;注意事项
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;分区数&lt;/strong&gt;：合理选择分区数，避免过多或过少的分区。过多的分区会增加管理复杂度，过少的分区则无法充分发挥分区的优势。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分区边界&lt;/strong&gt;：根据实际数据分布选择合适的分区边界。可以定期调整分区边界，以适应数据增长。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;索引维护&lt;/strong&gt;：虽然本地索引可以提高查询性能，但也会增加写操作的开销。需要权衡索引带来的性能提升和维护成本。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="总结"&gt;总结
&lt;/h3&gt;&lt;p&gt;在OceanBase中，以 &lt;code&gt;user_id&lt;/code&gt; 为分区键进行Range分区，并在 &lt;code&gt;user_id&lt;/code&gt; 列上建立本地索引，是一个合理的设计方案，可以有效优化按用户查询通知的性能。通过合理选择分区数和分区边界，可以进一步提高系统的性能和可维护性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果我还想支持对于通知按时间快速排序，我是不是应该在create_at列上建立本地索引？两个索引之间能相互协作吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;QWEN:&lt;/p&gt;
&lt;p&gt;在OceanBase中，如果你想支持按时间快速排序，同时保持按用户查询通知的高效性，可以在 &lt;code&gt;createdAt&lt;/code&gt; 列上建立本地索引。这样，你就可以同时利用 &lt;code&gt;user_id&lt;/code&gt; 和 &lt;code&gt;createdAt&lt;/code&gt; 列的索引来优化查询性能。&lt;/p&gt;
&lt;h3 id="表结构和分区"&gt;表结构和分区
&lt;/h3&gt;&lt;p&gt;假设你的表结构如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;notifications&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;BIGINT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;PRIMARY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;BIGINT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NOT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;createdAt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TIMESTAMP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NOT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;TEXT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NOT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FOREIGN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;REFERENCES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;PARTITION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RANGE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PARTITION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;VALUES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LESS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;THAN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PARTITION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;VALUES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LESS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;THAN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PARTITION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;VALUES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LESS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;THAN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;-- 添加更多分区，根据实际数据范围进行调整
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PARTITION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;VALUES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LESS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;THAN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;MAXVALUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="创建本地索引-1"&gt;创建本地索引
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在 &lt;code&gt;user_id&lt;/code&gt; 列上创建本地索引&lt;/strong&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LOCAL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;INDEX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;idx_user_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;notifications&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在 &lt;code&gt;createdAt&lt;/code&gt; 列上创建本地索引&lt;/strong&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LOCAL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;INDEX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;idx_createdAt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;notifications&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;createdAt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="两个索引之间的协作"&gt;两个索引之间的协作
&lt;/h3&gt;&lt;p&gt;虽然两个索引可以分别优化不同的查询条件，但它们并不会直接“协作”来优化同一个查询。然而，通过合理设计查询，可以充分利用这两个索引。&lt;/p&gt;
&lt;h3 id="示例查询-1"&gt;示例查询
&lt;/h3&gt;&lt;p&gt;假设你需要查询某个用户的最近10条通知，并按时间排序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;notifications&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12345&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;createdAt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;LIMIT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个查询中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;user_id&lt;/code&gt; 索引&lt;/strong&gt;：数据库会首先使用 &lt;code&gt;idx_user_id&lt;/code&gt; 索引快速定位到包含 &lt;code&gt;user_id = 12345&lt;/code&gt; 的分区。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;createdAt&lt;/code&gt; 索引&lt;/strong&gt;：在定位到的分区中，数据库会使用 &lt;code&gt;idx_createdAt&lt;/code&gt; 索引快速对结果进行排序。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="复合索引"&gt;复合索引
&lt;/h3&gt;&lt;p&gt;另一种更高效的方法是创建一个复合索引，结合 &lt;code&gt;user_id&lt;/code&gt; 和 &lt;code&gt;createdAt&lt;/code&gt; 列。这样可以更好地优化按用户和时间排序的查询：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LOCAL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;INDEX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;idx_user_createdAt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;notifications&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;createdAt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="复合索引的优势"&gt;复合索引的优势
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;查询优化&lt;/strong&gt;：复合索引可以同时利用 &lt;code&gt;user_id&lt;/code&gt; 和 &lt;code&gt;createdAt&lt;/code&gt; 列的有序性，优化按用户和时间排序的查询。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;减少I/O操作&lt;/strong&gt;：复合索引可以减少数据库需要读取的数据量，提高查询性能。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="示例查询-2"&gt;示例查询
&lt;/h3&gt;&lt;p&gt;使用复合索引的查询：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;notifications&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12345&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;createdAt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;LIMIT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个查询中，数据库可以直接使用 &lt;code&gt;idx_user_createdAt&lt;/code&gt; 复合索引，快速定位到包含 &lt;code&gt;user_id = 12345&lt;/code&gt; 的记录，并按 &lt;code&gt;createdAt&lt;/code&gt; 列进行排序。&lt;/p&gt;
&lt;h3 id="总结-1"&gt;总结
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;单列索引&lt;/strong&gt;：在 &lt;code&gt;user_id&lt;/code&gt; 和 &lt;code&gt;createdAt&lt;/code&gt; 列上分别创建本地索引，可以分别优化按用户和按时间的查询。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复合索引&lt;/strong&gt;：创建一个包含 &lt;code&gt;user_id&lt;/code&gt; 和 &lt;code&gt;createdAt&lt;/code&gt; 列的复合索引，可以更高效地优化按用户和时间排序的查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过合理设计索引，可以显著提高查询性能，同时保持系统的可维护性和扩展性。&lt;/p&gt;
&lt;/blockquote&gt;</description></item><item><title>【Front】百度前端实习总结</title><link>https://dyhes.github.io/p/front%E7%99%BE%E5%BA%A6%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/</link><pubDate>Wed, 21 Aug 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/front%E7%99%BE%E5%BA%A6%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/</guid><description>&lt;h2 id="工作"&gt;工作
&lt;/h2&gt;&lt;p&gt;fe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iAPI帮助文档&lt;/li&gt;
&lt;li&gt;Comate关联&lt;/li&gt;
&lt;li&gt;代码生成功能打点&lt;/li&gt;
&lt;li&gt;知识库导入&lt;/li&gt;
&lt;li&gt;智能检索（Apihub，项目）&lt;/li&gt;
&lt;li&gt;支援其他项目
&lt;ul&gt;
&lt;li&gt;年度总结&lt;/li&gt;
&lt;li&gt;开源账号绑定&lt;/li&gt;
&lt;li&gt;icafe卡片绑定功能移植至插件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;日常需求（bug，交互优化，页面优化等）
&lt;ul&gt;
&lt;li&gt;用户邀请&lt;/li&gt;
&lt;li&gt;发布文档&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;be&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;鉴权逻辑（ugate，AccessToken）&lt;/li&gt;
&lt;li&gt;打点记录openapi调用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bug"&gt;Bug
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;事件扩散导致布尔值重置，Modal关不掉&lt;/li&gt;
&lt;li&gt;vue webpack 图片导入设置问题&lt;/li&gt;
&lt;li&gt;知识库文档解析，代码合并导致环境变量被覆盖，本地可以，线上出错考虑环境变量&lt;/li&gt;
&lt;li&gt;usecallback的依赖要加全，好几个小时才定位到bug&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="收获"&gt;收获
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;能力上提升（开发能力，代码阅读能力，团队协作沟通交流能力）&lt;/li&gt;
&lt;li&gt;积累工作经验（方方面面的细节耳濡目染）&lt;/li&gt;
&lt;li&gt;积累了debug经验&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="感悟"&gt;感悟
&lt;/h2&gt;&lt;p&gt;阅读代码，从点到面逐步扩散&lt;/p&gt;
&lt;p&gt;重要的不是做了什么，而是做的事情对结果有什么帮助&lt;/p&gt;
&lt;p&gt;解决完代码冲突要验证&lt;/p&gt;
&lt;p&gt;写工作日志是一个比较好的习惯&lt;/p&gt;</description></item></channel></rss>