<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cloud on 飞鸿踏雪泥</title><link>https://dyhes.github.io/tags/cloud/</link><description>Recent content in Cloud on 飞鸿踏雪泥</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 22 Oct 2025 16:27:30 +0800</lastBuildDate><atom:link href="https://dyhes.github.io/tags/cloud/index.xml" rel="self" type="application/rss+xml"/><item><title>【云原生】概念</title><link>https://dyhes.github.io/p/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%A6%82%E5%BF%B5/</link><pubDate>Tue, 04 Mar 2025 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%A6%82%E5%BF%B5/</guid><description>&lt;p&gt;云原生应用是一种基于云原生架构设计和实现的应用程序，其核心在于充分利用云计算环境的特性（如弹性、分布式、自动化等）来实现高效、灵活且可靠的运行。以下从概念解析和核心特征两方面进行详细说明：&lt;/p&gt;
&lt;h2 id="云原生应用的定义与核心特征"&gt;云原生应用的定义与核心特征
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;云原生应用的定义&lt;/strong&gt;&lt;br&gt;
云原生应用是专门针对云平台设计的应用程序，通过容器化、微服务、持续交付等技术构建，能够动态扩展资源并快速响应业务需求。其核心目标是将应用与底层基础设施解耦，让开发者无需关注服务器运维，专注于业务逻辑开发。&lt;/p&gt;
&lt;p&gt;典型特征包括：
• &lt;strong&gt;模块化架构&lt;/strong&gt;：采用微服务设计，将应用拆分为多个独立服务单元，提升可维护性和扩展性。
• &lt;strong&gt;容器化封装&lt;/strong&gt;：通过Docker等容器技术实现环境一致性，确保应用在不同云环境中可移植。
• &lt;strong&gt;自动化管理&lt;/strong&gt;：利用Kubernetes等工具实现自动扩缩容、故障恢复和滚动更新。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;“原生”的深层含义&lt;/strong&gt;&lt;br&gt;
“原生”一词强调应用从设计之初即围绕云平台特性构建，而非简单地将传统应用迁移到云端。具体表现为：
• &lt;strong&gt;面向云环境设计&lt;/strong&gt;：充分利用云的弹性资源分配和分布式架构，例如自动按需扩展计算资源。
• &lt;strong&gt;技术体系适配性&lt;/strong&gt;：深度整合容器、服务网格（Service Mesh）、声明式API等云原生技术栈。
• &lt;strong&gt;开发理念革新&lt;/strong&gt;：遵循DevOps理念，通过持续集成/持续交付（CI/CD）实现快速迭代。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="与传统应用及native-app的对比"&gt;与传统应用及Native App的对比
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;与传统企业应用的区别&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center"&gt;&lt;strong&gt;维度&lt;/strong&gt;&lt;/th&gt;
&lt;th style="text-align: center"&gt;&lt;strong&gt;云原生应用&lt;/strong&gt;&lt;/th&gt;
&lt;th style="text-align: center"&gt;&lt;strong&gt;传统应用&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;架构&lt;/td&gt;
&lt;td style="text-align: center"&gt;微服务（松耦合）&lt;/td&gt;
&lt;td style="text-align: center"&gt;单体架构（紧耦合）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;部署方式&lt;/td&gt;
&lt;td style="text-align: center"&gt;容器化（跨平台）&lt;/td&gt;
&lt;td style="text-align: center"&gt;虚拟机/物理机部署&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;资源管理&lt;/td&gt;
&lt;td style="text-align: center"&gt;弹性伸缩（自动化）&lt;/td&gt;
&lt;td style="text-align: center"&gt;手动调整资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;更新频率&lt;/td&gt;
&lt;td style="text-align: center"&gt;分钟级持续交付&lt;/td&gt;
&lt;td style="text-align: center"&gt;周/月级周期发布&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start="2"&gt;
&lt;li&gt;&lt;strong&gt;与Native App的本质差异&lt;/strong&gt;&lt;br&gt;
Native App指为特定操作系统（如iOS/Android）开发的本地应用，其“原生”体现在：
• &lt;strong&gt;平台依赖性&lt;/strong&gt;：使用Swift、Kotlin等平台专属语言开发，性能优化程度高。
• &lt;strong&gt;功能访问权限&lt;/strong&gt;：可直接调用摄像头、GPS等硬件设备功能。&lt;br&gt;
而云原生应用的“原生”关注点在于云环境适配性，两者分属不同技术领域（移动端开发 vs 云计算架构）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="典型应用场景"&gt;典型应用场景
&lt;/h2&gt;&lt;p&gt;云原生技术适用于需要快速迭代和高可用性的场景，例如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;互联网服务&lt;/strong&gt;：电商平台通过微服务架构应对促销期间流量峰值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;大数据分析&lt;/strong&gt;：动态扩展计算资源处理实时数据流。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;企业级系统&lt;/strong&gt;：ERP/CRM系统通过容器化实现跨云平台部署。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="总结"&gt;总结
&lt;/h2&gt;&lt;p&gt;云原生应用的“原生”本质是&lt;strong&gt;以云计算为核心的设计哲学&lt;/strong&gt;，通过技术体系革新实现资源利用效率和开发运维效率的双重提升。这种模式正在成为企业数字化转型的主流选择，根据CNCF（云原生计算基金会）的统计，2024年全球已有超过80%的企业在生产环境中使用容器技术。&lt;/p&gt;</description></item><item><title>【云计算】服务模式</title><link>https://dyhes.github.io/p/%E4%BA%91%E8%AE%A1%E7%AE%97%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%BC%8F/</link><pubDate>Tue, 04 Mar 2025 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/%E4%BA%91%E8%AE%A1%E7%AE%97%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%BC%8F/</guid><description>&lt;p&gt;IaaS（基础设施即服务）、PaaS（平台即服务）和SaaS（软件即服务）是云计算的三大服务模式，它们在服务层级、用户群体、技术依赖等方面存在显著差异。以下是三者的对比分析：&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="核心定义与核心组件"&gt;&lt;strong&gt;核心定义与核心组件&lt;/strong&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;IaaS&lt;/strong&gt;&lt;br&gt;
提供虚拟化的底层计算资源（如服务器、存储、网络），用户按需租用并自主管理操作系统和应用程序。核心组件包括虚拟机、存储空间、网络资源等。&lt;br&gt;
&lt;em&gt;示例：Amazon EC2、阿里云ECS。&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PaaS&lt;/strong&gt;&lt;br&gt;
提供应用程序开发和部署的平台环境，包括开发工具、数据库、中间件等，用户专注于代码开发，无需管理底层基础设施。核心组件包括应用服务器、数据库服务、API接口等。&lt;br&gt;
&lt;em&gt;示例：Google App Engine、Microsoft Azure App Service。&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SaaS&lt;/strong&gt;&lt;br&gt;
直接通过互联网提供完整的软件应用，用户无需安装和维护，通过浏览器或客户端即可使用。核心组件为预构建的软件功能模块（如CRM、邮件系统）。&lt;br&gt;
&lt;em&gt;示例：Salesforce、Zoom、Google Workspace。&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="用户群体与使用场景"&gt;&lt;strong&gt;用户群体与使用场景&lt;/strong&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;IaaS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户&lt;/strong&gt;：IT管理员、企业技术部门。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：需要灵活扩展基础设施的场景，如大数据处理、临时项目扩容（如《纽约时报》使用EC2处理TB级数据）或自建私有云。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PaaS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户&lt;/strong&gt;：开发者、技术团队。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：快速开发和部署应用程序，尤其适合需要集成开发工具的中小型企业或初创公司。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SaaS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户&lt;/strong&gt;：终端用户、业务部门（如HR、销售）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：即开即用的标准化软件需求，如客户关系管理（CRM）、办公自动化（如Google Docs）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="技术依赖与维护责任"&gt;&lt;strong&gt;技术依赖与维护责任&lt;/strong&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;IaaS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户需管理操作系统、中间件及应用程序，服务商仅维护物理硬件和虚拟化层。&lt;/li&gt;
&lt;li&gt;技术依赖度高，需具备运维能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PaaS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户仅管理应用程序代码，服务商负责平台运行时环境（如操作系统、数据库）。&lt;/li&gt;
&lt;li&gt;依赖服务商提供的开发工具和API接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SaaS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户无技术管理责任，服务商全面维护从底层设施到软件功能的所有环节。&lt;/li&gt;
&lt;li&gt;技术门槛最低，适合非技术人员。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="成本结构与扩展性"&gt;&lt;strong&gt;成本结构与扩展性&lt;/strong&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;IaaS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;成本&lt;/strong&gt;：按资源使用量计费（如CPU、存储），硬件成本占主导。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扩展性&lt;/strong&gt;：弹性强，可快速增减资源，但需自行配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PaaS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;成本&lt;/strong&gt;：基于开发资源和平台使用时长付费，侧重工具和维护成本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扩展性&lt;/strong&gt;：平台自动处理资源扩展，开发者更关注功能实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SaaS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;成本&lt;/strong&gt;：订阅制，按用户数或功能模块付费，研发与客户服务成本高。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扩展性&lt;/strong&gt;：功能模块化扩展，但依赖服务商更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="典型应用案例"&gt;&lt;strong&gt;典型应用案例&lt;/strong&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IaaS&lt;/strong&gt;：Netflix依赖AWS实现全球视频流分发；企业通过私有云构建内部数据中心。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PaaS&lt;/strong&gt;：开发者利用Heroku快速部署Web应用；企业通过Force.com定制CRM。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SaaS&lt;/strong&gt;：Dropbox提供云存储服务；企业使用Workday管理人力资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="总结对比表"&gt;&lt;strong&gt;总结对比表&lt;/strong&gt;
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;维度&lt;/th&gt;
&lt;th&gt;IaaS&lt;/th&gt;
&lt;th&gt;PaaS&lt;/th&gt;
&lt;th&gt;SaaS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;服务层级&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;基础设施（服务器、存储）&lt;/td&gt;
&lt;td&gt;开发平台（工具、中间件）&lt;/td&gt;
&lt;td&gt;完整软件应用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;用户控制权&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;操作系统、应用程序&lt;/td&gt;
&lt;td&gt;应用程序代码&lt;/td&gt;
&lt;td&gt;仅使用功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;维护责任&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;用户管理OS及软件&lt;/td&gt;
&lt;td&gt;服务商管理平台，用户管理代码&lt;/td&gt;
&lt;td&gt;完全由服务商维护&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;成本模式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;按资源使用量&lt;/td&gt;
&lt;td&gt;按平台使用时长/工具&lt;/td&gt;
&lt;td&gt;订阅制（用户/功能）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;典型用户&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;IT运维团队&lt;/td&gt;
&lt;td&gt;开发者&lt;/td&gt;
&lt;td&gt;终端业务部门&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;通过以上对比，企业可根据自身技术能力、成本预算和应用需求选择最合适的云服务模式。例如，初创公司可能优先选择PaaS以快速开发，而大型企业可能混合使用IaaS和SaaS实现灵活性与效率的平衡。&lt;/p&gt;</description></item></channel></rss>