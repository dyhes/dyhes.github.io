<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring Boot on 飞鸿踏雪泥</title><link>https://dyhes.github.io/tags/spring-boot/</link><description>Recent content in Spring Boot on 飞鸿踏雪泥</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 30 Sep 2025 19:46:00 +0800</lastBuildDate><atom:link href="https://dyhes.github.io/tags/spring-boot/index.xml" rel="self" type="application/rss+xml"/><item><title>【Spring Boot】Source Code</title><link>https://dyhes.github.io/p/spring-bootsource-code/</link><pubDate>Thu, 25 Sep 2025 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/spring-bootsource-code/</guid><description>&lt;h2 id="bootstrapregistryinitializer"&gt;BootstrapRegistryInitializer
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;BootstrapRegistryInitializer&lt;/code&gt;是 Spring Boot 应用启动过程中一个&lt;strong&gt;早期且关键&lt;/strong&gt;的扩展点，它允许你在 Spring 应用上下文（&lt;code&gt;ApplicationContext&lt;/code&gt;）正式创建之前，执行自定义的初始化逻辑并注册一些需要在启动早期阶段使用的对象。&lt;/p&gt;
&lt;p&gt;为了让你快速建立起整体认知，下表概括了 &lt;code&gt;BootstrapRegistryInitializer&lt;/code&gt;的核心特性：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性维度&lt;/th&gt;
&lt;th&gt;核心说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;主要作用&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在 &lt;code&gt;ApplicationContext&lt;/code&gt;创建之前，进行早期对象注册和初始化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;执行时机&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SpringApplication.run()&lt;/code&gt;方法的早期阶段，在创建 &lt;code&gt;ApplicationContext&lt;/code&gt;之前。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;核心操作&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;通过 &lt;code&gt;BootstrapRegistry&lt;/code&gt;注册对象、添加关闭事件监听器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;配置方式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在 &lt;code&gt;META-INF/spring.factories&lt;/code&gt;文件中声明，或通过 &lt;code&gt;SpringApplication.addBootstrapRegistryInitializer()&lt;/code&gt;方法添加。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;生命周期&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;注册的对象在 &lt;code&gt;ApplicationContext&lt;/code&gt;准备就绪后，默认不再可用。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-设计目标与适用场景"&gt;💡 设计目标与适用场景
&lt;/h3&gt;&lt;p&gt;Spring Boot 设计 &lt;code&gt;BootstrapRegistryInitializer&lt;/code&gt;主要是为了解决一些需要在 &lt;strong&gt;IoC 容器完全启动之前&lt;/strong&gt; 就完成的初始化需求，实现环境隔离，并优化启动性能。&lt;/p&gt;
&lt;p&gt;它的典型应用场景包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;外部配置预加载&lt;/strong&gt;：在加载本地 &lt;code&gt;application.properties&lt;/code&gt;之前，优先从远程配置中心（如 Spring Cloud Config、Nacos）拉取配置信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基础设施初始化&lt;/strong&gt;：提前初始化一些基础组件，如日志系统、监控代理（Prometheus Client）、分布式追踪工具（Zipkin）等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;昂贵资源预注册&lt;/strong&gt;：注册那些创建成本较高的对象原型，如数据库连接池、缓存客户端等，以便在后续的自动配置中复用，避免重复创建。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-核心原理启动流程中的角色"&gt;🔍 核心原理：启动流程中的角色
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;BootstrapRegistryInitializer&lt;/code&gt;的调用是 Spring Boot 启动流程中的一个精确步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;加载实现类&lt;/strong&gt;：在 &lt;code&gt;SpringApplication&lt;/code&gt;的构造阶段，通过 &lt;code&gt;SpringFactoriesLoader&lt;/code&gt;从 &lt;code&gt;META-INF/spring.factories&lt;/code&gt;文件中加载所有声明的 &lt;code&gt;BootstrapRegistryInitializer&lt;/code&gt;实现类。&lt;/li&gt;
&lt;li&gt;执行 &lt;strong&gt;&lt;code&gt;createBootstrapContext&lt;/code&gt;&lt;/strong&gt; 方法：在 &lt;code&gt;run()&lt;/code&gt;方法中，紧随其后的是创建 &lt;code&gt;BootstrapContext&lt;/code&gt;（&lt;code&gt;BootstrapRegistry&lt;/code&gt;的默认实现）并遍历调用所有 &lt;code&gt;BootstrapRegistryInitializer&lt;/code&gt;实现类的 &lt;code&gt;initialize&lt;/code&gt;方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-如何使用编码与配置实践"&gt;⚙️ 如何使用：编码与配置实践
&lt;/h3&gt;&lt;h4 id="1-实现接口"&gt;1. 实现接口
&lt;/h4&gt;&lt;p&gt;你需要创建一个类来实现 &lt;code&gt;BootstrapRegistryInitializer&lt;/code&gt;接口，并重写其 &lt;code&gt;initialize&lt;/code&gt;方法。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;// 示例：注册一个自定义的配置客户端
public class MyConfigClientInitializer implements BootstrapRegistryInitializer {
@Override
public void initialize(BootstrapRegistry registry) {
// 1. 注册对象（使用延迟初始化优化性能）
registry.register(ConfigClient.class, context -&amp;gt; {
// 从早期环境中获取配置服务器地址
String serverUrl = context.get(Environment.class).getProperty(&amp;#34;config.server.url&amp;#34;);
return new ConfigClient(serverUrl); // InstanceSupplier 允许延迟创建
});
// 2. 添加关闭监听器，用于资源清理或对象转移
registry.addCloseListener(event -&amp;gt; {
// 从事件中获取BootstrapContext和ApplicationContext
ConfigClient client = event.getBootstrapContext().get(ConfigClient.class);
// 在BootstrapContext关闭前执行清理操作
client.shutdown();
// 可选：将对象注册为Spring Bean，以便应用后续使用
// event.getApplicationContext().getBeanFactory().registerSingleton(&amp;#34;configClient&amp;#34;, client);
});
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id="2-注册实现类"&gt;2. 注册实现类
&lt;/h4&gt;&lt;p&gt;让 Spring Boot 发现你的实现类，主要有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;通过 &lt;code&gt;spring.factories&lt;/code&gt;文件（推荐）&lt;/strong&gt;：在项目的 &lt;code&gt;src/main/resources/META-INF/&lt;/code&gt;目录下创建 &lt;code&gt;spring.factories&lt;/code&gt;文件。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;org.springframework.boot.BootstrapRegistryInitializer=com.example.MyConfigClientInitializer
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;通过 &lt;code&gt;SpringApplication&lt;/code&gt;API&lt;/strong&gt;：在启动类中直接添加。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;@SpringBootApplication
public class MyApplication {
public static void main(String[] args) {
SpringApplication app = new SpringApplication(MyApplication.class);
app.addBootstrapRegistryInitializer(new MyConfigClientInitializer());
app.run(args);
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-关键注意事项"&gt;⚠️ 关键注意事项
&lt;/h3&gt;&lt;p&gt;使用 &lt;code&gt;BootstrapRegistryInitializer&lt;/code&gt;时，请务必留意以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;避免依赖注入&lt;/strong&gt;：&lt;code&gt;initialize&lt;/code&gt;方法执行时，Spring IoC 容器尚未创建，因此 &lt;strong&gt;&lt;code&gt;@Autowired&lt;/code&gt;、&lt;code&gt;@Value&lt;/code&gt;等依赖注入注解在此处无效&lt;/strong&gt;。所有需要的参数都应通过 &lt;code&gt;BootstrapRegistry&lt;/code&gt;或 &lt;code&gt;BootstrapContext&lt;/code&gt;获取。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;善用延迟初始化&lt;/strong&gt;：对于创建成本较高的对象，建议使用 &lt;code&gt;InstanceSupplier&lt;/code&gt;进行延迟初始化（如上面代码示例所示），而不是直接 &lt;code&gt;new&lt;/code&gt;一个实例，这有助于提升应用启动速度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;理解对象生命周期&lt;/strong&gt;：默认情况下，注册到 &lt;code&gt;BootstrapRegistry&lt;/code&gt;的对象只在 &lt;strong&gt;从启动开始到 &lt;code&gt;ApplicationContext&lt;/code&gt;准备好之前&lt;/strong&gt; 这段时间内可用。如果需要在容器完全启动后继续使用这些对象，必须在 &lt;code&gt;BootstrapContextClosedEvent&lt;/code&gt;监听器中手动将其注册为单例 Bean。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-总结"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;BootstrapRegistryInitializer&lt;/code&gt;是 Spring Boot 提供的一个强大且精准的扩展点，它将一些关键初始化任务前置，确保了应用的稳健启动和模块间的清晰隔离。理解并恰当地使用它，能够帮助你解决一些在传统 Spring Bean 生命周期中难以处理的复杂初始化需求。&lt;/p&gt;
&lt;p&gt;希望这份详细的解释能帮助你更好地理解和运用 &lt;code&gt;BootstrapRegistryInitializer&lt;/code&gt;。如果你对具体的实现细节或与其他扩展点的配合有更多疑问，我们可以继续深入探讨。&lt;/p&gt;
&lt;h2 id="meta-infspringfactories"&gt;META-INF/spring.factories
&lt;/h2&gt;&lt;p&gt;当你向 Spring Boot 项目引入一个 JAR 包时，其 &lt;code&gt;META-INF/spring.factories&lt;/code&gt;文件&lt;strong&gt;不会在编译时自动合并&lt;/strong&gt;。这些文件的内容是在&lt;strong&gt;应用启动时（运行时）&lt;/strong&gt; 由 Spring Boot 框架动态扫描和合并的。&lt;/p&gt;
&lt;p&gt;为了让你快速了解处理时机和方式，我用一个表格来概括：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;阶段&lt;/th&gt;
&lt;th&gt;处理方式&lt;/th&gt;
&lt;th&gt;关键点/工具&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;编译时&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;默认不自动合并。同名的 &lt;code&gt;spring.factories&lt;/code&gt;文件可能相互覆盖。&lt;/td&gt;
&lt;td&gt;需要 Maven Shade Plugin 等工具手动配置合并。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;运行时&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Spring Boot 自动扫描所有依赖 JAR 包中的 &lt;code&gt;META-INF/spring.factories&lt;/code&gt;文件并合并。&lt;/td&gt;
&lt;td&gt;通过 &lt;code&gt;SpringFactoriesLoader&lt;/code&gt;类加载和解析。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-运行时合并的细节"&gt;🔧 运行时合并的细节
&lt;/h3&gt;&lt;p&gt;Spring Boot 的自动配置机制核心依赖于读取 &lt;code&gt;META-INF/spring.factories&lt;/code&gt;文件。在应用启动过程中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;扫描所有 JAR&lt;/strong&gt;：Spring Boot 会扫描类路径下所有 JAR 包中的 &lt;code&gt;META-INF/spring.factories&lt;/code&gt;文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;合并内容&lt;/strong&gt;：&lt;code&gt;SpringFactoriesLoader&lt;/code&gt;会将这些文件中相同键（Key）对应的值（Value）合并到一个列表中。例如，所有 JAR 中 &lt;code&gt;EnableAutoConfiguration&lt;/code&gt;键对应的配置类都会被收集起来。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理冲突&lt;/strong&gt;：如果多个配置类定义了相同的 Bean，可以通过 &lt;code&gt;@ConditionalOnMissingBean&lt;/code&gt;等条件注解来避免冲突，确保只有一份生效。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-编译时需注意的问题与解决方案"&gt;⚠️ 编译时需注意的问题与解决方案
&lt;/h3&gt;&lt;p&gt;虽然在运行时 Spring Boot 会处理合并，但在&lt;strong&gt;打包阶段&lt;/strong&gt;（编译时），如果你需要将多个模块或依赖打包成一个可执行的 &amp;ldquo;uber-jar&amp;rdquo;（比如使用 &lt;code&gt;maven-assembly-plugin&lt;/code&gt;或 &lt;code&gt;maven-shade-plugin&lt;/code&gt;），就可能出现同名 &lt;code&gt;spring.factories&lt;/code&gt;文件相互覆盖的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案&lt;/strong&gt;：使用 &lt;strong&gt;&lt;code&gt;maven-shade-plugin&lt;/code&gt;&lt;/strong&gt; 插件，并配置 &lt;code&gt;AppendingTransformer&lt;/code&gt;来指定需要合并的文件。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;build&amp;gt;
&amp;lt;plugins&amp;gt;
&amp;lt;plugin&amp;gt;
&amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;maven-shade-plugin&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;3.5.0&amp;lt;/version&amp;gt; &amp;lt;!-- 请使用最新版本 --&amp;gt;
&amp;lt;executions&amp;gt;
&amp;lt;execution&amp;gt;
&amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;
&amp;lt;goals&amp;gt;
&amp;lt;goal&amp;gt;shade&amp;lt;/goal&amp;gt;
&amp;lt;/goals&amp;gt;
&amp;lt;configuration&amp;gt;
&amp;lt;transformers&amp;gt;
&amp;lt;!-- 处理 META-INF/spring.factories 文件的合并 --&amp;gt;
&amp;lt;transformer implementation=&amp;#34;org.apache.maven.plugins.shade.resource.AppendingTransformer&amp;#34;&amp;gt;
&amp;lt;resource&amp;gt;META-INF/spring.factories&amp;lt;/resource&amp;gt;
&amp;lt;/transformer&amp;gt;
&amp;lt;!-- 如果需要，还可以处理其他Spring配置文件 --&amp;gt;
&amp;lt;transformer implementation=&amp;#34;org.apache.maven.plugins.shade.resource.AppendingTransformer&amp;#34;&amp;gt;
&amp;lt;resource&amp;gt;META-INF/spring.handlers&amp;lt;/resource&amp;gt;
&amp;lt;/transformer&amp;gt;
&amp;lt;transformer implementation=&amp;#34;org.apache.maven.plugins.shade.resource.AppendingTransformer&amp;#34;&amp;gt;
&amp;lt;resource&amp;gt;META-INF/spring.schemas&amp;lt;/resource&amp;gt;
&amp;lt;/transformer&amp;gt;
&amp;lt;/transformers&amp;gt;
&amp;lt;/configuration&amp;gt;
&amp;lt;/execution&amp;gt;
&amp;lt;/executions&amp;gt;
&amp;lt;/plugin&amp;gt;
&amp;lt;/plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="-最佳实践建议"&gt;💡 最佳实践建议
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;避免 Key 冲突&lt;/strong&gt;：在自定义 Starter 时，尽量确保自动配置类的 Bean 定义使用 &lt;code&gt;@ConditionalOnMissingBean&lt;/code&gt;注解，这样即使多个配置类被加载，也能避免 Bean 重复定义的冲突。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模块化设计&lt;/strong&gt;：遵循 Spring Boot 官方建议，将 Starter 的核心依赖与自动配置模块（autoconfigure）分离，这样可以更灵活地管理依赖和配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;了解新特性&lt;/strong&gt;：从 Spring Boot 2.7 开始，官方推荐使用 &lt;code&gt;META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports&lt;/code&gt;文件来替代 &lt;code&gt;spring.factories&lt;/code&gt;中自动配置的注册方式，这种方式能更清晰地管理自动配置类且避免一些合并问题。但请注意，原有的 &lt;code&gt;spring.factories&lt;/code&gt;方式仍然支持。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-总结-1"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;简单来说，你不需要在编译时担心 &lt;code&gt;META-INF/spring.factories&lt;/code&gt;的合并问题，Spring Boot 在应用启动时会妥善处理。只有在需要制作一个大而全的 &amp;ldquo;uber-jar&amp;rdquo; 时，才需通过 &lt;code&gt;maven-shade-plugin&lt;/code&gt;等工具在打包阶段手动配置合并。&lt;/p&gt;
&lt;p&gt;希望这些信息能帮助你更好地理解和处理 Spring Boot 中的配置合并问题。&lt;/p&gt;
&lt;h2 id="applicationcontextinitializer"&gt;ApplicationContextInitializer
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ApplicationContextInitializer&lt;/code&gt;是 Spring Boot 提供的一个关键扩展点，允许你在 Spring 应用上下文（&lt;code&gt;ApplicationContext&lt;/code&gt;）正式刷新之前，执行自定义的初始化逻辑。下面这个表格汇总了它的核心特性，帮助你快速建立整体认识。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性维度&lt;/th&gt;
&lt;th&gt;核心说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;主要作用&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在 Spring 应用上下文刷新前，对其进行编程方式的初始化和定制。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;执行时机&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ApplicationContext&lt;/code&gt;创建之后、&lt;code&gt;refresh()&lt;/code&gt;方法调用之前。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;核心操作&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;配置环境属性、注册 Bean 定义、添加后置处理器等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;配置方式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;通过 &lt;code&gt;spring.factories&lt;/code&gt;文件、&lt;code&gt;application.properties&lt;/code&gt;或编程方式添加。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-核心作用与适用场景"&gt;💡 核心作用与适用场景
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ApplicationContextInitializer&lt;/code&gt;的核心价值在于其 &lt;strong&gt;精准的执行时机&lt;/strong&gt;。它让你能够在 Spring 容器加载 Bean 定义、创建 Bean 实例之前，就对容器本身进行配置 。&lt;/p&gt;
&lt;p&gt;它的典型应用场景包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;动态环境配置&lt;/strong&gt;：根据运行环境（如开发、测试、生产）动态设置或覆盖环境变量和配置文件 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;早期 Bean 注册&lt;/strong&gt;：在容器刷新前，通过 &lt;code&gt;BeanDefinitionRegistry&lt;/code&gt;动态注册自定义的 Bean 定义 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注册后置处理器&lt;/strong&gt;：提前注册自定义的 &lt;code&gt;BeanFactoryPostProcessor&lt;/code&gt;或 &lt;code&gt;BeanPostProcessor&lt;/code&gt;，以影响后续的 Bean 创建过程 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;条件检查和基础设施初始化&lt;/strong&gt;：在容器启动前进行必要的系统资源检查，或初始化一些基础组件，如日志框架 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-如何使用实现与注册"&gt;⚙️ 如何使用：实现与注册
&lt;/h3&gt;&lt;h4 id="1-实现接口-1"&gt;1. 实现接口
&lt;/h4&gt;&lt;p&gt;创建一个类实现 &lt;code&gt;ApplicationContextInitializer&amp;lt;ConfigurableApplicationContext&amp;gt;&lt;/code&gt;接口，并重写 &lt;code&gt;initialize&lt;/code&gt;方法。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;import org.springframework.context.ApplicationContextInitializer;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.core.env.ConfigurableEnvironment;
import org.springframework.core.env.MapPropertySource;
import java.util.HashMap;
import java.util.Map;
public class CustomApplicationContextInitializer implements ApplicationContextInitializer&amp;lt;ConfigurableApplicationContext&amp;gt; {
@Override
public void initialize(ConfigurableApplicationContext applicationContext) {
// 获取环境配置
ConfigurableEnvironment environment = applicationContext.getEnvironment();
// 准备自定义配置
Map&amp;lt;String, Object&amp;gt; customProperties = new HashMap&amp;lt;&amp;gt;();
customProperties.put(&amp;#34;server.port&amp;#34;, &amp;#34;8081&amp;#34;);
customProperties.put(&amp;#34;app.custom.setting&amp;#34;, &amp;#34;initialized&amp;#34;);
// 将自定义配置添加到环境变量中，并设置优先级
MapPropertySource propertySource = new MapPropertySource(&amp;#34;customInitializer&amp;#34;, customProperties);
environment.getPropertySources().addFirst(propertySource);
System.out.println(&amp;#34;CustomApplicationContextInitializer has been executed.&amp;#34;);
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id="2-注册实现类-1"&gt;2. 注册实现类
&lt;/h4&gt;&lt;p&gt;让 Spring Boot 识别到你的 &lt;code&gt;ApplicationContextInitializer&lt;/code&gt;有三种主要方式，它们的&lt;strong&gt;加载优先级&lt;/strong&gt;从高到低如下 ：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;配置文件注册（优先级最高）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;application.properties&lt;/code&gt;或 &lt;code&gt;application.yml&lt;/code&gt;中配置：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;# application.properties
context.initializer.classes=com.yourpackage.CustomApplicationContextInitializer
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex="0"&gt;&lt;code&gt;# application.yml
context:
initializer:
classes: com.yourpackage.CustomApplicationContextInitializer
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spring Factories 机制注册&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在项目的 &lt;code&gt;src/main/resources/META-INF/&lt;/code&gt;目录下创建 &lt;code&gt;spring.factories&lt;/code&gt;文件：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;org.springframework.context.ApplicationContextInitializer=com.yourpackage.CustomApplicationContextInitializer
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;编程方式注册（优先级最低）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在启动类的 &lt;code&gt;main&lt;/code&gt;方法中，通过 &lt;code&gt;SpringApplication&lt;/code&gt;实例添加：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;@SpringBootApplication
public class MyApplication {
public static void main(String[] args) {
SpringApplication application = new SpringApplication(MyApplication.class);
application.addInitializers(new CustomApplicationContextInitializer());
application.run(args);
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="3-控制执行顺序"&gt;3. 控制执行顺序
&lt;/h4&gt;&lt;p&gt;如果定义了多个 &lt;code&gt;ApplicationContextInitializer&lt;/code&gt;，可以通过 &lt;code&gt;@Order&lt;/code&gt;注解或实现 &lt;code&gt;Ordered&lt;/code&gt;接口来控制它们的执行顺序。&lt;strong&gt;数值越小，优先级越高&lt;/strong&gt; 。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;@Order(1) // 此初始化器将优先执行
public class FirstInitializer implements ApplicationContextInitializer&amp;lt;ConfigurableApplicationContext&amp;gt; {
// ... initialize 方法实现
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需要注意的是，&lt;code&gt;@Order&lt;/code&gt;注解对通过 &lt;code&gt;context.initializer.classes&lt;/code&gt;配置的初始化器不生效，这类初始化器总是最先执行 。&lt;/p&gt;
&lt;h3 id="-执行时机与源码简析"&gt;🔍 执行时机与源码简析
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ApplicationContextInitializer&lt;/code&gt;的调用发生在 Spring Boot 启动流程的 &lt;code&gt;run()&lt;/code&gt;方法中，具体是在 &lt;code&gt;prepareContext&lt;/code&gt;阶段 。&lt;/p&gt;
&lt;p&gt;其核心逻辑可以简化为以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;加载&lt;/strong&gt;：在 &lt;code&gt;SpringApplication&lt;/code&gt;构造时，通过 &lt;code&gt;SpringFactoriesLoader&lt;/code&gt;从 &lt;code&gt;META-INF/spring.factories&lt;/code&gt;等位置加载所有实现类的实例 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排序&lt;/strong&gt;：使用 &lt;code&gt;AnnotationAwareOrderComparator&lt;/code&gt;对收集到的初始化器进行排序 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;执行&lt;/strong&gt;：在 &lt;code&gt;prepareContext&lt;/code&gt;方法中，调用 &lt;code&gt;applyInitializers(context)&lt;/code&gt;方法，遍历并执行所有初始化器的 &lt;code&gt;initialize&lt;/code&gt;方法 。此时，&lt;code&gt;ApplicationContext&lt;/code&gt;已创建但未刷新（&lt;code&gt;refresh&lt;/code&gt;），是进行自定义操作的理想时机 。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-使用注意事项"&gt;⚠️ 使用注意事项
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;避免耗时操作&lt;/strong&gt;：在此阶段应避免执行复杂的或耗时的操作，因为这会影响应用的启动速度 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;谨慎进行 Bean 操作&lt;/strong&gt;：此时 Spring 容器尚未刷新，无法直接获取或操作 Bean。如需注册 Bean，应通过 &lt;code&gt;BeanDefinitionRegistry&lt;/code&gt;进行 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;理解环境就绪程度&lt;/strong&gt;：虽然可以访问 &lt;code&gt;Environment&lt;/code&gt;，但要意识到某些属性可能还未完全加载或解析。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-总结-2"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ApplicationContextInitializer&lt;/code&gt;是一个强大的 Spring Boot 扩展点，它通过在应用上下文生命周期的精确时刻介入，为你提供了极大的灵活性。无论是进行环境定制、早期配置还是条件检查，理解和正确使用它都能帮助你更好地控制 Spring Boot 应用的启动过程。&lt;/p&gt;
&lt;p&gt;希望这份详细的解释能帮助你深入理解和有效运用 &lt;code&gt;ApplicationContextInitializer&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="configurableapplicationcontext"&gt;ConfigurableApplicationContext
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ConfigurableApplicationContext&lt;/code&gt;和 &lt;code&gt;ApplicationContext&lt;/code&gt;是 Spring 框架中关系紧密的两个核心接口。简单来说，&lt;strong&gt;&lt;code&gt;ConfigurableApplicationContext&lt;/code&gt;是 &lt;code&gt;ApplicationContext&lt;/code&gt;的扩展&lt;/strong&gt;，它提供了配置和生命周期管理的能力，而 &lt;code&gt;ApplicationContext&lt;/code&gt;主要定义了作为一个高级容器对外提供的基本只读操作。&lt;/p&gt;
&lt;p&gt;为了让你快速把握全局，下表清晰地展示了它们之间的核心区别：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性维度&lt;/th&gt;
&lt;th&gt;ApplicationContext&lt;/th&gt;
&lt;th&gt;ConfigurableApplicationContext&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;接口关系&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;顶级接口，定义了容器的基础只读操作。&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;继承自 &lt;code&gt;ApplicationContext&lt;/code&gt;&lt;/strong&gt;，是其子接口，增加了配置和管理方法。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;核心能力&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;提供&lt;strong&gt;只读&lt;/strong&gt;访问，如获取Bean、国际化消息、事件发布、资源加载等。&lt;/td&gt;
&lt;td&gt;提供&lt;strong&gt;可配置&lt;/strong&gt;和&lt;strong&gt;生命周期管理&lt;/strong&gt;能力，如设置环境、刷新容器、关闭容器等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;设计目的&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;作为应用程序与Spring容器交互的&lt;strong&gt;稳定客户端视图&lt;/strong&gt;，确保操作的安全性。&lt;/td&gt;
&lt;td&gt;主要为Spring框架内部或需要深度定制的场景提供&lt;strong&gt;配置和管理的入口&lt;/strong&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;典型方法&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;getBean()&lt;/code&gt;, &lt;code&gt;getMessage()&lt;/code&gt;, &lt;code&gt;publishEvent()&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;refresh()&lt;/code&gt;, &lt;code&gt;close()&lt;/code&gt;, &lt;code&gt;addBeanFactoryPostProcessor()&lt;/code&gt;, &lt;code&gt;setEnvironment()&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;生命周期&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;不直接提供生命周期的启动/停止控制。&lt;/td&gt;
&lt;td&gt;继承了 &lt;code&gt;Lifecycle&lt;/code&gt;接口，可以显式地&lt;strong&gt;启动&lt;/strong&gt;、&lt;strong&gt;刷新&lt;/strong&gt;和&lt;strong&gt;关闭&lt;/strong&gt;应用上下文。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-深入理解角色与设计"&gt;💡 深入理解角色与设计
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ApplicationContext&lt;/code&gt;：稳定的“服务窗口”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你可以把 &lt;code&gt;ApplicationContext&lt;/code&gt;想象成一个功能完备的服务窗口。应用程序通过它来获取Bean、读取国际化消息、发布应用事件或加载资源。它承诺提供这些服务，但隐藏了内部如何实现和配置的细节。这种“只读”特性使得它成为应用程序代码与Spring容器交互的理想接口，因为它安全、稳定。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ConfigurableApplicationContext&lt;/code&gt;：内部的“控制中心”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;ConfigurableApplicationContext&lt;/code&gt;则像是后台的控制中心。它继承了那个“服务窗口”的所有功能，但更重要的是，它提供了各种“按钮”和“开关”来配置和操纵容器本身。例如，你可以设置其父上下文、添加后置处理器、设置环境变量，或者直接命令容器刷新（重新加载配置）或关闭。这个接口的设计主要是为了框架内部使用，或者在应用启动时需要高度定制化容器的场景。&lt;/p&gt;
&lt;p&gt;Spring 框架采用这种将“读”和“写”职责分离到两个接口的设计，极大地提高了代码的清晰度和灵活性，是一种非常优秀的设计模式实践。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-如何使用-configurableapplicationcontext"&gt;🔧 如何使用 ConfigurableApplicationContext
&lt;/h3&gt;&lt;p&gt;在典型的Spring Boot应用中，你通常不会直接实例化 &lt;code&gt;ConfigurableApplicationContext&lt;/code&gt;，但你的确在使用它。&lt;code&gt;SpringApplication.run()&lt;/code&gt;方法返回的就是一个 &lt;code&gt;ConfigurableApplicationContext&lt;/code&gt;实例。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;@SpringBootApplication
public class MyApplication {
public static void main(String[] args) {
// 返回的实际是 ConfigurableApplicationContext 类型
ConfigurableApplicationContext context = SpringApplication.run(MyApplication.class, args);
// 例如，你可以根据需要注册新的单例Bean
// context.getBeanFactory().registerSingleton(&amp;#34;myNewBean&amp;#34;, new MyNewBean());
// 应用结束时，可以调用close方法，不过Spring Boot通常会自动处理
// context.close();
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="-总结-3"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;简单来说，&lt;code&gt;ApplicationContext&lt;/code&gt;是面向应用的&lt;strong&gt;使用接口&lt;/strong&gt;，而 &lt;code&gt;ConfigurableApplicationContext&lt;/code&gt;是面向框架的&lt;strong&gt;配置和管理接口&lt;/strong&gt;。后者在前者的基础上，赋予了容器动态配置和完整生命周期控制的能力，是Spring IOC容器更加强大和灵活的一面。&lt;/p&gt;
&lt;p&gt;希望这个解释能帮助你清晰地理解两者的区别和联系！&lt;/p&gt;
&lt;h2 id="application-listener"&gt;Application Listener
&lt;/h2&gt;&lt;p&gt;ApplicationListener 是 Spring 框架&lt;strong&gt;事件驱动编程模型&lt;/strong&gt;的核心接口，它实现了经典的&lt;strong&gt;观察者模式&lt;/strong&gt;，允许你的应用组件对 Spring 容器中发生的特定事件做出反应，从而实现业务解耦、提高可扩展性。&lt;/p&gt;
&lt;p&gt;为了让你快速建立整体认知，下表概括了其核心信息：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性维度&lt;/th&gt;
&lt;th&gt;核心说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;核心角色&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;监听器 (&lt;code&gt;ApplicationListener&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;监听目标&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;事件 (&lt;code&gt;ApplicationEvent&lt;/code&gt;及其子类)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;核心操作&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;实现 &lt;code&gt;onApplicationEvent(E event)&lt;/code&gt;方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;关键特性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;类型安全 (通过泛型指定事件类型)、异步支持、执行顺序控制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;设计目标&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;实现组件间的松耦合通信&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-核心概念与价值"&gt;💡 核心概念与价值
&lt;/h3&gt;&lt;p&gt;Spring 的事件机制由三个核心部分构成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;事件 (&lt;code&gt;ApplicationEvent&lt;/code&gt;)&lt;/strong&gt;：传递消息的载体，所有事件的根类。可以是 Spring 内置的生命周期事件，也可以是你的自定义业务事件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监听器 (&lt;code&gt;ApplicationListener&lt;/code&gt;)&lt;/strong&gt;：负责接收并处理事件的核心接口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事件发布者 (&lt;code&gt;ApplicationEventPublisher&lt;/code&gt;)&lt;/strong&gt;：用于发布事件的接口，Spring 的 &lt;code&gt;ApplicationContext&lt;/code&gt;本身就实现了此接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种设计的主要价值在于&lt;strong&gt;解耦&lt;/strong&gt;。事件发布者无需知道有哪些监听器存在，只需发布事件；监听器也只关心自己感兴趣的事件。这使得添加新的业务处理逻辑变得非常简单，只需增加新的监听器即可，无需修改原有代码，极大地提升了代码的内聚性和可维护性。&lt;/p&gt;
&lt;h3 id="-如何实现一个监听器"&gt;🛠️ 如何实现一个监听器
&lt;/h3&gt;&lt;p&gt;你有两种主要方式来创建事件监听器，现代 Spring（4.2+）更推荐使用注解方式。&lt;/p&gt;
&lt;h4 id="方式一实现-applicationlistener接口经典方式"&gt;方式一：实现 &lt;code&gt;ApplicationListener&lt;/code&gt;接口（经典方式）
&lt;/h4&gt;&lt;p&gt;这是一种直接的方式，需要实现接口并指定泛型事件类型。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.stereotype.Component;
@Component
public class ContextRefreshListener implements ApplicationListener&amp;lt;ContextRefreshedEvent&amp;gt; {
@Override
public void onApplicationEvent(ContextRefreshedEvent event) {
// 容器刷新完成后执行初始化逻辑
System.out.println(&amp;#34;容器刷新完成，加载的Bean数量: &amp;#34; + event.getApplicationContext().getBeanDefinitionCount());
initCache();
preloadData();
}
// ... 其他自定义方法
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id="方式二使用-eventlistener注解推荐方式"&gt;方式二：使用 &lt;code&gt;@EventListener&lt;/code&gt;注解（推荐方式）
&lt;/h4&gt;&lt;p&gt;这是更简洁、灵活的方式。你可以在任何 Spring 管理的 Bean 的方法上使用此注解，方法参数定义了要监听的事件类型。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Async;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;
@Component
public class AnnotationBasedListeners {
// 监听容器刷新事件
@EventListener
public void handleContextRefreshed(ContextRefreshedEvent event) {
System.out.println(&amp;#34;收到容器刷新事件&amp;#34;);
}
// 异步处理自定义事件，并指定顺序
@EventListener
@Async
@Order(1)
public void handleOrderCreated(OrderCreatedEvent event) {
System.out.println(&amp;#34;异步处理订单事件: &amp;#34; + event.getOrderId());
}
// 条件化监听（仅当订单金额大于1000时触发）
@EventListener(condition = &amp;#34;#event.order.amount &amp;gt; 1000&amp;#34;)
public void handleLargeOrder(OrderCreatedEvent event) {
System.out.println(&amp;#34;处理大额订单: &amp;#34; + event.getOrderId());
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要使异步监听生效，别忘了在配置类上添加 &lt;code&gt;@EnableAsync&lt;/code&gt;注解。&lt;/p&gt;
&lt;h3 id="-事件类型内置与自定义"&gt;📚 事件类型：内置与自定义
&lt;/h3&gt;&lt;h4 id="spring-内置事件"&gt;Spring 内置事件
&lt;/h4&gt;&lt;p&gt;Spring 容器会在其生命周期的不同节点自动发布以下核心事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;ContextRefreshedEvent&lt;/code&gt;&lt;/strong&gt;：当 &lt;code&gt;ApplicationContext&lt;/code&gt;被初始化或刷新（调用 &lt;code&gt;refresh()&lt;/code&gt;方法）时发布。此时所有单例 Bean 已实例化完成，是进行缓存预热或数据预加载的理想时机。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;ContextStartedEvent&lt;/code&gt;&lt;/strong&gt;：当容器调用 &lt;code&gt;start()&lt;/code&gt;方法时发布，通常用于重启已停止的 Bean。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;ContextStoppedEvent&lt;/code&gt;&lt;/strong&gt;：当容器调用 &lt;code&gt;stop()&lt;/code&gt;方法时发布，用于停止所有 Bean。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;ContextClosedEvent&lt;/code&gt;&lt;/strong&gt;：当 &lt;code&gt;ApplicationContext&lt;/code&gt;被关闭时发布。容器关闭后，单例 Bean 会被销毁，这是进行资源清理的信号。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="创建自定义事件"&gt;创建自定义事件
&lt;/h4&gt;&lt;p&gt;你可以轻松定义自己的业务事件。从 Spring 4.2 开始，事件类不再需要强制继承 &lt;code&gt;ApplicationEvent&lt;/code&gt;，可以使用任何普通 Java 对象。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;// 自定义订单创建事件
public class OrderCreatedEvent {
private String orderId;
private BigDecimal amount;
// 构造方法、getter、setter...
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="-如何发布事件"&gt;🚀 如何发布事件
&lt;/h3&gt;&lt;p&gt;在需要触发业务逻辑的地方，你可以通过 &lt;code&gt;ApplicationEventPublisher&lt;/code&gt;来发布事件。由于 &lt;code&gt;ApplicationContext&lt;/code&gt;也实现了该接口，你通常可以注入它来使用。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;import org.springframework.context.ApplicationEventPublisher;
import org.springframework.stereotype.Service;
@Service
public class OrderService {
private final ApplicationEventPublisher eventPublisher;
// 通过构造方法注入
public OrderService(ApplicationEventPublisher eventPublisher) {
this.eventPublisher = eventPublisher;
}
public Order createOrder(OrderRequest request) {
// 创建订单的业务逻辑...
Order order = new Order(request);
// 发布订单创建事件
eventPublisher.publishEvent(new OrderCreatedEvent(order));
return order;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="-高级特性与最佳实践"&gt;⚙️ 高级特性与最佳实践
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;异步事件处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，事件监听是同步的。如果一个监听器执行缓慢，会阻塞发布线程和后续监听器。使用 &lt;code&gt;@Async&lt;/code&gt;注解可以实现异步处理，这对于发送邮件、记录日志等非核心或耗时操作非常有用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;监听器执行顺序控制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当多个监听器监听同一事件时，可以使用 &lt;code&gt;@Order&lt;/code&gt;注解来控制它们的执行顺序。数值越小，优先级越高，越先执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;事务绑定事件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spring 提供了 &lt;code&gt;@TransactionalEventListener&lt;/code&gt;注解，它允许你将监听器的执行与事务的特定阶段（如 AFTER_COMMIT）绑定，确保事件处理只在事务成功提交后发生。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;最佳实践建议&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;保持监听器轻量级&lt;/strong&gt;：避免在监听器中执行耗时操作，若无法避免，务必使用异步处理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保持无状态&lt;/strong&gt;：监听器应是单例且无状态的，避免在监听器内部维护易变的状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;做好异常处理&lt;/strong&gt;：在监听器内部妥善处理异常，防止异常扩散影响事件发布者或其他监听器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事件命名&lt;/strong&gt;：推荐使用过去时态命名事件（如 &lt;code&gt;OrderCreated&lt;/code&gt;），表明它是已发生的事实。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-常见问题排查"&gt;⚠️ 常见问题排查
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;监听器未触发&lt;/strong&gt;：检查监听器是否已是 Spring Bean（如添加了 &lt;code&gt;@Component&lt;/code&gt;）；确认事件是否正确发布；检查事件类型是否与监听器泛型或方法参数类型匹配。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异步监听器不生效&lt;/strong&gt;：检查是否在配置类上添加了 &lt;code&gt;@EnableAsync&lt;/code&gt;注解，并配置了合适的线程池。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事务事件监听器不触发&lt;/strong&gt;：确认使用的是 &lt;code&gt;@TransactionalEventListener&lt;/code&gt;，并检查相关事务是否成功提交或回滚。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-总结-4"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ApplicationListener&lt;/code&gt;是 Spring 框架中实现松耦合通信的强大工具。通过事件驱动模型，你可以将应用的不同模块解耦，使代码更加灵活、可扩展和易于维护。&lt;/p&gt;
&lt;p&gt;希望这份详细的介绍能帮助你理解和运用 &lt;code&gt;ApplicationListener&lt;/code&gt;。如果你对某个具体特性或使用场景有更深入的疑问，我们可以继续探讨。&lt;/p&gt;
&lt;h2 id="configurableenvironment"&gt;ConfigurableEnvironment
&lt;/h2&gt;&lt;p&gt;ConfigurableEnvironment 是 Spring 框架中用于环境配置的核心接口，它提供了统一的机制来管理和访问应用程序的各种配置数据。下面这个表格汇总了它的核心组成部分和主要职责，帮助你快速建立整体认知。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;模块/接口&lt;/th&gt;
&lt;th&gt;核心职责&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Environment (父接口)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;提供对环境&lt;strong&gt;只读访问&lt;/strong&gt;的基本能力，如获取属性、检查激活的配置文件（Profile）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ConfigurablePropertyResolver (父接口)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;提供&lt;strong&gt;属性解析&lt;/strong&gt;的高级配置能力，包括类型转换、占位符处理、必需属性验证等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ConfigurableEnvironment (本体)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;继承并融合&lt;/strong&gt;上述两者，并增加&lt;strong&gt;动态配置&lt;/strong&gt;能力，如管理属性源（PropertySources）、设置活动/默认配置文件等。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-核心功能与价值"&gt;💡 核心功能与价值
&lt;/h3&gt;&lt;p&gt;ConfigurableEnvironment 的核心价值在于它将应用程序与具体的运行环境解耦，为你提供了一个统一且强大的配置管理入口。它的设计主要服务于两个关键方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;配置文件（Profiles）&lt;/strong&gt;：实现&lt;strong&gt;环境隔离&lt;/strong&gt;。通过预设的配置文件（如 &lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;prod&lt;/code&gt;），你可以控制不同环境下哪些 Bean 应该被注册，哪些配置应该生效。这在 Spring 中通常通过 &lt;code&gt;@Profile&lt;/code&gt;注解来实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;属性（Properties）&lt;/strong&gt;：实现&lt;strong&gt;配置集中化与外部化&lt;/strong&gt;。属性可以来源于多种渠道，如 &lt;code&gt;.properties&lt;/code&gt;/&lt;code&gt;.yml&lt;/code&gt;文件、JVM 系统属性、操作系统环境变量、Servlet 上下文参数等。ConfigurableEnvironment 的作用就是将这些分散的来源统一管理，并提供一个简单的接口来获取和解析这些属性。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-核心操作与使用方法"&gt;⚙️ 核心操作与使用方法
&lt;/h3&gt;&lt;h4 id="1-管理配置文件profiles"&gt;1. 管理配置文件（Profiles）
&lt;/h4&gt;&lt;p&gt;配置文件允许你根据环境（如开发、测试、生产）激活不同的配置或 Bean 定义。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;// 创建环境实例（在Spring Boot应用中，通常通过注入获取）
ConfigurableEnvironment environment = new StandardEnvironment();
// 1. 设置活动配置文件（将替换所有现有活动配置）
environment.setActiveProfiles(&amp;#34;dev&amp;#34;, &amp;#34;test&amp;#34;);
// 2. 添加活动配置文件（在现有配置基础上追加）
environment.addActiveProfile(&amp;#34;integration&amp;#34;);
// 3. 设置默认配置文件（当没有活动配置时生效）
environment.setDefaultProfiles(&amp;#34;default&amp;#34;);
// 检查配置是否生效
String[] activeProfiles = environment.getActiveProfiles(); // 获取所有活动配置
boolean isTestActive = environment.acceptsProfiles(&amp;#34;test&amp;#34;); // 检查特定配置是否激活
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;关键点&lt;/strong&gt;：设置活动或默认配置文件的操作&lt;strong&gt;必须在 Spring 容器刷新（refresh）之前完成&lt;/strong&gt;，通常可以在 &lt;code&gt;ApplicationContextInitializer&lt;/code&gt;中实现。&lt;/p&gt;
&lt;h4 id="2-管理属性源propertysources"&gt;2. 管理属性源（PropertySources）
&lt;/h4&gt;&lt;p&gt;属性源是实际存储配置键值对的载体。ConfigurableEnvironment 通过 &lt;code&gt;MutablePropertySources&lt;/code&gt;对象管理一个属性源列表，此列表的&lt;strong&gt;顺序决定了属性查找的优先级&lt;/strong&gt;（越靠前的源优先级越高）。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;// 获取可变的属性源集合
MutablePropertySources propertySources = environment.getPropertySources();
// 示例1：添加一个最高优先级的自定义属性源（首先被查找）
Map&amp;lt;String, Object&amp;gt; customMap = new HashMap&amp;lt;&amp;gt;();
customMap.put(&amp;#34;app.name&amp;#34;, &amp;#34;MyApp&amp;#34;);
propertySources.addFirst(new MapPropertySource(&amp;#34;myHighPrioritySource&amp;#34;, customMap));
// 示例2：添加一个最低优先级的属性源（最后被查找）
propertySources.addLast(new MapPropertySource(&amp;#34;myLowPrioritySource&amp;#34;, anotherMap));
// 示例3：移除系统属性源（如不希望应用程序访问JVM系统属性）
propertySources.remove(StandardEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME);
// 示例4：在指定属性源之前插入
propertySources.addBefore(&amp;#34;systemEnvironmentSource&amp;#34;, new MapPropertySource(&amp;#34;mySource&amp;#34;, myMap));
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id="3-属性解析与获取"&gt;3. 属性解析与获取
&lt;/h4&gt;&lt;p&gt;这是最终目的——从环境中获取你需要的配置值。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;// 1. 获取系统属性（JVM的-D参数）和环境变量
Map&amp;lt;String, Object&amp;gt; systemProperties = environment.getSystemProperties();
Map&amp;lt;String, Object&amp;gt; systemEnvironment = environment.getSystemEnvironment();
// 2. 获取任意属性的值（最常用方法）
// 简单获取，不存在则返回null
String appName = environment.getProperty(&amp;#34;app.name&amp;#34;);
// 带默认值的获取
String appNameWithDefault = environment.getProperty(&amp;#34;app.name&amp;#34;, &amp;#34;DefaultApp&amp;#34;);
// 获取并自动转换为指定类型
Integer serverPort = environment.getProperty(&amp;#34;server.port&amp;#34;, Integer.class, 8080);
// 获取必须存在的属性，不存在则抛出异常
String requiredKey = environment.getRequiredProperty(&amp;#34;required.key&amp;#34;);
// 3. 解析占位符 （例如，属性值可能是 &amp;#34;${app.host:localhost}&amp;#34; ）
String resolvedValue = environment.resolvePlaceholders(&amp;#34;Base URL: ${app.url:http://default}&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="-主要实现类"&gt;🔍 主要实现类
&lt;/h3&gt;&lt;p&gt;Spring 为不同的应用场景提供了具体的实现：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;实现类&lt;/th&gt;
&lt;th&gt;适用场景&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;StandardEnvironment&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;标准的独立Java应用程序&lt;/td&gt;
&lt;td&gt;默认包含&lt;strong&gt;系统属性&lt;/strong&gt;（&lt;code&gt;systemProperties&lt;/code&gt;）和&lt;strong&gt;系统环境变量&lt;/strong&gt;（&lt;code&gt;systemEnvironment&lt;/code&gt;）两个属性源。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;StandardServletEnvironment&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Web应用程序（基于Servlet）&lt;/td&gt;
&lt;td&gt;继承自 &lt;code&gt;StandardEnvironment&lt;/code&gt;，并额外增加了 &lt;strong&gt;&lt;code&gt;servletConfigInitParams&lt;/code&gt;&lt;/strong&gt;（Servlet配置参数）和 &lt;strong&gt;&lt;code&gt;servletContextInitParams&lt;/code&gt;&lt;/strong&gt;（Servlet上下文参数）等属性源。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;MockEnvironment&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;单元测试&lt;/td&gt;
&lt;td&gt;用于模拟环境，可以方便地设置和操控属性，而不依赖于真实的系统环境。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-实际应用与最佳实践"&gt;💻 实际应用与最佳实践
&lt;/h3&gt;&lt;h4 id="1-多环境配置"&gt;1. 多环境配置
&lt;/h4&gt;&lt;p&gt;这是 ConfigurableEnvironment 最经典的应用。通过在代码中设置不同的活动配置文件，来加载对应环境的配置。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;@Configuration
public class AppConfig {
@Autowired
private ConfigurableEnvironment environment;
@Bean
@Profile(&amp;#34;dev&amp;#34;) // 此Bean仅在 &amp;#34;dev&amp;#34; 配置文件激活时创建
public DataSource devDataSource() {
return new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.H2).build();
}
@Bean
@Profile(&amp;#34;prod&amp;#34;) // 此Bean仅在 &amp;#34;prod&amp;#34; 配置文件激活时创建
public DataSource prodDataSource() {
// 生产环境的数据源配置
// 可以从环境中读取JDBC URL等参数
String url = environment.getProperty(&amp;#34;spring.datasource.url&amp;#34;);
// ... 创建并返回生产数据源
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id="2-动态配置更新"&gt;2. 动态配置更新
&lt;/h4&gt;&lt;p&gt;利用其可变的特性，可以在运行时动态修改配置，这在实现配置热加载等高级功能时非常有用。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;@Service
public class DynamicConfigService {
@Autowired
private ConfigurableEnvironment environment;
public void updateProperty(String key, String value) {
MutablePropertySources sources = environment.getPropertySources();
// 查找或创建一个名为&amp;#34;dynamicSource&amp;#34;的可写属性源
MapPropertySource dynamicSource = (MapPropertySource) sources.get(&amp;#34;dynamicSource&amp;#34;);
if (dynamicSource == null) {
Map&amp;lt;String, Object&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
dynamicSource = new MapPropertySource(&amp;#34;dynamicSource&amp;#34;, map);
sources.addFirst(dynamicSource); // 添加到最前以拥有最高优先级
}
// 更新属性
dynamicSource.getSource().put(key, value);
// 注意：此操作不会自动更新已初始化的单例Bean中通过@Value注入的值，通常需要配合@RefreshScope等机制。
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id="3-自定义属性源"&gt;3. 自定义属性源
&lt;/h4&gt;&lt;p&gt;你可以集成任何你想要的配置来源，比如从数据库、远程配置中心（如Apollo、Nacos）读取配置。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;// 一个简单的从数据库读取配置的属性源示例
public class DatabasePropertySource extends PropertySource&amp;lt;DataSource&amp;gt; {
public DatabasePropertySource(String name, DataSource dataSource) {
super(name, dataSource);
}
@Override
public Object getProperty(String key) {
// 实现从数据库查询配置的逻辑
try (Connection conn = getSource().getConnection();
PreparedStatement stmt = conn.prepareStatement(&amp;#34;SELECT value FROM config_table WHERE key = ?&amp;#34;)) {
stmt.setString(1, key);
ResultSet rs = stmt.executeQuery();
return rs.next() ? rs.getString(&amp;#34;value&amp;#34;) : null;
} catch (SQLException e) {
throw new RuntimeException(&amp;#34;Failed to read property from database&amp;#34;, e);
}
}
}
// 注册自定义属性源（通常在ApplicationContextInitializer或EnvironmentPostProcessor中）
environment.getPropertySources().addLast(new DatabasePropertySource(&amp;#34;dbPropertySource&amp;#34;, dataSource));
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="-常见问题与技巧"&gt;⚠️ 常见问题与技巧
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;属性覆盖与优先级&lt;/strong&gt;：牢记属性源的顺序就是优先级。当你发现获取的属性值不是预期值时，检查一下属性源的顺序，可能是高优先级的源覆盖了低优先级源的值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置生效时机&lt;/strong&gt;：在Spring Boot应用中，如果你想通过代码（如&lt;code&gt;setActiveProfiles&lt;/code&gt;）设置配置文件，务必确保该操作在&lt;code&gt;ApplicationContext&lt;/code&gt;的&lt;code&gt;refresh()&lt;/code&gt;方法调用之前完成。一个常见的做法是实现&lt;code&gt;ApplicationContextInitializer&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;与占位符解析器配合&lt;/strong&gt;：要让&lt;code&gt;@Value(&amp;quot;${property.name}&amp;quot;)&lt;/code&gt;这样的注解生效，你需要配置一个&lt;code&gt;PropertySourcesPlaceholderConfigurer&lt;/code&gt;，它会利用ConfigurableEnvironment来解析占位符。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-总结-5"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;ConfigurableEnvironment 是 Spring 框架环境抽象的核心。它通过&lt;strong&gt;属性源（PropertySources）&lt;strong&gt;和&lt;/strong&gt;配置文件（Profiles）&lt;/strong&gt; 这两大支柱，为你提供了强大而灵活的配置管理能力。无论是处理简单的多环境配置，还是实现复杂的动态配置更新和自定义配置源，理解并善用 ConfigurableEnvironment 都是关键。&lt;/p&gt;
&lt;p&gt;希望这份详细的介绍能帮助你深入理解并在实际项目中有效运用 ConfigurableEnvironment。&lt;/p&gt;
&lt;h2 id="startup"&gt;StartUp
&lt;/h2&gt;&lt;p&gt;ConfigurableEnvironment 是 Spring 框架中用于环境配置的核心接口，它提供了统一的机制来管理和访问应用程序的各种配置数据。下面这个表格汇总了它的核心组成部分和主要职责，帮助你快速建立整体认知。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;模块/接口&lt;/th&gt;
&lt;th&gt;核心职责&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Environment (父接口)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;提供对环境&lt;strong&gt;只读访问&lt;/strong&gt;的基本能力，如获取属性、检查激活的配置文件（Profile）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ConfigurablePropertyResolver (父接口)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;提供&lt;strong&gt;属性解析&lt;/strong&gt;的高级配置能力，包括类型转换、占位符处理、必需属性验证等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ConfigurableEnvironment (本体)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;继承并融合&lt;/strong&gt;上述两者，并增加&lt;strong&gt;动态配置&lt;/strong&gt;能力，如管理属性源（PropertySources）、设置活动/默认配置文件等。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-核心功能与价值-1"&gt;💡 核心功能与价值
&lt;/h3&gt;&lt;p&gt;ConfigurableEnvironment 的核心价值在于它将应用程序与具体的运行环境解耦，为你提供了一个统一且强大的配置管理入口。它的设计主要服务于两个关键方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;配置文件（Profiles）&lt;/strong&gt;：实现&lt;strong&gt;环境隔离&lt;/strong&gt;。通过预设的配置文件（如 &lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;prod&lt;/code&gt;），你可以控制不同环境下哪些 Bean 应该被注册，哪些配置应该生效。这在 Spring 中通常通过 &lt;code&gt;@Profile&lt;/code&gt;注解来实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;属性（Properties）&lt;/strong&gt;：实现&lt;strong&gt;配置集中化与外部化&lt;/strong&gt;。属性可以来源于多种渠道，如 &lt;code&gt;.properties&lt;/code&gt;/&lt;code&gt;.yml&lt;/code&gt;文件、JVM 系统属性、操作系统环境变量、Servlet 上下文参数等。ConfigurableEnvironment 的作用就是将这些分散的来源统一管理，并提供一个简单的接口来获取和解析这些属性。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-核心操作与使用方法-1"&gt;⚙️ 核心操作与使用方法
&lt;/h3&gt;&lt;h4 id="1-管理配置文件profiles-1"&gt;1. 管理配置文件（Profiles）
&lt;/h4&gt;&lt;p&gt;配置文件允许你根据环境（如开发、测试、生产）激活不同的配置或 Bean 定义。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;// 创建环境实例（在Spring Boot应用中，通常通过注入获取）
ConfigurableEnvironment environment = new StandardEnvironment();
// 1. 设置活动配置文件（将替换所有现有活动配置）
environment.setActiveProfiles(&amp;#34;dev&amp;#34;, &amp;#34;test&amp;#34;);
// 2. 添加活动配置文件（在现有配置基础上追加）
environment.addActiveProfile(&amp;#34;integration&amp;#34;);
// 3. 设置默认配置文件（当没有活动配置时生效）
environment.setDefaultProfiles(&amp;#34;default&amp;#34;);
// 检查配置是否生效
String[] activeProfiles = environment.getActiveProfiles(); // 获取所有活动配置
boolean isTestActive = environment.acceptsProfiles(&amp;#34;test&amp;#34;); // 检查特定配置是否激活
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;关键点&lt;/strong&gt;：设置活动或默认配置文件的操作&lt;strong&gt;必须在 Spring 容器刷新（refresh）之前完成&lt;/strong&gt;，通常可以在 &lt;code&gt;ApplicationContextInitializer&lt;/code&gt;中实现。&lt;/p&gt;
&lt;h4 id="2-管理属性源propertysources-1"&gt;2. 管理属性源（PropertySources）
&lt;/h4&gt;&lt;p&gt;属性源是实际存储配置键值对的载体。ConfigurableEnvironment 通过 &lt;code&gt;MutablePropertySources&lt;/code&gt;对象管理一个属性源列表，此列表的&lt;strong&gt;顺序决定了属性查找的优先级&lt;/strong&gt;（越靠前的源优先级越高）。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;// 获取可变的属性源集合
MutablePropertySources propertySources = environment.getPropertySources();
// 示例1：添加一个最高优先级的自定义属性源（首先被查找）
Map&amp;lt;String, Object&amp;gt; customMap = new HashMap&amp;lt;&amp;gt;();
customMap.put(&amp;#34;app.name&amp;#34;, &amp;#34;MyApp&amp;#34;);
propertySources.addFirst(new MapPropertySource(&amp;#34;myHighPrioritySource&amp;#34;, customMap));
// 示例2：添加一个最低优先级的属性源（最后被查找）
propertySources.addLast(new MapPropertySource(&amp;#34;myLowPrioritySource&amp;#34;, anotherMap));
// 示例3：移除系统属性源（如不希望应用程序访问JVM系统属性）
propertySources.remove(StandardEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME);
// 示例4：在指定属性源之前插入
propertySources.addBefore(&amp;#34;systemEnvironmentSource&amp;#34;, new MapPropertySource(&amp;#34;mySource&amp;#34;, myMap));
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id="3-属性解析与获取-1"&gt;3. 属性解析与获取
&lt;/h4&gt;&lt;p&gt;这是最终目的——从环境中获取你需要的配置值。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;// 1. 获取系统属性（JVM的-D参数）和环境变量
Map&amp;lt;String, Object&amp;gt; systemProperties = environment.getSystemProperties();
Map&amp;lt;String, Object&amp;gt; systemEnvironment = environment.getSystemEnvironment();
// 2. 获取任意属性的值（最常用方法）
// 简单获取，不存在则返回null
String appName = environment.getProperty(&amp;#34;app.name&amp;#34;);
// 带默认值的获取
String appNameWithDefault = environment.getProperty(&amp;#34;app.name&amp;#34;, &amp;#34;DefaultApp&amp;#34;);
// 获取并自动转换为指定类型
Integer serverPort = environment.getProperty(&amp;#34;server.port&amp;#34;, Integer.class, 8080);
// 获取必须存在的属性，不存在则抛出异常
String requiredKey = environment.getRequiredProperty(&amp;#34;required.key&amp;#34;);
// 3. 解析占位符 （例如，属性值可能是 &amp;#34;${app.host:localhost}&amp;#34; ）
String resolvedValue = environment.resolvePlaceholders(&amp;#34;Base URL: ${app.url:http://default}&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="-主要实现类-1"&gt;🔍 主要实现类
&lt;/h3&gt;&lt;p&gt;Spring 为不同的应用场景提供了具体的实现：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;实现类&lt;/th&gt;
&lt;th&gt;适用场景&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;StandardEnvironment&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;标准的独立Java应用程序&lt;/td&gt;
&lt;td&gt;默认包含&lt;strong&gt;系统属性&lt;/strong&gt;（&lt;code&gt;systemProperties&lt;/code&gt;）和&lt;strong&gt;系统环境变量&lt;/strong&gt;（&lt;code&gt;systemEnvironment&lt;/code&gt;）两个属性源。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;StandardServletEnvironment&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Web应用程序（基于Servlet）&lt;/td&gt;
&lt;td&gt;继承自 &lt;code&gt;StandardEnvironment&lt;/code&gt;，并额外增加了 &lt;strong&gt;&lt;code&gt;servletConfigInitParams&lt;/code&gt;&lt;/strong&gt;（Servlet配置参数）和 &lt;strong&gt;&lt;code&gt;servletContextInitParams&lt;/code&gt;&lt;/strong&gt;（Servlet上下文参数）等属性源。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;MockEnvironment&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;单元测试&lt;/td&gt;
&lt;td&gt;用于模拟环境，可以方便地设置和操控属性，而不依赖于真实的系统环境。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-实际应用与最佳实践-1"&gt;💻 实际应用与最佳实践
&lt;/h3&gt;&lt;h4 id="1-多环境配置-1"&gt;1. 多环境配置
&lt;/h4&gt;&lt;p&gt;这是 ConfigurableEnvironment 最经典的应用。通过在代码中设置不同的活动配置文件，来加载对应环境的配置。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;@Configuration
public class AppConfig {
@Autowired
private ConfigurableEnvironment environment;
@Bean
@Profile(&amp;#34;dev&amp;#34;) // 此Bean仅在 &amp;#34;dev&amp;#34; 配置文件激活时创建
public DataSource devDataSource() {
return new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.H2).build();
}
@Bean
@Profile(&amp;#34;prod&amp;#34;) // 此Bean仅在 &amp;#34;prod&amp;#34; 配置文件激活时创建
public DataSource prodDataSource() {
// 生产环境的数据源配置
// 可以从环境中读取JDBC URL等参数
String url = environment.getProperty(&amp;#34;spring.datasource.url&amp;#34;);
// ... 创建并返回生产数据源
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id="2-动态配置更新-1"&gt;2. 动态配置更新
&lt;/h4&gt;&lt;p&gt;利用其可变的特性，可以在运行时动态修改配置，这在实现配置热加载等高级功能时非常有用。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;@Service
public class DynamicConfigService {
@Autowired
private ConfigurableEnvironment environment;
public void updateProperty(String key, String value) {
MutablePropertySources sources = environment.getPropertySources();
// 查找或创建一个名为&amp;#34;dynamicSource&amp;#34;的可写属性源
MapPropertySource dynamicSource = (MapPropertySource) sources.get(&amp;#34;dynamicSource&amp;#34;);
if (dynamicSource == null) {
Map&amp;lt;String, Object&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
dynamicSource = new MapPropertySource(&amp;#34;dynamicSource&amp;#34;, map);
sources.addFirst(dynamicSource); // 添加到最前以拥有最高优先级
}
// 更新属性
dynamicSource.getSource().put(key, value);
// 注意：此操作不会自动更新已初始化的单例Bean中通过@Value注入的值，通常需要配合@RefreshScope等机制。
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id="3-自定义属性源-1"&gt;3. 自定义属性源
&lt;/h4&gt;&lt;p&gt;你可以集成任何你想要的配置来源，比如从数据库、远程配置中心（如Apollo、Nacos）读取配置。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;// 一个简单的从数据库读取配置的属性源示例
public class DatabasePropertySource extends PropertySource&amp;lt;DataSource&amp;gt; {
public DatabasePropertySource(String name, DataSource dataSource) {
super(name, dataSource);
}
@Override
public Object getProperty(String key) {
// 实现从数据库查询配置的逻辑
try (Connection conn = getSource().getConnection();
PreparedStatement stmt = conn.prepareStatement(&amp;#34;SELECT value FROM config_table WHERE key = ?&amp;#34;)) {
stmt.setString(1, key);
ResultSet rs = stmt.executeQuery();
return rs.next() ? rs.getString(&amp;#34;value&amp;#34;) : null;
} catch (SQLException e) {
throw new RuntimeException(&amp;#34;Failed to read property from database&amp;#34;, e);
}
}
}
// 注册自定义属性源（通常在ApplicationContextInitializer或EnvironmentPostProcessor中）
environment.getPropertySources().addLast(new DatabasePropertySource(&amp;#34;dbPropertySource&amp;#34;, dataSource));
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="-常见问题与技巧-1"&gt;⚠️ 常见问题与技巧
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;属性覆盖与优先级&lt;/strong&gt;：牢记属性源的顺序就是优先级。当你发现获取的属性值不是预期值时，检查一下属性源的顺序，可能是高优先级的源覆盖了低优先级源的值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置生效时机&lt;/strong&gt;：在Spring Boot应用中，如果你想通过代码（如&lt;code&gt;setActiveProfiles&lt;/code&gt;）设置配置文件，务必确保该操作在&lt;code&gt;ApplicationContext&lt;/code&gt;的&lt;code&gt;refresh()&lt;/code&gt;方法调用之前完成。一个常见的做法是实现&lt;code&gt;ApplicationContextInitializer&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;与占位符解析器配合&lt;/strong&gt;：要让&lt;code&gt;@Value(&amp;quot;${property.name}&amp;quot;)&lt;/code&gt;这样的注解生效，你需要配置一个&lt;code&gt;PropertySourcesPlaceholderConfigurer&lt;/code&gt;，它会利用ConfigurableEnvironment来解析占位符。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-总结-6"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;ConfigurableEnvironment 是 Spring 框架环境抽象的核心。它通过&lt;strong&gt;属性源（PropertySources）&lt;strong&gt;和&lt;/strong&gt;配置文件（Profiles）&lt;/strong&gt; 这两大支柱，为你提供了强大而灵活的配置管理能力。无论是处理简单的多环境配置，还是实现复杂的动态配置更新和自定义配置源，理解并善用 ConfigurableEnvironment 都是关键。&lt;/p&gt;
&lt;p&gt;希望这份详细的介绍能帮助你深入理解并在实际项目中有效运用 ConfigurableEnvironment。&lt;/p&gt;
&lt;h2 id="applicationcontextfactory"&gt;ApplicationContextFactory
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ApplicationContextFactory&lt;/code&gt;是 Spring Boot 中一个负责&lt;strong&gt;根据应用类型创建相应应用上下文&lt;/strong&gt;的核心工厂接口。为了让你快速建立整体认知，下表概括了它的核心信息：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;特性维度&lt;/th&gt;
&lt;th style="text-align: left"&gt;核心说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;strong&gt;设计目标&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;根据 &lt;code&gt;WebApplicationType&lt;/code&gt; 创建适合的 &lt;code&gt;ConfigurableApplicationContext&lt;/code&gt;，实现应用上下文创建的&lt;strong&gt;解耦&lt;/strong&gt;与&lt;strong&gt;可扩展&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;strong&gt;核心方法&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;ConfigurableApplicationContext create(WebApplicationType webApplicationType)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;strong&gt;默认实现&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;DefaultApplicationContextFactory&lt;/code&gt;，通过 SPI 机制从 &lt;code&gt;spring.factories&lt;/code&gt; 加载候选工厂&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;strong&gt;内置工厂&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;AnnotationConfigServletWebServerApplicationContext.Factory&lt;/code&gt;（Servlet Web应用）、&lt;code&gt;AnnotationConfigReactiveWebServerApplicationContext.Factory&lt;/code&gt;（Reactive Web应用）等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;strong&gt;扩展方式&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;实现 &lt;code&gt;ApplicationContextFactory&lt;/code&gt; 接口，并在 &lt;code&gt;META-INF/spring.factories&lt;/code&gt; 中注册&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-核心功能与接口设计"&gt;🔧 核心功能与接口设计
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ApplicationContextFactory&lt;/code&gt;是一个函数式接口，其核心方法是 &lt;code&gt;create&lt;/code&gt;，它根据传入的 &lt;code&gt;WebApplicationType&lt;/code&gt;（如 &lt;code&gt;SERVLET&lt;/code&gt;、&lt;code&gt;REACTIVE&lt;/code&gt;或 &lt;code&gt;NONE&lt;/code&gt;）来创建对应的 &lt;code&gt;ConfigurableApplicationContext&lt;/code&gt;实例。&lt;/p&gt;
&lt;p&gt;除了创建应用上下文，该接口还提供了获取和创建 &lt;code&gt;ConfigurableEnvironment&lt;/code&gt;（环境）的默认方法，体现了环境与上下文类型的关联性。&lt;/p&gt;
&lt;h3 id="-默认实现与创建流程"&gt;📜 默认实现与创建流程
&lt;/h3&gt;&lt;p&gt;Spring Boot 的默认创建逻辑主要由 &lt;code&gt;DefaultApplicationContextFactory&lt;/code&gt;承担。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;SPI机制加载&lt;/strong&gt;：&lt;code&gt;DefaultApplicationContextFactory&lt;/code&gt;会通过 &lt;code&gt;SpringFactoriesLoader&lt;/code&gt;从类路径下所有 &lt;code&gt;META-INF/spring.factories&lt;/code&gt;文件中加载 &lt;code&gt;ApplicationContextFactory&lt;/code&gt;的实现类。 在 Spring Boot 中，默认会加载 &lt;code&gt;AnnotationConfigServletWebServerApplicationContext.Factory&lt;/code&gt;和 &lt;code&gt;AnnotationConfigReactiveWebServerApplicationContext.Factory&lt;/code&gt;等候选工厂。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;遍历候选工厂&lt;/strong&gt;：根据 &lt;code&gt;WebApplicationType&lt;/code&gt;，按顺序调用每个候选工厂的 &lt;code&gt;create&lt;/code&gt;方法。一旦某个工厂返回了非空的 &lt;code&gt;ConfigurableApplicationContext&lt;/code&gt;，就将其作为结果返回。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;默认降级策略&lt;/strong&gt;：如果所有候选工厂都无法创建合适的应用上下文，则使用默认的 &lt;code&gt;AnnotationConfigApplicationContext::new&lt;/code&gt;作为降级方案。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例如，对于 &lt;code&gt;WebApplicationType.SERVLET&lt;/code&gt;类型，最终会由 &lt;code&gt;ServletWebServerApplicationContextFactory&lt;/code&gt;创建 &lt;code&gt;AnnotationConfigServletWebServerApplicationContext&lt;/code&gt;实例。 在创建过程中，会同时初始化 IoC 容器（如 &lt;code&gt;DefaultListableBeanFactory&lt;/code&gt;）和必要的 Bean 后置处理器（如 &lt;code&gt;ConfigurationClassPostProcessor&lt;/code&gt;）。&lt;/p&gt;
&lt;h3 id="-内置的-applicationcontext-类型"&gt;🌐 内置的 ApplicationContext 类型
&lt;/h3&gt;&lt;p&gt;Spring Boot 为不同的应用模式提供了相应的应用上下文。以下是一些常见类型及其对应的工厂：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;应用类型&lt;/th&gt;
&lt;th&gt;应用上下文实现&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Servlet Web 应用&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AnnotationConfigServletWebServerApplicationContext&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;支持注解配置，内嵌 Servlet Web 服务器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Reactive Web 应用&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AnnotationConfigReactiveWebServerApplicationContext&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;支持注解配置，用于响应式 Web 应用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;非 Web 应用&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AnnotationConfigApplicationContext&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;标准的注解配置应用上下文，适用于控制台应用等。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-如何自定义与扩展"&gt;🛠️ 如何自定义与扩展
&lt;/h3&gt;&lt;p&gt;你可以通过实现自己的 &lt;code&gt;ApplicationContextFactory&lt;/code&gt;来完全控制应用上下文的创建过程。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;实现接口&lt;/strong&gt;：创建一个类实现 &lt;code&gt;ApplicationContextFactory&lt;/code&gt;接口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注册实现&lt;/strong&gt;：在 &lt;code&gt;src/main/resources/META-INF/spring.factories&lt;/code&gt;文件中声明你的实现类。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;org.springframework.boot.ApplicationContextFactory=com.example.MyCustomApplicationContextFactory
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Spring Boot 的 &lt;code&gt;ApplicationContextFactory&lt;/code&gt;也提供了便捷的静态工厂方法，用于快速创建基于特定类或供应商的工厂：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ApplicationContextFactory ofContextClass(Class&amp;lt;? extends ConfigurableApplicationContext&amp;gt; contextClass)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ApplicationContextFactory of(Supplier&amp;lt;ConfigurableApplicationContext&amp;gt; supplier)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-在启动流程中的角色"&gt;⚙️ 在启动流程中的角色
&lt;/h3&gt;&lt;p&gt;在 &lt;code&gt;SpringApplication.run()&lt;/code&gt;方法中，&lt;code&gt;ApplicationContextFactory&lt;/code&gt;的调用是创建应用上下文的关键一步：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;public class SpringApplication {
protected ConfigurableApplicationContext createApplicationContext() {
// 委托给 applicationContextFactory 根据应用类型创建上下文
return this.applicationContextFactory.create(this.webApplicationType);
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个方法在准备好环境（&lt;code&gt;Environment&lt;/code&gt;）之后、刷新上下文（&lt;code&gt;refreshContext&lt;/code&gt;）之前被调用，确保了应用上下文能够根据已确定的应用类型和环境进行创建和后续配置。&lt;/p&gt;
&lt;h3 id="-总结-7"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ApplicationContextFactory&lt;/code&gt;是 Spring Boot 启动流程中一个精巧的抽象，它将&lt;strong&gt;应用类型的判断&lt;/strong&gt;与&lt;strong&gt;具体应用上下文的实例化&lt;/strong&gt;解耦。通过 SPI 机制和默认实现，Spring Boot 提供了开箱即用的强大功能，同时保留了高度的可扩展性，允许开发者根据特殊需求定制应用上下文的创建逻辑。&lt;/p&gt;
&lt;p&gt;希望这份详细的解释能帮助你更好地理解 &lt;code&gt;ApplicationContextFactory&lt;/code&gt;在 Spring Boot 生态系统中的重要作用。&lt;/p&gt;
&lt;h2 id="servlet--reactive"&gt;SERVLET &amp;amp; REACTIVE
&lt;/h2&gt;&lt;p&gt;SERVLET 和 REACTIVE 是 Spring Boot 中构建 Web 应用的两种核心模型，它们在设计哲学、性能特性和适用场景上有着根本的不同。为了帮你快速建立整体认知，下面这个表格清晰地对比了它们的核心差异。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性维度&lt;/th&gt;
&lt;th&gt;SERVLET (Spring MVC)&lt;/th&gt;
&lt;th&gt;REACTIVE (Spring WebFlux)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;编程模型&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;同步阻塞 I/O&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;异步非阻塞 I/O&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;线程模型&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;每个请求占用一个线程（线程池）&lt;/td&gt;
&lt;td&gt;事件循环（Event Loop），少量线程处理大量请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;核心依赖&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;spring-boot-starter-web&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;spring-boot-starter-webflux&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;默认服务器&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Tomcat&lt;/td&gt;
&lt;td&gt;Netty&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;资源消耗&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;较高（与并发线程数正相关）&lt;/td&gt;
&lt;td&gt;较低（线程复用率极高）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;吞吐量&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;受限于线程池大小&lt;/td&gt;
&lt;td&gt;高并发下更具优势，支持万级连接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;编程复杂度&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;相对简单直观，易于调试&lt;/td&gt;
&lt;td&gt;相对复杂，需要理解响应式编程范式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;背压支持&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;原生支持&lt;/strong&gt;，是核心特性之一&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-核心区别详解"&gt;💡 核心区别详解
&lt;/h3&gt;&lt;h4 id="1-工作原理与线程模型"&gt;1. 工作原理与线程模型
&lt;/h4&gt;&lt;p&gt;这是两者最根本的区别，直接决定了其性能和资源使用模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SERVLET（同步阻塞）&lt;/strong&gt;：基于经典的 &lt;strong&gt;“一个请求一个线程”&lt;/strong&gt; 模型。当请求到达时，容器（如Tomcat）会从线程池中分配一个专用线程来处理该请求。在这个线程中，如果遇到I/O操作（如数据库查询、调用其他服务），线程会&lt;strong&gt;被阻塞&lt;/strong&gt;，直到收到响应后才能继续执行。这意味着在I/O等待期间，宝贵的线程资源处于闲置状态，无法处理其他请求。为了应对高并发，就需要扩大线程池，但线程本身是昂贵的资源，大量线程会导致巨大的内存开销和频繁的上下文切换。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;REACTIVE（异步非阻塞）&lt;/strong&gt;：基于&lt;strong&gt;事件驱动&lt;/strong&gt;和&lt;strong&gt;函数式编程&lt;/strong&gt;思想。它采用&lt;strong&gt;事件循环（Event Loop）&lt;/strong&gt; 机制，使用少量（通常为CPU核心数）线程来处理大量的网络连接。当I/O操作发生时，不会阻塞线程，而是注册一个回调函数后立即返回。当数据就绪时，事件循环会触发回调函数进行后续处理。这样，有限的线程资源始终在忙碌状态，而不是在等待，从而极大地提升了资源利用率和系统的并发处理能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="2-技术栈与依赖"&gt;2. 技术栈与依赖
&lt;/h4&gt;&lt;p&gt;你的选择会直接决定项目的基础技术栈。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SERVLET&lt;/strong&gt;：引入 &lt;code&gt;spring-boot-starter-web&lt;/code&gt;依赖，默认会嵌入 &lt;strong&gt;Tomcat&lt;/strong&gt; 作为Servlet容器。你也可以轻松地替换为Jetty或Undertow。其编程模型建立在大家非常熟悉的 &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@RequestMapping&lt;/code&gt;等注解之上，开发模式固定且成熟。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;REACTIVE&lt;/strong&gt;：需要引入 &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt;依赖，默认使用 &lt;strong&gt;Netty&lt;/strong&gt; 作为服务器。其核心是 &lt;strong&gt;Reactor&lt;/strong&gt; 库，你需要使用 &lt;code&gt;Mono&lt;/code&gt;和 &lt;code&gt;Flux&lt;/code&gt;这两种代表0-1个和0-N个元素的异步数据流类型来构建你的代码。它支持两种编程模型：类MVC的注解模型和更灵活的函数式路由模型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="3-背压backpressure机制"&gt;3. 背压（Backpressure）机制
&lt;/h4&gt;&lt;p&gt;这是响应式编程独有的重要特性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;REACTIVE 支持背压&lt;/strong&gt;：在数据流处理中，当生产者的数据产生速度远快于消费者的处理速度时，背压机制允许消费者&lt;strong&gt;向上游发出信号，告知“我处理不过来了，请慢一点”&lt;/strong&gt;。这能有效地防止快速数据源淹没消费者，从而提升系统的弹性和稳定性。SERVLET模型不具备这种能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-如何选择"&gt;🎯 如何选择？
&lt;/h3&gt;&lt;p&gt;了解了区别后，关键在于如何为你的项目做出正确选择。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;选择 SERVLET (Spring MVC) 的情况&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;团队熟悉度&lt;/strong&gt;：团队对Servlet模型和同步编程非常熟悉，学习成本低。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;项目需求&lt;/strong&gt;：开发的是传统的CRUD应用、内部管理系统或并发要求不高的RESTful API。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生态依赖&lt;/strong&gt;：项目严重依赖与阻塞式I/O紧密集成的第三方库（如某些传统的JPA实现或SDK）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简单性优先&lt;/strong&gt;：项目周期紧，追求开发效率、可维护性和易于调试，此时SERVLET的简单直观是巨大优势。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选择 REACTIVE (Spring WebFlux) 的情况&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高并发与低延迟&lt;/strong&gt;：应用需要处理大量并发连接（如消息推送、聊天室、实时数据流处理），并且对响应延迟有极高要求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I/O密集型场景&lt;/strong&gt;：系统需要频繁地进行高延迟的I/O操作（如调用多个微服务），并且希望用最少的资源来支撑。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流式数据处理&lt;/strong&gt;：需要处理如SSE（Server-Sent Events）或WebSocket等持续的数据流。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技术前瞻性&lt;/strong&gt;：团队希望学习和使用更前沿的技术，为未来做准备。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-需要注意的误区"&gt;⚠️ 需要注意的误区
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;REACTIVE 并非总是更快&lt;/strong&gt;：在低并发场景下，两者的性能差异可能不明显。REACTIVE的优势只有在高并发、高I/O等待的场景下才能充分发挥。对于CPU密集型任务，REACTIVE并无优势。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;“全栈响应式”才有意义&lt;/strong&gt;：仅仅在Web层使用REACTIVE，而数据访问层（如JDBC）仍然是阻塞的，那么整个链条最终还是会被阻塞操作拖累，无法发挥非阻塞的威力。真正的收益来自于从控制器到数据库驱动程序的&lt;strong&gt;全链路非阻塞&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-总结-8"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;简单来说，&lt;strong&gt;SERVLET像是一个接待能力固定、每个客户配一个专属管家的餐厅；而REACTIVE则像是一个由少数几个高效服务员通过智能对讲机同时协调服务大量桌台的餐厅&lt;/strong&gt;。前者稳定可靠，适合常规客流；后者效率极高，擅长应对客流高峰。&lt;/p&gt;
&lt;p&gt;选择哪种模型，最终取决于你的具体业务需求、团队的技术储备和对系统扩展性的期望。对于大多数传统业务应用，SERVLET依然是非常稳健和高效的选择。而当你面临真正的高并发、流式数据处理挑战时，REACTIVE将为你提供强大的解决方案。&lt;/p&gt;
&lt;p&gt;希望这份详细的对比能帮助你做出清晰的技术决策！&lt;/p&gt;
&lt;h2 id="preparecontext"&gt;prepareContext
&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;prepareContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DefaultBootstrapContext&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bootstrapContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ConfigurableApplicationContext&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ConfigurableEnvironment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SpringApplicationRunListeners&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ApplicationArguments&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;applicationArguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Banner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;printedBanner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setEnvironment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;postProcessApplicationContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addAotGeneratedInitializerIfNecessary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;initializers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;applyInitializers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contextPrepared&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bootstrapContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isLogStartupInfo&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;logStartupInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getParent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;logStartupInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;logStartupProfileInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ConfigurableListableBeanFactory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;beanFactory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBeanFactory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;beanFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;registerSingleton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;springApplicationArguments&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;applicationArguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;printedBanner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;beanFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;registerSingleton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;springBootBanner&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;printedBanner&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;beanFactory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;instanceof&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AbstractAutowireCapableBeanFactory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;autowireCapableBeanFactory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;autowireCapableBeanFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setAllowCircularReferences&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isAllowCircularReferences&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;beanFactory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;instanceof&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DefaultListableBeanFactory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;listableBeanFactory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;listableBeanFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setAllowBeanDefinitionOverriding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isAllowBeanDefinitionOverriding&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isLazyInitialization&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addBeanFactoryPostProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LazyInitializationBeanFactoryPostProcessor&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isKeepAlive&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addApplicationListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;KeepAlive&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addBeanFactoryPostProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PropertySourceOrderingBeanFactoryPostProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;AotDetector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;useGeneratedArtifacts&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sources&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAllSources&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;notEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sources&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;Sources must not be empty&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contextLoaded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你提供的这段代码是 Spring Boot 应用中准备应用上下文（&lt;code&gt;ApplicationContext&lt;/code&gt;）的核心环节。为了让你快速把握全局，下表详细解析了 &lt;code&gt;prepareContext&lt;/code&gt;方法的关键步骤及其作用。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;步骤&lt;/th&gt;
&lt;th&gt;关键方法/操作&lt;/th&gt;
&lt;th&gt;主要作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;1. 环境设置&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;context.setEnvironment(environment)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将已配置好的 &lt;code&gt;Environment&lt;/code&gt;（包含属性文件、配置文件等）设置到应用上下文中，统一环境配置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;2. 上下文后置处理&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;postProcessApplicationContext(context)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;对应用上下文进行后置处理，例如注册 &lt;code&gt;BeanNameGenerator&lt;/code&gt;、设置 &lt;code&gt;ResourceLoader&lt;/code&gt;和 &lt;code&gt;ConversionService&lt;/code&gt;等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;3. 执行初始化器&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;applyInitializers(context)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;执行所有 &lt;code&gt;ApplicationContextInitializer&lt;/code&gt;实现类的 &lt;code&gt;initialize&lt;/code&gt;方法，用于在容器刷新前对上下文进行自定义初始化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;4. 发布上下文准备事件&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;listeners.contextPrepared(context)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;发布 &lt;code&gt;ApplicationContextInitializedEvent&lt;/code&gt;事件，通知监听器应用上下文已准备就绪（但此时尚无Bean定义加载）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;5. 关闭引导上下文&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bootstrapContext.close(context)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;关闭 &lt;code&gt;BootstrapContext&lt;/code&gt;，并将其中的内容转移到当前的应用上下文中（这是新版本代码相较于旧版本的一个显著变化）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;6. 打印启动信息&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;logStartupInfo&lt;/code&gt;, &lt;code&gt;logStartupProfileInfo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在日志中输出应用启动信息，包括启动类、PID、路径以及激活的配置文件（profiles）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;7. 注册关键单例Bean&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;registerSingleton(&amp;quot;springApplicationArguments&amp;quot;, ...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将应用参数（&lt;code&gt;ApplicationArguments&lt;/code&gt;）和Banner对象作为单例Bean注册到容器中，便于后续依赖注入。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;8. 配置BeanFactory&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;设置循环引用、Bean定义覆盖等属性&lt;/td&gt;
&lt;td&gt;根据配置决定是否允许循环引用和Bean定义覆盖，并可能添加延迟初始化等后置处理器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;9. 加载源数据&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;load(context, sources.toArray(...))&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将主启动类（即&lt;code&gt;sources&lt;/code&gt;）加载到容器中，解析其上的注解（如&lt;code&gt;@SpringBootApplication&lt;/code&gt;），并注册相应的Bean定义。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;10. 发布上下文加载事件&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;listeners.contextLoaded(context)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;发布 &lt;code&gt;ApplicationPreparedEvent&lt;/code&gt;事件，通知监听器Bean定义已加载完成（但此时Bean尚未实例化）。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-关键步骤详解"&gt;💡 关键步骤详解
&lt;/h3&gt;&lt;h4 id="1-环境设置与环境统一"&gt;1. 环境设置与环境统一
&lt;/h4&gt;&lt;p&gt;这一步至关重要，它确保了应用上下文使用的是在SpringApplication运行阶段已经创建并配置好的&lt;code&gt;Environment&lt;/code&gt;对象。这个&lt;code&gt;Environment&lt;/code&gt;对象已经包含了从&lt;code&gt;application.properties&lt;/code&gt;、&lt;code&gt;application.yml&lt;/code&gt;、系统属性、环境变量等所有渠道解析得到的属性源（PropertySources）。通过&lt;code&gt;context.setEnvironment(environment)&lt;/code&gt;，应用上下文与SpringApplication使用了完全相同的环境配置，为后续的Bean创建和属性注入奠定了基础。&lt;/p&gt;
&lt;h4 id="2-执行初始化器initializers"&gt;2. 执行初始化器（Initializers）
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;applyInitializers(context)&lt;/code&gt;方法会遍历并执行所有通过&lt;code&gt;spring.factories&lt;/code&gt;机制加载到的&lt;code&gt;ApplicationContextInitializer&lt;/code&gt;实现。这些初始化器是Spring Boot提供的一个&lt;strong&gt;重要扩展点&lt;/strong&gt;，允许你在IoC容器刷新之前，对&lt;code&gt;ConfigurableApplicationContext&lt;/code&gt;进行编程式的定制。例如，内置的&lt;code&gt;ContextIdApplicationContextInitializer&lt;/code&gt;会为应用上下文设置一个ID，而&lt;code&gt;ServerPortInfoApplicationContextInitializer&lt;/code&gt;则会注册一个监听器来获取内嵌Web服务器的实际端口。&lt;/p&gt;
&lt;h4 id="3-引导上下文的关闭与资源转移"&gt;3. 引导上下文的关闭与资源转移
&lt;/h4&gt;&lt;p&gt;你提供的代码中&lt;code&gt;bootstrapContext.close(context)&lt;/code&gt;是一个值得注意的细节。&lt;code&gt;BootstrapContext&lt;/code&gt;主要用于应用的&lt;strong&gt;早期启动阶段&lt;/strong&gt;，例如在Spring Cloud环境中加载远程配置。当主应用上下文准备就绪时，&lt;code&gt;BootstrapContext&lt;/code&gt;的使命就完成了。调用&lt;code&gt;close&lt;/code&gt;方法会触发其关闭事件，并通常将其持有的资源（如一些早期的单例Bean）转移到主应用上下文中，确保它们在主应用生命周期内可用。&lt;/p&gt;
&lt;h4 id="4-加载源数据source与bean定义注册"&gt;4. 加载源数据（Source）与Bean定义注册
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;load(context, sources...)&lt;/code&gt;是整个流程中的&lt;strong&gt;核心步骤之一&lt;/strong&gt;。这里的&lt;code&gt;sources&lt;/code&gt;通常就是你的主启动类（例如&lt;code&gt;Application.class&lt;/code&gt;）。该方法会创建一个&lt;code&gt;BeanDefinitionLoader&lt;/code&gt;，它会解析你的启动类上的注解（如&lt;code&gt;@SpringBootApplication&lt;/code&gt;，它是一个复合注解，包含了&lt;code&gt;@Configuration&lt;/code&gt;）。解析的结果是，你的启动类本身会被注册为一个Bean定义（BeanDefinition）到容器的&lt;code&gt;BeanDefinitionMap&lt;/code&gt;中。这是后续组件扫描（&lt;code&gt;@ComponentScan&lt;/code&gt;）和自动配置（&lt;code&gt;@EnableAutoConfiguration&lt;/code&gt;）得以执行的起点。&lt;/p&gt;
&lt;h4 id="5-事件驱动的启动流程"&gt;5. 事件驱动的启动流程
&lt;/h4&gt;&lt;p&gt;在整个&lt;code&gt;prepareContext&lt;/code&gt;过程中，Spring Boot通过&lt;code&gt;SpringApplicationRunListeners&lt;/code&gt;发布了多个事件（如&lt;code&gt;contextPrepared&lt;/code&gt;和&lt;code&gt;contextLoaded&lt;/code&gt;）。这种&lt;strong&gt;事件驱动机制&lt;/strong&gt;是Spring Boot框架高度可扩展性的体现。各种监听器（如&lt;code&gt;ConfigFileApplicationListener&lt;/code&gt;, &lt;code&gt;LoggingApplicationListener&lt;/code&gt;）通过监听这些事件，在生命周期的特定节点执行相应的逻辑，从而实现了功能的模块化和解耦。&lt;/p&gt;
&lt;h3 id="-版本差异说明"&gt;⚠️ 版本差异说明
&lt;/h3&gt;&lt;p&gt;你提供的代码片段与一些搜索结果（基于Spring Boot 2.x）展示的经典&lt;code&gt;prepareContext&lt;/code&gt;方法存在一些差异，主要体现在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;参数列表&lt;/strong&gt;：你的代码多了一个&lt;code&gt;DefaultBootstrapContext bootstrapContext&lt;/code&gt;参数，这反映了新版本对引导流程的增强。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AOT支持&lt;/strong&gt;：你的代码中出现了&lt;code&gt;this.addAotGeneratedInitializerIfNecessary(this.initializers)&lt;/code&gt;和&lt;code&gt;if (!AotDetector.useGeneratedArtifacts())&lt;/code&gt;等逻辑，这些是Spring Boot为支持&lt;strong&gt;AOT（Ahead-Of-Time）编译&lt;/strong&gt;（常用于GraalVM Native Image）而引入的新特性。在AOT模式下，部分传统的反射和动态处理会被预先生成的代码替代，因此加载源数据的逻辑（&lt;code&gt;this.load&lt;/code&gt;）在AOT模式下可能被跳过。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-总结-9"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;prepareContext&lt;/code&gt;方法是Spring Boot应用启动过程中承上启下的关键阶段。它搭建了IoC容器的基本骨架：&lt;strong&gt;统一了环境配置、执行了自定义初始化、注册了核心的单例对象、加载了启动类并发布了关键事件&lt;/strong&gt;，为紧随其后的容器刷新（&lt;code&gt;refreshContext&lt;/code&gt;）——即Bean的实例化、依赖注入等核心流程——做好了全部准备工作。&lt;/p&gt;
&lt;p&gt;希望这份详细的解释能帮助你透彻理解Spring Boot应用上下文的准备过程。如果你对某个具体步骤或扩展点还有更深入的疑问，我们可以继续探讨。&lt;/p&gt;
&lt;h2 id="beanfactory"&gt;BeanFactory
&lt;/h2&gt;&lt;p&gt;BeanFactory 是 Spring 框架的&lt;strong&gt;心脏&lt;/strong&gt;，它是 Spring IoC（控制反转）容器的核心接口，负责管理应用中的所有对象（即 Bean）的生命周期。为了让你快速建立整体认知，下表汇总了它的核心信息。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性维度&lt;/th&gt;
&lt;th&gt;核心说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;核心角色&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Spring IoC 容器的顶层接口，是对象的“超级工厂”和管理中心。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;主要职责&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Bean 的实例化、依赖注入 (DI)、生命周期管理、作用域控制。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;设计目标&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;实现控制反转 (IoC) 和依赖注入 (DI)，将对象创建与使用的职责从应用代码反转给容器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;关键特性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;支持多种作用域（单例、原型等）、延迟加载、与 BeanDefinition 机制解耦。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;核心实现&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DefaultListableBeanFactory&lt;/code&gt;（最常用、功能最完整的实现）。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-核心功能与价值-2"&gt;💡 核心功能与价值
&lt;/h3&gt;&lt;p&gt;BeanFactory 的核心价值在于它实现了 &lt;strong&gt;“控制反转”&lt;/strong&gt; 这一核心编程思想。应用程序不再自己用 &lt;code&gt;new&lt;/code&gt;关键字来创建和管理对象，而是由 BeanFactory 这个容器来统一负责。这样做的好处是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;解耦&lt;/strong&gt;：对象之间的依赖关系由容器注入，降低了代码的耦合度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源统一管理&lt;/strong&gt;：容器可以高效地管理对象的生命周期（创建、初始化、销毁）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;灵活配置&lt;/strong&gt;：通过配置（XML、注解、Java Config），可以轻松改变 Bean 的行为和作用域，而无需修改代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-核心接口与方法"&gt;📚 核心接口与方法
&lt;/h3&gt;&lt;p&gt;BeanFactory 接口定义了一系列管理 Bean 的核心方法，可以归纳为以下几类 ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;获取 Bean 实例&lt;/strong&gt;：这是最核心的功能。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Object getBean(String name) throws BeansException;
&amp;lt;T&amp;gt; T getBean(String name, Class&amp;lt;T&amp;gt; requiredType) throws BeansException;
&amp;lt;T&amp;gt; T getBean(Class&amp;lt;T&amp;gt; requiredType) throws BeansException;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;检查 Bean 特性&lt;/strong&gt;：用于查询 Bean 的信息。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;boolean containsBean(String name); // 检查是否存在指定名称的Bean
boolean isSingleton(String name) throws NoSuchBeanDefinitionException; // 是否为单例
boolean isPrototype(String name) throws NoSuchBeanDefinitionException; // 是否为原型（每次请求创建新实例）
Class&amp;lt;?&amp;gt; getType(String name) throws NoSuchBeanDefinitionException; // 获取Bean的类型
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;获取别名等其他信息&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;String[] getAliases(String name); // 获取Bean的所有别名
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-核心实现defaultlistablebeanfactory"&gt;⚙️ 核心实现：DefaultListableBeanFactory
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;DefaultListableBeanFactory&lt;/code&gt;是 Spring 中&lt;strong&gt;功能最完整、最常用&lt;/strong&gt;的 BeanFactory 实现 。它不仅实现了 &lt;code&gt;BeanFactory&lt;/code&gt;接口，还实现了 &lt;code&gt;BeanDefinitionRegistry&lt;/code&gt;接口，这意味着它具备注册和管理 Bean 定义（&lt;code&gt;BeanDefinition&lt;/code&gt;）的能力。&lt;/p&gt;
&lt;p&gt;它的内部通过两个核心数据结构来管理 Bean 的定义信息 ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;beanDefinitionMap&lt;/code&gt;：一个 &lt;code&gt;ConcurrentHashMap&lt;/code&gt;，用于存储 Bean 名称与 &lt;code&gt;BeanDefinition&lt;/code&gt;的映射关系。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beanDefinitionNames&lt;/code&gt;：一个 &lt;code&gt;ArrayList&lt;/code&gt;，存储所有已注册的 Bean 名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注册 Bean 定义的方法如下 ：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) {
this.beanDefinitionMap.put(beanName, beanDefinition);
this.beanDefinitionNames.add(beanName);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="-bean-的加载流程与生命周期"&gt;🔄 Bean 的加载流程与生命周期
&lt;/h3&gt;&lt;p&gt;当你调用 &lt;code&gt;getBean()&lt;/code&gt;方法时，Spring 会触发一系列复杂的内部流程来创建或获取 Bean 实例。其简化后的核心调用链如下 ：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getBean()&lt;/code&gt;→ &lt;code&gt;doGetBean()&lt;/code&gt;→ &lt;code&gt;getSingleton()&lt;/code&gt;（尝试从缓存获取）→ &lt;code&gt;createBean()&lt;/code&gt;→ &lt;code&gt;doCreateBean()&lt;/code&gt;→ &lt;code&gt;populateBean()&lt;/code&gt;（属性注入）→ &lt;code&gt;initializeBean()&lt;/code&gt;（初始化）&lt;/p&gt;
&lt;p&gt;一个 Bean 的完整生命周期主要包括以下几个关键步骤 ：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;实例化&lt;/strong&gt;：通过构造方法或工厂方法创建 Bean 的实例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;属性填充（依赖注入）&lt;/strong&gt;：将 Bean 所依赖的其他 Bean 或值注入到对应属性中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aware 接口回调&lt;/strong&gt;：如果 Bean 实现了诸如 &lt;code&gt;BeanNameAware&lt;/code&gt;、&lt;code&gt;BeanFactoryAware&lt;/code&gt;等接口，容器会回调相应方法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BeanPostProcessor 前置处理&lt;/strong&gt;：调用所有 &lt;code&gt;BeanPostProcessor&lt;/code&gt;的 &lt;code&gt;postProcessBeforeInitialization&lt;/code&gt;方法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;初始化&lt;/strong&gt;：执行初始化方法，如 &lt;code&gt;@PostConstruct&lt;/code&gt;注解的方法、&lt;code&gt;InitializingBean&lt;/code&gt;接口的 &lt;code&gt;afterPropertiesSet&lt;/code&gt;方法或自定义的 &lt;code&gt;init-method&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BeanPostProcessor 后置处理&lt;/strong&gt;：调用所有 &lt;code&gt;BeanPostProcessor&lt;/code&gt;的 &lt;code&gt;postProcessAfterInitialization&lt;/code&gt;方法。&lt;strong&gt;AOP 代理通常在此阶段生成&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用&lt;/strong&gt;：Bean 完全就绪，可供应用程序使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;销毁&lt;/strong&gt;：容器关闭时，执行销毁方法，如 &lt;code&gt;@PreDestroy&lt;/code&gt;注解的方法、&lt;code&gt;DisposableBean&lt;/code&gt;接口的 &lt;code&gt;destroy&lt;/code&gt;方法或自定义的 &lt;code&gt;destroy-method&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-beanfactory-与-applicationcontext-的关系"&gt;🔄 BeanFactory 与 ApplicationContext 的关系
&lt;/h3&gt;&lt;p&gt;这是一个非常重要且常见的概念区分 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;BeanFactory&lt;/strong&gt; 是 &lt;strong&gt;基础接口&lt;/strong&gt;，提供了 IoC 容器最核心、最基本的功能（如 &lt;code&gt;getBean&lt;/code&gt;、依赖注入）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ApplicationContext&lt;/strong&gt; 是 &lt;strong&gt;BeanFactory 的子接口&lt;/strong&gt;，在继承所有基础功能的同时，增加了大量企业级特性，使其成为更强大的“应用上下文”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;主要区别&lt;/strong&gt; ：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;BeanFactory&lt;/th&gt;
&lt;th&gt;ApplicationContext&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;容器特性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;基础 IoC 功能&lt;/td&gt;
&lt;td&gt;BeanFactory 的超集，增加国际化、事件发布、资源加载等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;加载策略&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;按需加载 (Lazy)&lt;/strong&gt;，只有在调用 &lt;code&gt;getBean()&lt;/code&gt;时才实例化 Bean&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;预加载 (Eager)&lt;/strong&gt;，容器启动时即创建所有单例 Bean（可配置）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;使用场景&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;资源极度受限的嵌入式系统等&lt;/td&gt;
&lt;td&gt;绝大多数标准企业级应用，是 Spring Boot 的默认选择&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;简单来说，&lt;strong&gt;ApplicationContext 是功能更全面的 BeanFactory&lt;/strong&gt;。在现代 Spring 应用中，我们几乎总是直接使用 &lt;code&gt;ApplicationContext&lt;/code&gt;（如 &lt;code&gt;AnnotationConfigApplicationContext&lt;/code&gt;），但它的底层核心依然是 &lt;code&gt;BeanFactory&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id="-注意beanfactory-与-factorybean-的区别"&gt;⚠️ 注意：BeanFactory 与 FactoryBean 的区别
&lt;/h3&gt;&lt;p&gt;这两个名称相似但&lt;strong&gt;完全不同&lt;/strong&gt;，极易混淆 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;BeanFactory&lt;/strong&gt;：是 &lt;strong&gt;IoC 容器本身&lt;/strong&gt;，是一个巨大的工厂，负责生产和管理&lt;strong&gt;所有&lt;/strong&gt; Bean。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FactoryBean&lt;/strong&gt;：是一个&lt;strong&gt;特殊的 Bean&lt;/strong&gt;，它是一个能生产其他 Bean 的工厂。当你向容器获取一个 &lt;code&gt;FactoryBean&lt;/code&gt;时，默认得到的是它 &lt;code&gt;getObject()&lt;/code&gt;方法返回的产品对象。如果你想获取 &lt;code&gt;FactoryBean&lt;/code&gt;本身，需要在 Bean 名称前加 &lt;code&gt;&amp;amp;&lt;/code&gt;符号（例如 &lt;code&gt;getBean(&amp;quot;&amp;amp;myFactoryBean&amp;quot;)&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;比喻理解&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;BeanFactory&lt;/strong&gt; 就像是一家&lt;strong&gt;汽车制造厂&lt;/strong&gt;，它能生产各种汽车（Bean）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FactoryBean&lt;/strong&gt; 就像是这家工厂里一条&lt;strong&gt;特殊的生产线&lt;/strong&gt;，这条生产线本身也需要在工厂里注册（它是一个 Bean），但它专门负责生产某种特定型号的发动机（另一个 Bean）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-总结-10"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;BeanFactory 是 Spring 框架的基石，理解了它就抓住了 Spring IoC 的核心。它通过将对象的创建、组装和管理权从代码中剥离，交由容器统一处理，极大地提高了程序的灵活性、可维护性和可测试性。虽然在实际开发中我们更多地使用其子接口 ApplicationContext，但它的设计思想和运作机制是深入掌握 Spring 的关键。&lt;/p&gt;
&lt;p&gt;希望这份详细的介绍能帮助你透彻理解 BeanFactory。如果你对 Bean 的生命周期细节、扩展点（如 BeanPostProcessor）或其他相关主题有进一步的兴趣，我们可以继续深入探讨。&lt;/p&gt;
&lt;h2 id="子类"&gt;子类
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ConfigurableListableBeanFactory&lt;/code&gt;及其相关的子接口是 Spring IoC 容器的核心组成部分，它们通过&lt;strong&gt;职责分离和功能组合&lt;/strong&gt;的方式，为 Spring 容器提供了高度可配置和可扩展的能力。为了让你快速建立整体认知，下表清晰地展示了这些关键接口的核心职责。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;接口名称&lt;/th&gt;
&lt;th&gt;核心职责&lt;/th&gt;
&lt;th&gt;关键特性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;ConfigurableBeanFactory&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;提供 Bean 工厂的&lt;strong&gt;基础配置能力&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;设置类加载器、类型转换服务、属性编辑器、作用域（单例/原型）管理等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;ListableBeanFactory&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;提供 Bean 的&lt;strong&gt;列举和查询能力&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;批量获取 Bean 名称、根据类型获取所有 Bean 实例、检查 Bean 定义等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;AutowireCapableBeanFactory&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;提供 Bean 的&lt;strong&gt;自动装配和生命周期管理&lt;/strong&gt;能力&lt;/td&gt;
&lt;td&gt;在容器外创建、配置和装配 Bean 实例，处理依赖注入。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;ConfigurableListableBeanFactory&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;上述所有接口功能的集大成者&lt;/strong&gt;，是功能最完整的 Bean 工厂&lt;/td&gt;
&lt;td&gt;继承以上所有接口，支持 Bean 定义的注册、冻结、预实例化等高级操作。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-各接口的详细作用"&gt;💡 各接口的详细作用
&lt;/h3&gt;&lt;h4 id="1-configurablebeanfactory基础配置的基石"&gt;1. ConfigurableBeanFactory：基础配置的基石
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;ConfigurableBeanFactory&lt;/code&gt;为 Bean 工厂提供了底层的配置能力，是进行精细化管理的基础。它的主要作用包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;管理作用域&lt;/strong&gt;：允许设置 Bean 是单例（Singleton）还是原型（Prototype）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理依赖&lt;/strong&gt;：可配置是否允许 Bean 之间的循环引用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类型转换&lt;/strong&gt;：设置 &lt;code&gt;TypeConverter&lt;/code&gt;和 &lt;code&gt;PropertyEditorRegistrar&lt;/code&gt;，用于处理属性值的类型转换。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;管理后置处理器&lt;/strong&gt;：注册 &lt;code&gt;BeanPostProcessor&lt;/code&gt;，使其能够在 Bean 初始化前后介入处理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注册单例对象&lt;/strong&gt;：提供方法直接注册已有的单例对象到容器中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="2-listablebeanfactory强大的查询与列举工具"&gt;2. ListableBeanFactory：强大的查询与列举工具
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;ListableBeanFactory&lt;/code&gt;的核心价值在于其&lt;strong&gt;批量操作和查询能力&lt;/strong&gt;，这是基础的 &lt;code&gt;BeanFactory&lt;/code&gt;接口所不具备的。通过它，你可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;获取所有 Bean 的名称&lt;/strong&gt;：&lt;code&gt;String[] getBeanDefinitionNames()&lt;/code&gt;方法可以拿到容器中所有 Bean 定义的名称。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按类型查找 Bean&lt;/strong&gt;：&lt;code&gt;&amp;lt;T&amp;gt; Map&amp;lt;String, T&amp;gt; getBeansOfType(@Nullable Class&amp;lt;T&amp;gt; type)&lt;/code&gt;方法能获取所有匹配指定类型的 Bean 实例及其名称。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;检查注解&lt;/strong&gt;：&lt;code&gt;String[] getBeanNamesForAnnotation(Class&amp;lt;? extends Annotation&amp;gt; annotationType)&lt;/code&gt;方法可以找到所有带有特定注解的 Bean 名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="3-autowirecapablebeanfactory容器外的装配工"&gt;3. AutowireCapableBeanFactory：容器外的装配工
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;AutowireCapableBeanFactory&lt;/code&gt;扩展了 Bean 的创建和装配方式，使其不仅能在容器内部工作，还能&lt;strong&gt;在容器外部独立完成 Bean 的实例化、依赖注入和初始化过程&lt;/strong&gt;。这在集成第三方框架或需要在非 Spring 管理环境中创建 Bean 时非常有用。其主要方法包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;createBean(Class&amp;lt;T&amp;gt; beanClass)&lt;/code&gt;：创建一个新的 Bean 实例并完成其依赖注入和初始化。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;autowireBean(Object existingBean)&lt;/code&gt;：对一个已存在的对象进行依赖注入。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;configureBean(Object existingBean, String beanName)&lt;/code&gt;：配置一个已存在的 Bean，包括依赖注入和应用后置处理器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="4-configurablelistablebeanfactory功能全集成的终极形态"&gt;4. ConfigurableListableBeanFactory：功能全集成的终极形态
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;ConfigurableListableBeanFactory&lt;/code&gt;是 Spring 容器中&lt;strong&gt;功能最强大、最核心的 Bean 工厂接口&lt;/strong&gt;。它继承了上述所有接口，并在此基础上增加了关键功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;注册和冻结 Bean 定义&lt;/strong&gt;：可以编程式地注册新的 &lt;code&gt;BeanDefinition&lt;/code&gt;，并可以“冻结”所有 Bean 定义，防止后续修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;预实例化单例 Bean&lt;/strong&gt;：确保所有非延迟加载的单例 Bean 在容器启动时就被创建好。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解析依赖&lt;/strong&gt;：当存在未解析的依赖时（如 &lt;code&gt;@Autowired&lt;/code&gt;注入的候选 Bean 有多个），它可以作为决策者介入。&lt;/p&gt;
&lt;p&gt;在 Spring 应用上下文（如 &lt;code&gt;AnnotationConfigApplicationContext&lt;/code&gt;）的启动流程中，&lt;code&gt;refresh()&lt;/code&gt;方法的核心步骤之一就是获取一个 &lt;code&gt;ConfigurableListableBeanFactory&lt;/code&gt;实例，并在此基础上进行 Bean 定义的加载、后置处理器的注册以及单例 Bean 的预实例化。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-主要实现defaultlistablebeanfactory"&gt;🛠️ 主要实现：DefaultListableBeanFactory
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;DefaultListableBeanFactory&lt;/code&gt;是 &lt;code&gt;ConfigurableListableBeanFactory&lt;/code&gt;接口的&lt;strong&gt;默认且最常用的实现类&lt;/strong&gt;。它是整个 Spring IoC 容器的基础，无论是基于 XML 的经典配置还是现代的注解配置，其底层最终都会使用 &lt;code&gt;DefaultListableBeanFactory&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它内部使用一个 &lt;code&gt;ConcurrentHashMap&lt;/code&gt;（通常是 &lt;code&gt;beanDefinitionMap&lt;/code&gt;）来存储所有 Bean 的定义（&lt;code&gt;BeanDefinition&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;Spring 应用上下文（&lt;code&gt;ApplicationContext&lt;/code&gt;）实际上&lt;strong&gt;持有一个 &lt;code&gt;DefaultListableBeanFactory&lt;/code&gt;实例作为其委托的 Bean 工厂&lt;/strong&gt;，许多具体的 Bean 管理操作都委托给这个实例执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-在-spring-启动流程中的角色"&gt;🔄 在 Spring 启动流程中的角色
&lt;/h3&gt;&lt;p&gt;这些接口，特别是 &lt;code&gt;ConfigurableListableBeanFactory&lt;/code&gt;，在 Spring 容器的启动过程中扮演着至关重要的角色。以 &lt;code&gt;AbstractApplicationContext.refresh()&lt;/code&gt;方法为例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;obtainFreshBeanFactory()&lt;/code&gt;&lt;/strong&gt;：此方法会触发 Bean 工厂的创建和刷新，最终返回一个 &lt;code&gt;ConfigurableListableBeanFactory&lt;/code&gt;。在这个过程中，会加载配置文件（如 XML），解析出所有的 &lt;code&gt;BeanDefinition&lt;/code&gt;并注册到工厂中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;prepareBeanFactory(beanFactory)&lt;/code&gt;&lt;/strong&gt;：在此阶段，Spring 会对获取到的 &lt;code&gt;ConfigurableListableBeanFactory&lt;/code&gt;进行一系列配置，例如设置类加载器、注册一些内置的 Bean（如 &lt;code&gt;Environment&lt;/code&gt;）以及添加关键的 &lt;code&gt;BeanPostProcessor&lt;/code&gt;（如处理 &lt;code&gt;@Autowired&lt;/code&gt;的 &lt;code&gt;AutowiredAnnotationBeanPostProcessor&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;invokeBeanFactoryPostProcessors(beanFactory)&lt;/code&gt;&lt;/strong&gt;：调用所有 &lt;code&gt;BeanFactoryPostProcessor&lt;/code&gt;，它们可以拿到 &lt;code&gt;ConfigurableListableBeanFactory&lt;/code&gt;并对其中的 &lt;code&gt;BeanDefinition&lt;/code&gt;进行修改或增强。这是 Spring 扩展性的一大体现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;finishBeanFactoryInitialization(beanFactory)&lt;/code&gt;&lt;/strong&gt;：这是最后一步，&lt;code&gt;ConfigurableListableBeanFactory&lt;/code&gt;会负责实例化所有非延迟加载的单例 Bean，完成依赖注入，并执行它们的生命周期回调方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-总结-11"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;简单来说，Spring 通过将 &lt;code&gt;BeanFactory&lt;/code&gt;的功能分解为多个特定的子接口，再通过 &lt;code&gt;ConfigurableListableBeanFactory&lt;/code&gt;进行整合，实现了&lt;strong&gt;高内聚、低耦合&lt;/strong&gt;的设计。这种设计使得 Spring 容器既具备了强大的基础功能，又保持了极高的灵活性和可扩展性。&lt;/p&gt;
&lt;p&gt;希望这个解释能帮助你清晰地理解这些 BeanFactory 子接口的不同作用。&lt;/p&gt;
&lt;h2 id="beandefinitionregistry"&gt;BeanDefinitionRegistry
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;BeanDefinitionRegistry&lt;/code&gt;是 Spring IoC 容器中&lt;strong&gt;管理 Bean 定义（&lt;code&gt;BeanDefinition&lt;/code&gt;）的核心注册接口&lt;/strong&gt;，它负责注册、移除、查询和管理所有 Bean 的配置元数据。为了让你快速建立整体认知，下表清晰地展示了它的核心职责和主要实现类。&lt;/p&gt;
&lt;p&gt;| 特性维度 | 核心说明 |&lt;/p&gt;
&lt;p&gt;| :&amp;mdash; | :&amp;mdash; | :&amp;mdash; |&lt;/p&gt;
&lt;p&gt;| &lt;strong&gt;核心角色&lt;/strong&gt; | Bean 定义（&lt;code&gt;BeanDefinition&lt;/code&gt;）的注册中心，是 Spring IoC 容器的“名册”或“花名册”。 |&lt;/p&gt;
&lt;p&gt;| &lt;strong&gt;主要职责&lt;/strong&gt; | 提供对 &lt;code&gt;BeanDefinition&lt;/code&gt;的&lt;strong&gt;增删改查&lt;/strong&gt;等操作，是 Spring 容器管理 Bean 元数据的统一入口。 |&lt;/p&gt;
&lt;p&gt;| &lt;strong&gt;关键特性&lt;/strong&gt; | 支持别名管理、Bean 定义覆盖策略、合并父子 Bean 定义、线程安全的注册表操作。 |&lt;/p&gt;
&lt;p&gt;| &lt;strong&gt;核心实现&lt;/strong&gt; | &lt;code&gt;DefaultListableBeanFactory&lt;/code&gt;（最常用）、&lt;code&gt;GenericApplicationContext&lt;/code&gt;、&lt;code&gt;SimpleBeanDefinitionRegistry&lt;/code&gt;（用于测试）。 |&lt;/p&gt;
&lt;h3 id="-核心接口方法"&gt;💡 核心接口方法
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;BeanDefinitionRegistry&lt;/code&gt;接口定义了一套完整的方法来管理 Bean 定义，主要包括以下核心方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;注册 Bean 定义&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;移除 Bean 定义&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void removeBeanDefinition(String beanName) throws NoSuchBeanDefinitionException;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;获取 Bean 定义&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;检查是否存在&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boolean containsBeanDefinition(String beanName);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;获取所有 Bean 名称&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;String[] getBeanDefinitionNames();&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;获取 Bean 定义数量&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;int getBeanDefinitionCount();&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;检查名称是否已使用&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boolean isBeanNameInUse(String beanName);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-主要实现类-2"&gt;🛠️ 主要实现类
&lt;/h3&gt;&lt;p&gt;Spring 提供了几个重要的 &lt;code&gt;BeanDefinitionRegistry&lt;/code&gt;实现类，适用于不同的场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;DefaultListableBeanFactory&lt;/code&gt;&lt;/strong&gt;：这是&lt;strong&gt;最常用、功能最完整&lt;/strong&gt;的实现。它不仅是 &lt;code&gt;BeanDefinitionRegistry&lt;/code&gt;，还是一个功能齐全的 &lt;code&gt;BeanFactory&lt;/code&gt;。它内部使用 &lt;code&gt;ConcurrentHashMap&lt;/code&gt;来存储 Bean 定义，确保了线程安全。Spring 的应用上下文（如 &lt;code&gt;AnnotationConfigApplicationContext&lt;/code&gt;）内部通常也委托给它来处理 Bean 定义的注册。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;GenericApplicationContext&lt;/code&gt;&lt;/strong&gt;：作为通用的 &lt;code&gt;ApplicationContext&lt;/code&gt;，它实现了 &lt;code&gt;BeanDefinitionRegistry&lt;/code&gt;接口，但其内部关于 Bean 定义注册的具体实现通常&lt;strong&gt;委托给一个 &lt;code&gt;DefaultListableBeanFactory&lt;/code&gt;&lt;/strong&gt; 实例来完成。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;SimpleBeanDefinitionRegistry&lt;/code&gt;&lt;/strong&gt;：这是一个&lt;strong&gt;简单的实现&lt;/strong&gt;，主要用于测试或工具场景。它仅提供了基本的注册表功能，不具备完整的 Bean 工厂能力（如依赖注入、生命周期管理）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-工作原理与内部结构"&gt;⚙️ 工作原理与内部结构
&lt;/h3&gt;&lt;p&gt;以最常用的 &lt;code&gt;DefaultListableBeanFactory&lt;/code&gt;为例，其内部通过两个核心数据结构来管理 Bean 定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;beanDefinitionMap&lt;/code&gt;&lt;/strong&gt;：一个 &lt;code&gt;ConcurrentHashMap&amp;lt;String, BeanDefinition&amp;gt;&lt;/code&gt;，用于存储 Bean 名称与 &lt;code&gt;BeanDefinition&lt;/code&gt;对象的映射关系。这是真正的定义存储容器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;beanDefinitionNames&lt;/code&gt;&lt;/strong&gt;：一个 &lt;code&gt;ArrayList&amp;lt;String&amp;gt;&lt;/code&gt;，按注册顺序保存所有 Bean 的名称。这维护了 Bean 的注册顺序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注册流程&lt;/strong&gt;（摘自 &lt;code&gt;DefaultListableBeanFactory.registerBeanDefinition&lt;/code&gt;方法的核心逻辑）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;参数校验&lt;/strong&gt;：检查 &lt;code&gt;beanName&lt;/code&gt;和 &lt;code&gt;beanDefinition&lt;/code&gt;是否为空。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定义验证&lt;/strong&gt;：如果 &lt;code&gt;BeanDefinition&lt;/code&gt;是 &lt;code&gt;AbstractBeanDefinition&lt;/code&gt;类型，会调用其 &lt;code&gt;validate()&lt;/code&gt;方法进行校验，例如检查方法覆盖（&lt;code&gt;lookup-method&lt;/code&gt;, &lt;code&gt;replaced-method&lt;/code&gt;）和工厂方法是否冲突。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理覆盖&lt;/strong&gt;：检查该 &lt;code&gt;beanName&lt;/code&gt;是否已存在定义。
&lt;ul&gt;
&lt;li&gt;如果存在，根据 &lt;code&gt;isAllowBeanDefinitionOverriding()&lt;/code&gt;的配置决定是抛出异常还是覆盖原有定义。&lt;/li&gt;
&lt;li&gt;如果不存在，则将新定义放入 &lt;code&gt;beanDefinitionMap&lt;/code&gt;，并将 &lt;code&gt;beanName&lt;/code&gt;添加到 &lt;code&gt;beanDefinitionNames&lt;/code&gt;列表中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;状态处理&lt;/strong&gt;：根据容器是否已开始创建 Bean（&lt;code&gt;hasBeanCreationStarted()&lt;/code&gt;），采用不同的同步策略来保证线程安全。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-主要作用与价值"&gt;🎯 主要作用与价值
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;BeanDefinitionRegistry&lt;/code&gt;在 Spring 框架中扮演着至关重要的角色，其核心价值体现在：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;资源解析的统一性&lt;/strong&gt;：无论 Bean 定义来自 XML、注解还是 Java 配置，最终都会被解析为统一的 &lt;code&gt;BeanDefinition&lt;/code&gt;对象并注册到 &lt;code&gt;BeanDefinitionRegistry&lt;/code&gt;中。这使得 Spring 容器能够以一致的方式处理所有配置源，避免了为每种配置方式维护单独的数据结构，降低了复杂性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖查找和注入的中心化&lt;/strong&gt;：它为依赖查找和注入提供了一个中心化的存储库。当 Spring 需要注入一个依赖时，可以直接从注册表中快速查询对应的 &lt;code&gt;BeanDefinition&lt;/code&gt;，而无需重新解析原始配置资源，提升了性能并确保了准确性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持 Bean 定义的合并&lt;/strong&gt;：在处理父子 Bean 定义（主要在 XML 配置中）时，&lt;code&gt;BeanDefinitionRegistry&lt;/code&gt;（具体是 &lt;code&gt;DefaultListableBeanFactory&lt;/code&gt;）负责将子定义和父定义合并为一个完整的 &lt;code&gt;RootBeanDefinition&lt;/code&gt;，这个合并后的定义包含了创建 Bean 实例所需的全部信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置验证&lt;/strong&gt;：所有 Bean 定义注册完成后，Spring 可以利用注册表进行全局的配置验证，例如检查循环依赖、确保 Bean 定义的完整性等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生命周期管理的基础&lt;/strong&gt;：它存储了 Bean 的初始化方法、销毁方法等生命周期元数据，为 Spring 容器管理 Bean 的完整生命周期提供了基础。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-如何使用"&gt;💻 如何使用
&lt;/h3&gt;&lt;p&gt;你可以通过编程方式使用 &lt;code&gt;BeanDefinitionRegistry&lt;/code&gt;来动态注册 Bean，这在需要根据条件或运行时信息来注册 Bean 时非常有用。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.beans.factory.support.RootBeanDefinition;
public class ManualRegistrationDemo {
public static void main(String[] args) {
// 1. 创建 BeanDefinitionRegistry (以 DefaultListableBeanFactory 为例)
DefaultListableBeanFactory registry = new DefaultListableBeanFactory();
// 2. 创建 BeanDefinition，并设置属性（这里以 RootBeanDefinition 为例）
RootBeanDefinition beanDefinition = new RootBeanDefinition(MyService.class);
beanDefinition.getPropertyValues().addPropertyValue(&amp;#34;message&amp;#34;, &amp;#34;Hello, Dynamic Bean!&amp;#34;);
// 3. 注册到 Registry 中
registry.registerBeanDefinition(&amp;#34;myService&amp;#34;, beanDefinition);
// 4. 从容器中获取并使用 Bean
MyService myService = registry.getBean(&amp;#34;myService&amp;#34;, MyService.class);
myService.sayMessage(); // 输出: Hello, Dynamic Bean!
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在更高级的场景中，你可以实现 &lt;code&gt;ImportBeanDefinitionRegistrar&lt;/code&gt;接口，在 Spring 容器启动时动态注册 Bean 定义：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;import org.springframework.beans.factory.support.BeanDefinitionRegistry;
import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;
import org.springframework.core.type.AnnotationMetadata;
public class MyCustomRegistrar implements ImportBeanDefinitionRegistrar {
@Override
public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {
// 在这里可以根据注解元信息动态创建和注册 BeanDefinition
RootBeanDefinition beanDefinition = new RootBeanDefinition(MyDynamicBean.class);
registry.registerBeanDefinition(&amp;#34;myDynamicBean&amp;#34;, beanDefinition);
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="-总结-12"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;总而言之，&lt;code&gt;BeanDefinitionRegistry&lt;/code&gt;是 Spring IoC 容器&lt;strong&gt;不可或缺的基石&lt;/strong&gt;。它作为一个中心化的注册表，统一管理着所有 Bean 的配置元数据，为后续的 Bean 实例化、依赖注入和生命周期管理奠定了坚实的基础。理解 &lt;code&gt;BeanDefinitionRegistry&lt;/code&gt;的工作原理，对于深入掌握 Spring 容器的内部机制至关重要。&lt;/p&gt;
&lt;p&gt;希望这份详细的介绍能帮助你透彻理解 &lt;code&gt;BeanDefinitionRegistry&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="beanpostprocessor"&gt;BeanPostProcessor
&lt;/h2&gt;&lt;p&gt;BeanPostProcessor 是 Spring 框架中一个极其重要的扩展接口，它就像一位在 Bean 诞生过程中进行精加工的“魔法师”，允许你在每个 Bean 实例初始化前后插入自定义逻辑，是 Spring IoC 容器强大扩展能力的核心支柱之一。&lt;/p&gt;
&lt;p&gt;为了让你快速把握全局，下表清晰地展示了 Bean 创建过程中的关键阶段及其与 &lt;code&gt;BeanPostProcessor&lt;/code&gt;的关联。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;生命周期阶段&lt;/th&gt;
&lt;th&gt;核心操作&lt;/th&gt;
&lt;th&gt;BeanPostProcessor 的介入点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;① 实例化&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;调用构造函数创建 Bean 实例&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;② 属性填充&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;依赖注入（如通过 &lt;code&gt;@Autowired&lt;/code&gt;）&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;③ 初始化前处理&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Aware 接口回调&lt;/strong&gt;（如 &lt;code&gt;BeanNameAware&lt;/code&gt;）&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;postProcessBeforeInitialization&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;④ 初始化&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;调用初始化方法（如 &lt;code&gt;@PostConstruct&lt;/code&gt;、&lt;code&gt;InitializingBean&lt;/code&gt;）&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;⑤ 初始化后处理&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;postProcessAfterInitialization&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;⑥ 就绪&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Bean 完全创建，可供使用&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;⑦ 销毁&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;容器关闭，调用销毁方法（如 &lt;code&gt;@PreDestroy&lt;/code&gt;）&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-核心方法与执行时机"&gt;💡 核心方法与执行时机
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;BeanPostProcessor&lt;/code&gt;接口主要定义了两个回调方法，它们就像两个精确的钩子（Hook），嵌入在 Bean 的生命周期中。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;public interface BeanPostProcessor {
// 在 Bean 初始化方法（如 @PostConstruct）之前被调用
default Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
return bean;
}
// 在 Bean 初始化方法（如 @PostConstruct）之后被调用
default Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
return bean;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;postProcessBeforeInitialization&lt;/code&gt;&lt;/strong&gt;：该方法在 Bean 的初始化回调（例如 &lt;code&gt;@PostConstruct&lt;/code&gt;注解的方法、&lt;code&gt;InitializingBean&lt;/code&gt;接口的 &lt;code&gt;afterPropertiesSet&lt;/code&gt;方法或自定义的 &lt;code&gt;init-method&lt;/code&gt;）&lt;strong&gt;之前&lt;/strong&gt;执行。适合进行一些前置处理，如修改属性值、进行校验等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;postProcessAfterInitialization&lt;/code&gt;&lt;/strong&gt;：该方法在 Bean 完成所有初始化回调&lt;strong&gt;之后&lt;/strong&gt;执行。这是对 Bean 进行最终加工的机会，&lt;strong&gt;Spring AOP 创建代理对象就在这个阶段完成&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-spring-内置的关键实现"&gt;🛠️ Spring 内置的关键实现
&lt;/h3&gt;&lt;p&gt;Spring 框架自身的许多强大功能正是通过内置的 &lt;code&gt;BeanPostProcessor&lt;/code&gt;实现的。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;实现类&lt;/th&gt;
&lt;th&gt;核心职责&lt;/th&gt;
&lt;th&gt;支持的注解/功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;AutowiredAnnotationBeanPostProcessor&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;处理依赖注入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@Autowired&lt;/code&gt;, &lt;code&gt;@Value&lt;/code&gt;, &lt;code&gt;@Inject&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;CommonAnnotationBeanPostProcessor&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;处理 JSR-250 常见注解&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@PostConstruct&lt;/code&gt;, &lt;code&gt;@PreDestroy&lt;/code&gt;, &lt;code&gt;@Resource&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;ApplicationContextAwareProcessor&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;注入 Spring 上下文相关对象&lt;/td&gt;
&lt;td&gt;各种 &lt;code&gt;Aware&lt;/code&gt;接口（如 &lt;code&gt;ApplicationContextAware&lt;/code&gt;）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;AbstractAutoProxyCreator&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;AOP 代理创建&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;为被 &lt;code&gt;@Aspect&lt;/code&gt;等注解的 Bean 生成代理对象&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="-如何自定义-beanpostprocessor"&gt;💻 如何自定义 BeanPostProcessor
&lt;/h3&gt;&lt;p&gt;创建你自己的 &lt;code&gt;BeanPostProcessor&lt;/code&gt;非常简单，只需实现接口并将其注册到 Spring 容器即可。&lt;/p&gt;
&lt;h4 id="1-实现接口-2"&gt;1. 实现接口
&lt;/h4&gt;&lt;p&gt;以下是一个简单的示例，它在每个 Bean 初始化前后打印日志：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanPostProcessor;
import org.springframework.stereotype.Component;
@Component
public class LoggingBeanPostProcessor implements BeanPostProcessor {
@Override
public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
System.out.println(&amp;#34;[Before Init] Bean Name: &amp;#34; + beanName + &amp;#34;, Type: &amp;#34; + bean.getClass().getSimpleName());
// 你可以在这里对 bean 进行修改或包装
return bean; // 必须返回 bean 对象（可以是原始对象或包装后的对象）
}
@Override
public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
System.out.println(&amp;#34;[After Init] Bean Name: &amp;#34; + beanName + &amp;#34;, Type: &amp;#34; + bean.getClass().getSimpleName());
return bean;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id="2-注册到容器"&gt;2. 注册到容器
&lt;/h4&gt;&lt;p&gt;让 Spring 识别你的 &lt;code&gt;BeanPostProcessor&lt;/code&gt;主要有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用 &lt;code&gt;@Component&lt;/code&gt;等注解&lt;/strong&gt;：如上例所示，Spring 会自动扫描并注册。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通过 &lt;code&gt;@Bean&lt;/code&gt;在配置类中显式注册&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-典型应用场景"&gt;🎯 典型应用场景
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;BeanPostProcessor&lt;/code&gt;的灵活性使其能够应用于多种场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;实现 AOP 动态代理&lt;/strong&gt;：Spring AOP 的核心 &lt;code&gt;AbstractAutoProxyCreator&lt;/code&gt;就是一个 &lt;code&gt;BeanPostProcessor&lt;/code&gt;，它在 &lt;code&gt;postProcessAfterInitialization&lt;/code&gt;方法中为匹配切点的 Bean 创建代理对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理自定义注解&lt;/strong&gt;：你可以利用它扫描 Bean 中的自定义注解（如 &lt;code&gt;@EncryptField&lt;/code&gt;），并在初始化阶段对注解字段进行加密等处理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能监控与日志&lt;/strong&gt;：可以在初始化前后记录时间点，计算 Bean 的创建耗时，用于性能分析。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AB 测试路由&lt;/strong&gt;：如搜索结果中提到的案例，可以创建一个路由代理，根据配置动态决定注入哪个版本的 Bean 实现，使业务代码更简洁。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-重要使用须知"&gt;⚠️ 重要使用须知
&lt;/h3&gt;&lt;p&gt;在使用 &lt;code&gt;BeanPostProcessor&lt;/code&gt;时，有几个关键点需要特别注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;作用范围&lt;/strong&gt;：默认情况下，你实现的 &lt;code&gt;BeanPostProcessor&lt;/code&gt;会&lt;strong&gt;作用于容器中的每一个 Bean&lt;/strong&gt;。如果只想处理特定类型的 Bean，需要在方法内部进行判断（例如 &lt;code&gt;if (bean instanceof MyService)&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;执行顺序&lt;/strong&gt;：当存在多个 &lt;code&gt;BeanPostProcessor&lt;/code&gt;时，它们的执行顺序很重要。你可以通过实现 &lt;code&gt;PriorityOrdered&lt;/code&gt;或 &lt;code&gt;Ordered&lt;/code&gt;接口，或使用 &lt;code&gt;@Order&lt;/code&gt;注解来控制顺序。数值越小，优先级越高。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提前初始化&lt;/strong&gt;：Spring 容器会&lt;strong&gt;优先初始化所有的 &lt;code&gt;BeanPostProcessor&lt;/code&gt;&lt;/strong&gt;，然后再初始化其他普通的 Bean。因此，在 &lt;code&gt;BeanPostProcessor&lt;/code&gt;中依赖其他普通 Bean 时需要小心循环依赖问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;返回值&lt;/strong&gt;：两个核心方法都必须返回一个对象（通常是传入的 &lt;code&gt;bean&lt;/code&gt;本身，也可能是其包装类，如代理对象）。&lt;strong&gt;不要返回 &lt;code&gt;null&lt;/code&gt;&lt;/strong&gt;，否则会破坏后续处理流程。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-总结-13"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;总而言之，&lt;code&gt;BeanPostProcessor&lt;/code&gt;是 Spring 框架为开发者提供的一把利器，它通过介入 Bean 生命周期的关键节点，实现了控制反转容器的高度可扩展性。无论是 Spring 自身的 AOP、事务管理等高级功能，还是我们日常开发中的各种定制化需求，都离不开它的支持。&lt;/p&gt;
&lt;p&gt;希望这份详细的介绍能帮助你深入理解并有效运用 &lt;code&gt;BeanPostProcessor&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="初始化顺序"&gt;初始化顺序
&lt;/h2&gt;&lt;p&gt;了解 Spring Bean 初始化方法的执行顺序和背后的原因，对编写可靠代码很重要。通过下面的表格和讲解，你会明白为什么它们的顺序是固定的。&lt;/p&gt;
&lt;p&gt;为了让你快速把握核心信息，我先用一个表格来概括这三种初始化机制的关键点：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;初始化机制&lt;/th&gt;
&lt;th&gt;执行时机（顺序）&lt;/th&gt;
&lt;th&gt;处理方式&lt;/th&gt;
&lt;th&gt;主要特点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;@PostConstruct&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;最早&lt;/td&gt;
&lt;td&gt;由 &lt;code&gt;CommonAnnotationBeanPostProcessor&lt;/code&gt;在 &lt;code&gt;postProcessBeforeInitialization&lt;/code&gt;阶段通过&lt;strong&gt;反射&lt;/strong&gt;调用&lt;/td&gt;
&lt;td&gt;基于 JSR-250 标准注解，与 Spring 框架&lt;strong&gt;解耦&lt;/strong&gt;，推荐使用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;InitializingBean&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;其次&lt;/td&gt;
&lt;td&gt;Spring 容器直接调用接口的 &lt;code&gt;afterPropertiesSet()&lt;/code&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Spring 原生接口，与框架&lt;strong&gt;耦合&lt;/strong&gt;较紧&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;init-method&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;最晚&lt;/td&gt;
&lt;td&gt;Spring 容器通过&lt;strong&gt;反射&lt;/strong&gt;调用配置中指定的方法&lt;/td&gt;
&lt;td&gt;通过配置指定，&lt;strong&gt;无需修改源码&lt;/strong&gt;，灵活性高，常用于集成第三方库&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id="-spring-容器初始化-bean-的流程"&gt;🔁 Spring 容器初始化 Bean 的流程
&lt;/h3&gt;&lt;p&gt;要理解顺序，我们需要知道 Spring 在创建一个 Bean 并完成依赖注入后，如何执行初始化逻辑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;实例化 &amp;amp; 属性注入&lt;/strong&gt;：容器通过构造器创建 Bean 实例，并通过反射完成属性注入（如 &lt;code&gt;@Autowired&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aware 接口回调&lt;/strong&gt;：如果 Bean 实现了各种 &lt;code&gt;Aware&lt;/code&gt;接口（如 &lt;code&gt;BeanNameAware&lt;/code&gt;），此时会回调其方法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BeanPostProcessor 前置处理&lt;/strong&gt;：这是 &lt;strong&gt;&lt;code&gt;@PostConstruct&lt;/code&gt;执行的地方&lt;/strong&gt;。所有 &lt;code&gt;BeanPostProcessor&lt;/code&gt;的 &lt;code&gt;postProcessBeforeInitialization&lt;/code&gt;方法会被调用。其中，&lt;code&gt;CommonAnnotationBeanPostProcessor&lt;/code&gt;会检查 Bean 的方法是否被 &lt;code&gt;@PostConstruct&lt;/code&gt;标注，如果有，则通过&lt;strong&gt;反射&lt;/strong&gt;调用它们。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调用初始化方法&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;首先，Spring 检查 Bean 是否实现了 &lt;code&gt;InitializingBean&lt;/code&gt;接口。如果是，则&lt;strong&gt;直接调用&lt;/strong&gt;其 &lt;code&gt;afterPropertiesSet()&lt;/code&gt;方法。&lt;/li&gt;
&lt;li&gt;接着，Spring 检查 Bean 的定义中是否配置了自定义的 &lt;code&gt;init-method&lt;/code&gt;。如果有，则通过&lt;strong&gt;反射&lt;/strong&gt;调用该方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BeanPostProcessor 后置处理&lt;/strong&gt;：所有 &lt;code&gt;BeanPostProcessor&lt;/code&gt;的 &lt;code&gt;postProcessAfterInitialization&lt;/code&gt;方法被调用。&lt;strong&gt;AOP 代理通常在此阶段生成&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bean 就绪&lt;/strong&gt;：此时 Bean 已完全初始化，可被应用程序使用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，顺序 &lt;strong&gt;&lt;code&gt;@PostConstruct&lt;/code&gt;→ &lt;code&gt;InitializingBean&lt;/code&gt;→ &lt;code&gt;init-method&lt;/code&gt;&lt;/strong&gt; 是由 Spring 的生命周期流程&lt;strong&gt;严格定义&lt;/strong&gt;的。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="-为何是这个顺序"&gt;💡 为何是这个顺序？
&lt;/h3&gt;&lt;p&gt;这个顺序体现了 Spring 的设计哲学和权衡：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;@PostConstruct&lt;/code&gt;最先（最推荐）&lt;/strong&gt;：因为它基于 &lt;strong&gt;JSR-250 标准&lt;/strong&gt;，而非 Spring 特有。这减少了代码与 Spring 框架的耦合，意味着你的初始化逻辑更便携。Spring 通过 &lt;code&gt;BeanPostProcessor&lt;/code&gt;这种&lt;strong&gt;扩展机制&lt;/strong&gt;来支持它，而 &lt;code&gt;BeanPostProcessor&lt;/code&gt;本身的执行就在直接的初始化方法调用之前。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;InitializingBean&lt;/code&gt;其次&lt;/strong&gt;：这是一个 Spring 的&lt;strong&gt;原生接口&lt;/strong&gt;。实现它就意味着你的代码和 Spring 框架绑定了。它的调用是 Spring 生命周期管理的一部分，直接且高效，但牺牲了灵活性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;init-method&lt;/code&gt;最后（最灵活）&lt;/strong&gt;：它通过&lt;strong&gt;外部配置&lt;/strong&gt;指定方法名，&lt;strong&gt;完全不需要修改 Bean 的源代码&lt;/strong&gt;。这种解耦使得它为集成那些你无法修改源码的第三方库提供了极大的便利。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id="-如何选择-1"&gt;🛠️ 如何选择？
&lt;/h3&gt;&lt;p&gt;了解原理后，在实际开发中可以根据需求选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;首选 &lt;code&gt;@PostConstruct&lt;/code&gt;&lt;/strong&gt;：适用于大多数场景，特别是现代基于注解的 Spring Boot 应用。它&lt;strong&gt;代码侵入性低&lt;/strong&gt;，符合 Java 标准，清晰直观。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;慎用 &lt;code&gt;InitializingBean&lt;/code&gt;&lt;/strong&gt;：除非需要与 Spring 的某些生命周期&lt;strong&gt;紧密集成&lt;/strong&gt;，通常更推荐使用 &lt;code&gt;@PostConstruct&lt;/code&gt;，因为它能避免代码与 Spring 框架的耦合。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选用 &lt;code&gt;init-method&lt;/code&gt;&lt;/strong&gt;：当需要为&lt;strong&gt;第三方库&lt;/strong&gt;的类添加初始化逻辑，或者你希望初始化方法名能通过&lt;strong&gt;外部配置&lt;/strong&gt;灵活指定时，它非常有用。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="-注意事项"&gt;⚠️ 注意事项
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;避免在同一个 Bean 中混合使用多种方式&lt;/strong&gt;：这会使初始化逻辑分散，降低可读性和可维护性。通常&lt;strong&gt;选择一种&lt;/strong&gt;即可。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;初始化中的异常&lt;/strong&gt;：如果初始化方法抛出异常，会阻止 Bean 的创建，可能导致应用上下文启动失败。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原型 Bean&lt;/strong&gt;：对于作用域为 &lt;code&gt;prototype&lt;/code&gt;的 Bean，其初始化方法每次都会在获取新实例时调用，但 Spring 不管理其销毁生命周期。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望这些解释能帮助你更深入地理解 Spring Bean 的初始化机制。&lt;/p&gt;
&lt;h2 id="refresh"&gt;refresh()
&lt;/h2&gt;&lt;p&gt;ApplicationContext 的 &lt;code&gt;refresh()&lt;/code&gt;方法是 Spring IoC 容器启动的核心流程，它就像 Spring 应用的启动引擎，按步骤完成从配置加载到应用完全就绪的所有关键任务。为了让你快速建立整体认知，下图清晰地展示了这个流程的12个核心步骤及其主要工作：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;flowchart TD
A[开始 refresh()] --&amp;gt; B[prepareRefresh()&amp;lt;br&amp;gt;准备刷新]
B --&amp;gt; C[obtainFreshBeanFactory()&amp;lt;br&amp;gt;获取BeanFactory]
C --&amp;gt; D[prepareBeanFactory()&amp;lt;br&amp;gt;配置BeanFactory]
D --&amp;gt; E[postProcessBeanFactory()&amp;lt;br&amp;gt;子类扩展]
E --&amp;gt; F[invokeBeanFactoryPostProcessors()&amp;lt;br&amp;gt;执行Bean工厂后处理器]
F --&amp;gt; G[registerBeanPostProcessors()&amp;lt;br&amp;gt;注册Bean后处理器]
G --&amp;gt; H[initMessageSource()&amp;lt;br&amp;gt;初始化消息源]
H --&amp;gt; I[initApplicationEventMulticaster()&amp;lt;br&amp;gt;初始化事件广播器]
I --&amp;gt; J[onRefresh()&amp;lt;br&amp;gt;子类扩展]
J --&amp;gt; K[registerListeners()&amp;lt;br&amp;gt;注册监听器]
K --&amp;gt; L[finishBeanFactoryInitialization()&amp;lt;br&amp;gt;初始化单例Bean]
L --&amp;gt; M[finishRefresh()&amp;lt;br&amp;gt;完成刷新]
M --&amp;gt; N[容器就绪]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下面，我们来详细解析每个阶段的核心工作。&lt;/p&gt;
&lt;h3 id="-第一阶段环境准备与-beanfactory-初始化"&gt;💡 第一阶段：环境准备与 BeanFactory 初始化
&lt;/h3&gt;&lt;p&gt;这一阶段主要完成容器启动前的“基建”工作，为后续的 Bean 加载和实例化搭建舞台。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;prepareRefresh()&lt;/code&gt;- 准备刷新&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此方法是刷新过程的起点，主要负责初始化上下文环境。它会设置容器的启动时间戳和活跃状态，初始化 &lt;strong&gt;&lt;code&gt;Environment&lt;/code&gt;&lt;/strong&gt; 对象（该对象管理着系统属性、环境变量和自定义配置文件等属性源），并对必要的属性进行验证，确保后续流程能在一个定义良好的环境下进行 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;obtainFreshBeanFactory()&lt;/code&gt;- 获取 BeanFactory&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在此步骤中，容器会&lt;strong&gt;创建或刷新其内部的 &lt;code&gt;BeanFactory&lt;/code&gt;&lt;/strong&gt;（通常是 &lt;code&gt;DefaultListableBeanFactory&lt;/code&gt;）。这个 &lt;code&gt;BeanFactory&lt;/code&gt;是 Spring 容器真正管理 Bean 的“工作台”。核心任务是加载配置源（如 XML 文件或注解配置类），将其解析为一个个 &lt;strong&gt;&lt;code&gt;BeanDefinition&lt;/code&gt;&lt;/strong&gt; 对象，并将这些 Bean 的“蓝图”注册到 &lt;code&gt;BeanFactory&lt;/code&gt;中 。你可以将其理解为将所有零件的设计图纸录入工厂的数据库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;prepareBeanFactory()&lt;/code&gt;- 配置 BeanFactory&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;获取到基础的 &lt;code&gt;BeanFactory&lt;/code&gt;后，此步骤会对其进行“精装修”。它配置了类加载器、&lt;strong&gt;SPEL表达式解析器&lt;/strong&gt;、属性编辑器等必要组件。同时，它会注册一些关键的&lt;strong&gt;内置 &lt;code&gt;BeanPostProcessor&lt;/code&gt;&lt;/strong&gt;，例如用于处理 &lt;code&gt;Aware&lt;/code&gt;接口的 &lt;code&gt;ApplicationContextAwareProcessor&lt;/code&gt;，为容器的高级功能打下基础 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;postProcessBeanFactory()&lt;/code&gt;- BeanFactory 后置处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是一个&lt;strong&gt;预留的模板方法&lt;/strong&gt;，允许具体的 &lt;code&gt;ApplicationContext&lt;/code&gt;子类（如用于 Web 环境的实现）根据自身需求，对 &lt;code&gt;BeanFactory&lt;/code&gt;进行进一步的定制，例如注册新的作用域（Scope）如 &lt;code&gt;request&lt;/code&gt;或 &lt;code&gt;session&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-第二阶段扩展点调用与功能组件初始化"&gt;🔧 第二阶段：扩展点调用与功能组件初始化
&lt;/h3&gt;&lt;p&gt;在 Bean 实例化之前，Spring 提供了强大的扩展机制，允许开发者介入容器的配置过程。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;invokeBeanFactoryPostProcessors()&lt;/code&gt;- 调用 BeanFactory 后处理器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是 Spring 框架中一个&lt;strong&gt;极其重要的扩展点&lt;/strong&gt;。此步骤会实例化并调用所有 &lt;code&gt;BeanFactoryPostProcessor&lt;/code&gt;的实现。这些处理器有权在 Bean 实例化&lt;strong&gt;之前&lt;/strong&gt;，&lt;strong&gt;修改&lt;/strong&gt;已注册的 &lt;code&gt;BeanDefinition&lt;/code&gt;。最典型的例子是 &lt;code&gt;ConfigurationClassPostProcessor&lt;/code&gt;，它负责解析 &lt;code&gt;@Configuration&lt;/code&gt;、&lt;code&gt;@Bean&lt;/code&gt;等注解；以及 &lt;code&gt;PropertySourcesPlaceholderConfigurer&lt;/code&gt;，用于解析 &lt;code&gt;${...}&lt;/code&gt;占位符 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;registerBeanPostProcessors()&lt;/code&gt;- 注册 Bean 后处理器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此步骤负责从 &lt;code&gt;BeanFactory&lt;/code&gt;中查找所有 &lt;code&gt;BeanPostProcessor&lt;/code&gt;的实现，并将它们注册到容器中。需要注意的是，这里只是&lt;strong&gt;注册&lt;/strong&gt;，真正的调用发生在后续 Bean 的实例化过程中。&lt;code&gt;BeanPostProcessor&lt;/code&gt;是影响 Bean 生命周期的另一个关键扩展点，常用于处理依赖注入（如 &lt;code&gt;@Autowired&lt;/code&gt;）、AOP 代理创建等 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;initMessageSource()&lt;/code&gt;- 初始化国际化消息源&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此步骤为容器提供&lt;strong&gt;国际化（i18n）&lt;/strong&gt; 支持。它会查找名为 &lt;code&gt;messageSource&lt;/code&gt;的 Bean，如果存在则使用它，否则会初始化一个默认的实现，用于解析不同语言环境的消息 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;initApplicationEventMulticaster()&lt;/code&gt;- 初始化应用事件广播器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此步骤初始化了 Spring &lt;strong&gt;事件驱动模型&lt;/strong&gt;的核心组件——事件广播器。同样，它会尝试查找名为 &lt;code&gt;applicationEventMulticaster&lt;/code&gt;的 Bean，若未找到则使用默认的 &lt;code&gt;SimpleApplicationEventMulticaster&lt;/code&gt;。这个广播器负责将发布的事件通知给所有相关的监听器 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-第三阶段容器刷新与-bean-实例化"&gt;🚀 第三阶段：容器刷新与 Bean 实例化
&lt;/h3&gt;&lt;p&gt;这是启动流程的冲刺阶段，容器将完成所有准备工作并正式启动。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;onRefresh()&lt;/code&gt;- 模板方法：子容器刷新&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是另一个&lt;strong&gt;模板方法&lt;/strong&gt;，允许特定的 &lt;code&gt;ApplicationContext&lt;/code&gt;子类在此时机执行特殊逻辑。例如，&lt;strong&gt;Spring Boot 的 &lt;code&gt;ServletWebServerApplicationContext&lt;/code&gt;就在此方法中创建并启动了内嵌的 Web 服务器（如 Tomcat）&lt;/strong&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;registerListeners()&lt;/code&gt;- 注册应用监听器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此步骤会注册所有实现了 &lt;code&gt;ApplicationListener&lt;/code&gt;接口的监听器 Bean，并将它们添加到之前初始化的事件广播器中。同时，它会发布在刷新过程中可能积压的“早期应用事件” 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;finishBeanFactoryInitialization()&lt;/code&gt;- 完成 BeanFactory 的初始化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是 &lt;code&gt;refresh()&lt;/code&gt;方法中&lt;strong&gt;最重量级的一步&lt;/strong&gt;。在此步骤中，Spring 容器会&lt;strong&gt;实例化所有非延迟加载的单例 Bean&lt;/strong&gt;。它遍历所有已注册的 &lt;code&gt;BeanDefinition&lt;/code&gt;，调用 &lt;code&gt;getBean()&lt;/code&gt;方法，触发 Bean 的创建、依赖注入和初始化（如调用 &lt;code&gt;@PostConstruct&lt;/code&gt;方法）。至此，所有单例 Bean 都已创建完毕并放入单例池中，应用程序的核心组件就绪 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;finishRefresh()&lt;/code&gt;- 完成刷新&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是整个启动流程的收官之作。它会清空资源缓存，初始化生命周期处理器，并最终发布 &lt;strong&gt;&lt;code&gt;ContextRefreshedEvent&lt;/code&gt;&lt;/strong&gt; 事件，正式宣告容器刷新完成。此后，&lt;code&gt;ApplicationContext&lt;/code&gt;便处于完全活动状态，可以对外提供服务了 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-总结-14"&gt;💎 总结
&lt;/h3&gt;&lt;p&gt;总的来说，&lt;code&gt;ApplicationContext&lt;/code&gt;的 &lt;code&gt;refresh()&lt;/code&gt;过程是一个设计精妙、步骤清晰的流水线。它从环境准备开始，逐步完成配置加载、扩展点调用、功能组件初始化，最终实例化所有单例 Bean 并启动容器。理解这一过程，对于掌握 Spring 框架的内部机制、进行高级定制和故障排查都至关重要。&lt;/p&gt;
&lt;p&gt;希望这份详细的解析对你有帮助！如果你对其中某个具体步骤特别感兴趣，我们可以继续深入探讨。&lt;/p&gt;</description></item><item><title>【Redis】In Spring Boot</title><link>https://dyhes.github.io/p/redisin-spring-boot/</link><pubDate>Mon, 23 Sep 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/redisin-spring-boot/</guid><description>&lt;h2 id="dependency"&gt;dependency
&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dependency&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;groupId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;springframework&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;groupId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;artifactId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;starter&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;artifactId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;dependency&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="applicationproperties"&gt;application.properties
&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;spring&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;spring&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;6379&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="composeyaml"&gt;compose.yaml
&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-dockerfile" data-lang="dockerfile"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;redis:&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt; &lt;span class="c1"&gt;# 与 ’redis:latest&amp;#39; subtle differences&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt; image: redis:latest&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt; container_name: postopia-redis&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt; ports:&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt; - &lt;span class="s2"&gt;&amp;#34;6379:6379&amp;#34;&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="config"&gt;Config
&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@Configuration&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RedisConfig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@Bean&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RedisConnectionFactory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;redisConnectionFactory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LettuceConnectionFactory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@Bean&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RedisTemplate&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;redisTemplate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RedisConnectionFactory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;connectionFactory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RedisTemplate&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RedisTemplate&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setConnectionFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connectionFactory&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Use String serializers for keys&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setKeySerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;StringRedisSerializer&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setValueSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;StringRedisSerializer&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="service"&gt;Service
&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@Service&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RedisService&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@Autowired&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RedisTemplate&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;redisTemplate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;setByMinute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;redisTemplate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;opsForValue&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TimeUnit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MINUTES&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;redisTemplate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;opsForValue&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;redisTemplate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>【Spring Boot】Uploaded Image Processing</title><link>https://dyhes.github.io/p/spring-bootuploaded-image-processing/</link><pubDate>Sat, 13 Jul 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/spring-bootuploaded-image-processing/</guid><description>&lt;h2 id="example"&gt;example
&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;org.springframework.http.ResponseEntity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;org.springframework.web.bind.annotation.*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;org.springframework.web.multipart.MultipartFile&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;java.io.IOException&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;java.nio.file.Files&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;java.nio.file.Path&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;java.nio.file.Paths&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;java.util.UUID&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@RestController&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@RequestMapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;/api/users&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserController&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AVATAR_UPLOAD_DIR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;uploads/avatars/&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@PostMapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;/register&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ResponseEntity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;registerUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@RequestPart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;userInfo&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserRegistrationDto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@RequestParam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;avatar&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MultipartFile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;avatarFile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Generate a unique user ID&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;randomUUID&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Process user information&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;Registering user: &amp;#34;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getUsername&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;Email: &amp;#34;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getEmail&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Here you would typically save the user information to a database&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Process avatar if provided&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;avatarUrl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;avatarFile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;avatarFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;avatarUrl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;saveAvatar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;avatarFile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Construct response&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;User registered successfully. &amp;#34;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;Username: &amp;#34;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getUsername&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;, Email: &amp;#34;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getEmail&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;avatarUrl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;, Avatar URL: &amp;#34;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;avatarUrl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ResponseEntity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;saveAvatar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MultipartFile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;_&amp;#34;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getOriginalFilename&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Paths&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AVATAR_UPLOAD_DIR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBytes&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;/avatars/&amp;#34;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Return the relative URL&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserRegistrationDto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Note: In a real application, never store passwords in plain text&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Getters and setters&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We use &lt;code&gt;@RequestPart&lt;/code&gt; for userInfo because it&amp;rsquo;s a complex object (JSON data) that needs to be deserialized into a &lt;code&gt;UserRegistrationDto&lt;/code&gt; object.
We use &lt;code&gt;@RequestParam&lt;/code&gt; for avatarFile because it&amp;rsquo;s a simple file upload. While we could use &lt;code&gt;@RequestPart&lt;/code&gt; here &lt;strong&gt;as well&lt;/strong&gt;, &lt;code&gt;@RequestParam&lt;/code&gt; is sufficient and clearly indicates that it&amp;rsquo;s an optional parameter.&lt;/p&gt;
&lt;h2 id="requestpart"&gt;@RequestPart
&lt;/h2&gt;&lt;h2 id="requestparam"&gt;@RequestParam
&lt;/h2&gt;&lt;p&gt;Typically used for simple values like strings, numbers, or booleans.
By default, parameters are required. You can make them optional by setting &lt;strong&gt;required = false&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For GET requests, it looks at &lt;strong&gt;query parameters&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;For requests with application/x-www-form-urlencoded, it looks at the &lt;strong&gt;form data&lt;/strong&gt; in the request body.&lt;/li&gt;
&lt;li&gt;For requests with multipart/form-data, it can look at &lt;strong&gt;both&lt;/strong&gt; the URL and the parts of the multipart request.&lt;/li&gt;
&lt;li&gt;It can even extract data from the &lt;strong&gt;query string for POST requests&lt;/strong&gt;, which is occasionally useful.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="compare-with-pathvariable"&gt;compare with @PathVariable
&lt;/h3&gt;&lt;h4 id="pathvariable"&gt;@PathVariable
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Used to handle &lt;strong&gt;template variables&lt;/strong&gt; in the request URI.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part of the path&lt;/strong&gt; itself, not a query string.&lt;/li&gt;
&lt;li&gt;Typically used for &lt;strong&gt;mandatory&lt;/strong&gt; parameters that identify a resource.&lt;/li&gt;
&lt;li&gt;Cannot have default values (if the value is not in the URL, the route won&amp;rsquo;t match).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@GetMapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;/users/{id}&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@PathVariable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Implementation&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="request-body"&gt;@Request Body
&lt;/h2&gt;&lt;p&gt;For application/json or application/xml&lt;/p&gt;
&lt;h2 id="applicationx-www-form-urlencoded-and-multipartform-data"&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; and &lt;code&gt;multipart/form-data&lt;/code&gt;
&lt;/h2&gt;&lt;h3 id="applicationx-www-form-urlencoded"&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;
&lt;/h3&gt;&lt;p&gt;This is the default content type for HTML form submissions and is widely used for sending simple data.&lt;/p&gt;
&lt;h4 id="key-characteristics"&gt;Key characteristics
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Data is encoded in &lt;strong&gt;key-value&lt;/strong&gt; pairs&lt;/li&gt;
&lt;li&gt;Keys and values are &lt;strong&gt;URL-encoded&lt;/strong&gt; (spaces become &amp;lsquo;+&amp;rsquo; or &amp;lsquo;%20&amp;rsquo;, special characters are percent-encoded)&lt;/li&gt;
&lt;li&gt;Pairs are separated by &amp;lsquo;&lt;strong&gt;&amp;amp;&lt;/strong&gt;&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="pros"&gt;Pros
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Simple and widely supported&lt;/li&gt;
&lt;li&gt;Efficient for small amounts of text data&lt;/li&gt;
&lt;li&gt;Easy to generate and parse&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="cons"&gt;⠀Cons
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Not suitable for sending large amounts of data&lt;/li&gt;
&lt;li&gt;Not efficient for sending binary data (like files)&lt;/li&gt;
&lt;li&gt;Can become unwieldy with complex data structures&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="multipartform-data"&gt;&lt;code&gt;multipart/form-data&lt;/code&gt;
&lt;/h3&gt;&lt;p&gt;This content type is used when the form includes &lt;strong&gt;files, non-ASCII data&lt;/strong&gt;, or when you need to send &lt;strong&gt;binary data&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id="key-characteristics-1"&gt;Key characteristics
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;The body is divided into &lt;strong&gt;separate parts&lt;/strong&gt;, each representing a form field or file&lt;/li&gt;
&lt;li&gt;Each part can have &lt;strong&gt;its own content type&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Parts are separated &lt;strong&gt;by a boundary delimiter&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="example-1"&gt;example
&lt;/h4&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-http" data-lang="http"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;--boundary
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;Content-Disposition: form-data; name=&amp;#34;name&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;John Doe
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;--boundary
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;Content-Disposition: form-data; name=&amp;#34;file&amp;#34;; filename=&amp;#34;example.txt&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;Content-Type: text/plain
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;[File content goes here]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;--boundary--
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="pros-1"&gt;Pros
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Can handle file uploads &lt;strong&gt;efficiently&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Supports &lt;strong&gt;mixed data types&lt;/strong&gt; (text fields and files) in a single request&lt;/li&gt;
&lt;li&gt;Better for sending large amounts of data or binary data&lt;/li&gt;
&lt;li&gt;Each part can have its own content type&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="cons-1"&gt;⠀Cons
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;More complex to parse and generate&lt;/li&gt;
&lt;li&gt;Slightly larger overhead due to boundaries and headers&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="get-method"&gt;Get Method
&lt;/h2&gt;&lt;h3 id="http-specification"&gt;HTTP Specification
&lt;/h3&gt;&lt;p&gt;According to the HTTP/1.1 specification (RFC 7231), a GET request &lt;strong&gt;can have a body&lt;/strong&gt;. However, the specification also states that a GET request with a body &lt;strong&gt;has no defined semantics, meaning servers are not required to process or even acknowledge the body&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id="real-world-practice"&gt;Real-world Practice
&lt;/h3&gt;&lt;p&gt;In practice, while it&amp;rsquo;s &lt;strong&gt;technically possible&lt;/strong&gt; to send a body with a GET request, it&amp;rsquo;s generally &lt;strong&gt;discouraged&lt;/strong&gt; and often not supported for several reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Many servers, clients, and proxies &lt;strong&gt;ignore&lt;/strong&gt; the body of a GET request.&lt;/li&gt;
&lt;li&gt;Some implementations might &lt;strong&gt;reject&lt;/strong&gt; GET requests with a body.&lt;/li&gt;
&lt;li&gt;It goes against the &lt;strong&gt;intended&lt;/strong&gt; use of GET as defined in the HTTP specification.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="restful-api-design"&gt;RESTful API Design
&lt;/h3&gt;&lt;p&gt;In RESTful API design, GET requests are meant to be &lt;strong&gt;safe and idempotent&lt;/strong&gt;. They should retrieve resources without modifying server state. Including a body in a GET request could imply that the request is intended to modify something, which contradicts these principles.&lt;/p&gt;</description></item><item><title>Many-One Relationship</title><link>https://dyhes.github.io/p/many-one-relationship/</link><pubDate>Thu, 11 Jul 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/many-one-relationship/</guid><description>&lt;img src="https://dyhes.github.io/covers/cover19.png" alt="Featured image of post Many-One Relationship" /&gt;&lt;h2 id="onetomany"&gt;@OneToMany
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;This annotation is used to define a one-to-many relationship between two entities.&lt;/li&gt;
&lt;li&gt;It’s typically &lt;strong&gt;used on the “one” side&lt;/strong&gt; of the relationship.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Department&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@OneToMany&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mappedBy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;department&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cascade&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CascadeType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ALL&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;employees&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="manytoone"&gt;@ManyToOne
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;This annotation is used to define a many-to-one relationship between two entities.&lt;/li&gt;
&lt;li&gt;It’s typically &lt;strong&gt;used on the “many” side&lt;/strong&gt; of the relationship.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@ManyToOne&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@JoinColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;department_id&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Department&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;department&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Often, @OneToMany and @ManyToOne are used together to create a bidirectional relationship. The @OneToMany side uses mappedBy to indicate the field that owns the relationship. The @ManyToOne side use @JoinColumn to specify the &lt;strong&gt;foreign key column&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="cascade-operation"&gt;Cascade operation
&lt;/h2&gt;&lt;p&gt;Cascade operations in ORM frameworks like Hibernate and JPA allow you to &lt;strong&gt;automatically apply operations performed on a parent entity to its associated child entities&lt;/strong&gt;. This feature is particularly useful in managing relationships between entities and can significantly simplify database operations.&lt;/p&gt;
&lt;h3 id="types"&gt;Types
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;PERSIST: Saves the child entity when the parent is saved.&lt;/li&gt;
&lt;li&gt;MERGE: Updates the child entity when the parent is updated.&lt;/li&gt;
&lt;li&gt;REMOVE: Deletes the child entity when the parent is deleted.&lt;/li&gt;
&lt;li&gt;REFRESH: Refreshes the child entity when the parent is refreshed.&lt;/li&gt;
&lt;li&gt;DETACH: Detaches the child entity when the parent is detached (from the persistence context).&lt;/li&gt;
&lt;li&gt;ALL: Applies all cascade types (PERSIST, MERGE, REMOVE, REFRESH, DETACH).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="usage"&gt;Usage
&lt;/h3&gt;&lt;p&gt;You can specify cascade operations in the @OneToMany, @ManyToOne, @OneToOne, or @ManyToMany annotations:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@OneToMany&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cascade&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CascadeType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ALL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ChildEntity&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@OneToMany&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cascade&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;CascadeType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;PERSIST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CascadeType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MERGE&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ChildEntity&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="considerations"&gt;Considerations
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Orphan Removal: Used in conjunction with cascading, orphanRemoval = true will remove child entities that are no longer referenced by the parent.&lt;/li&gt;
&lt;li&gt;Bi-directional Relationships: Be cautious with cascade operations in &lt;strong&gt;bi-directional relationships&lt;/strong&gt; to avoid unintended side effects.&lt;/li&gt;
&lt;li&gt;Performance: Cascading can &lt;strong&gt;impact performance&lt;/strong&gt;, especially with large datasets. Use it judiciously&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>One-One Relationship</title><link>https://dyhes.github.io/p/one-one-relationship/</link><pubDate>Thu, 11 Jul 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/one-one-relationship/</guid><description>&lt;img src="https://dyhes.github.io/covers/cover21.jpg" alt="Featured image of post One-One Relationship" /&gt;&lt;p&gt;A one-to-one relationship means that each instance of an entity is associated with precisely one instance of another entity. This relationship is bidirectional or unidirectional:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unidirectional One-to-One&lt;/strong&gt;: One entity has a reference to another entity, but not vice versa.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bidirectional One-to-One&lt;/strong&gt;: Both entities have references to each other.
In the context of object-relational mapping (ORM) in Java, specifically when using Java Persistence API (JPA) or Hibernate, the @OneToOne annotation is used to define a one-to-one relationship between two entities.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// unidirectional &lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Entity&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@Id&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@GeneratedValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strategy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GenerationType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;IDENTITY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@OneToOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cascade&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CascadeType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ALL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@JoinColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;profile_id&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;referencedColumnName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserProfile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;userProfile&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Getters and setters&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Entity&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserProfile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@Id&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@GeneratedValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strategy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GenerationType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;IDENTITY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Getters and setters&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="c1"&gt;//bidirectional&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Entity&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@Id&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@GeneratedValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strategy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GenerationType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;IDENTITY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@OneToOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cascade&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CascadeType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ALL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mappedBy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;user&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserProfile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;userProfile&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Getters and setters&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Entity&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserProfile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@Id&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@GeneratedValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strategy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GenerationType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;IDENTITY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@OneToOne&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@JoinColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;user_id&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Getters and setters&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>Many-Many Relationship</title><link>https://dyhes.github.io/p/many-many-relationship/</link><pubDate>Wed, 10 Jul 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/many-many-relationship/</guid><description>&lt;img src="https://dyhes.github.io/covers/cover20.jpg" alt="Featured image of post Many-Many Relationship" /&gt;&lt;h2 id="manytomany"&gt;@ManyToMany
&lt;/h2&gt;&lt;p&gt;The @ManyToMany annotation is used in Java persistence frameworks, particularly in Java Persistence API (JPA) and Object-Relational Mapping (ORM) tools like Hibernate. It’s used to define a &lt;strong&gt;many-to-many relationship&lt;/strong&gt; between two entities.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Relationship: It represents a relationship where multiple instances of one entity can be associated with multiple instances of another entity.&lt;/li&gt;
&lt;li&gt;Database representation: In a relational database, this is typically implemented using a join table that contains foreign keys to both entities.&lt;/li&gt;
&lt;li&gt;Bidirectional vs Unidirectional: The relationship can be &lt;strong&gt;bidirectional&lt;/strong&gt; (defined on both entities) or &lt;strong&gt;unidirectional&lt;/strong&gt; (defined on only one entity, namely the owning one).&lt;/li&gt;
&lt;li&gt;Usage: It’s typically used on a &lt;strong&gt;collection field&lt;/strong&gt; in an entity class.&lt;/li&gt;
&lt;li&gt;Join Table: By default, JPA will create a join table, but you can &lt;strong&gt;customize&lt;/strong&gt; this using the &lt;strong&gt;@JoinTable&lt;/strong&gt; annotation.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@Entity&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;students&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@Id&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@GeneratedValue&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@ManyToMany&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@JoinTable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;student_course&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;joinColumns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@JoinColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;student_id&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inverseJoinColumns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@JoinColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;course_id&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Course&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;signedCourses&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// getters and setters&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Entity&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;courses&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Course&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@Id&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@GeneratedValue&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@ManyToMany&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mappedBy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;signedCourses&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// getters and setters&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A student can enroll in multiple courses, and a course can have multiple students.&lt;/li&gt;
&lt;li&gt;The @JoinTable annotation specifies the details of the join table.&lt;/li&gt;
&lt;li&gt;The mappedBy attribute in the Course entity indicates that Student is the owning side of the relationship.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When using @ManyToMany, consider these best practices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Use Set&lt;/strong&gt; instead of List to avoid duplicate entries.&lt;/li&gt;
&lt;li&gt;Be cautious with bidirectional relationships, as they can &lt;strong&gt;lead to performance issues&lt;/strong&gt; if not managed properly.&lt;/li&gt;
&lt;li&gt;Consider using &lt;strong&gt;lazy loading&lt;/strong&gt; (fetch = FetchType.LAZY) to improve performance.&lt;/li&gt;
&lt;li&gt;In some cases, it might be better to model the relationship as &lt;strong&gt;two one-to-many&lt;/strong&gt; relationships with an intermediate entity, especially if you need to store &lt;strong&gt;additional information&lt;/strong&gt; about the relationship.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="mappedby"&gt;mappedBy
&lt;/h2&gt;&lt;p&gt;The mappedBy attribute in a @ManyToMany relationship is used to indicate the non-owning side of a &lt;strong&gt;bidirectional&lt;/strong&gt; relationship. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In a @ManyToMany relationship, one side needs to be the owning side, and the other is the non-owning (inverse) side.&lt;/li&gt;
&lt;li&gt;The owning side is where &lt;strong&gt;the @JoinTable is specified&lt;/strong&gt; (if using a custom join table).&lt;/li&gt;
&lt;li&gt;The non-owning side uses mappedBy to &lt;strong&gt;refer to the property&lt;/strong&gt; on the owning side.
Key Points&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Only&lt;/strong&gt; the owning side of the relationship is responsible for updating the join table.&lt;/li&gt;
&lt;li&gt;Changes made to the non-owning side &lt;strong&gt;won’t be reflected in the database&lt;/strong&gt; unless the owning side is also updated.
Benefits&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prevents duplicate&lt;/strong&gt; join tables.&lt;/li&gt;
&lt;li&gt;Clarifies which side of the relationship is responsible for managing the association.
Common Mistake:&lt;/li&gt;
&lt;li&gt;Forgetting to specify mappedBy on one side, which can lead to &lt;strong&gt;two separate join table&lt;/strong&gt;s being created.
Bidirectional Relationship Management:&lt;/li&gt;
&lt;li&gt;Even though mappedBy is specified, you typically need to update both sides of the relationship in your Java code &lt;strong&gt;for consistency.&lt;/strong&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCourses&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getStudents&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Database Perspective:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The database structure is the same regardless of which side is the owning side.&lt;/li&gt;
&lt;li&gt;The choice affects how JPA manages the relationship, not the underlying database schema.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="lazy-loading"&gt;lazy loading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Lazy loading means that an object &lt;strong&gt;doesn’t load all of its associated data&lt;/strong&gt; from the database when it’s first retrieved.&lt;/li&gt;
&lt;li&gt;Instead, it loads only the data it needs immediately and loads other related data &lt;strong&gt;only when it’s specifically requested&lt;/strong&gt;.
In ORM Context:&lt;/li&gt;
&lt;li&gt;When you fetch an entity from the database, lazy loading allows you to retrieve the entity &lt;strong&gt;without immediately loading all of its associated entities or collections&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The associated data is loaded only when you try to &lt;strong&gt;access it&lt;/strong&gt;.
When to use:&lt;/li&gt;
&lt;li&gt;Use lazy loading for associations that are not always needed.&lt;/li&gt;
&lt;li&gt;Use eager loading for associations that are almost always needed with the main entity.
Implementation:&lt;/li&gt;
&lt;li&gt;In JPA, lazy loading is often the default &lt;strong&gt;for collection associations&lt;/strong&gt; (@OneToMany, @ManyToMany).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;For single-valued associations&lt;/strong&gt; (@ManyToOne, @OneToOne), eager loading is usually the default.
Best Practices:&lt;/li&gt;
&lt;li&gt;Use lazy loading as the default strategy.&lt;/li&gt;
&lt;li&gt;Switch to eager loading only when you’re certain that the related data is always needed.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>【Spring Boot in practice】Notes</title><link>https://dyhes.github.io/p/spring-boot-in-practicenotes/</link><pubDate>Tue, 02 Jul 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/spring-boot-in-practicenotes/</guid><description>&lt;p&gt;&lt;a class="link" href="https://reader-service.fcdn.sk/?source=3c6b6838ceb712e38b66a0ca2cde230f44274dac2f09fba71ffdc61842816357&amp;amp;download_location=https%3A%2F%2Fsinglelogin.re%2Fdl%2F21754907%2F994075" target="_blank" rel="noopener"
&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="spring-boot"&gt;Spring boot
&lt;/h2&gt;&lt;p&gt;Spring Boot is an open source extension of the Spring Framework designed to simplify the Spring application development.&lt;/p&gt;
&lt;p&gt;Spring Boot was introduced as a subproject under the Spring Framework to empower developers with a fast startup experience and exempt them from most of the configuration hazards.&lt;/p&gt;
&lt;p&gt;It provides an additional layer between the Spring Framework for the user to simplify certain configuration aspects.&lt;/p&gt;
&lt;p&gt;A Spring Boot web application can be either Servlet-based or reactive type.&lt;/p&gt;
&lt;h3 id="components"&gt;Components
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;spring-boot&lt;/p&gt;
&lt;p&gt;This is the &lt;strong&gt;primary&lt;/strong&gt; Spring Boot component that provides support to other components. For example, it contains the &lt;strong&gt;SpringApplication class&lt;/strong&gt;, which contains several static methods to create a standalone Spring Boot application. It also provides support for embedded web servers (e.g., Tomcat) and supports externalized application configurations (e.g., database details of your application), etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;spring-boot-autoconfigure&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring-boot-starters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;spring-boot-actuator&lt;/p&gt;
&lt;p&gt;In the context of software, particularly within the Spring Boot framework, “Actuator” refers to a set of tools and features that provide insights into the application’s runtime behavior and health.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;spring-boot-actuator-autoconfigure&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;spring-boot-loader&lt;/p&gt;
&lt;p&gt;This component allows a Spring Boot application to be packaged as a single fat JAR file, including all dependencies and the embedded web servers that can be run standalone. You don’t use this module independently; instead, it is used along with Maven or Gradle plugins&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;spring-boot-devtools&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="lombok"&gt;Lombok
&lt;/h3&gt;&lt;p&gt;&lt;a class="link" href="https://projectlombok.org/" target="_blank" rel="noopener"
&gt;Lombok&lt;/a&gt; is a Java library that automatically generates the constructors, getter, setter, toString, and others based on the presence of a few annotations in the plain old Java object (POJO) class.&lt;/p&gt;
&lt;h3 id="pojo"&gt;POJO
&lt;/h3&gt;&lt;p&gt;A Plain Old Java Object (POJO) is a simple Java object that does not adhere to any special rules or conventions beyond those required by the Java Language Specification. The term is used to emphasize that these objects are free from the constraints typically imposed by more complex frameworks or libraries.&lt;/p&gt;
&lt;h3 id="record"&gt;Record
&lt;/h3&gt;&lt;p&gt;Java 14 has introduced the concept of records in the Java language. Records are immutable data classes that require you to specify only the type and name of the fields. The Java compiler can then generate the equals, hashCode, and toString methods. It also generates the private final fields, getter methods, and public constructor.&lt;/p&gt;
&lt;h3 id="pomxml-file"&gt;pom.xml file
&lt;/h3&gt;&lt;p&gt;The pom.xml file is a fundamental component of a Maven-based Java project. Maven is a build automation tool used primarily for Java projects, and pom.xml (Project Object Model) is the configuration file that defines the project’s dependencies, build configuration, and other project-specific settings.&lt;/p&gt;
&lt;h3 id="applicationpropertiesfile"&gt;application.properties file
&lt;/h3&gt;&lt;p&gt;The application.properties file is a key configuration file used in Spring Boot applications. It allows developers to define various settings and configurations for the application in a simple and readable format. &lt;/p&gt;
&lt;h3 id="war-vs-ear"&gt;WAR vs EAR
&lt;/h3&gt;&lt;p&gt;In general, to run a web application, you build and package the application components in a WAR or EAR archive file and deploy it into a web (e.g., Apache Tomcat) or application server (e.g., Red Hat JBoss). Spring Boot simplifies this process to a certain degree. It does not enforce you to build a WAR or EAR file of your application. Instead, it lets you run the Spring Boot application like a regular Java application using a conventional main() method.&lt;/p&gt;
&lt;h3 id="java-bean"&gt;Java Bean
&lt;/h3&gt;&lt;p&gt;A JavaBean is a reusable software component that follows &lt;strong&gt;specific conventions&lt;/strong&gt; defined by the JavaBeans specification. JavaBeans are used for &lt;strong&gt;encapsulating many objects into a single object&lt;/strong&gt; (the bean), so they can be passed around as a single bean object.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1 Default Constructor:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A JavaBean must have a no-argument (default) constructor. This allows the bean to be easily instantiated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt; &lt;strong&gt;Properties:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Properties are private fields that are accessed and modified through public getter and setter methods.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt; &lt;strong&gt;Serializable:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A JavaBean should implement the Serializable interface to allow its state to be saved and restored.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt; &lt;strong&gt;Accessor Methods:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Getter and setter methods follow a specific naming convention (getPropertyName for getters and setPropertyName for setters).
The “Bean” part of the term is a metaphor borrowed from the agricultural sense of the word, implying something small, lightweight, and reusable.&lt;/p&gt;
&lt;h3 id="springbootapplication"&gt;@SpringBootApplication
&lt;/h3&gt;&lt;p&gt;@SpringBootApplication annotation is a convenient annotation that consists of three annotations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@EnableAutoConfiguration&lt;/p&gt;
&lt;p&gt;provides the necessary support for Spring Boot to autoconfigure your application based on the JAR dependencies present in the application
classpath&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@ComponentScan&lt;/p&gt;
&lt;p&gt;Provides support to scan the packages for Spring components in the application.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="spring-component"&gt;Spring Component
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;A component in Spring is a Java bean that is managed by Spring&lt;/strong&gt; and annotated with the &lt;strong&gt;@Component, @Bean, or specialized component annotations&lt;/strong&gt;. With the presence of @ComponentScan annotation, the Spring Boot application scans for all components present in the &lt;strong&gt;root package and sub-packages&lt;/strong&gt; under it to manage their lifecycle. The key point to remember with ComponentScan is that the scan starts from a root package and continues to all child packages. Thus, if you have packages that are not in the root or its sub-package, none of those components will be scanned by the component scan.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@SpringBootConfiguration
This annotation indicates that &lt;strong&gt;the annotated class provides the Spring Boot application configuration&lt;/strong&gt;. It is meta-annotated with Spring @Configuration annotation so that the configurations in the annotated class can be found automatically by Spring Boot. Thus, the beans defined in this main class can be autodetected and loaded by Spring.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="run-method"&gt;run() method
&lt;/h3&gt;&lt;p&gt;Most of the time, you’ll use the static run() method of SpringApplication to bootstrap and launch your application. Spring Boot performs several activities while it executes the run() method:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt; &lt;strong&gt;Creates an instance of an&lt;/strong&gt; &lt;strong&gt;ApplicationContext&lt;/strong&gt; based on the libraries present in the classpath.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt; &lt;strong&gt;Registers a&lt;/strong&gt; &lt;strong&gt;CommandLinePropertySource&lt;/strong&gt; to expose command line arguments as Spring properties.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt; &lt;strong&gt;Refreshes the&lt;/strong&gt; &lt;strong&gt;ApplicationContext&lt;/strong&gt; created at step 1 to load all singleton beans.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt; &lt;strong&gt;Triggers the&lt;/strong&gt; &lt;strong&gt;ApplicationRunners&lt;/strong&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;strong&gt;CommandRunners&lt;/strong&gt; configured in the application.&lt;/p&gt;
&lt;p&gt;Most Java applications you develop consist of objects. These objects interact with each other, and there are dependencies among them. To effectively manage object creation and interdependencies, Spring uses the principles of &lt;strong&gt;dependency injection (DI)&lt;/strong&gt;.
This dependency injection or the &lt;strong&gt;inversion of control (IoC)&lt;/strong&gt; approach lets Spring create the objects (or, more appropriately, the &lt;strong&gt;beans&lt;/strong&gt; in Spring parlance) and inject the dependencies externally.
The bean definitions are presented to Spring either through the &lt;strong&gt;XML bean definition files&lt;/strong&gt; (e.g., applicationContext.xml) or through the annotation-based configurations (@Configuration annotation). Spring loads these bean definitions and keeps them available in the &lt;strong&gt;Spring IoC container&lt;/strong&gt;. The ApplicationContext interface acts as the &lt;strong&gt;Spring IoC Container&lt;/strong&gt;. Spring provides a plethora of ApplicationContext implementations based on the application type (Servlet or Reactive application), the bean definition configurations (e.g., to load from classpath or annotation), and so on.&lt;/p&gt;
&lt;p&gt;Although @EventListener works well in most circumstances, it does not work for events that are published very early in the application start-up, such as ApplicationStartingEvent and ApplicationEnvironmentPreparedEvent.&lt;/p&gt;
&lt;p&gt;By default, Spring Boot reads the application.properties or application.yml file from the following locations:&lt;/p&gt;
&lt;p&gt;1 The classpath root&lt;/p&gt;
&lt;p&gt;2 The classpath /config package&lt;/p&gt;
&lt;p&gt;3 The current directory&lt;/p&gt;
&lt;p&gt;4 The /config subdirectory in the current directory&lt;/p&gt;
&lt;p&gt;5 Immediate child directories of the /config subdirectory&lt;/p&gt;
&lt;p&gt;You can maintain the profile-specific property files with the application-{profile}.properties (or .yml) file.
You can activate a profile (e.g., dev or test) using the spring.profiles.active Spring Boot property.&lt;/p&gt;
&lt;p&gt;1 The application properties (properties or the YAML file) packaged inside the application JAR
2 Profile-specific application properties packaged inside the application JAR
3 The application properties (properties or the YAML file) packaged outside the application JAR
4 Profile-specific application properties packaged outside the application JAR&lt;/p&gt;
&lt;p&gt;Following is the order in which properties get precedence. The higher sequence number overrides the properties of the lower sequence number:
1 SpringApplication
2 @PropertySource
3 Config data file
4 OS environment variable
5 Command line arguments&lt;/p&gt;
&lt;p&gt;Both @Bean and @Component annotations let you &lt;strong&gt;instruct Spring to create instances&lt;/strong&gt; of the annotated class, but their usage is slightly different. You typically use the @Bean annotation for the classes for which &lt;strong&gt;you don’t have access to the source code&lt;/strong&gt;. Thus, you define a bean and return a new instance of the class. For the @Component annotation, as you have access to the source Java file, you can simply annotate the class with this annotation.Both @Bean and @Component annotations let you instruct Spring to create instances of the annotated class, but their usage is slightly different. You typically use the @Bean annotation for the classes for which you don’t have access to the source code. Thus, you define a bean and return a new instance of the class. For the @Component annotation, as you have access to the source Java file, you can simply annotate the class with this annotation.&lt;/p&gt;
&lt;p&gt;The CommandLineRunner is a useful feature that is frequently used to perform several application initialization activities. In a CommandLineRunner implementation, you also have access to the command line arguments through the args parameter.&lt;/p&gt;
&lt;p&gt;Bean Validation, part of the Java EE (Enterprise Edition) specification, is a framework that provides a standard way to enforce constraints on the properties of JavaBeans. These constraints ensure that the data within beans meets certain criteria before it is processed or persisted. &lt;/p&gt;
&lt;p&gt;Java annotations are a powerful feature introduced in &lt;strong&gt;Java 5&lt;/strong&gt; that provide a way to add &lt;strong&gt;metadata&lt;/strong&gt; to Java code. They can be applied to various elements of the code, including classes, methods, fields, parameters, and more. Annotations &lt;strong&gt;do not change&lt;/strong&gt; the action of the compiled program but can be used by the compiler and runtime tools to &lt;strong&gt;generate code, analyze code, and perform other tasks&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="spring-data"&gt;Spring Data
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://spring.io/projects/spring-data" target="_blank" rel="noopener"
&gt;Spring Data&lt;/a&gt; lets you access data from a variety of data sources (e.g., relational and nonrelational databases, MapReduce databases, and cloud-based data services). It attempts to provide a uniform, easy-to-use, and familiar programming model through the Spring Framework.&lt;/p&gt;
&lt;p&gt;It is an umbrella project under the Spring Framework that contains several sub-projects, each of which targets a specific database. For instance, the &lt;strong&gt;Spring Data JPA module is specific to relational databases&lt;/strong&gt; (e.g., H2, MySQL, PostgreSQL). Similarly, Spring Data MongoDB aims to provide support for the MongoDB database.&lt;/p&gt;
&lt;p&gt;Java Database Connectivity (JDBC) is a &lt;strong&gt;standard API&lt;/strong&gt; provided by Java that allows Java applications to interact with relational databases in a vendor-independent manner. JDBC provides a set of interfaces and classes that enable developers to connect to a database, execute SQL queries, and retrieve results. It serves as a bridge between Java applications and various database management systems (DBMS).&lt;/p&gt;
&lt;p&gt;Java Persistence API (JPA) is &lt;strong&gt;a specification for object-relational mapping&lt;/strong&gt; (ORM) in Java, which allows developers to manage relational data in Java applications using an object-oriented paradigm. JPA provides a standard way to map Java objects to database tables and to manage persistent data in applications.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;JDBC:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;JDBC is a &lt;strong&gt;low-level&lt;/strong&gt; API for interacting with relational databases. It provides a set of interfaces and classes for connecting to a database, executing SQL queries, and retrieving results. JDBC is database-centric and requires developers to write SQL queries and manage the mapping between Java objects and database tables &lt;strong&gt;manually&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JPA:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;JPA is a &lt;strong&gt;high-level&lt;/strong&gt; API for object-relational mapping (ORM). It abstracts the database interactions and &lt;strong&gt;allows developers to work with Java objects instead of SQL queries&lt;/strong&gt;. JPA automatically maps Java objects to database tables and handles CRUD (Create, Read, Update, Delete) operations, making it easier to manage persistent data in an object-oriented way.
JPA itself is not an implementation but a set of guidelines implemented by various ORM frameworks like &lt;strong&gt;Hibernate&lt;/strong&gt;, EclipseLink, and &lt;strong&gt;Spring Data JPA&lt;/strong&gt;.
Hibernate is the default JPA provider in Spring Data JPA.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MyBatis is a persistence framework that offers SQL mapping. It emphasizes direct SQL use, providing a higher degree of control over SQL queries and their execution. Unlike traditional ORM frameworks, &lt;strong&gt;MyBatis does not map Java objects to database tables but rather maps SQL statements to Java methods&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;One of the core themes of Spring Data is to provide a &lt;strong&gt;consistent&lt;/strong&gt; programming model
to access various data sources.&lt;/p&gt;
&lt;p&gt;Spring Data provides a &lt;strong&gt;repository abstraction layer&lt;/strong&gt; across the supported databases as a common programming model. The abstraction is contained in the Spring Data Commons module, and it provides several useful interfaces that let you perform the standard create, read, update, and delete (CRUD) operations as well as executing queries. This abstraction layer is the topmost layer and acts as the foundation for other Spring Data modules.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://dyhes.github.io/image%202.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;As part of the database configuration, Spring Boot automatically configures the &lt;a class="link" href="https://github.com/brettwooldridge/HikariCP" target="_blank" rel="noopener"
&gt;HikariCP&lt;/a&gt; database connection pool. A database connection pool contains one or more database connections that are generally created at the time of application startup and available for use by the application.
The benefit of a database connection pool is that a set of database connections are created at the application startup and available for use by the application. Thus, you don’t create a new connection each time you need a database connection and close it once done. The application can take a connection from the pool, use it, and return to the pool. Spring Boot uses HikariCP as the default database connection pool library.
&lt;img src="https://dyhes.github.io/image%203.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;Spring Boot can load the SQL scripts from the classpath (e.g., the src/main/resources folder) or a preconfigured location. By default, you define the schema.sql file to provide all DDL scripts and define the data.sql file to include the DML scripts and place them inside the src/main/resources folder for Spring Boot to detect and execute these files.
To begin with, if you are using a database other than an embedded (in-memory) database, you need to set spring.sql.init.mode to always in the application.properties file.
In this schema initialization-based approach, Spring Boot re-creates the schema each time you restart the application. There is no database schema versioning done by Spring Boot.&lt;/p&gt;
&lt;p&gt;In this schema initialization-based approach, Spring Boot re-creates the schema each time you restart the application. There is no database schema versioning done by Spring Boot.
In addition to the schema.sql and data.sql files, Spring Boot also supports database-specific SQLs. For instance, if your application supports multiple database types, and there are SQL syntax differences, you can use schema-${platform}.sql and data-${platform}.sql files.&lt;/p&gt;
&lt;p&gt;Spring Data uses this marker interface Repository as the primary abstraction for a data source.
&lt;img src="https://dyhes.github.io/image%204.png"
loading="lazy"
&gt;
In addition to the CrudRepository, Spring Data also provides a PagingAndSortingRepository, which extends the CrudRepository and provides additional support for pagination and sorting of the entities.&lt;/p&gt;
&lt;p&gt;@Entity marks a java class as a jpa entity
@Table provides the database table details
@Column provides mapping information between the Java fields and the associated column name in the table.
@Repository marks a class as a spring repository&lt;/p&gt;
&lt;h2 id="spring-security"&gt;Spring Security
&lt;/h2&gt;&lt;p&gt;The following part comes from spring security official website
Spring Security provides comprehensive support for &lt;a class="link" href="https://en.wikipedia.org/wiki/Authentication" target="_blank" rel="noopener"
&gt;authentication&lt;/a&gt;. Authentication is how we &lt;strong&gt;verify the identity&lt;/strong&gt; of who is trying to access a particular resource.&lt;/p&gt;
&lt;p&gt;Spring Security’s PasswordEncoder interface is used to perform a one-way transformation of a password to let the password be stored securely.&lt;/p&gt;
&lt;p&gt;To mitigate the effectiveness of Rainbow Tables, developers were encouraged to use salted passwords.&lt;/p&gt;
&lt;p&gt;Adaptive one-way functions:
Can be adjusted to require more computational resources as hardware improves
Examples of adaptive one-way functions that should be used include &lt;a class="link" href="https://docs.spring.io/spring-security/reference/features/authentication/password-storage.html#authentication-password-storage-bcrypt" target="_blank" rel="noopener"
&gt;bcrypt&lt;/a&gt;, &lt;a class="link" href="https://docs.spring.io/spring-security/reference/features/authentication/password-storage.html#authentication-password-storage-pbkdf2" target="_blank" rel="noopener"
&gt;PBKDF2&lt;/a&gt;, &lt;a class="link" href="https://docs.spring.io/spring-security/reference/features/authentication/password-storage.html#authentication-password-storage-scrypt" target="_blank" rel="noopener"
&gt;scrypt&lt;/a&gt;, and &lt;a class="link" href="https://docs.spring.io/spring-security/reference/features/authentication/password-storage.html#authentication-password-storage-argon2" target="_blank" rel="noopener"
&gt;argon2&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;PasswordEncoder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;passwordEncoder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PasswordEncoderFactories&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createDelegatingPasswordEncoder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;DelegatingPasswordEncoder Storage Format&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;{id}encodedPassword
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;e.g.
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;{bcrypt}$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;UserDetails&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withDefaultPasswordEncoder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;user&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;user&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPassword&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="c1"&gt;// {bcrypt}$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Spring Security provides comprehensive support for &lt;a class="link" href="https://en.wikipedia.org/wiki/Authorization" target="_blank" rel="noopener"
&gt;authorization&lt;/a&gt;. Authorization is &lt;strong&gt;determining who is allowed&lt;/strong&gt; to access a particular resource. Spring Security provides &lt;a class="link" href="https://en.wikipedia.org/wiki/Defense_in_depth_%28computing%29" target="_blank" rel="noopener"
&gt;defense in depth&lt;/a&gt; by allowing for request based authorization and method based authorization.&lt;/p&gt;
&lt;p&gt;Prevent CSRF (cross site request forgery)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Synchronizer token request&lt;/li&gt;
&lt;li&gt;Samesite attribute
Spring Security does not directly control the creation of the session cookie, so it does not provide support for the SameSite attribute. &lt;a class="link" href="https://spring.io/projects/spring-session" target="_blank" rel="noopener"
&gt;Spring Session&lt;/a&gt; provides support for the SameSite attribute in servlet-based applications. 
&lt;strong&gt;Safe Methods Must be Read-only&lt;/strong&gt;
For &lt;a class="link" href="https://docs.spring.io/spring-security/reference/features/exploits/csrf.html#csrf-protection" target="_blank" rel="noopener"
&gt;either protection&lt;/a&gt; against CSRF to work, the application must ensure that &lt;a class="link" href="https://tools.ietf.org/html/rfc7231#section-4.2.1" target="_blank" rel="noopener"
&gt;&amp;ldquo;safe&amp;rdquo; HTTP methods are read-only&lt;/a&gt;. This means that requests with the HTTP GET, HEAD, OPTIONS, and TRACE methods should not change the state of the application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Default Security Headers&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-http" data-lang="http"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;Cache-Control: no-cache, no-store, max-age=0, must-revalidate
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;Pragma: no-cache
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;Expires: 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;X-Content-Type-Options: nosniff
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;Strict-Transport-Security: max-age=31536000 ; includeSubDomains(https only)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;X-Frame-Options: DENY
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;X-XSS-Protection: 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Spring Security provides &lt;strong&gt;Spring Data integration&lt;/strong&gt; that allows referring to the current user within your queries. It is not only useful but necessary to include the user in the queries to support paged results since filtering the results afterwards would not scale.&lt;/p&gt;
&lt;p&gt;In most environments, Security is stored on a per Thread basis. This means that when work is done on a new Thread, the SecurityContext is lost. Spring Security provides some infrastructure to help make this much easier for users. Spring Security provides low level abstractions for working with Spring Security in multi-threaded environments. &lt;/p&gt;
&lt;p&gt;The default arrangement of Spring Boot and Spring Security affords the following behaviors at runtime:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Requires an authenticated user &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authorization/authorize-http-requests.html" target="_blank" rel="noopener"
&gt;for any endpoint&lt;/a&gt; (including Boot’s /error endpoint)&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/user-details-service.html" target="_blank" rel="noopener"
&gt;Registers a default user&lt;/a&gt; with a generated password at startup (the password is logged to the console; in the preceding example, the password is 8e557245-73e2-4286-969a-ff57fe326336)&lt;/li&gt;
&lt;li&gt;Protects &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/password-encoder.html" target="_blank" rel="noopener"
&gt;password storage with BCrypt&lt;/a&gt; as well as others&lt;/li&gt;
&lt;li&gt;Provides form-based &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/form.html" target="_blank" rel="noopener"
&gt;login&lt;/a&gt; and &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/logout.html" target="_blank" rel="noopener"
&gt;logout&lt;/a&gt; flows&lt;/li&gt;
&lt;li&gt;Authenticates &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/form.html" target="_blank" rel="noopener"
&gt;form-based login&lt;/a&gt; as well as &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/basic.html" target="_blank" rel="noopener"
&gt;HTTP Basic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Provides content negotiation; for web requests, redirects to the login page; for service requests, returns a 401 Unauthorized&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/exploits/csrf.html" target="_blank" rel="noopener"
&gt;Mitigates CSRF&lt;/a&gt; attacks&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/session-management.html#ns-session-fixation" target="_blank" rel="noopener"
&gt;Mitigates Session Fixation&lt;/a&gt; attacks&lt;/li&gt;
&lt;li&gt;Writes &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/exploits/headers.html#servlet-headers-hsts" target="_blank" rel="noopener"
&gt;Strict-Transport-Security&lt;/a&gt; to &lt;a class="link" href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security" target="_blank" rel="noopener"
&gt;ensure HTTPS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Writes &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/exploits/headers.html#servlet-headers-content-type-options" target="_blank" rel="noopener"
&gt;X-Content-Type-Options&lt;/a&gt; to mitigate &lt;a class="link" href="https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#x-content-type-options" target="_blank" rel="noopener"
&gt;sniffing attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Writes &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/exploits/headers.html#servlet-headers-cache-control" target="_blank" rel="noopener"
&gt;Cache Control headers&lt;/a&gt; that protect authenticated resources&lt;/li&gt;
&lt;li&gt;Writes &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/exploits/headers.html#servlet-headers-frame-options" target="_blank" rel="noopener"
&gt;X-Frame-Options&lt;/a&gt; to mitigate &lt;a class="link" href="https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#x-frame-options" target="_blank" rel="noopener"
&gt;Clickjacking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Integrates with &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/integrations/servlet-api.html" target="_blank" rel="noopener"
&gt;HttpServletRequest&amp;rsquo;s authentication methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Publishes &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/events.html" target="_blank" rel="noopener"
&gt;authentication success and failure events&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;FilterChain&lt;/strong&gt;
Spring Security’s Servlet support is based on &lt;strong&gt;Servlet Filters&lt;/strong&gt;. The following image shows the typical layering of the handlers for a single HTTP request.
&lt;img src="https://dyhes.github.io/filterchain.png"
loading="lazy"
&gt;
The client sends a request to the application, and the container creates a FilterChain, which contains the Filter &lt;strong&gt;instances&lt;/strong&gt; and Servlet that should process the HttpServletRequest, based on the path of the request URI. In a Spring MVC application, the Servlet is an instance of &lt;a class="link" href="https://docs.spring.io/spring-framework/docs/6.1.9/reference/html/web.html#mvc-servlet" target="_blank" rel="noopener"
&gt;DispatcherServlet&lt;/a&gt;.
At most, one Servlet can handle a single HttpServletRequest and HttpServletResponse.
more than one Filter can be used to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prevent downstream Filter instances or the Servlet from being invoked. In this case, the Filter typically writes the HttpServletResponse.&lt;/li&gt;
&lt;li&gt;Modify the HttpServletRequest or HttpServletResponse used by the downstream Filter instances and the Servlet.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;doFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ServletRequest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ServletResponse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FilterChain&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// do something before the rest of the application&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;doFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// invoke the rest of the application&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// do something after the rest of the application&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;DelegatingFilterProxy&lt;/strong&gt;
Spring provides a &lt;strong&gt;Filter implementation&lt;/strong&gt; named &lt;a class="link" href="https://docs.spring.io/spring-framework/docs/6.1.9/javadoc-api/org/springframework/web/filter/DelegatingFilterProxy.html" target="_blank" rel="noopener"
&gt;DelegatingFilterProxy&lt;/a&gt; that allows &lt;strong&gt;bridging&lt;/strong&gt; between the Servlet container’s lifecycle and Spring’s ApplicationContext. The Servlet container allows registering Filter instances by using its own standards, but it is not aware of Spring-defined Beans. You can register DelegatingFilterProxy through the standard Servlet container mechanisms but delegate all the work to a Spring Bean that implements Filter.&lt;/p&gt;
&lt;p&gt;Here is a picture of how DelegatingFilterProxy fits into the &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-filters-review" target="_blank" rel="noopener"
&gt;Filter instances and the FilterChain&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://dyhes.github.io/image%205.png"
loading="lazy"
&gt;
DelegatingFilterProxy looks up &lt;em&gt;Bean Filter 0&lt;/em&gt; from the ApplicationContext and then invokes &lt;em&gt;Bean Filter0&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;FilterChainProxy&lt;/strong&gt;
&lt;a class="link" href="https://docs.spring.io/spring-security/site/docs/6.3.1/api/org/springframework/security/web/SecurityFilterChain.html" target="_blank" rel="noopener"
&gt;SecurityFilterChain&lt;/a&gt; is used by &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-filterchainproxy" target="_blank" rel="noopener"
&gt;FilterChainProxy&lt;/a&gt; to determine which Spring Security Filter instances should be invoked for the current request.
&lt;img src="https://dyhes.github.io/image%206.png"
loading="lazy"
&gt;
The &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-security-filters" target="_blank" rel="noopener"
&gt;Security Filters&lt;/a&gt; in SecurityFilterChain are typically &lt;strong&gt;Beans&lt;/strong&gt;, but they are registered with FilterChainProxy instead of &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-delegatingfilterproxy" target="_blank" rel="noopener"
&gt;DelegatingFilterProxy&lt;/a&gt;. FilterChainProxy provides a number of advantages to registering directly with the Servlet container or &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-delegatingfilterproxy" target="_blank" rel="noopener"
&gt;DelegatingFilterProxy&lt;/a&gt;. First, it provides a starting point for all of Spring Security’s Servlet support. For that reason&lt;/p&gt;
&lt;p&gt;FilterChainProxy is &lt;strong&gt;central&lt;/strong&gt; to Spring Security usage, it can perform tasks that are not viewed as optional. For example, it clears out the SecurityContext to avoid memory leaks. It also applies Spring Security’s &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/exploits/firewall.html#servlet-httpfirewall" target="_blank" rel="noopener"
&gt;HttpFirewall&lt;/a&gt; to protect applications against certain types of attacks.
In addition, it provides more flexibility in determining when a SecurityFilterChain should be invoked. In a Servlet container, Filter instances are invoked based upon the URL alone. However, &lt;strong&gt;FilterChainProxy can determine invocation based upon anything in the HttpServletRequest&lt;/strong&gt; by using the RequestMatcher interface.
&lt;img src="https://dyhes.github.io/image%207.png"
loading="lazy"
&gt;
&lt;strong&gt;Security Filters&lt;/strong&gt;
Most of the time, the default security filters are enough to provide security to your application. However, there might be times that you want to add a custom Filter to the security filter chain.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TenantFilter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;implements&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;doFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ServletRequest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;servletRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ServletResponse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;servletResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FilterChain&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filterChain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;throws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ServletException&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HttpServletRequest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpServletRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;servletRequest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HttpServletResponse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpServletResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;servletResponse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tenantId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;X-Tenant-Id&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hasAccess&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isUserAllowed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tenantId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hasAccess&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filterChain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;doFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AccessDeniedException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;Access denied&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Configuration&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@EnableWebSecurity&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SecurityConfig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@Bean&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SecurityFilterChain&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;filterChain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpSecurity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;throws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;csrf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Customizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withDefaults&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;authorizeHttpRequests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authorize&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authorize&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;anyRequest&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;authenticated&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;httpBasic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Customizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withDefaults&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;formLogin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Customizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withDefaults&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addFilterBefore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TenantFilter&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AuthorizationFilter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Be careful when you declare your filter as a Spring bean, either by annotating it with @Component or by declaring it as a bean in your configuration, because Spring Boot will automatically &lt;a class="link" href="https://docs.spring.io/spring-boot/docs/3.1.1/reference/html/web.html#web.servlet.embedded-container.servlets-filters-listeners.beans" target="_blank" rel="noopener"
&gt;register it with the embedded container&lt;/a&gt;. That may cause the filter to be invoked twice, once by the container and once by Spring Security and in a different order.
&lt;strong&gt;Exception Handing&lt;/strong&gt;
ExceptionTranslationFilter is inserted into the &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-filterchainproxy" target="_blank" rel="noopener"
&gt;FilterChainProxy&lt;/a&gt; as one of the &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-security-filters" target="_blank" rel="noopener"
&gt;Security Filters&lt;/a&gt;.
The &lt;a class="link" href="https://docs.spring.io/spring-security/site/docs/6.3.1/api/org/springframework/security/web/access/ExceptionTranslationFilter.html" target="_blank" rel="noopener"
&gt;ExceptionTranslationFilter&lt;/a&gt; allows translation of &lt;a class="link" href="https://docs.spring.io/spring-security/site/docs/6.3.1/api/org/springframework/security/access/AccessDeniedException.html" target="_blank" rel="noopener"
&gt;AccessDeniedException&lt;/a&gt; and &lt;a class="link" href="https://docs.spring.io/spring-security/site/docs/6.3.1/api//org/springframework/security/core/AuthenticationException.html" target="_blank" rel="noopener"
&gt;AuthenticationException&lt;/a&gt; into HTTP responses.
&lt;img src="https://dyhes.github.io/image%208.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the user is &lt;strong&gt;not authenticated&lt;/strong&gt; or it is an AuthenticationException, then &lt;em&gt;Start Authentication&lt;/em&gt;.
&lt;ul&gt;
&lt;li&gt;The &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-securitycontextholder" target="_blank" rel="noopener"
&gt;SecurityContextHolder&lt;/a&gt; is cleared out.&lt;/li&gt;
&lt;li&gt;The HttpServletRequest is &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/architecture.html#savedrequests" target="_blank" rel="noopener"
&gt;saved&lt;/a&gt; so that it can be used to replay the original request once authentication is successful.&lt;/li&gt;
&lt;li&gt;The AuthenticationEntryPoint is used to request credentials from the client. For example, it might redirect to a log in page or send a WWW-Authenticate header.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If it is an AccessDeniedException, then &lt;em&gt;Access Denied&lt;/em&gt;. The AccessDeniedHandler is invoked to handle access denied.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;If the application does not throw an AccessDeniedException or an AuthenticationException, then ExceptionTranslationFilter does not do anything.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="authentication"&gt;Authentication
&lt;/h3&gt;&lt;p&gt;At the heart of Spring Security’s &lt;strong&gt;authentication model&lt;/strong&gt; is the SecurityContextHolder. It contains the &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-securitycontext" target="_blank" rel="noopener"
&gt;SecurityContext&lt;/a&gt;.
&lt;img src="https://dyhes.github.io/securitycontextholder.png"
loading="lazy"
&gt;
The SecurityContextHolder is where Spring Security stores the details of who is &lt;a class="link" href="https://docs.spring.io/spring-security/reference/features/authentication/index.html#authentication" target="_blank" rel="noopener"
&gt;authenticated&lt;/a&gt;. Spring Security does not care how the SecurityContextHolder is populated. If it contains a value, it is used as the currently authenticated user.&lt;/p&gt;
&lt;p&gt;Get currently authenticated user&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;SecurityContext&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SecurityContextHolder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;Authentication&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authentication&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAuthentication&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authentication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;principal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authentication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPrincipal&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GrantedAuthority&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authorities&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authentication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAuthorities&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By default, SecurityContextHolder uses a ThreadLocal to store these details, which means that &lt;strong&gt;the SecurityContext is always available to methods in the same thread&lt;/strong&gt;, even if the SecurityContext is not explicitly passed around as an argument to those methods.  Using a ThreadLocal in this way is quite safe if you take care to clear the thread after the present principal’s request is processed. Spring Security’s &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-filterchainproxy" target="_blank" rel="noopener"
&gt;FilterChainProxy&lt;/a&gt; ensures that the SecurityContext is always cleared.
 &lt;strong&gt;Authentication&lt;/strong&gt;
⠀The Authentication contains:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;principal&lt;/strong&gt;: Identifies the user. When authenticating with a username/password this is often an instance of &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/user-details.html#servlet-authentication-userdetails" target="_blank" rel="noopener"
&gt;UserDetails&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;credentials&lt;/strong&gt;: Often a password. In many cases, this is cleared after the user is authenticated, to ensure that it is not leaked.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;authorities&lt;/strong&gt;: The &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-granted-authority" target="_blank" rel="noopener"
&gt;GrantedAuthority&lt;/a&gt; instances are high-level permissions the user is granted. Two examples are roles and scopes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="link" href="https://docs.spring.io/spring-security/site/docs/6.3.1/api/org/springframework/security/authentication/AuthenticationManager.html" target="_blank" rel="noopener"
&gt;AuthenticationManager&lt;/a&gt; is the API that defines &lt;strong&gt;how Spring Security’s Filters perform &lt;a class="link" href="**https://docs.spring.io/spring-security/reference/features/authentication/index.html#authentication" &gt;authentication&lt;/a&gt;&lt;/strong&gt;. The &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-authentication" target="_blank" rel="noopener"
&gt;Authentication&lt;/a&gt; that is returned is then set on the &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-securitycontextholder" target="_blank" rel="noopener"
&gt;SecurityContextHolder&lt;/a&gt; by the controller (that is, by &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-security-filters" target="_blank" rel="noopener"
&gt;Spring Security’s Filters instances&lt;/a&gt;) that invoked the AuthenticationManager.
While the implementation of AuthenticationManager could be anything, the most common implementation is &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-providermanager" target="_blank" rel="noopener"
&gt;ProviderManager&lt;/a&gt;.
&lt;img src="https://dyhes.github.io/image%209.png"
loading="lazy"
&gt;
ProviderManager delegates to &lt;strong&gt;a List&lt;/strong&gt; of &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-authenticationprovider" target="_blank" rel="noopener"
&gt;AuthenticationProvider&lt;/a&gt; instances. Each AuthenticationProvider has an opportunity to indicate that authentication should be successful, fail, or indicate it cannot make a decision and allow a downstream AuthenticationProvider to decide. If none of the configured AuthenticationProvider instances can authenticate, authentication fails with a &lt;strong&gt;ProviderNotFoundException&lt;/strong&gt;, which is a special AuthenticationException that indicates that the ProviderManager was not configured to support the type of Authentication that was passed into it.
In practice each AuthenticationProvider knows how to &lt;strong&gt;perform a specific type of authentication&lt;/strong&gt;. For example, one AuthenticationProvider might be able to validate a username/password, while another might be able to authenticate a SAML assertion. This lets each AuthenticationProvider do a very specific type of authentication while supporting multiple types of authentication and expose only a single AuthenticationManager bean.
ProviderManager also allows configuring &lt;strong&gt;an optional parent AuthenticationManager&lt;/strong&gt;, which is consulted in the event that no AuthenticationProvider can perform authentication. The parent can be any type of AuthenticationManager, but it is often an instance of ProviderManager.
In fact, multiple ProviderManager instances might share the same parent AuthenticationManager. This is somewhat common in scenarios where there are multiple &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-securityfilterchain" target="_blank" rel="noopener"
&gt;SecurityFilterChain&lt;/a&gt; instances that have some authentication in common (the shared parent AuthenticationManager), but also different authentication mechanisms (the different ProviderManager instances).
&lt;img src="https://dyhes.github.io/image%2010.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;When a client makes an unauthenticated request to a resource that they are not authorized to access. In this case, an implementation of &lt;strong&gt;AuthenticationEntryPoint&lt;/strong&gt; is used to request credentials from the client. The AuthenticationEntryPoint implementation might perform a &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/form.html#servlet-authentication-form" target="_blank" rel="noopener"
&gt;redirect to a log in page&lt;/a&gt;, respond with an &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/basic.html#servlet-authentication-basic" target="_blank" rel="noopener"
&gt;WWW-Authenticate&lt;/a&gt; header, or take other action.
&lt;strong&gt;AbstractAuthenticationProcessingFilter&lt;/strong&gt;
&lt;a class="link" href="https://docs.spring.io/spring-security/site/docs/6.3.1/api/org/springframework/security/web/authentication/AbstractAuthenticationProcessingFilter.html" target="_blank" rel="noopener"
&gt;AbstractAuthenticationProcessingFilter&lt;/a&gt; is used as a base Filter for &lt;strong&gt;authenticating a user’s credentials&lt;/strong&gt;.
&lt;img src="https://dyhes.github.io/image%2011.png"
loading="lazy"
&gt;
When the user submits their credentials, the AbstractAuthenticationProcessingFilter creates an &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-authentication" target="_blank" rel="noopener"
&gt;Authentication&lt;/a&gt; from the HttpServletRequest to be authenticated. The type of Authentication created depends on the subclass of AbstractAuthenticationProcessingFilter. For example, &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/form.html#servlet-authentication-usernamepasswordauthenticationfilter" target="_blank" rel="noopener"
&gt;UsernamePasswordAuthenticationFilter&lt;/a&gt; creates a UsernamePasswordAuthenticationToken from a &lt;em&gt;username&lt;/em&gt; and &lt;em&gt;password&lt;/em&gt; that are submitted in the HttpServletRequest.
Next, the &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-authentication" target="_blank" rel="noopener"
&gt;Authentication&lt;/a&gt; is passed into the &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-authenticationmanager" target="_blank" rel="noopener"
&gt;AuthenticationManager&lt;/a&gt; to be authenticated.
If authentication fails, then &lt;em&gt;Failure&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-securitycontextholder" target="_blank" rel="noopener"
&gt;SecurityContextHolder&lt;/a&gt; is cleared out.&lt;/li&gt;
&lt;li&gt;RememberMeServices.loginFail is invoked. If remember me is not configured, this is a no-op. See the &lt;a class="link" href="https://docs.spring.io/spring-security/site/docs/6.3.1/api/org/springframework/security/web/authentication/rememberme/package-frame.html" target="_blank" rel="noopener"
&gt;rememberme&lt;/a&gt; package.&lt;/li&gt;
&lt;li&gt;AuthenticationFailureHandler is invoked. See the &lt;a class="link" href="https://docs.spring.io/spring-security/site/docs/6.3.1/api/org/springframework/security/web/authentication/AuthenticationFailureHandler.html" target="_blank" rel="noopener"
&gt;AuthenticationFailureHandler&lt;/a&gt; interface.
If authentication is successful, then &lt;em&gt;Success&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;SessionAuthenticationStrategy is notified of a new login. See the &lt;a class="link" href="https://docs.spring.io/spring-security/site/docs/6.3.1/api/org/springframework/security/web/authentication/session/SessionAuthenticationStrategy.html" target="_blank" rel="noopener"
&gt;SessionAuthenticationStrategy&lt;/a&gt; interface.&lt;/li&gt;
&lt;li&gt;The &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-authentication" target="_blank" rel="noopener"
&gt;Authentication&lt;/a&gt; is set on the &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-securitycontextholder" target="_blank" rel="noopener"
&gt;SecurityContextHolder&lt;/a&gt;. Later, if you need to save the SecurityContext so that it can be automatically set on future requests, SecurityContextRepository#saveContext must be explicitly invoked. See the &lt;a class="link" href="https://docs.spring.io/spring-security/site/docs/6.3.1/api/org/springframework/security/web/context/SecurityContextHolderFilter.html" target="_blank" rel="noopener"
&gt;SecurityContextHolderFilter&lt;/a&gt; class.&lt;/li&gt;
&lt;li&gt;RememberMeServices.loginSuccess is invoked. If remember me is not configured, this is a no-op. See the &lt;a class="link" href="https://docs.spring.io/spring-security/site/docs/6.3.1/api/org/springframework/security/web/authentication/rememberme/package-frame.html" target="_blank" rel="noopener"
&gt;rememberme&lt;/a&gt; package.&lt;/li&gt;
&lt;li&gt;ApplicationEventPublisher publishes an InteractiveAuthenticationSuccessEvent.&lt;/li&gt;
&lt;li&gt;AuthenticationSuccessHandler is invoked. See the &lt;a class="link" href="https://docs.spring.io/spring-security/site/docs/6.3.1/api/org/springframework/security/web/authentication/AuthenticationSuccessHandler.html" target="_blank" rel="noopener"
&gt;AuthenticationSuccessHandler&lt;/a&gt; interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="usernamepassword-authentication"&gt;⠀Username/Password Authentication
&lt;/h4&gt;&lt;p&gt;authenticate users via a REST API &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@Configuration&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@EnableWebSecurity&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SecurityConfig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@Bean&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SecurityFilterChain&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;securityFilterChain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpSecurity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;throws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;authorizeHttpRequests&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;authorize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authorize&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;requestMatchers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;/login&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;permitAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;anyRequest&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;authenticated&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@Bean&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AuthenticationManager&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;authenticationManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserDetailsService&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;userDetailsService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PasswordEncoder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;passwordEncoder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DaoAuthenticationProvider&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authenticationProvider&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DaoAuthenticationProvider&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authenticationProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setUserDetailsService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userDetailsService&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authenticationProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setPasswordEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;passwordEncoder&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ProviderManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authenticationProvider&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@Bean&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserDetailsService&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;userDetailsService&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserDetails&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;userDetails&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withDefaultPasswordEncoder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;user&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;USER&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;InMemoryUserDetailsManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userDetails&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@Bean&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PasswordEncoder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;passwordEncoder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PasswordEncoderFactories&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createDelegatingPasswordEncoder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@RestController&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoginController&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AuthenticationManager&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authenticationManager&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;LoginController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AuthenticationManager&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authenticationManager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;authenticationManager&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authenticationManager&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@PostMapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;/login&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ResponseEntity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@RequestBody&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LoginRequest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loginRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Authentication&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authenticationRequest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UsernamePasswordAuthenticationToken&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;unauthenticated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loginRequest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loginRequest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Authentication&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authenticationResponse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;authenticationManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authenticationRequest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;record&lt;/span&gt; &lt;span class="nc"&gt;LoginRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Built-in mechanism for reading a username:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/form.html" target="_blank" rel="noopener"
&gt;Form&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/basic.html" target="_blank" rel="noopener"
&gt;Basic&lt;/a&gt;
WWW-Authenticate header&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/digest.html" target="_blank" rel="noopener"
&gt;Digest&lt;/a&gt;
You should not use Digest Authentication in modern applications, because it is not considered to be secure.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;DaoAuthenticationProvider&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://docs.spring.io/spring-security/site/docs/6.3.1/api/org/springframework/security/authentication/dao/DaoAuthenticationProvider.html" target="_blank" rel="noopener"
&gt;DaoAuthenticationProvider&lt;/a&gt; is an &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-authenticationprovider" target="_blank" rel="noopener"
&gt;AuthenticationProvider&lt;/a&gt; implementation that uses a &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/user-details-service.html#servlet-authentication-userdetailsservice" target="_blank" rel="noopener"
&gt;UserDetailsService&lt;/a&gt; and &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/password-encoder.html#servlet-authentication-password-storage" target="_blank" rel="noopener"
&gt;PasswordEncoder&lt;/a&gt; to authenticate a username and password.
&lt;img src="https://dyhes.github.io/image%2012.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h4 id="persistence"&gt;&lt;strong&gt;Persistence&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;in Spring Security the association of the user to future requests is made using &lt;a class="link" href="https://docs.spring.io/spring-security/site/docs/6.3.1/api/org/springframework/security/web/context/SecurityContextRepository.html" target="_blank" rel="noopener"
&gt;SecurityContextRepository&lt;/a&gt;. The default implementation of SecurityContextRepository is &lt;a class="link" href="https://docs.spring.io/spring-security/site/docs/6.3.1/api/org/springframework/security/web/context/DelegatingSecurityContextRepository.html" target="_blank" rel="noopener"
&gt;DelegatingSecurityContextRepository&lt;/a&gt; which delegates to the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/persistence.html#httpsecuritycontextrepository" target="_blank" rel="noopener"
&gt;HttpSessionSecurityContextRepository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/persistence.html#requestattributesecuritycontextrepository" target="_blank" rel="noopener"
&gt;RequestAttributeSecurityContextRepository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NullSecurityContextRepository&lt;/strong&gt;
If it is not desirable to associate the SecurityContext to an HttpSession (i.e. when authenticating with OAuth) the &lt;a class="link" href="https://docs.spring.io/spring-security/site/docs/6.3.1/api/org/springframework/security/web/context/NullSecurityContextRepository.html" target="_blank" rel="noopener"
&gt;NullSecurityContextRepository&lt;/a&gt; is an implementation of SecurityContextRepository that does nothing.&lt;/p&gt;
&lt;p&gt;The&lt;a class="link" href="https://docs.spring.io/spring-security/site/docs/6.3.1/api/org/springframework/security/web/context/SecurityContextPersistenceFilter.html" target="_blank" rel="noopener"
&gt;SecurityContextPersistenceFilter&lt;/a&gt; is responsible for persisting the SecurityContext between requests using the &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/persistence.html#securitycontextrepository" target="_blank" rel="noopener"
&gt;SecurityContextRepository&lt;/a&gt;.
&lt;img src="https://dyhes.github.io/image%2013.png"
loading="lazy"
&gt;
&lt;strong&gt;SecurityContextHolderFilter&lt;/strong&gt;
The &lt;a class="link" href="https://docs.spring.io/spring-security/site/docs/6.3.1/api/org/springframework/security/web/context/SecurityContextHolderFilter.html" target="_blank" rel="noopener"
&gt;SecurityContextHolderFilter&lt;/a&gt; is responsible for loading the SecurityContext between requests using the &lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/persistence.html#securitycontextrepository" target="_blank" rel="noopener"
&gt;SecurityContextRepository&lt;/a&gt;.
&lt;img src="https://dyhes.github.io/image%2014.png"
loading="lazy"
&gt;
Unlike,&lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/authentication/persistence.html#securitycontextpersistencefilter" target="_blank" rel="noopener"
&gt;SecurityContextPersistenceFilter&lt;/a&gt;, SecurityContextHolderFilter only loads the SecurityContext it does not save the SecurityContext. This means that when using SecurityContextHolderFilter, it is required that the SecurityContext is explicitly saved.&lt;/p&gt;
&lt;h2 id="restful-api"&gt;Restful API
&lt;/h2&gt;&lt;p&gt;@RestController&lt;/p&gt;
&lt;p&gt;@Service&lt;/p&gt;
&lt;p&gt;@Reposity&lt;/p&gt;</description></item></channel></rss>